.Dd Jun 27, 2018
.Dt HANDBOOK 7
.Os
.Sh NAME
.Nm handbook
.Nd FreeBSD Handbook
.Sh GETTING STARTED
.Pp
This part of the handbook is for users and administrators who are new to
FreeBSD.
These chapters:
.Bl -bullet -offset -compact
.It
Introduce FreeBSD.
.It
Guide readers through the installation process.
.It
Teach UNIX basics and fundamentals.
.It
Show how to install the wealth of third party applications available for
FreeBSD.
.It
Introduce X, the UNIX windowing system, and detail how to configure a desktop environment that makes
users more productive.
.El
.Pp
The number of forward references in the text have been kept to a minimum so
that this section can be read from front to back with minimal page flipping.
.Ss SYNOPSIS
.Pp
Thank you for your interest in FreeBSD!
The following chapter covers various aspects of the FreeBSD Project, such as
its history, goals, development model, and so on.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
How FreeBSD relates to other computer operating systems.
.It
The history of the FreeBSD Project.
.It
The goals of the FreeBSD Project.
.It
The basics of the FreeBSD open-source development model.
.It
And of course: where the name
.Do
FreeBSD
.Dc
comes from.
.El
.Ss WELCOME TO FREEBSD!
.Pp
FreeBSD is an Open Source, standards-compliant Unix-like operating system for
x86 (both 32 and 64 bit), ARM, AArch64, RISC-V, MIPS, POWER, PowerPC, and Sun UltraSPARC computers.
It provides all the features that are nowadays taken for granted, such as
preemptive multitasking, memory protection, virtual memory, multi-user
facilities, SMP support, all the Open Source development tools for different
languages and frameworks, and desktop features centered around X Window System,
KDE, or GNOME.
Its particular strengths are:
.Bl -bullet -offset -compact
.It
Liberal Open Source license, which grants you rights to freely modify and extend its source code and
incorporate it in both Open Source projects and closed products without
imposing restrictions typical to copyleft licenses, as well as avoiding
potential license incompatibility problems.
.It
Strong TCP/IP networking  - FreeBSD implements industry standard protocols with ever increasing
performance and scalability.
This makes it a good match in both server, and routing/firewalling roles - and
indeed many companies and vendors use it precisely for that purpose.
.It
Fully integrated OpenZFS support, including root-on-ZFS, ZFS Boot Environments, fault management,
administrative delegation, support for jails, FreeBSD specific documentation,
and system installer support.
.It
Extensive security features, from the Mandatory Access Control framework to Capsicum capability and
sandbox mechanisms.
.It
Over 30 thousand prebuilt packages for all supported architectures, and the Ports Collection which makes it easy
to build your own, customized ones.
.It
Documentation - in addition to Handbook and books from different authors that cover topics
ranging from system administration to kernel internals, there are also the
.Xr man 1 pages, not only for userspace daemons, utilities, and configuration files, but
also for kernel driver APIs (section 9) and individual drivers (section 4).
.It
Simple and consistent repository structure and build system - FreeBSD uses a single repository for all of its components, both kernel and
userspace.
This, along with an unified and easy to customize build system and a well
thought out development process makes it easy to integrate FreeBSD with build
infrastructure for your own product.
.It
Staying true to Unix philosophy, preferring composability instead of monolithic
.Do
all in one
.Dc
daemons with hardcoded behavior.
.It
Binary compatibility with Linux, which makes it possible to run many Linux binaries without the need
for virtualisation.
.El
.Pp
FreeBSD is based on the 4.4BSD-Lite release from Computer Systems Research Group (CSRG) at the University of California at Berkeley, and carries on the distinguished
tradition of BSD systems development.
In addition to the fine work provided by CSRG, the FreeBSD Project has put in
many thousands of man-hours into extending the functionality and fine-tuning
the system for maximum performance and reliability in real-life load
situations.
FreeBSD offers performance and reliability on par with other Open Source and
commercial offerings, combined with cutting-edge features not available
anywhere else.
.Ss WHAT CAN FREEBSD DO?
.Pp
The applications to which FreeBSD can be put are truly limited only by your own
imagination.
From software development to factory automation, inventory control to azimuth
correction of remote satellite antennae; if it can be done with a commercial UNIX product then it is more than likely that you can do it with FreeBSD too!
FreeBSD also benefits significantly from literally thousands of high quality
applications developed by research centers and universities around the world,
often available at little to no cost.
.Pp
Because the source code for FreeBSD itself is generally available, the system
can also be customized to an almost unheard of degree for special applications
or projects, and in ways not generally possible with operating systems from
most major commercial vendors.
Here is just a sampling of some of the applications in which people are
currently using FreeBSD:
.Bl -bullet -offset -compact
.It
Internet Services: The robust TCP/IP networking built into FreeBSD makes it an ideal platform for
a variety of Internet services such as:
.Bl -bullet -offset -compact
.It
World Wide Web servers (standard or secure [SSL])
.It
IPv4 and IPv6 routing
.It
Firewalls and NAT (
.Do
IP masquerading
.Dc
) gateways
.It
FTP servers
.It
Electronic Mail servers
.It
And more...
.El
.It
Education: Are you a student of computer science or a related engineering field?
There is no better way of learning about operating systems, computer
architecture and networking than the hands on, under the hood experience that
FreeBSD can provide.
A number of freely available CAD, mathematical and graphic design packages also
make it highly useful to those whose primary interest in a computer is to get other work done!
.It
Research: With source code for the entire system available, FreeBSD is an excellent
platform for research in operating systems as well as other branches of
computer science.
FreeBSD's freely available nature also makes it possible for remote groups to
collaborate on ideas or shared development without having to worry about
special licensing agreements or limitations on what may be discussed in open
forums.
.It
Networking: Need a new router?
A name server (DNS)?
A firewall to keep people out of your internal network?
FreeBSD can easily turn that unused PC sitting in the corner into an advanced
router with sophisticated packet-filtering capabilities.
.It
Embedded: FreeBSD makes an excellent platform to build embedded systems upon.
 With support for the ARM, MIPS and PowerPC platforms, coupled with a robust network stack, cutting edge features and the
permissive BSD license FreeBSD makes an excellent foundation for building embedded routers, firewalls,
and other devices.
.It
Desktop: FreeBSD makes a fine choice for an inexpensive desktop solution using the
freely available X11 server.
FreeBSD offers a choice from many open-source desktop environments, including
the standard GNOME and KDE graphical user interfaces.
FreeBSD can even boot
.Do
diskless
.Dc
from a central server, making individual workstations even cheaper and easier
to administer.
.It
Software Development: The basic FreeBSD system comes with a full complement of development tools
including a full C/C++ compiler and debugger suite.
Support for many other languages are also available through the ports and
packages collection.
.El
.Pp
FreeBSD is available to download free of charge, or can be obtained on either
CD-ROM or DVD.
Please see for more information about obtaining FreeBSD.
.Ss WHO USES FREEBSD?
.Pp
FreeBSD has been known for its web serving capabilities - sites that run on
FreeBSD include Hacker News, Netcraft, NetEase, Netflix, Sina, Sony Japan, Rambler, Yahoo!
, and Yandex.
.Pp
FreeBSD's advanced features, proven security, predictable release cycle, and
permissive license have led to its use as a platform for building many
commercial and open source appliances, devices, and products.
Many of the world's largest IT companies use FreeBSD:
.Bl -bullet -offset -compact
.It
Apache  - The Apache Software Foundation runs most of its public facing infrastructure,
including possibly one of the largest SVN repositories in the world with over
1.4 million commits, on FreeBSD.
.It
Apple  - OS X borrows heavily from FreeBSD for the network stack, virtual file system,
and many userland components.
Apple iOS also contains elements borrowed from FreeBSD.
.It
Cisco  - IronPort network security and anti-spam appliances run a modified FreeBSD
kernel.
.It
Citrix  - The NetScaler line of security appliances provide layer 4-7 load balancing,
content caching, application firewall, secure VPN, and mobile cloud network
access, along with the power of a FreeBSD shell.
.It
Dell EMC Isilon  - Isilon's enterprise storage appliances are based on FreeBSD.
The extremely liberal FreeBSD license allowed Isilon to integrate their
intellectual property throughout the kernel and focus on building their product
instead of an operating system.
.It
Dell KACE  - The KACE system management appliances run FreeBSD because of its reliability,
scalability, and the community that supports its continued development.
.It
Experts Exchange  - All public facing web servers are powered by FreeBSD and they make extensive
use of jails to isolate development and testing environments without the
overhead of virtualization.
.It
iXsystems  - The TrueNAS line of unified storage appliances is based on FreeBSD.
In addition to their commercial products, iXsystems also manages development of
the open source projects TrueOS and FreeNAS.
.It
Juniper  - The JunOS operating system that powers all Juniper networking gear (including
routers, switches, security, and networking appliances) is based on FreeBSD.
Juniper is one of many vendors that showcases the symbiotic relationship
between the project and vendors of commercial products.
Improvements generated at Juniper are upstreamed into FreeBSD to reduce the
complexity of integrating new features from FreeBSD back into JunOS in the
future.
.It
McAfee  - SecurOS, the basis of McAfee enterprise firewall products including
Sidewinder is based on FreeBSD.
.It
NetApp  - The Data ONTAP GX line of storage appliances are based on FreeBSD.
In addition, NetApp has contributed back many features, including the new BSD
licensed hypervisor, bhyve.
.It
Netflix  - The OpenConnect appliance that Netflix uses to stream movies to its customers
is based on FreeBSD.
Netflix has made extensive contributions to the codebase and works to maintain
a zero delta from mainline FreeBSD.
Netflix OpenConnect appliances are responsible for delivering more than 32% of
all Internet traffic in North America.
.It
Sandvine  - Sandvine uses FreeBSD as the basis of their high performance real-time
network processing platforms that make up their intelligent network policy
control products.
.It
Sony  - The PlayStation 4 gaming console runs a modified version of FreeBSD.
.It
Sophos  - The Sophos Email Appliance product is based on a hardened FreeBSD and scans
inbound mail for spam and viruses, while also monitoring outbound mail for
malware as well as the accidental loss of sensitive information.
.It
Spectra Logic  - The nTier line of archive grade storage appliances run FreeBSD and OpenZFS.
.It
Stormshield  - Stormshield Network Security appliances are based on a hardened version of
FreeBSD.
The BSD license allows them to integrate their own intellectual property with
the system while returning a great deal of interesting development to the
community.
.It
The Weather Channel  - The IntelliStar appliance that is installed at each local cable provider's
headend and is responsible for injecting local weather forecasts into the cable
TV network's programming runs FreeBSD.
.It
Verisign  - Verisign is responsible for operating the .com and .net root domain
registries as well as the accompanying DNS infrastructure.
They rely on a number of different network operating systems including FreeBSD
to ensure there is no common point of failure in their infrastructure.
.It
Voxer  - Voxer powers their mobile voice messaging platform with ZFS on FreeBSD.
Voxer switched from a Solaris derivative to FreeBSD because of its superior
documentation, larger and more active community, and more developer friendly
environment.
In addition to critical features like ZFS and DTrace, FreeBSD also offers TRIM support for ZFS.
.It
WhatsApp  - When WhatsApp needed a platform that would be able to handle more than 1
million concurrent TCP connections per server, they chose FreeBSD.
They then proceeded to scale past 2.5 million connections per server.
.It
Wheel Systems  - The FUDO security appliance allows enterprises to monitor, control, record,
and audit contractors and administrators who work on their systems.
Based on all of the best security features of FreeBSD including ZFS, GELI,
Capsicum, HAST, and auditdistd.
.El
.Pp
FreeBSD has also spawned a number of related open source projects:
.Bl -bullet -offset -compact
.It
BSD Router  - A FreeBSD based replacement for large enterprise routers designed to run on
standard PC hardware.
.It
FreeNAS  - A customized FreeBSD designed to be used as a network file server appliance.
Provides a python based web interface to simplify the management of both the
UFS and ZFS file systems.
Includes support for NFS, SMB/CIFS, AFP, FTP, and iSCSI.
Includes an extensible plugin system based on FreeBSD jails.
.It
GhostBSD  - A desktop oriented distribution of FreeBSD bundled with the Gnome desktop
environment.
.It
mfsBSD  - A toolkit for building a FreeBSD system image that runs entirely from memory.
.It
NAS4Free  - A file server distribution based on FreeBSD with a PHP powered web interface.
.It
OPNSense  - OPNsense is an open source, easy-to-use and easy-to-build FreeBSD based
firewall and routing platform.
OPNsense includes most of the features available in expensive commercial
firewalls, and more in many cases.
It brings the rich feature set of commercial offerings with the benefits of
open and verifiable sources.
.It
TrueOS  - A customized version of FreeBSD geared towards desktop users with graphical
utilities to exposing the power of FreeBSD to all users.
Designed to ease the transition of Windows and OS X users.
.It
pfSense  - A firewall distribution based on FreeBSD with a huge array of features and
extensive IPv6 support.
.It
ZRouter  - An open source alternative firmware for embedded devices based on FreeBSD.
Designed to replace the proprietary firmware on off-the-shelf routers.
.El
.Pp
Wikipedia also maintains a list of products based on FreeBSD.
.Ss ABOUT THE FREEBSD PROJECT
.Pp
The following section provides some background information on the project,
including a brief history, project goals, and the development model of the
project.
.Ss A BRIEF HISTORY OF FREEBSD
.Pp
The FreeBSD Project had its genesis in the early part of 1993, partially as an
outgrowth of the Unofficial 386BSDPatchkit by the patchkit's last 3
coordinators: Nate Williams, Rod Grimes and Jordan Hubbard.
.Pp
The original goal was to produce an intermediate snapshot of 386BSD in order to
fix a number of problems with it that the patchkit mechanism just was not
capable of solving.
The early working title for the project was 386BSD 0.5 or 386BSD Interim in
reference of that fact.
.Pp
386BSD was Bill Jolitz's operating system, which had been up to that point
suffering rather severely from almost a year's worth of neglect.
As the patchkit swelled ever more uncomfortably with each passing day, they
decided to assist Bill by providing this interim
.Do
cleanup
.Dc
snapshot.
Those plans came to a rude halt when Bill Jolitz suddenly decided to withdraw
his sanction from the project without any clear indication of what would be
done instead.
.Pp
The trio thought that the goal remained worthwhile, even without Bill's
support, and so they adopted the name "FreeBSD" coined by David Greenman.
The initial objectives were set after consulting with the system's current
users and, once it became clear that the project was on the road to perhaps
even becoming a reality, Jordan contacted Walnut Creek CDROM with an eye toward
improving FreeBSD's distribution channels for those many unfortunates without
easy access to the Internet.
Walnut Creek CDROM not only supported the idea of distributing FreeBSD on CD
but also went so far as to provide the project with a machine to work on and a
fast Internet connection.
Without Walnut Creek CDROM's almost unprecedented degree of faith in what was,
at the time, a completely unknown project, it is quite unlikely that FreeBSD
would have gotten as far, as fast, as it has today.
.Pp
The first CD-ROM (and general net-wide) distribution was FreeBSD 1.0, released
in December of 1993.
This was based on the 4.3BSD-Lite (
.Do
Net/2
.Dc
) tape from U.C.
Berkeley, with many components also provided by 386BSD and the Free Software
Foundation.
It was a fairly reasonable success for a first offering, and they followed it
with the highly successful FreeBSD 1.1 release in May of 1994.
.Pp
Around this time, some rather unexpected storm clouds formed on the horizon as
Novell and U.C.
Berkeley settled their long-running lawsuit over the legal status of the
Berkeley Net/2 tape.
A condition of that settlement was U.C.
Berkeley's concession that large parts of Net/2 were
.Do
encumbered
.Dc
code and the property of Novell, who had in turn acquired it from AT&T some
time previously.
What Berkeley got in return was Novell's
.Do
blessing
.Dc
that the 4.4BSD-Lite release, when it was finally released, would be declared
unencumbered and all existing Net/2 users would be strongly encouraged to
switch.
This included FreeBSD, and the project was given until the end of July 1994 to
stop shipping its own Net/2 based product.
Under the terms of that agreement, the project was allowed one last release
before the deadline, that release being FreeBSD 1.1.5.1.
.Pp
FreeBSD then set about the arduous task of literally re-inventing itself from a
completely new and rather incomplete set of 4.4BSD-Lite bits.
The
.Do
Lite
.Dc
releases were light in part because Berkeley's CSRG had removed large chunks of
code required for actually constructing a bootable running system (due to
various legal requirements) and the fact that the Intel port of 4.4 was highly
incomplete.
It took the project until November of 1994 to make this transition, and in
December it released FreeBSD 2.0 to the world.
Despite being still more than a little rough around the edges, the release was
a significant success and was followed by the more robust and easier to install
FreeBSD 2.0.5 release in June of 1995.
.Pp
Since that time, FreeBSD has made a series of releases each time improving the
stability, speed, and feature set of the previous version.
.Pp
For now, long-term development projects continue to take place in the
10.X-CURRENT (trunk) branch, and snapshot releases of 10.X are continually made
available from the snapshot server as work progresses.
.Pp
The goals of the FreeBSD Project are to provide software that may be used for
any purpose and without strings attached.
Many of us have a significant investment in the code (and project) and would
certainly not mind a little financial compensation now and then, but we are
definitely not prepared to insist on it.
We believe that our first and foremost
.Do
mission
.Dc
is to provide code to any and all comers, and for whatever purpose, so that the
code gets the widest possible use and provides the widest possible benefit.
This is, I believe, one of the most fundamental goals of Free Software and one
that we enthusiastically support.
.Pp
That code in our source tree which falls under the GNU General Public License
(GPL) or Library General Public License (LGPL) comes with slightly more strings
attached, though at least on the side of enforced access rather than the usual
opposite.
Due to the additional complexities that can evolve in the commercial use of GPL
software we do, however, prefer software submitted under the more relaxed BSD
copyright when it is a reasonable option to do so.
.Pp
The development of FreeBSD is a very open and flexible process, being literally
built from the contributions of thousands of people around the world, as can be
seen from our list of contributors.
FreeBSD's development infrastructure allow these thousands of contributors to
collaborate over the Internet.
We are constantly on the lookout for new developers and ideas, and those
interested in becoming more closely involved with the project need simply
contact us at the FreeBSD technical discussions mailing list.
The FreeBSD announcements mailing list is also available to those wishing to make other FreeBSD users aware of major
areas of work.
.Pp
Useful things to know about the FreeBSD Project and its development process,
whether working independently or in close cooperation:
.Bl -tag -offset -compact
.It The SVN repositories
For several years, the central source tree for FreeBSD was maintained by CVS (Concurrent Versions System), a freely available source code control tool.
In June 2008, the Project switched to using SVN (Subversion).
The switch was deemed necessary, as the technical limitations imposed by CVS were becoming obvious due to the rapid expansion of the source tree and the
amount of history already stored.
The Documentation Project and Ports Collection repositories also moved from CVS to SVN in May 2012 and July 2012, respectively.
Please refer to the Synchronizing your source tree section for more information on obtaining the FreeBSD
.Ql src/
repository and Using the Ports Collection for details on obtaining the FreeBSD Ports Collection.
.It The committers list
The
.Ql committers
are the people who have write access to the Subversion tree, and are authorized to make modifications to the
FreeBSD source (the term
.Do
committer
.Dc
comes from
.Cm commit
, the source control command which is used to bring new changes into the
repository).
Anyone can submit a bug to the Bug Database.
Before submitting a bug report, the FreeBSD mailing lists, IRC channels, or
forums can be used to help verify that an issue is actually a bug.
.It The FreeBSD core team
The
.Ql FreeBSD core team
would be equivalent to the board of directors if the FreeBSD Project were a
company.
The primary task of the core team is to make sure the project, as a whole, is
in good shape and is heading in the right directions.
Inviting dedicated and responsible developers to join our group of committers
is one of the functions of the core team, as is the recruitment of new core
team members as others move on.
The current core team was elected from a pool of committer candidates in July
2018.
Elections are held every 2 years.
Like most developers, most members of the core team are also volunteers when it
comes to FreeBSD development and do not benefit from the project financially,
so
.Do
commitment
.Dc
should also not be misconstrued as meaning
.Do
guaranteed support.
.Dc
The
.Do
board of directors
.Dc
analogy above is not very accurate, and it may be more suitable to say that
these are the people who gave up their lives in favor of FreeBSD against their
better judgement!
.It Outside contributors
Last, but definitely not least, the largest group of developers are the users
themselves who provide feedback and bug fixes to us on an almost constant
basis.
The primary way of keeping in touch with FreeBSD's more non-centralized
development is to subscribe to the FreeBSD technical discussions mailing list where such things are discussed.
See for more information about the various FreeBSD mailing lists.
The FreeBSD Contributors List  is a long and growing one, so why not join it by contributing something back to
FreeBSD today?
Providing code is not the only way of contributing to the project; for a more
complete list of things that need doing, please refer to the FreeBSD Project web site.
.El
.Pp
In summary, our development model is organized as a loose set of concentric
circles.
The centralized model is designed for the convenience of the users of FreeBSD, who are provided with an easy way of tracking one central code
base, not to keep potential contributors out!
Our desire is to present a stable operating system with a large set of coherent application programs that the users can easily install and use — this model works very well in
accomplishing that.
.Pp
All we ask of those who would join us as FreeBSD developers is some of the same
dedication its current people have to its continued success!
.Ss THIRD PARTY PROGRAMS
.Pp
In addition to the base distributions, FreeBSD offers a ported software
collection with thousands of commonly sought-after programs.
At the time of this writing, there were over 24,000 ports!
The list of ports ranges from http servers, to games, languages, editors, and
almost everything in between.
The entire Ports Collection requires approximately 500 MB.
To compile a port, you simply change to the directory of the program you wish
to install, type
.Cm make install
, and let the system do the rest.
The full original distribution for each port you build is retrieved dynamically
so you need only enough disk space to build the ports you want.
Almost every port is also provided as a pre-compiled
.Do
package
.Dc
, which can be installed with a simple command (
.Cm pkg install
) by those who do not wish to compile their own ports from source.
More information on packages and ports can be found in .
.Ss ADDITIONAL DOCUMENTATION
.Pp
All supported FreeBSD versions provide an option in the installer to install
additional documentation under
.Pa /usr/local/share/doc/freebsd
during the initial system setup.
Documentation may also be installed at any later time using packages as
described in .
You may view the locally installed manuals with any HTML capable browser using
the following URLs:
.Bl -tag -offset -compact
.It The FreeBSD Handbook
.Pa /usr/local/share/doc/freebsd/handbook/index.html
.It The FreeBSD FAQ
.Pa /usr/local/share/doc/freebsd/faq/index.html
.El
.Pp
You can also view the master (and most frequently updated) copies at
.Lk https://www.FreeBSD.org/
.
.Ss SYNOPSIS
.Pp
There are several different ways of getting FreeBSD to run, depending on the
environment.
Those are:
.Bl -bullet -offset -compact
.It
Virtual Machine images, to download and import on a virtual environment of
choice.
These can be downloaded from the Download FreeBSD page.
There are images for KVM (
.Do
qcow2
.Dc
), VMWare (
.Do
vmdk
.Dc
), Hyper-V (
.Do
vhd
.Dc
), and raw device images that are universally supported.
These are not installation images, but rather the preconfigured (
.Do
already installed
.Dc
) instances, ready to run and perform post-installation tasks.
.It
Virtual Machine images available at Amazon's AWS Marketplace, Microsoft Azure Marketplace, and Google Cloud Platform, to run on their respective hosting services.
For more information on deploying FreeBSD on Azure please consult the relevant
chapter in the Azure Documentation.
.It
SD card images, for embedded systems such as Raspberry Pi or BeagleBone Black.
These can be downloaded from the Download FreeBSD page.
These files must be uncompressed and written as a raw image to an SD card, from
which the board will then boot.
.It
Installation images, to install FreeBSD on a hard drive for the usual desktop,
laptop, or server systems.
.El
.Pp
The rest of this chapter describes the fourth case, explaining how to install
FreeBSD using the text-based installation program named bsdinstall.
.Pp
In general, the installation instructions in this chapter are written for the i386 and AMD64 architectures.
Where applicable, instructions specific to other platforms will be listed.
There may be minor differences between the installer and what is shown here, so
use this chapter as a general guide rather than as a set of literal
instructions.
.Pp
Users who prefer to install FreeBSD using a graphical installer may be
interested in pc-sysinstall, the installer used by the TrueOS Project.
It can be used to install either a graphical desktop (TrueOS) or a command line
version of FreeBSD.
Refer to the TrueOS Users Handbook for details (https://www.trueos.org/handbook/trueos.html).
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
The minimum hardware requirements and FreeBSD supported architectures.
.It
How to create the FreeBSD installation media.
.It
How to start bsdinstall.
.It
The questions bsdinstall will ask, what they mean, and how to answer them.
.It
How to troubleshoot a failed installation.
.It
How to access a live version of FreeBSD before committing to an installation.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Read the supported hardware list that shipped with the version of FreeBSD to be
installed and verify that the system's hardware is supported.
.El
.Ss MINIMUM HARDWARE REQUIREMENTS
.Pp
The hardware requirements to install FreeBSD vary by architecture.
Hardware architectures and devices supported by a FreeBSD release are listed on
the FreeBSD Release Information page.
The FreeBSD download page also has recommendations for choosing the correct image for different
architectures.
.Pp
A FreeBSD installation requires a minimum of 96 MB of RAM and 1.5 GB of free hard drive space.
However, such small amounts of memory and disk space are really only suitable
for custom applications like embedded appliances.
General-purpose desktop systems need more resources.
2-4 GB RAM and at least 8 GB hard drive space is a good starting point.
.Pp
These are the processor requirements for each architecture:
.Bl -tag -offset -compact
.It amd64
This is the most common desktop and laptop processor type, used in most modern
systems.
 Intel calls it Intel64.
Other manufacturers sometimes call it x86-64.
Examples of amd64 compatible processors include: AMD Athlon64, AMD Opteron, multi-core IntelXeon, and IntelCore2 and later processors.
.It i386
Older desktops and laptops often use this 32-bit, x86 architecture.
Almost all i386-compatible processors with a floating point unit are supported.
All Intel processors 486 or higher are supported.
FreeBSD will take advantage of Physical Address Extensions (PAE) support on CPUs with this feature.
A kernel with the PAE feature enabled will detect memory above 4 GB and allow it to be used by the
system.
However, using PAE places constraints on device drivers and other features of FreeBSD.
Refer to
.Xr pae 4 for details.
.It ia64
Currently supported processors are the Itanium and the Itanium 2.
Supported chipsets include the HP zx1, Intel 460GX, and Intel E8870.
Both Uniprocessor (UP) and Symmetric Multi-processor (SMP) configurations are supported.
.It pc98
NEC PC-9801/9821 series with almost all i386-compatible processors, including
80486, Pentium, Pentium Pro, and Pentium II, are all supported.
All i386-compatible processors by AMD, Cyrix, IBM, and IDT are also supported.
EPSON PC-386/486/586 series, which are compatible with NEC PC-9801 series, are
supported.
The NEC FC-9801/9821 and NEC SV-98 series should be supported.
High-resolution mode is not supported.
NEC PC-98XA/XL/RL/XL^2, and NEC PC-H98 series are supported in normal (PC-9801
compatible) mode only.
The SMP-related features of FreeBSD are not supported.
The New Extend Standard Architecture (NESA) bus used in the PC-H98, SV-H98, and FC-H98 series, is not supported.
.It powerpc
All New World ROM  Apple  Mac systems with built-in USB are supported.
 SMP is supported on machines with multiple CPUs.
A 32-bit kernel can only use the first 2 GB of RAM.
.It sparc64
Systems supported by FreeBSD/sparc64 are listed at the FreeBSD/sparc64 Project.
SMP is supported on all systems with more than 1 processor.
A dedicated disk is required as it is not possible to share a disk with another
operating system at this time.
.El
.Ss PRE-INSTALLATION TASKS
.Pp
Once it has been determined that the system meets the minimum hardware
requirements for installing FreeBSD, the installation file should be downloaded
and the installation media prepared.
Before doing this, check that the system is ready for an installation by
verifying the items in this checklist:
.Ss BACK UP IMPORTANT DATA
.Pp
Before installing any operating system, always backup all important data first.
Do not store the backup on the system being installed.
Instead, save the data to a removable disk such as a USB drive, another system on the network, or an online backup service.
Test the backup before starting the installation to make sure it contains all
of the needed files.
Once the installer formats the system's disk, all data stored on that disk will
be lost.
.Ss DECIDE WHERE TO INSTALL FREEBSD
.Pp
If FreeBSD will be the only operating system installed, this step can be
skipped.
But if FreeBSD will share the disk with another operating system, decide which
disk or partition will be used for FreeBSD.
.Pp
In the i386 and amd64 architectures, disks can be divided into multiple
partitions using one of two partitioning schemes.
A traditional
.Ql Master Boot Record
(MBR) holds a partition table defining up to four
.Ql primary partitions
.
For historical reasons, FreeBSD calls these primary partition
.Ql slices
.
One of these primary partitions can be made into an
.Ql extended partition
containing multiple
.Ql logical partitions
.
The
.Ql GUID Partition Table
(GPT) is a newer and simpler method of partitioning a disk.
Common GPT implementations allow up to 128 partitions per disk, eliminating the need for
logical partitions.
.Pp
Some older operating systems, like WindowsXP, are not compatible with the GPT partition scheme.
If FreeBSD will be sharing a disk with such an operating system, MBR partitioning is required.
.Pp
The FreeBSD boot loader requires either a primary or GPT partition.
If all of the primary or GPT partitions are already in use, one must be freed for FreeBSD.
To create a partition without deleting existing data, use a partition resizing
tool to shrink an existing partition and create a new partition using the freed
space.
.Pp
A variety of free and commercial partition resizing tools are listed at http://en.wikipedia.org/wiki/List_of_disk_partitioning_software.
 GParted Live (http://gparted.sourceforge.net/livecd.php) is a free live CD which includes the GParted partition editor.
 GParted is also included with many other Linux live CD distributions.
.Pp
When used properly, disk shrinking utilities can safely create space for
creating a new partition.
Since the possibility of selecting the wrong partition exists, always backup
any important data and verify the integrity of the backup before modifying disk
partitions.
.Pp
Disk partitions containing different operating systems make it possible to
install multiple operating systems on one computer.
An alternative is to use virtualization () which allows multiple operating systems to run at the same time without
modifying any disk partitions.
.Ss COLLECT NETWORK INFORMATION
.Pp
Some FreeBSD installation methods require a network connection in order to
download the installation files.
After any installation, the installer will offer to setup the system's network
interfaces.
.Pp
If the network has a DHCP server, it can be used to provide automatic network configuration.
If DHCP is not available, the following network information for the system must be
obtained from the local network administrator or Internet service provider:
.Bl -enum -offset -compact
.It
IP address
.It
Subnet mask
.It
IP address of default gateway
.It
Domain name of the network
.It
IP addresses of the network's DNS servers
.El
.Ss CHECK FOR FREEBSD ERRATA
.Pp
Although the FreeBSD Project strives to ensure that each release of FreeBSD is
as stable as possible, bugs occasionally creep into the process.
On very rare occasions those bugs affect the installation process.
As these problems are discovered and fixed, they are noted in the FreeBSD
Errata (https://www.freebsd.org/releases/11.2R/errata.html) on the FreeBSD web site.
Check the errata before installing to make sure that there are no problems that
might affect the installation.
.Pp
Information and errata for all the releases can be found on the release
information section of the FreeBSD web site (https://www.freebsd.org/releases/index.html).
.Ss PREPARE THE INSTALLATION MEDIA
.Pp
The FreeBSD installer is not an application that can be run from within another
operating system.
Instead, download a FreeBSD installation file, burn it to the media associated
with its file type and size (CD, DVD, or USB), and boot the system to install from the inserted media.
.Pp
FreeBSD installation files are available at www.freebsd.org/where.html#download.
Each installation file's name includes the release version of FreeBSD, the
architecture, and the type of file.
For example, to install FreeBSD 10.2 on an amd64 system from a DVD, download
.Pa FreeBSD-10.2-RELEASE-amd64-dvd1.iso
, burn this file to a DVD, and boot the system with the DVD inserted.
.Pp
Installation files are available in several formats.
The formats vary depending on computer architecture and media type.
.Pp
Additional installation files are included for computers that boot with UEFI (Unified Extensible Firmware Interface).
The names of these files include the string
.Pa uefi
.
.Pp
File types:
.Bl -bullet -offset -compact
.It
.Ql -bootonly.iso
: This is the smallest installation file as it only contains the installer.
A working Internet connection is required during installation as the installer
will download the files it needs to complete the FreeBSD installation.
This file should be burned to a CD using a CD burning application.
.It
.Ql -disc1.iso
: This file contains all of the files needed to install FreeBSD, its source,
and the Ports Collection.
It should be burned to a CD using a CD burning application.
.It
.Ql -dvd1.iso
: This file contains all of the files needed to install FreeBSD, its source,
and the Ports Collection.
It also contains a set of popular binary packages for installing a window
manager and some applications so that a complete system can be installed from
media without requiring a connection to the Internet.
This file should be burned to a DVD using a DVD burning application.
.It
.Ql -memstick.img
: This file contains all of the files needed to install FreeBSD, its source,
and the Ports Collection.
It should be burned to a USB stick using the instructions below.
.It
.Ql -mini-memstick.img
: Like
.Ql -bootonly.iso
, does not include installation files, but downloads them as needed.
A working internet connection is required during installation.
Write this file to a USB stick as shown in .
.El
.Pp
After downloading the image file, download
.Pa CHECKSUM.SHA256
from the same directory.
Calculate a
.Ql checksum
for the image file.
FreeBSD provides
.Xr sha256 1 for this, used as
.Cm sha256 imagefilename
.
Other operating systems have similar programs.
.Pp
Compare the calculated checksum with the one shown in
.Pa CHECKSUM.SHA256
.
The checksums must match exactly.
If the checksums do not match, the image file is corrupt and must be downloaded
again.
.Ss WRITING AN IMAGE FILE TO USB
.Pp
The
.Pa *.img
file is an image of the complete contents of a memory stick.
It cannot be copied to the target device as a file.
Several applications are available for writing the
.Pa *.img
to a USB stick.
This section describes two of these utilities.
.Pp
Before proceeding, back up any important data on the USB stick.
This procedure will erase the existing data on the stick.
.Ss USING DD TO WRITE THE IMAGE
.Pp
This example uses
.Pa /dev/da0
as the target device where the image will be written.
Be very careful that the correct device is used as this command will destroy the existing data
on the specified target device.
.Pp
The
.Xr dd 1 command-line utility is available on BSD, Linux, and Mac OS systems.
To burn the image using
.Cm dd
, insert the USB stick and determine its device name.
Then, specify the name of the downloaded installation file and the device name
for the USB stick.
This example burns the amd64 installation image to the first USB device on an existing FreeBSD system.
.Bd -literal -offset indent
# dd if=FreeBSD-10.2-RELEASE-amd64-memstick.img of=/dev/da0 bs=1M conv=sync
.Ed
.Pp
If this command fails, verify that the USB stick is not mounted and that the device name is for the disk, not a partition.
Some operating systems might require this command to be run with
.Xr sudo 8 .
Systems like Linux might buffer writes.
To force all writes to complete, use
.Xr sync 8 .
.Ss USING WINDOWS TO WRITE THE IMAGE
.Pp
Be sure to give the correct drive letter as the existing data on the specified
drive will be overwritten and destroyed.
.Ss OBTAINING IMAGE WRITER FOR WINDOWS
.Pp
Image Writer for Windows is a free application that can correctly write an image file to a memory stick.
Download it from
.Lk https://sourceforge.net/projects/win32diskimager/
and extract it into a folder.
.Ss WRITING THE IMAGE WITH IMAGE WRITER
.Pp
Double-click the Win32DiskImager icon to start the program.
Verify that the drive letter shown under
.Ql Device
is the drive with the memory stick.
Click the folder icon and select the image to be written to the memory stick.
Click
.Ql [ Save ]
to accept the image file name.
Verify that everything is correct, and that no folders on the memory stick are
open in other windows.
When everything is ready, click
.Ql [ Write ]
to write the image file to the memory stick.
.Pp
You are now ready to start installing FreeBSD.
.Ss STARTING THE INSTALLATION
.Pp
By default, the installation will not make any changes to the disk(s) before
the following message:
.Bd -literal -offset indent
Your changes will now be written to disk.  If you
have chosen to overwrite existing data, it will
be PERMANENTLY ERASED. Are you sure you want to
commit your changes?
.Ed
.Pp
The install can be exited at any time prior to this warning.
If there is a concern that something is incorrectly configured, just turn the
computer off before this point and no changes will be made to the system's
disks.
.Pp
This section describes how to boot the system from the installation media which
was prepared using the instructions in .
When using a bootable USB stick, plug in the USB stick before turning on the computer.
When booting from CD or DVD, turn on the computer and insert the media at the first opportunity.
How to configure the system to boot from the inserted media depends upon the
architecture.
.Ss BOOTING ON I386 AND AMD64
.Pp
These architectures provide a BIOS menu for selecting the boot device.
Depending upon the installation media being used, select the CD/DVD or USB device as the first boot device.
Most systems also provide a key for selecting the boot device during startup
without having to enter the BIOS.
Typically, the key is either F10, F11, F12, or Escape.
.Pp
If the computer loads the existing operating system instead of the FreeBSD
installer, then either:
.Bl -enum -offset -compact
.It
The installation media was not inserted early enough in the boot process.
Leave the media inserted and try restarting the computer.
.It
The BIOS changes were incorrect or not saved.
Double-check that the right boot device is selected as the first boot device.
.It
This system is too old to support booting from the chosen media.
In this case, the Plop Boot Manager (http://www.plop.at/en/bootmanagers.html) can be used to boot the system from the selected media.
.El
.Ss BOOTING ON POWERPC
.Pp
On most machines, holding C on the keyboard during boot will boot from the CD.
Otherwise, hold CommandOptionOF, or WindowsAltOF on non-Apple keyboards.
At the 0 > prompt, enter
.Bd -literal -offset indent
boot cd:,\ppc\loader cd:0
.Ed
.Ss BOOTING ON SPARC64
.Pp
Most SPARC64 systems are set up to boot automatically from disk.
To install FreeBSD from a CD requires a break into the PROM.
.Pp
To do this, reboot the system and wait until the boot message appears.
The message depends on the model, but should look something like this:
.Bd -literal -offset indent
Sun Blade 100 (UltraSPARC-IIe), Keyboard Present
Copyright 1998-2001 Sun Microsystems, Inc.  All rights reserved.
OpenBoot 4.2, 128 MB memory installed, Serial #51090132.
Ethernet address 0:3:ba:b:92:d4, Host ID: 830b92d4.
.Ed
.Pp
If the system proceeds to boot from disk at this point, press L1A or StopA on the keyboard, or send a
.Cm BREAK
over the serial console.
When using tip or cu,
.Cm ~#
will issue a BREAK.
The PROM prompt will be ok on systems with one CPU and ok {0} on SMP systems, where the digit indicates the number of the active CPU.
.Pp
At this point, place the CD into the drive and type
.Cm boot cdrom
from the PROM prompt.
.Ss FREEBSD BOOT MENU
.Pp
Once the system boots from the installation media, a menu similar to the
following will be displayed:
.Pp
By default, the menu will wait ten seconds for user input before booting into
the FreeBSD installer or, if FreeBSD is already installed, before booting into
FreeBSD.
To pause the boot timer in order to review the selections, press Space.
To select an option, press its highlighted number, character, or key.
The following options are available.
.Bl -bullet -offset -compact
.It
.Ql Boot Multi User
: This will continue the FreeBSD boot process.
If the boot timer has been paused, press 1, upper- or lower-case B, or Enter.
.It
.Ql Boot Single User
: This mode can be used to fix an existing FreeBSD installation as described in .
Press 2 or the upper- or lower-case S to enter this mode.
.It
.Ql Escape to loader prompt
: This will boot the system into a repair prompt that contains a limited number
of low-level commands.
This prompt is described in .
Press 3 or Esc to boot into this prompt.
.It
.Ql Reboot
: Reboots the system.
.It
.Ql Configure Boot Options
: Opens the menu shown in, and described under, .
.El
.Pp
The boot options menu is divided into two sections.
The first section can be used to either return to the main boot menu or to
reset any toggled options back to their defaults.
.Pp
The next section is used to toggle the available options to
.Ql On
or
.Ql Off
by pressing the option's highlighted number or character.
The system will always boot using the settings for these options until they are
modified.
Several options can be toggled using this menu:
.Bl -bullet -offset -compact
.It
.Ql ACPI Support
: If the system hangs during boot, try toggling this option to
.Ql Off
.
.It
.Ql Safe Mode
: If the system still hangs during boot even with
.Ql ACPI Support
set to
.Ql Off
, try setting this option to
.Ql On
.
.It
.Ql Single User
: Toggle this option to
.Ql On
to fix an existing FreeBSD installation as described in .
Once the problem is fixed, set it back to
.Ql Off
.
.It
.Ql Verbose
: Toggle this option to
.Ql On
to see more detailed messages during the boot process.
This can be useful when troubleshooting a piece of hardware.
.El
.Pp
After making the needed selections, press 1 or Backspace to return to the main boot menu, then press Enter to continue booting into FreeBSD.
A series of boot messages will appear as FreeBSD carries out its hardware
device probes and loads the installation program.
Once the boot is complete, the welcome menu shown in will be displayed.
.Pp
Press Enter to select the default of
.Ql [ Install ]
to enter the installer.
The rest of this chapter describes how to use this installer.
Otherwise, use the right or left arrows or the colorized letter to select the
desired menu item.
The
.Ql [ Shell ]
can be used to access a FreeBSD shell in order to use command line utilities to
prepare the disks before installation.
The
.Ql [ Live CD ]
option can be used to try out FreeBSD before installing it.
The live version is described in .
.Pp
To review the boot messages, including the hardware device probe, press the
upper- or lower-case S and then Enter to access a shell.
At the shell prompt, type
.Cm more /var/run/dmesg.boot
and use the space bar to scroll through the messages.
When finished, type
.Cm exit
to return to the welcome menu.
.Ss USING BSDINSTALL
.Pp
This section shows the order of the bsdinstall menus and the type of information that will be asked before the system is
installed.
Use the arrow keys to highlight a menu option, then Space to select or deselect that menu item.
When finished, press Enter to save the selection and move onto the next screen.
.Ss SELECTING THE KEYMAP MENU
.Pp
Depending on the system console being used, bsdinstall may initially display the menu shown in .
.Pp
To configure the keyboard layout, press Enter with
.Ql [ YES ]
selected, which will display the menu shown in .
To instead use the default layout, use the arrow key to select
.Ql [ NO ]
and press Enter to skip this menu screen.
.Pp
When configuring the keyboard layout, use the up and down arrows to select the
keymap that most closely represents the mapping of the keyboard attached to the
system.
Press Enter to save the selection.
.Pp
Pressing Esc will exit this menu and use the default keymap.
If the choice of keymap is not clear,
.Ql United States of America ISO-8859-1
is also a safe option.
.Pp
In FreeBSD 10.0-RELEASE and later, this menu has been enhanced.
The full selection of keymaps is shown, with the default preselected.
In addition, when selecting a different keymap, a dialog is displayed that
allows the user to try the keymap and ensure it is correct before proceeding.
.Ss SETTING THE HOSTNAME
.Pp
The next bsdinstall menu is used to set the hostname for the newly installed system.
.Pp
Type in a hostname that is unique for the network.
It should be a fully-qualified hostname, such as
.Ql machine3.example.com
.
.Ss SELECTING COMPONENTS TO INSTALL
.Pp
Next, bsdinstall will prompt to select optional components to install.
.Pp
Deciding which components to install will depend largely on the intended use of
the system and the amount of disk space available.
The FreeBSD kernel and userland, collectively known as the
.Ql base system
, are always installed.
Depending on the architecture, some of these components may not appear:
.Bl -bullet -offset -compact
.It
.Ql doc
- Additional documentation, mostly of historical interest, to install into
.Pa /usr/share/doc
.
The documentation provided by the FreeBSD Documentation Project may be
installed later using the instructions in .
.It
.Ql games
- Several traditional BSD games, including fortune, rot13, and others.
.It
.Ql lib32
- Compatibility libraries for running 32-bit applications on a 64-bit version
of FreeBSD.
.It
.Ql ports
- The FreeBSD Ports Collection is a collection of files which automates the
downloading, compiling and installation of third-party software packages.
 discusses how to use the Ports Collection.
The installation program does not check for adequate disk space.
Select this option only if sufficient hard disk space is available.
The FreeBSD Ports Collection takes up about 500 MB of disk space.
.It
.Ql src
- The complete FreeBSD source code for both the kernel and the userland.
Although not required for the majority of applications, it may be required to
build device drivers, kernel modules, or some applications from the Ports
Collection.
It is also used for developing FreeBSD itself.
The full source tree requires 1 GB of disk space and recompiling the entire
FreeBSD system requires an additional 5 GB of space.
.El
.Ss INSTALLING FROM THE NETWORK
.Pp
The menu shown in only appears when installing from a
.Pa -bootonly.iso
CD as this installation media does not hold copies of the installation files.
Since the installation files must be retrieved over a network connection, this
menu indicates that the network interface must be first configured.
.Pp
To configure the network connection, press Enter and follow the instructions in .
Once the interface is configured, select a mirror site that is located in the
same region of the world as the computer on which FreeBSD is being installed.
Files can be retrieved more quickly when the mirror is close to the target
computer, reducing installation time.
.Pp
Installation will then continue as if the installation files were located on
the local installation media.
.Ss ALLOCATING DISK SPACE
.Pp
The next menu is used to determine the method for allocating disk space.
The options available in the menu depend upon the version of FreeBSD being
installed.
.Pp
.Ql Guided
partitioning automatically sets up the disk partitions,
.Ql Manual
partitioning allows advanced users to create customized partitions from menu
options, and
.Ql Shell
opens a shell prompt where advanced users can create customized partitions
using command-line utilities like
.Xr gpart 8 ,
.Xr fdisk 8 , and
.Xr bsdlabel 8 .
.Ql ZFS
partitioning, only available in FreeBSD 10 and later, creates an optionally
encrypted root-on-ZFS system with support for
.Ql boot environments
.
.Pp
This section describes what to consider when laying out the disk partitions.
It then demonstrates how to use the different partitioning methods.
.Ss DESIGNING THE PARTITION LAYOUT
.Pp
When laying out file systems, remember that hard drives transfer data faster
from the outer tracks to the inner.
Thus, smaller and heavier-accessed file systems should be closer to the outside
of the drive, while larger partitions like
.Pa /usr
should be placed toward the inner parts of the disk.
It is a good idea to create partitions in an order similar to:
.Pa /
, swap,
.Pa /var
, and
.Pa /usr
.
.Pp
The size of the
.Pa /var
partition reflects the intended machine's usage.
This partition is used to hold mailboxes, log files, and printer spools.
Mailboxes and log files can grow to unexpected sizes depending on the number of
users and how long log files are kept.
On average, most users rarely need more than about a gigabyte of free disk
space in
.Pa /var
.
.Pp
Sometimes, a lot of disk space is required in
.Pa /var/tmp
.
When new software is installed, the packaging tools extract a temporary copy of
the packages under
.Pa /var/tmp
.
Large software packages, like Firefox, Apache OpenOffice or LibreOffice may be tricky to install if there is not enough disk space under
.Pa /var/tmp
.
.Pp
The
.Pa /usr
partition holds many of the files which support the system, including the
FreeBSD Ports Collection and system source code.
At least 2 gigabytes of space is recommended for this partition.
.Pp
When selecting partition sizes, keep the space requirements in mind.
Running out of space in one partition while barely using another can be a
hassle.
.Pp
As a rule of thumb, the swap partition should be about double the size of
physical memory (RAM).
Systems with minimal RAM may perform better with more swap.
Configuring too little swap can lead to inefficiencies in the VM page scanning code and might create issues later if more memory is added.
.Pp
On larger systems with multiple SCSI disks or multiple IDE disks operating on different controllers, it is recommended that swap be
configured on each drive, up to four drives.
The swap partitions should be approximately the same size.
The kernel can handle arbitrary sizes but internal data structures scale to 4
times the largest swap partition.
Keeping the swap partitions near the same size will allow the kernel to
optimally stripe swap space across disks.
Large swap sizes are fine, even if swap is not used much.
It might be easier to recover from a runaway program before being forced to
reboot.
.Pp
By properly partitioning a system, fragmentation introduced in the smaller
write heavy partitions will not bleed over into the mostly read partitions.
Keeping the write loaded partitions closer to the disk's edge will increase I/O performance in the partitions where it occurs the most.
While I/O performance in the larger partitions may be needed, shifting them more toward
the edge of the disk will not lead to a significant performance improvement
over moving
.Pa /var
to the edge.
.Ss GUIDED PARTITIONING
.Pp
When this method is selected, a menu will display the available disk(s).
If multiple disks are connected, choose the one where FreeBSD is to be
installed.
.Pp
Once the disk is selected, the next menu prompts to install to either the
entire disk or to create a partition using free space.
If
.Ql [ Entire Disk ]
is chosen, a general partition layout filling the whole disk is automatically
created.
Selecting
.Ql [ Partition ]
creates a partition layout from the unused space on the disk.
.Pp
After the partition layout has been created, review it to ensure it meets the
needs of the installation.
Selecting
.Ql [ Revert ]
will reset the partitions to their original values and pressing
.Ql [ Auto ]
will recreate the automatic FreeBSD partitions.
Partitions can also be manually created, modified, or deleted.
When the partitioning is correct, select
.Ql [ Finish ]
to continue with the installation.
.Ss MANUAL PARTITIONING
.Pp
Selecting this method opens the partition editor:
.Pp
Highlight the installation drive (
.Pa ada0
in this example) and select
.Ql [ Create ]
to display a menu of available partition schemes:
.Pp
GPT is usually the most appropriate choice for amd64 computers.
Older computers that are not compatible with GPT should use MBR.
The other partition schemes are generally used for uncommon or older computers.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Abbreviation
.Ta
Description
.It
.Ta
APM
.Ta
Apple Partition Map, used by PowerPC.
.It
.Ta
BSD
.Ta
BSD label without an MBR, sometimes called
.Ql dangerously dedicated mode
as non-BSD disk utilities may not recognize it.
.It
.Ta
GPT
.Ta
GUID Partition Table (http://en.wikipedia.org/wiki/GUID_Partition_Table).
.It
.Ta
MBR
.Ta
Master Boot Record (http://en.wikipedia.org/wiki/Master_boot_record).
.It
.Ta
PC98
.Ta
MBR variant used by NEC PC-98 computers (http://en.wikipedia.org/wiki/Pc9801).
.It
.Ta
VTOC8
.Ta
Volume Table Of Contents used by Sun SPARC64 and UltraSPARC computers.
.El
.Pp
After the partitioning scheme has been selected and created, select
.Ql [ Create ]
again to create the partitions.
.Pp
A standard FreeBSD GPT installation uses at least three partitions:
.Bl -bullet -offset -compact
.It
.Ql freebsd-boot
- Holds the FreeBSD boot code.
.It
.Ql freebsd-ufs
- A FreeBSD UFS file system.
.It
.Ql freebsd-swap
- FreeBSD swap space.
.El
.Pp
Another partition type worth noting is
.Ql freebsd-zfs
, used for partitions that will contain a FreeBSD ZFS file system ().
Refer to
.Xr gpart 8 for descriptions of the available GPT partition types.
.Pp
Multiple file system partitions can be created and some people prefer a
traditional layout with separate partitions for
.Pa /
,
.Pa /var
,
.Pa /tmp
, and
.Pa /usr
.
See for an example.
.Pp
The
.Ql Size
may be entered with common abbreviations: K for kilobytes, M for megabytes, or G for gigabytes.
.Pp
Proper sector alignment provides the best performance, and making partition
sizes even multiples of 4K bytes helps to ensure alignment on drives with
either 512-byte or 4K-byte sectors.
Generally, using partition sizes that are even multiples of 1M or 1G is the
easiest way to make sure every partition starts at an even multiple of 4K.
There is one exception: the freebsd-boot partition should be no larger than 512K due to current boot code limitations.
.Pp
A
.Ql Mountpoint
is needed if the partition will contain a file system.
If only a single UFS partition will be created, the mountpoint should be
.Pa /
.
.Pp
The
.Ql Label
is a name by which the partition will be known.
Drive names or numbers can change if the drive is connected to a different
controller or port, but the partition label does not change.
Referring to labels instead of drive names and partition numbers in files like
.Pa /etc/fstab
makes the system more tolerant to hardware changes.
 GPT labels appear in
.Pa /dev/gpt/
when a disk is attached.
Other partitioning schemes have different label capabilities and their labels
appear in different directories in
.Pa /dev/
.
.Pp
Use a unique label on every partition to avoid conflicts from identical labels.
A few letters from the computer's name, use, or location can be added to the
label.
For instance, use
.Ql labroot
or
.Ql rootfslab
for the UFS root partition on the computer named
.Ql lab
.
.Pp
For a traditional partition layout where the
.Pa /
,
.Pa /var
,
.Pa /tmp
, and
.Pa /usr
directories are separate file systems on their own partitions, create a GPT partitioning scheme, then create the partitions as shown.
Partition sizes shown are typical for a 20G target disk.
If more space is available on the target disk, larger swap or
.Pa /var
partitions may be useful.
Labels shown here are prefixed with
.Ql ex
for
.Do
example
.Dc
, but readers should use other unique label values as described above.
.Pp
By default, FreeBSD's
.Pa gptboot
expects the first UFS partition to be the
.Pa /
partition.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Partition Type
.Ta
Size
.Ta
Mountpoint
.Ta
Label
.It
.Ta
.Ql freebsd-boot
.Ta
.Ql 512K
.It
.Ta
.Ql freebsd-ufs
.Ta
.Ql 2G
.Ta
.Pa /
.Ta
.Ql exrootfs
.It
.Ta
.Ql freebsd-swap
.Ta
.Ql 4G
.Ta
.Ta
.Ql exswap
.It
.Ta
.Ql freebsd-ufs
.Ta
.Ql 2G
.Ta
.Pa /var
.Ta
.Ql exvarfs
.It
.Ta
.Ql freebsd-ufs
.Ta
.Ql 1G
.Ta
.Pa /tmp
.Ta
.Ql extmpfs
.It
.Ta
.Ql freebsd-ufs
.Ta
accept the default (remainder of the disk)
.Ta
.Pa /usr
.Ta
.Ql exusrfs
.El
.Pp
After the custom partitions have been created, select
.Ql [ Finish ]
to continue with the installation.
.Ss ROOT-ON-ZFS AUTOMATIC PARTITIONING
.Pp
Support for automatic creation of root-on-ZFS installations was added in
FreeBSD 10.0-RELEASE.
This partitioning mode only works with whole disks and will erase the contents
of the entire disk.
The installer will automatically create partitions aligned to 4k boundaries and
force ZFS to use 4k sectors.
This is safe even with 512 byte sector disks, and has the added benefit of
ensuring that pools created on 512 byte disks will be able to have 4k sector
disks added in the future, either as additional storage space or as
replacements for failed disks.
The installer can also optionally employ GELI disk encryption as described in .
If encryption is enabled, a 2 GB unencrypted boot pool containing the
.Pa /boot
directory is created.
It holds the kernel and other files necessary to boot the system.
A swap partition of a user selectable size is also created, and all remaining
space is used for the ZFS pool.
.Pp
The main ZFS configuration menu offers a number of options to control the creation of the
pool.
.Pp
Select T to configure the
.Ql Pool Type
and the disk(s) that will constitute the pool.
The automatic ZFS installer currently only supports the creation of a single top level vdev,
except in stripe mode.
To create more complex pools, use the instructions in to create the pool.
The installer supports the creation of various pool types, including stripe
(not recommended, no redundancy), mirror (best performance, least usable
space), and RAID-Z 1, 2, and 3 (with the capability to withstand the concurrent
failure of 1, 2, and 3 disks, respectively).
While selecting the pool type, a tooltip is displayed across the bottom of the
screen with advice about the number of required disks, and in the case of
RAID-Z, the optimal number of disks for each configuration.
.Pp
Once a
.Ql Pool Type
has been selected, a list of available disks is displayed, and the user is
prompted to select one or more disks to make up the pool.
The configuration is then validated, to ensure enough disks are selected.
If not, select
.Ql <Change Selection>
to return to the list of disks, or
.Ql <Cancel>
to change the pool type.
.Pp
If one or more disks are missing from the list, or if disks were attached after
the installer was started, select
.Ql - Rescan Devices
to repopulate the list of available disks.
To avoid accidentally erasing the wrong disk, the
.Ql - Disk Info
menu can be used to inspect each disk, including its partition table and
various other information such as the device model number and serial number, if
available.
.Pp
The main ZFS configuration menu also allows the user to enter a pool name, disable forcing
4k sectors, enable or disable encryption, switch between GPT (recommended) and MBR partition table types, and select the amount of swap space.
Once all options have been set to the desired values, select the
.Ql >>> Install
option at the top of the menu.
.Pp
If GELI disk encryption was enabled, the installer will prompt twice for the passphrase
to be used to encrypt the disks.
.Pp
The installer then offers a last chance to cancel before the contents of the
selected drives are destroyed to create the ZFS pool.
.Pp
The installation then proceeds normally.
.Ss SHELL MODE PARTITIONING
.Pp
When creating advanced installations, the bsdinstall partitioning menus may not provide the level of flexibility required.
Advanced users can select the
.Ql Shell
option from the partitioning menu in order to manually partition the drives,
create the file system(s), populate
.Pa /tmp/bsdinstall_etc/fstab
, and mount the file systems under
.Pa /mnt
.
Once this is done, type
.Cm exit
to return to bsdinstall and continue the installation.
.Ss COMMITTING TO THE INSTALLATION
.Pp
Once the disks are configured, the next menu provides the last chance to make
changes before the selected hard drive(s) are formatted.
If changes need to be made, select
.Ql [ Back ]
to return to the main partitioning menu.
.Ql [ Revert & Exit ]
will exit the installer without making any changes to the hard drive.
.Pp
To instead start the actual installation, select
.Ql [ Commit ]
and press Enter.
.Pp
Installation time will vary depending on the distributions chosen, installation
media, and speed of the computer.
A series of messages will indicate the progress.
.Pp
First, the installer formats the selected disk(s) and initializes the
partitions.
Next, in the case of a bootonly media, it downloads the selected components:
.Pp
Next, the integrity of the distribution files is verified to ensure they have
not been corrupted during download or misread from the installation media:
.Pp
Finally, the verified distribution files are extracted to the disk:
.Pp
Once all requested distribution files have been extracted, bsdinstall displays the first post-installation configuration screen.
The available post-configuration options are described in the next section.
.Ss POST-INSTALLATION
.Pp
Once FreeBSD is installed, bsdinstall will prompt to configure several options before booting into the newly
installed system.
This section describes these configuration options.
.Pp
Once the system has booted,
.Cm bsdconfig
provides a menu-driven method for configuring the system using these and
additional options.
.Ss SETTING THE ROOT PASSWORD
.Pp
First, the
.Ql root
password must be set.
While entering the password, the characters being typed are not displayed on
the screen.
After the password has been entered, it must be entered again.
This helps prevent typing errors.
.Ss CONFIGURING NETWORK INTERFACES
.Pp
Next, a list of the network interfaces found on the computer is shown.
Select the interface to configure.
.Pp
The network configuration menus will be skipped if the network was previously
configured as part of a bootonly installation.
.Pp
If an Ethernet interface is selected, the installer will skip ahead to the menu
shown in .
If a wireless network interface is chosen, the system will instead scan for
wireless access points:
.Pp
Wireless networks are identified by a Service Set Identifier (SSID), a short, unique name given to each network.
 SSIDs found during the scan are listed, followed by a description of the encryption
types available for that network.
If the desired SSID does not appear in the list, select
.Ql [ Rescan ]
to scan again.
If the desired network still does not appear, check for problems with antenna
connections or try moving the computer closer to the access point.
Rescan after each change is made.
.Pp
Next, enter the encryption information for connecting to the selected wireless
network.
 WPA2 encryption is strongly recommended as older encryption types, like WEP, offer little security.
If the network uses WPA2, input the password, also known as the Pre-Shared Key (PSK).
For security reasons, the characters typed into the input box are displayed as
asterisks.
.Pp
Next, choose whether or not an IPv4 address should be configured on the Ethernet or wireless interface:
.Pp
There are two methods of IPv4 configuration.
 DHCP will automatically configure the network interface correctly and should be used
if the network provides a DHCP server.
Otherwise, the addressing information needs to be input manually as a static
configuration.
.Pp
Do not enter random network information as it will not work.
If a DHCP server is not available, obtain the information listed in from the network administrator or Internet service provider.
.Pp
If a DHCP server is available, select
.Ql [ Yes ]
in the next menu to automatically configure the network interface.
The installer will appear to pause for a minute or so as it finds the DHCP server and obtains the addressing information for the system.
.Pp
If a DHCP server is not available, select
.Ql [ No ]
and input the following addressing information in this menu:
.Bl -bullet -offset -compact
.It
.Ql IP Address
- The IPv4 address assigned to this computer.
The address must be unique and not already in use by another piece of equipment
on the local network.
.It
.Ql Subnet Mask
- The subnet mask for the network.
.It
.Ql Default Router
- The IP address of the network's default gateway.
.El
.Pp
The next screen will ask if the interface should be configured for IPv6.
If IPv6 is available and desired, choose
.Ql [ Yes ]
to select it.
.Pp
IPv6 also has two methods of configuration.
StateLess Address AutoConfiguration (SLAAC) will automatically request the correct configuration information from a local
router.
Refer to http://tools.ietf.org/html/rfc4862 for more information.
Static configuration requires manual entry of network information.
.Pp
If an IPv6 router is available, select
.Ql [ Yes ]
in the next menu to automatically configure the network interface.
The installer will appear to pause for a minute or so as it finds the router
and obtains the addressing information for the system.
.Pp
If an IPv6 router is not available, select
.Ql [ No ]
and input the following addressing information in this menu:
.Bl -bullet -offset -compact
.It
.Ql IPv6 Address
- The IPv6 address assigned to this computer.
The address must be unique and not already in use by another piece of equipment
on the local network.
.It
.Ql Default Router
- The IPv6 address of the network's default gateway.
.El
.Pp
The last network configuration menu is used to configure the Domain Name System
(DNS) resolver, which converts hostnames to and from network addresses.
If DHCP or SLAAC was used to autoconfigure the network interface, the
.Ql Resolver Configuration
values may already be filled in.
Otherwise, enter the local network's domain name in the
.Ql Search
field.
.Ql DNS #1
and
.Ql DNS #2
are the IPv4 and/or IPv6 addresses of the DNS servers.
At least one DNS server is required.
.Ss SETTING THE TIME ZONE
.Pp
The next menu asks if the system clock uses UTC or local time.
When in doubt, select
.Ql [ No ]
to choose the more commonly-used local time.
.Pp
The next series of menus are used to determine the correct local time by
selecting the geographic region, country, and time zone.
Setting the time zone allows the system to automatically correct for regional
time changes, such as daylight savings time, and perform other time zone
related functions properly.
.Pp
The example shown here is for a machine located in the Eastern time zone of the
United States.
The selections will vary according to the geographical location.
.Pp
The appropriate region is selected using the arrow keys and then pressing Enter.
.Pp
Select the appropriate country using the arrow keys and press Enter.
.Pp
The appropriate time zone is selected using the arrow keys and pressing Enter.
.Pp
Confirm the abbreviation for the time zone is correct.
If it is, press Enter to continue with the post-installation configuration.
.Ss ENABLING SERVICES
.Pp
The next menu is used to configure which system services will be started
whenever the system boots.
All of these services are optional.
Only start the services that are needed for the system to function.
.Pp
Here is a summary of the services which can be enabled in this menu:
.Bl -bullet -offset -compact
.It
.Ql sshd
- The Secure Shell (SSH) daemon is used to remotely access a system over an encrypted connection.
Only enable this service if the system should be available for remote logins.
.It
.Ql moused
- Enable this service if the mouse will be used from the command-line system
console.
.It
.Ql ntpd
- The Network Time Protocol (NTP) daemon for automatic clock synchronization.
Enable this service if there is a Windows, Kerberos, or LDAP server on the network.
.It
.Ql powerd
- System power control utility for power control and energy saving.
.El
.Ss ENABLING CRASH DUMPS
.Pp
The next menu is used to configure whether or not crash dumps should be
enabled.
Enabling crash dumps can be useful in debugging issues with the system, so
users are encouraged to enable crash dumps.
.Ss ADD USERS
.Pp
The next menu prompts to create at least one user account.
It is recommended to login to the system using a user account rather than as
.Ql root
.
When logged in as
.Ql root
, there are essentially no limits or protection on what can be done.
Logging in as a normal user is safer and more secure.
.Pp
Select
.Ql [ Yes ]
to add new users.
.Pp
Follow the prompts and input the requested information for the user account.
The example shown in creates the
.Ql asample
user account.
.Pp
Here is a summary of the information to input:
.Bl -bullet -offset -compact
.It
.Ql Username
- The name the user will enter to log in.
A common convention is to use the first letter of the first name combined with
the last name, as long as each username is unique for the system.
The username is case sensitive and should not contain any spaces.
.It
.Ql Full name
- The user's full name.
This can contain spaces and is used as a description for the user account.
.It
.Ql Uid
- User ID.
Typically, this is left blank so the system will assign a value.
.It
.Ql Login group
- The user's group.
Typically this is left blank to accept the default.
.It
.Ql Invite user into other groups?
- Additional groups to which the user will be added as a member.
If the user needs administrative access, type
.Ql wheel
here.
.It
.Ql Login class
- Typically left blank for the default.
.It
.Ql Shell
- Type in one of the listed values to set the interactive shell for the user.
Refer to for more information about shells.
.It
.Ql Home directory
- The user's home directory.
The default is usually correct.
.It
.Ql Home directory permissions
- Permissions on the user's home directory.
The default is usually correct.
.It
.Ql Use password-based authentication?
- Typically
.Ql yes
so that the user is prompted to input their password at login.
.It
.Ql Use an empty password?
- Typically
.Ql no
as it is insecure to have a blank password.
.It
.Ql Use a random password?
- Typically
.Ql no
so that the user can set their own password in the next prompt.
.It
.Ql Enter password
- The password for this user.
Characters typed will not show on the screen.
.It
.Ql Enter password again
- The password must be typed again for verification.
.It
.Ql Lock out the account after creation?
- Typically
.Ql no
so that the user can login.
.El
.Pp
After entering everything, a summary is shown for review.
If a mistake was made, enter
.Ql no
and try again.
If everything is correct, enter
.Ql yes
to create the new user.
.Pp
If there are more users to add, answer the
.Ql Add another user?
question with
.Ql yes
.
Enter
.Ql no
to finish adding users and continue the installation.
.Pp
For more information on adding users and user management, see .
.Ss FINAL CONFIGURATION
.Pp
After everything has been installed and configured, a final chance is provided
to modify settings.
.Pp
Use this menu to make any changes or do any additional configuration before
completing the installation.
.Bl -bullet -offset -compact
.It
.Ql Add User
- Described in .
.It
.Ql Root Password
- Described in .
.It
.Ql Hostname
- Described in .
.It
.Ql Network
- Described in .
.It
.Ql Services
- Described in .
.It
.Ql Time Zone
- Described in .
.It
.Ql Handbook
- Download and install the FreeBSD Handbook.
.El
.Pp
After any final configuration is complete, select
.Ql Exit
.
.Pp
bsdinstall will prompt if there are any additional configuration that needs to be done
before rebooting into the new system.
Select
.Ql [ Yes ]
to exit to a shell within the new system or
.Ql [ No ]
to proceed to the last step of the installation.
.Pp
If further configuration or special setup is needed, select
.Ql [ Live CD ]
to boot the install media into Live CD mode.
.Pp
If the installation is complete, select
.Ql [ Reboot ]
to reboot the computer and start the new FreeBSD system.
Do not forget to remove the FreeBSD install media or the computer may boot from
it again.
.Pp
As FreeBSD boots, informational messages are displayed.
After the system finishes booting, a login prompt is displayed.
At the login: prompt, enter the username added during the installation.
Avoid logging in as
.Ql root
.
Refer to for instructions on how to become the superuser when administrative access is
needed.
.Pp
The messages that appeared during boot can be reviewed by pressing Scroll-Lock to turn on the scroll-back buffer.
The PgUp, PgDn, and arrow keys can be used to scroll back through the messages.
When finished, press Scroll-Lock again to unlock the display and return to the console.
To review these messages once the system has been up for some time, type
.Cm less /var/run/dmesg.boot
from a command prompt.
Press q to return to the command line after viewing.
.Pp
If sshd was enabled in , the first boot may be a bit slower as the system will generate the RSA and DSA keys.
Subsequent boots will be faster.
The fingerprints of the keys will be displayed, as seen in this example:
.Bd -literal -offset indent
Generating public/private rsa1 key pair.
Your identification has been saved in /etc/ssh/ssh_host_key.
Your public key has been saved in /etc/ssh/ssh_host_key.pub.
The key fingerprint is:
10:a0:f5:af:93:ae:a3:1a:b2:bb:3c:35:d9:5a:b3:f3 root@machine3.example.com
The key's randomart image is:
+--[RSA1 1024]----+
|    o..          |
|   o . .         |
|  .   o          |
|       o         |
|    o   S        |
|   + + o         |
|o . + *          |
|o+ ..+ .         |
|==o..o+E         |
+-----------------+
Generating public/private dsa key pair.
Your identification has been saved in /etc/ssh/ssh_host_dsa_key.
Your public key has been saved in /etc/ssh/ssh_host_dsa_key.pub.
The key fingerprint is:
7e:1c:ce:dc:8a:3a:18:13:5b:34:b5:cf:d9:d1:47:b2 root@machine3.example.com
The key's randomart image is:
+--[ DSA 1024]----+
|       ..     . .|
|      o  .   . + |
|     . ..   . E .|
|    . .  o o . . |
|     +  S = .    |
|    +  . = o     |
|     +  . * .    |
|    . .  o .     |
|      .o. .      |
+-----------------+
Starting sshd.
.Ed
.Pp
Refer to for more information about fingerprints and SSH.
.Pp
FreeBSD does not install a graphical environment by default.
Refer to for more information about installing and configuring a graphical window
manager.
.Pp
Proper shutdown of a FreeBSD computer helps protect data and hardware from
damage.
 Do not turn off the power before the system has been properly shut down!
If the user is a member of the
.Ql wheel
group, become the superuser by typing
.Cm su
at the command line and entering the
.Ql root
password.
Then, type
.Cm shutdown -p now
and the system will shut down cleanly, and if the hardware supports it, turn
itself off.
.Ss TROUBLESHOOTING
.Pp
This section covers basic installation troubleshooting, such as common problems
people have reported.
.Pp
Check the Hardware Notes (https://www.freebsd.org/releases/index.html) document for the version of FreeBSD to make sure the hardware is supported.
If the hardware is supported and lock-ups or other problems occur, build a
custom kernel using the instructions in to add support for devices which are not present in the
.Pa GENERIC
kernel.
The default kernel assumes that most hardware devices are in their factory
default configuration in terms of IRQs, I/O addresses, and DMA channels.
If the hardware has been reconfigured, a custom kernel configuration file can
tell FreeBSD where to find things.
.Pp
Some installation problems can be avoided or alleviated by updating the
firmware on various hardware components, most notably the motherboard.
Motherboard firmware is usually referred to as the BIOS.
Most motherboard and computer manufacturers have a website for upgrades and
upgrade information.
.Pp
Manufacturers generally advise against upgrading the motherboard BIOS unless there is a good reason for doing so, like a critical update.
The upgrade process can go wrong, leaving the BIOS incomplete and the computer inoperative.
.Pp
If the system hangs while probing hardware during boot, or it behaves strangely
during install, ACPI may be the culprit.
FreeBSD makes extensive use of the system ACPI service on the i386, amd64, and ia64 platforms to aid in system configuration
if it is detected during boot.
Unfortunately, some bugs still exist in both the ACPI driver and within system motherboards and BIOS firmware.
 ACPI can be disabled by setting the
.Ql hint.acpi.0.disabled
hint in the third stage boot loader:
.Bd -literal -offset indent
set hint.acpi.0.disabled="1"
.Ed
.Pp
This is reset each time the system is booted, so it is necessary to add
.Ql hint.acpi.0.disabled="1"
to the file
.Pa /boot/loader.conf
.
More information about the boot loader can be found in .
.Ss USING THE LIVE CD
.Pp
The welcome menu of bsdinstall, shown in , provides a
.Ql [ Live CD ]
option.
This is useful for those who are still wondering whether FreeBSD is the right
operating system for them and want to test some of the features before
installing.
.Pp
The following points should be noted before using the
.Ql [ Live CD ]
:
.Bl -bullet -offset -compact
.It
To gain access to the system, authentication is required.
The username is
.Ql root
and the password is blank.
.It
As the system runs directly from the installation media, performance will be
significantly slower than that of a system installed on a hard disk.
.It
This option only provides a command prompt and not a graphical interface.
.El
.Sh FREEBSD BASICS
.Ss SYNOPSIS
.Pp
This chapter covers the basic commands and functionality of the FreeBSD
operating system.
Much of this material is relevant for any UNIX-like operating system.
New FreeBSD users are encouraged to read through this chapter carefully.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
How to use and configure virtual consoles.
.It
How to create and manage users and groups on FreeBSD.
.It
How UNIX file permissions and FreeBSD file flags work.
.It
The default FreeBSD file system layout.
.It
The FreeBSD disk organization.
.It
How to mount and unmount file systems.
.It
What processes, daemons, and signals are.
.It
What a shell is, and how to change the default login environment.
.It
How to use basic text editors.
.It
What devices and device nodes are.
.It
How to read manual pages for more information.
.El
.Ss VIRTUAL CONSOLES AND TERMINALS
.Pp
Unless FreeBSD has been configured to automatically start a graphical
environment during startup, the system will boot into a command line login
prompt, as seen in this example:
.Bd -literal -offset indent
FreeBSD/amd64 (pc3.example.org) (ttyv0)

login:
.Ed
.Pp
The first line contains some information about the system.
The
.Ql amd64
indicates that the system in this example is running a 64-bit version of
FreeBSD.
The hostname is
.Ql pc3.example.org
, and
.Pa ttyv0
indicates that this is the
.Do
system console
.Dc
.
The second line is the login prompt.
.Pp
Since FreeBSD is a multiuser system, it needs some way to distinguish between
different users.
This is accomplished by requiring every user to log into the system before
gaining access to the programs on the system.
Every user has a unique name
.Do
username
.Dc
and a personal
.Do
password
.Dc
.
.Pp
To log into the system console, type the username that was configured during
system installation, as described in , and press Enter.
Then enter the password associated with the username and press Enter.
The password is not echoed for security reasons.
.Pp
Once the correct password is input, the message of the day (MOTD) will be displayed followed by a command prompt.
Depending upon the shell that was selected when the user was created, this
prompt will be a
.Ql #
,
.Ql $
, or
.Ql %
character.
The prompt indicates that the user is now logged into the FreeBSD system
console and ready to try the available commands.
.Ss VIRTUAL CONSOLES
.Pp
While the system console can be used to interact with the system, a user
working from the command line at the keyboard of a FreeBSD system will
typically instead log into a virtual console.
This is because system messages are configured by default to display on the
system console.
These messages will appear over the command or file that the user is working
on, making it difficult to concentrate on the work at hand.
.Pp
By default, FreeBSD is configured to provide several virtual consoles for
inputting commands.
Each virtual console has its own login prompt and shell and it is easy to
switch between virtual consoles.
This essentially provides the command line equivalent of having several windows
open at the same time in a graphical environment.
.Pp
The key combinations AltF1 through AltF8 have been reserved by FreeBSD for switching between virtual consoles.
Use AltF1 to switch to the system console (
.Pa ttyv0
), AltF2 to access the first virtual console (
.Pa ttyv1
), AltF3 to access the second virtual console (
.Pa ttyv2
), and so on.
.Pp
When switching from one console to the next, FreeBSD manages the screen output.
The result is an illusion of having multiple virtual screens and keyboards that
can be used to type commands for FreeBSD to run.
The programs that are launched in one virtual console do not stop running when
the user switches to a different virtual console.
.Pp
Refer to
.Xr kbdcontrol 1 ,
.Xr vidcontrol 1 ,
.Xr atkbd 4 ,
.Xr syscons 4 , and
.Xr vt 4 for a more technical description of the FreeBSD console and its keyboard
drivers.
.Pp
In FreeBSD, the number of available virtual consoles is configured in this
section of
.Pa /etc/ttys
:
.Bd -literal -offset indent
# name    getty                         type  status comments
#
ttyv0   "/usr/libexec/getty Pc"         xterm   on  secure
# Virtual terminals
ttyv1   "/usr/libexec/getty Pc"         xterm   on  secure
ttyv2   "/usr/libexec/getty Pc"         xterm   on  secure
ttyv3   "/usr/libexec/getty Pc"         xterm   on  secure
ttyv4   "/usr/libexec/getty Pc"         xterm   on  secure
ttyv5   "/usr/libexec/getty Pc"         xterm   on  secure
ttyv6   "/usr/libexec/getty Pc"         xterm   on  secure
ttyv7   "/usr/libexec/getty Pc"         xterm   on  secure
ttyv8   "/usr/X11R6/bin/xdm -nodaemon"  xterm   off secure
.Ed
.Pp
To disable a virtual console, put a comment symbol (
.Ql #
) at the beginning of the line representing that virtual console.
For example, to reduce the number of available virtual consoles from eight to
four, put a
.Ql #
in front of the last four lines representing virtual consoles
.Pa ttyv5
through
.Pa ttyv8
.
 Do not comment out the line for the system console
.Pa ttyv0
.
Note that the last virtual console (
.Pa ttyv8
) is used to access the graphical environment if Xorg has been installed and configured as described in .
.Pp
For a detailed description of every column in this file and the available
options for the virtual consoles, refer to
.Xr ttys 5 .
.Ss SINGLE USER MODE
.Pp
The FreeBSD boot menu provides an option labelled as
.Do
Boot Single User
.Dc
.
If this option is selected, the system will boot into a special mode known as
.Do
single user mode
.Dc
.
This mode is typically used to repair a system that will not boot or to reset
the
.Ql root
password when it is not known.
While in single user mode, networking and other virtual consoles are not
available.
However, full
.Ql root
access to the system is available, and by default, the
.Ql root
password is not needed.
For these reasons, physical access to the keyboard is needed to boot into this
mode and determining who has physical access to the keyboard is something to
consider when securing a FreeBSD system.
.Pp
The settings which control single user mode are found in this section of
.Pa /etc/ttys
:
.Bd -literal -offset indent
# name  getty                           type  status  comments
#
# If console is marked "insecure", then init will ask for the root password
# when going to single-user mode.
console none                            unknown  off  secure
.Ed
.Pp
By default, the status is set to
.Ql secure
.
This assumes that who has physical access to the keyboard is either not
important or it is controlled by a physical security policy.
If this setting is changed to
.Ql insecure
, the assumption is that the environment itself is insecure because anyone can
access the keyboard.
When this line is changed to
.Ql insecure
, FreeBSD will prompt for the
.Ql root
password when a user selects to boot into single user mode.
.Pp
Be careful when changing this setting to
.Ql insecure
!
If the
.Ql root
password is forgotten, booting into single user mode is still possible, but may
be difficult for someone who is not familiar with the FreeBSD booting process.
.Ss CHANGING CONSOLE VIDEO MODES
.Pp
The FreeBSD console default video mode may be adjusted to 1024x768, 1280x1024,
or any other size supported by the graphics chip and monitor.
To use a different video mode load the
.Ql VESA
module:
.Bd -literal -offset indent
# kldload vesa
.Ed
.Pp
To determine which video modes are supported by the hardware, use
.Xr vidcontrol 1 .
To get a list of supported video modes issue the following:
.Bd -literal -offset indent
# vidcontrol -i mode
.Ed
.Pp
The output of this command lists the video modes that are supported by the
hardware.
To select a new video mode, specify the mode using
.Xr vidcontrol 1 as the
.Ql root
user:
.Bd -literal -offset indent
# vidcontrol MODE_279
.Ed
.Pp
If the new video mode is acceptable, it can be permanently set on boot by
adding it to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
allscreens_flags="MODE_279"
.Ed
.Ss USERS AND BASIC ACCOUNT MANAGEMENT
.Pp
FreeBSD allows multiple users to use the computer at the same time.
While only one user can sit in front of the screen and use the keyboard at any
one time, any number of users can log in to the system through the network.
To use the system, each user should have their own user account.
.Pp
This chapter describes:
.Bl -bullet -offset -compact
.It
The different types of user accounts on a FreeBSD system.
.It
How to add, remove, and modify user accounts.
.It
How to set limits to control the resources that users and groups are allowed to
access.
.It
How to create groups and add users as members of a group.
.El
.Ss ACCOUNT TYPES
.Pp
Since all access to the FreeBSD system is achieved using accounts and all
processes are run by users, user and account management is important.
.Pp
There are three main types of accounts: system accounts, user accounts, and the
superuser account.
.Ss SYSTEM ACCOUNTS
.Pp
System accounts are used to run services such as DNS, mail, and web servers.
The reason for this is security; if all services ran as the superuser, they
could act without restriction.
.Pp
Examples of system accounts are
.Ql daemon
,
.Ql operator
,
.Ql bind
,
.Ql news
, and
.Ql www
.
.Pp
.Ql nobody
is the generic unprivileged system account.
However, the more services that use
.Ql nobody
, the more files and processes that user will become associated with, and hence
the more privileged that user becomes.
.Ss USER ACCOUNTS
.Pp
User accounts are assigned to real people and are used to log in and use the
system.
Every person accessing the system should have a unique user account.
This allows the administrator to find out who is doing what and prevents users
from clobbering the settings of other users.
.Pp
Each user can set up their own environment to accommodate their use of the
system, by configuring their default shell, editor, key bindings, and language
settings.
.Pp
Every user account on a FreeBSD system has certain information associated with
it:
.Bl -tag -offset -compact
.It User name
The user name is typed at the login: prompt.
Each user must have a unique user name.
There are a number of rules for creating valid user names which are documented
in
.Xr passwd 5 .
It is recommended to use user names that consist of eight or fewer, all lower
case characters in order to maintain backwards compatibility with applications.
.It Password
Each account has an associated password.
.It User ID (UID)
The User ID (UID) is a number used to uniquely identify the user to the FreeBSD system.
Commands that allow a user name to be specified will first convert it to the UID.
It is recommended to use a UID less than 65535, since higher values may cause
compatibility issues with some software.
.It Group ID (GID)
The Group ID (GID) is a number used to uniquely identify the primary group that the user belongs
to.
Groups are a mechanism for controlling access to resources based on a user's GID rather than their UID.
This can significantly reduce the size of some configuration files and allows
users to be members of more than one group.
It is recommended to use a GID of 65535 or lower as higher GIDs may break some
software.
.It Login class
Login classes are an extension to the group mechanism that provide additional
flexibility when tailoring the system to different users.
Login classes are discussed further in .
.It Password change time
By default, passwords do not expire.
However, password expiration can be enabled on a per-user basis, forcing some
or all users to change their passwords after a certain amount of time has
elapsed.
.It Account expiration time
By default, FreeBSD does not expire accounts.
When creating accounts that need a limited lifespan, such as student accounts
in a school, specify the account expiry date using
.Xr pw 8 .
After the expiry time has elapsed, the account cannot be used to log in to the
system, although the account's directories and files will remain.
.It User's full name
The user name uniquely identifies the account to FreeBSD, but does not
necessarily reflect the user's real name.
Similar to a comment, this information can contain spaces, uppercase
characters, and be more than 8 characters long.
.It Home directory
The home directory is the full path to a directory on the system.
This is the user's starting directory when the user logs in.
A common convention is to put all user home directories under
.Pa /home/username
or
.Pa /usr/home/username
.
Each user stores their personal files and subdirectories in their own home
directory.
.It User shell
The shell provides the user's default environment for interacting with the
system.
There are many different kinds of shells and experienced users will have their
own preferences, which can be reflected in their account settings.
.El
.Ss THE SUPERUSER ACCOUNT
.Pp
The superuser account, usually called
.Ql root
, is used to manage the system with no limitations on privileges.
For this reason, it should not be used for day-to-day tasks like sending and
receiving mail, general exploration of the system, or programming.
.Pp
The superuser, unlike other user accounts, can operate without limits, and
misuse of the superuser account may result in spectacular disasters.
User accounts are unable to destroy the operating system by mistake, so it is
recommended to login as a user account and to only become the superuser when a
command requires extra privilege.
.Pp
Always double and triple-check any commands issued as the superuser, since an
extra space or missing character can mean irreparable data loss.
.Pp
There are several ways to gain superuser privilege.
While one can log in as
.Ql root
, this is highly discouraged.
.Pp
Instead, use
.Xr su 1 to become the superuser.
If
.Ql -
is specified when running this command, the user will also inherit the root
user's environment.
The user running this command must be in the
.Ql wheel
group or else the command will fail.
The user must also know the password for the
.Ql root
user account.
.Pp
In this example, the user only becomes superuser in order to run
.Cm make install
as this step requires superuser privilege.
Once the command completes, the user types
.Cm exit
to leave the superuser account and return to the privilege of their user
account.
.Bd -literal -offset indent
% configure
% make
% su -
Password:
# make install
# exit
%
.Ed
.Pp
The built-in
.Xr su 1 framework works well for single systems or small networks with just one system
administrator.
An alternative is to install the
.Ql security/sudo
package or port.
This software provides activity logging and allows the administrator to
configure which users can run which commands as the superuser.
.Ss MANAGING ACCOUNTS
.Pp
FreeBSD provides a variety of different commands to manage user accounts.
The most common commands are summarized in , followed by some examples of their usage.
See the manual page for each utility for more details and usage examples.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Command
.Ta
Summary
.It
.Ta
.Xr adduser 8
.Ta
The recommended command-line application for adding new users.
.It
.Ta
.Xr rmuser 8
.Ta
The recommended command-line application for removing users.
.It
.Ta
.Xr chpass 1
.Ta
A flexible tool for changing user database information.
.It
.Ta
.Xr passwd 1
.Ta
The command-line tool to change user passwords.
.It
.Ta
.Xr pw 8
.Ta
A powerful and flexible tool for modifying all aspects of user accounts.
.El
.Ss ADDUSER
.Pp
The recommended program for adding new users is
.Xr adduser 8 .
When a new user is added, this program automatically updates
.Pa /etc/passwd
and
.Pa /etc/group
.
It also creates a home directory for the new user, copies in the default
configuration files from
.Pa /usr/share/skel
, and can optionally mail the new user a welcome message.
This utility must be run as the superuser.
.Pp
The
.Xr adduser 8 utility is interactive and walks through the steps for creating a new user
account.
As seen in , either input the required information or press Return to accept the default value shown in square brackets.
In this example, the user has been invited into the
.Ql wheel
group, allowing them to become the superuser with
.Xr su 1 .
When finished, the utility will prompt to either create another user or to
exit.
.Bd -literal -offset indent
# adduser
Username: jru
Full name: J.
Random User
Uid (Leave empty for default):
Login group [jru]:
Login group is jru. Invite jru into other groups? []: wheel
Login class [default]:
Shell (sh csh tcsh zsh nologin) [sh]: zsh
Home directory [/home/jru]:
Home directory permissions (Leave empty for default):
Use password-based authentication? [yes]:
Use an empty password? (yes/no) [no]:
Use a random password? (yes/no) [no]:
Enter password:
Enter password again:
Lock out the account after creation? [no]:
Username   : jru
Password   : ****
Full Name  : J. Random User
Uid        : 1001
Class      :
Groups     : jru wheel
Home       : /home/jru
Shell      : /usr/local/bin/zsh
Locked     : no
OK? (yes/no): yes
adduser: INFO: Successfully added (jru) to the user database.
Add another user? (yes/no): no
Goodbye!
#
.Ed
.Pp
Since the password is not echoed when typed, be careful to not mistype the
password when creating the user account.
.Ss RMUSER
.Pp
To completely remove a user from the system, run
.Xr rmuser 8 as the superuser.
This command performs the following steps:
.Pp
Removes the user's
.Xr crontab 1 entry, if one exists.
.Pp
Removes any
.Xr at 1 jobs belonging to the user.
.Pp
Kills all processes owned by the user.
.Pp
Removes the user from the system's local password file.
.Pp
Optionally removes the user's home directory, if it is owned by the user.
.Pp
Removes the incoming mail files belonging to the user from
.Pa /var/mail
.
.Pp
Removes all files owned by the user from temporary file storage areas such as
.Pa /tmp
.
.Pp
Finally, removes the username from all groups to which it belongs in
.Pa /etc/group
.
If a group becomes empty and the group name is the same as the username, the
group is removed.
This complements the per-user unique groups created by
.Xr adduser 8 .
.Pp
.Xr rmuser 8 cannot be used to remove superuser accounts since that is almost always an
indication of massive destruction.
.Pp
By default, an interactive mode is used, as shown in the following example.
.Bd -literal -offset indent
# rmuser jru
Matching password entry:
jru:*:1001:1001::0:0:J. Random User:/home/jru:/usr/local/bin/zsh
Is this the entry you wish to remove? y
Remove user's home directory (/home/jru)? y
Removing user (jru): mailspool home passwd.
#
.Ed
.Ss CHPASS
.Pp
Any user can use
.Xr chpass 1 to change their default shell and personal information associated with their
user account.
The superuser can use this utility to change additional account information for
any user.
.Pp
When passed no options, aside from an optional username,
.Xr chpass 1 displays an editor containing user information.
When the user exits from the editor, the user database is updated with the new
information.
.Pp
This utility will prompt for the user's password when exiting the editor,
unless the utility is run as the superuser.
.Pp
In , the superuser has typed
.Cm chpass jru
and is now viewing the fields that can be changed for this user.
If
.Ql jru
runs this command instead, only the last six fields will be displayed and
available for editing.
This is shown in .
.Bd -literal -offset indent
#Changing user database information for jru.
Login: jru
Password: *
Uid [#]: 1001
Gid [# or name]: 1001
Change [month day year]:
Expire [month day year]:
Class:
Home directory: /home/jru
Shell: /usr/local/bin/zsh
Full Name: J. Random User
Office Location:
Office Phone:
Home Phone:
Other information:
.Ed
.Bd -literal -offset indent
#Changing user database information for jru.
Shell: /usr/local/bin/zsh
Full Name: J. Random User
Office Location:
Office Phone:
Home Phone:
Other information:
.Ed
.Pp
The commands
.Xr chfn 1 and
.Xr chsh 1 are links to
.Xr chpass 1 , as are
.Xr ypchpass 1 ,
.Xr ypchfn 1 , and
.Xr ypchsh 1 .
Since NIS support is automatic, specifying the
.Ql yp
before the command is not necessary.
How to configure NIS is covered in .
.Ss PASSWD
.Pp
Any user can easily change their password using
.Xr passwd 1 .
To prevent accidental or unauthorized changes, this command will prompt for the
user's original password before a new password can be set:
.Bd -literal -offset indent
% passwd
Changing local password for jru.
Old password:
New password:
Retype new password:
passwd: updating the database...
passwd: done
.Ed
.Pp
The superuser can change any user's password by specifying the username when
running
.Xr passwd 1 .
When this utility is run as the superuser, it will not prompt for the user's
current password.
This allows the password to be changed when a user cannot remember the original
password.
.Bd -literal -offset indent
# passwd jru
Changing local password for jru.
New password:
Retype new password:
passwd: updating the database...
passwd: done
.Ed
.Pp
As with
.Xr chpass 1 ,
.Xr yppasswd 1 is a link to
.Xr passwd 1 , so NIS works with either command.
.Ss PW
.Pp
The
.Xr pw 8 utility can create, remove, modify, and display users and groups.
It functions as a front end to the system user and group files.
.Xr pw 8 has a very powerful set of command line options that make it suitable for use
in shell scripts, but new users may find it more complicated than the other
commands presented in this section.
.Ss MANAGING GROUPS
.Pp
A group is a list of users.
A group is identified by its group name and GID.
In FreeBSD, the kernel uses the UID of a process, and the list of groups it belongs to, to determine what the
process is allowed to do.
Most of the time, the GID of a user or process usually means the first group in the list.
.Pp
The group name to GID mapping is listed in
.Pa /etc/group
.
This is a plain text file with four colon-delimited fields.
The first field is the group name, the second is the encrypted password, the
third the GID, and the fourth the comma-delimited list of members.
For a more complete description of the syntax, refer to
.Xr group 5 .
.Pp
The superuser can modify
.Pa /etc/group
using a text editor.
Alternatively,
.Xr pw 8 can be used to add and edit groups.
For example, to add a group called
.Ql teamtwo
and then confirm that it exists:
.Bd -literal -offset indent
# pw groupadd teamtwo
# pw groupshow teamtwo
teamtwo:*:1100:
.Ed
.Pp
In this example,
.Ql 1100
is the GID of
.Ql teamtwo
.
Right now,
.Ql teamtwo
has no members.
This command will add
.Ql jru
as a member of
.Ql teamtwo
.
.Bd -literal -offset indent
# pw groupmod teamtwo -M jru
# pw groupshow teamtwo
teamtwo:*:1100:jru
.Ed
.Pp
The argument to
.Ar -M
is a comma-delimited list of users to be added to a new (empty) group or to
replace the members of an existing group.
To the user, this group membership is different from (and in addition to) the
user's primary group listed in the password file.
This means that the user will not show up as a member when using
.Ar groupshow
with
.Xr pw 8 , but will show up when the information is queried via
.Xr id 1 or a similar tool.
When
.Xr pw 8 is used to add a user to a group, it only manipulates
.Pa /etc/group
and does not attempt to read additional data from
.Pa /etc/passwd
.
.Bd -literal -offset indent
# pw groupmod teamtwo -m db
# pw groupshow teamtwo
teamtwo:*:1100:jru,db
.Ed
.Pp
In this example, the argument to
.Ar -m
is a comma-delimited list of users who are to be added to the group.
Unlike the previous example, these users are appended to the group and do not
replace existing users in the group.
.Bd -literal -offset indent
% id jru
uid=1001(jru) gid=1001(jru) groups=1001(jru), 1100(teamtwo)
.Ed
.Pp
In this example,
.Ql jru
is a member of the groups
.Ql jru
and
.Ql teamtwo
.
.Pp
For more information about this command and the format of
.Pa /etc/group
, refer to
.Xr pw 8 and
.Xr group 5 .
.Ss PERMISSIONS
.Pp
In FreeBSD, every file and directory has an associated set of permissions and
several utilities are available for viewing and modifying these permissions.
Understanding how permissions work is necessary to make sure that users are
able to access the files that they need and are unable to improperly access the
files used by the operating system or owned by other users.
.Pp
This section discusses the traditional UNIX permissions used in FreeBSD.
For finer grained file system access control, refer to .
.Pp
In UNIX, basic permissions are assigned using three types of access: read, write, and
execute.
These access types are used to determine file access to the file's owner,
group, and others (everyone else).
The read, write, and execute permissions can be represented as the letters
.Ql r
,
.Ql w
, and
.Ql x
.
They can also be represented as binary numbers as each permission is either on
or off (
.Ql 0
).
When represented as a number, the order is always read as
.Ql rwx
, where
.Ql r
has an on value of
.Ql 4
,
.Ql w
has an on value of
.Ql 2
and
.Ql x
has an on value of
.Ql 1
.
.Pp
Table 4.1 summarizes the possible numeric and alphabetic possibilities.
When reading the
.Do
Directory Listing
.Dc
column, a
.Ql -
is used to represent a permission that is set to off.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Value
.Ta
Permission
.Ta
Directory Listing
.It
.Ta
0
.Ta
No read, no write, no execute
.Ta
.Ql ---
.It
.Ta
1
.Ta
No read, no write, execute
.Ta
.Ql --x
.It
.Ta
2
.Ta
No read, write, no execute
.Ta
.Ql -w-
.It
.Ta
3
.Ta
No read, write, execute
.Ta
.Ql -wx
.It
.Ta
4
.Ta
Read, no write, no execute
.Ta
.Ql r--
.It
.Ta
5
.Ta
Read, no write, execute
.Ta
.Ql r-x
.It
.Ta
6
.Ta
Read, write, no execute
.Ta
.Ql rw-
.It
.Ta
7
.Ta
Read, write, execute
.Ta
.Ql rwx
.El
.Pp
Use the
.Ar -l
argument to
.Xr ls 1 to view a long directory listing that includes a column of information about a
file's permissions for the owner, group, and everyone else.
For example, a
.Cm ls -l
in an arbitrary directory may show:
.Bd -literal -offset indent
% ls -l
total 530
-rw-r--r--  1 root  wheel     512 Sep  5 12:31 myfile
-rw-r--r--  1 root  wheel     512 Sep  5 12:31 otherfile
-rw-r--r--  1 root  wheel    7680 Sep  5 12:31 email.txt
.Ed
.Pp
The first (leftmost) character in the first column indicates whether this file
is a regular file, a directory, a special character device, a socket, or any
other special pseudo-file device.
In this example, the
.Ql -
indicates a regular file.
The next three characters,
.Ql rw-
in this example, give the permissions for the owner of the file.
The next three characters,
.Ql r--
, give the permissions for the group that the file belongs to.
The final three characters,
.Ql r--
, give the permissions for the rest of the world.
A dash means that the permission is turned off.
In this example, the permissions are set so the owner can read and write to the
file, the group can read the file, and the rest of the world can only read the
file.
According to the table above, the permissions for this file would be
.Ql 644
, where each digit represents the three parts of the file's permission.
.Pp
How does the system control permissions on devices?
FreeBSD treats most hardware devices as a file that programs can open, read,
and write data to.
These special device files are stored in
.Pa /dev/
.
.Pp
Directories are also treated as files.
They have read, write, and execute permissions.
The executable bit for a directory has a slightly different meaning than that
of files.
When a directory is marked executable, it means it is possible to change into
that directory using
.Xr cd 1 .
This also means that it is possible to access the files within that directory,
subject to the permissions on the files themselves.
.Pp
In order to perform a directory listing, the read permission must be set on the
directory.
In order to delete a file that one knows the name of, it is necessary to have
write and execute permissions to the directory containing the file.
.Pp
There are more permission bits, but they are primarily used in special
circumstances such as setuid binaries and sticky directories.
For more information on file permissions and how to set them, refer to
.Xr chmod 1 .
.Pp
Symbolic permissions use characters instead of octal values to assign
permissions to files or directories.
Symbolic permissions use the syntax of (who) (action) (permissions), where the
following values are available:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Option
.Ta
Letter
.Ta
Represents
.It
.Ta
(who)
.Ta
u
.Ta
User
.It
.Ta
(who)
.Ta
g
.Ta
Group owner
.It
.Ta
(who)
.Ta
o
.Ta
Other
.It
.Ta
(who)
.Ta
a
.Ta
All (
.Do
world
.Dc
)
.It
.Ta
(action)
.Ta
+
.Ta
Adding permissions
.It
.Ta
(action)
.Ta
-
.Ta
Removing permissions
.It
.Ta
(action)
.Ta
=
.Ta
Explicitly set permissions
.It
.Ta
(permissions)
.Ta
r
.Ta
Read
.It
.Ta
(permissions)
.Ta
w
.Ta
Write
.It
.Ta
(permissions)
.Ta
x
.Ta
Execute
.It
.Ta
(permissions)
.Ta
t
.Ta
Sticky bit
.It
.Ta
(permissions)
.Ta
s
.Ta
Set UID or GID
.El
.Pp
These values are used with
.Xr chmod 1 , but with letters instead of numbers.
For example, the following command would block other users from accessing FILE:
.Bd -literal -offset indent
% chmod go= FILE
.Ed
.Pp
A comma separated list can be provided when more than one set of changes to a
file must be made.
For example, the following command removes the group and
.Do
world
.Dc
write permission on FILE, and adds the execute permissions for everyone:
.Bd -literal -offset indent
% chmod go-w,a+x FILE
.Ed
.Pp
In addition to file permissions, FreeBSD supports the use of
.Do
file flags
.Dc
.
These flags add an additional level of security and control over files, but not
directories.
With file flags, even
.Ql root
can be prevented from removing or altering files.
.Pp
File flags are modified using
.Xr chflags 1 .
For example, to enable the system undeletable flag on the file
.Pa file1
, issue the following command:
.Bd -literal -offset indent
# chflags sunlink file1
.Ed
.Pp
To disable the system undeletable flag, put a
.Do
no
.Dc
in front of the
.Ar sunlink
:
.Bd -literal -offset indent
# chflags nosunlink file1
.Ed
.Pp
To view the flags of a file, use
.Ar -lo
with
.Xr ls 1 :
.Bd -literal -offset indent
# ls -lo file1
.Ed
.Bd -literal -offset indent
-rw-r--r--  1 trhodes  trhodes  sunlnk 0 Mar  1 05:54 file1
.Ed
.Pp
Several file flags may only be added or removed by the
.Ql root
user.
In other cases, the file owner may set its file flags.
Refer to
.Xr chflags 1 and
.Xr chflags 2 for more information.
.Pp
Other than the permissions already discussed, there are three other specific
settings that all administrators should know about.
They are the
.Ql setuid
,
.Ql setgid
, and
.Ql sticky
permissions.
.Pp
These settings are important for some UNIX operations as they provide functionality not normally granted to normal users.
To understand them, the difference between the real user ID and effective user
ID must be noted.
.Pp
The real user ID is the UID who owns or starts the process.
The effective UID is the user ID the process runs as.
As an example,
.Xr passwd 1 runs with the real user ID when a user changes their password.
However, in order to update the password database, the command runs as the
effective ID of the
.Ql root
user.
This allows users to change their passwords without seeing a
.Er Permission Denied
error.
.Pp
The setuid permission may be set by prefixing a permission set with the number
four (4) as shown in the following example:
.Bd -literal -offset indent
# chmod 4755 suidexample.sh
.Ed
.Pp
The permissions on
.Pa suidexample.sh
now look like the following:
.Bd -literal -offset indent
-rwsr-xr-x   1 trhodes  trhodes    63 Aug 29 06:36 suidexample.sh
.Ed
.Pp
Note that a
.Ql s
is now part of the permission set designated for the file owner, replacing the
executable bit.
This allows utilities which need elevated permissions, such as
.Xr passwd 1 .
.Pp
The
.Ql nosuid
.Xr mount 8 option will cause such binaries to silently fail without alerting the user.
That option is not completely reliable as a
.Ql nosuid
wrapper may be able to circumvent it.
.Pp
To view this in real time, open two terminals.
On one, type
.Cm passwd
as a normal user.
While it waits for a new password, check the process table and look at the user
information for
.Xr passwd 1 :
.Pp
In terminal A:
.Bd -literal -offset indent
Changing local password for trhodes
Old Password:
.Ed
.Pp
In terminal B:
.Bd -literal -offset indent
# ps aux | grep passwd
.Ed
.Bd -literal -offset indent
trhodes  5232  0.0  0.2  3420  1608   0  R+    2:10AM   0:00.00 grep passwd
root     5211  0.0  0.2  3620  1724   2  I+    2:09AM   0:00.01 passwd
.Ed
.Pp
Although
.Xr passwd 1 is run as a normal user, it is using the effective UID of
.Ql root
.
.Pp
The
.Ql setgid
permission performs the same function as the
.Ql setuid
permission; except that it alters the group settings.
When an application or utility executes with this setting, it will be granted
the permissions based on the group that owns the file, not the user who started
the process.
.Pp
To set the
.Ql setgid
permission on a file, provide
.Xr chmod 1 with a leading two (2):
.Bd -literal -offset indent
# chmod 2755 sgidexample.sh
.Ed
.Pp
In the following listing, notice that the
.Ql s
is now in the field designated for the group permission settings:
.Bd -literal -offset indent
-rwxr-sr-x   1 trhodes  trhodes    44 Aug 31 01:49 sgidexample.sh
.Ed
.Pp
In these examples, even though the shell script in question is an executable
file, it will not run with a different EUID or effective user ID.
This is because shell scripts may not access the
.Xr setuid 2 system calls.
.Pp
The
.Ql setuid
and
.Ql setgid
permission bits may lower system security, by allowing for elevated
permissions.
The third special permission, the
.Ql sticky bit
, can strengthen the security of a system.
.Pp
When the
.Ql sticky bit
is set on a directory, it allows file deletion only by the file owner.
This is useful to prevent file deletion in public directories, such as
.Pa /tmp
, by users who do not own the file.
To utilize this permission, prefix the permission set with a one (1):
.Bd -literal -offset indent
# chmod 1777 /tmp
.Ed
.Pp
The
.Ql sticky bit
permission will display as a
.Ql t
at the very end of the permission set:
.Bd -literal -offset indent
# ls -al / | grep tmp
.Ed
.Bd -literal -offset indent
drwxrwxrwt  10 root  wheel         512 Aug 31 01:49 tmp
.Ed
.Ss DIRECTORY STRUCTURE
.Pp
The FreeBSD directory hierarchy is fundamental to obtaining an overall
understanding of the system.
The most important directory is root or,
.Do
/
.Dc
.
This directory is the first one mounted at boot time and it contains the base
system necessary to prepare the operating system for multi-user operation.
The root directory also contains mount points for other file systems that are
mounted during the transition to multi-user operation.
.Pp
A mount point is a directory where additional file systems can be grafted onto
a parent file system (usually the root file system).
This is further described in .
Standard mount points include
.Pa /usr/
,
.Pa /var/
,
.Pa /tmp/
,
.Pa /mnt/
, and
.Pa /cdrom/
.
These directories are usually referenced to entries in
.Pa /etc/fstab
.
This file is a table of various file systems and mount points and is read by
the system.
Most of the file systems in
.Pa /etc/fstab
are mounted automatically at boot time from the script
.Xr rc 8 unless their entry includes
.Ar noauto
.
Details can be found in .
.Pp
A complete description of the file system hierarchy is available in
.Xr hier 7 .
The following table provides a brief overview of the most common directories.
.Pp
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Directory
.Ta
Description
.It
.Ta
.Pa /
.Ta
Root directory of the file system.
.It
.Ta
.Pa /bin/
.Ta
User utilities fundamental to both single-user and multi-user environments.
.It
.Ta
.Pa /boot/
.Ta
Programs and configuration files used during operating system bootstrap.
.It
.Ta
.Pa /boot/defaults/
.Ta
Default boot configuration files.
Refer to
.Xr loader.conf 5 for details.
.It
.Ta
.Pa /dev/
.Ta
Device nodes.
Refer to
.Xr intro 4 for details.
.It
.Ta
.Pa /etc/
.Ta
System configuration files and scripts.
.It
.Ta
.Pa /etc/defaults/
.Ta
Default system configuration files.
Refer to
.Xr rc 8 for details.
.It
.Ta
.Pa /etc/mail/
.Ta
Configuration files for mail transport agents such as
.Xr sendmail 8 .
.It
.Ta
.Pa /etc/periodic/
.Ta
Scripts that run daily, weekly, and monthly, via
.Xr cron 8 .
Refer to
.Xr periodic 8 for details.
.It
.Ta
.Pa /etc/ppp/
.Ta
.Xr ppp 8 configuration files.
.It
.Ta
.Pa /mnt/
.Ta
Empty directory commonly used by system administrators as a temporary mount
point.
.It
.Ta
.Pa /proc/
.Ta
Process file system.
Refer to
.Xr procfs 5 ,
.Xr mount_procfs 8 for details.
.It
.Ta
.Pa /rescue/
.Ta
Statically linked programs for emergency recovery as described in
.Xr rescue 8 .
.It
.Ta
.Pa /root/
.Ta
Home directory for the
.Ql root
account.
.It
.Ta
.Pa /sbin/
.Ta
System programs and administration utilities fundamental to both single-user
and multi-user environments.
.It
.Ta
.Pa /tmp/
.Ta
Temporary files which are usually not preserved across a system reboot.
A memory-based file system is often mounted at
.Pa /tmp
.
This can be automated using the tmpmfs-related variables of
.Xr rc.conf 5 or with an entry in
.Pa /etc/fstab
; refer to
.Xr mdmfs 8 for details.
.It
.Ta
.Pa /usr/
.Ta
The majority of user utilities and applications.
.It
.Ta
.Pa /usr/bin/
.Ta
Common utilities, programming tools, and applications.
.It
.Ta
.Pa /usr/include/
.Ta
Standard C include files.
.It
.Ta
.Pa /usr/lib/
.Ta
Archive libraries.
.It
.Ta
.Pa /usr/libdata/
.Ta
Miscellaneous utility data files.
.It
.Ta
.Pa /usr/libexec/
.Ta
System daemons and system utilities executed by other programs.
.It
.Ta
.Pa /usr/local/
.Ta
Local executables and libraries.
Also used as the default destination for the FreeBSD ports framework.
Within
.Pa /usr/local
, the general layout sketched out by
.Xr hier 7 for
.Pa /usr
should be used.
Exceptions are the man directory, which is directly under
.Pa /usr/local
rather than under
.Pa /usr/local/share
, and the ports documentation is in
.Pa share/doc/port
.
.It
.Ta
.Pa /usr/obj/
.Ta
Architecture-specific target tree produced by building the
.Pa /usr/src
tree.
.It
.Ta
.Pa /usr/ports/
.Ta
The FreeBSD Ports Collection (optional).
.It
.Ta
.Pa /usr/sbin/
.Ta
System daemons and system utilities executed by users.
.It
.Ta
.Pa /usr/share/
.Ta
Architecture-independent files.
.It
.Ta
.Pa /usr/src/
.Ta
BSD and/or local source files.
.It
.Ta
.Pa /var/
.Ta
Multi-purpose log, temporary, transient, and spool files.
A memory-based file system is sometimes mounted at
.Pa /var
.
This can be automated using the varmfs-related variables in
.Xr rc.conf 5 or with an entry in
.Pa /etc/fstab
; refer to
.Xr mdmfs 8 for details.
.It
.Ta
.Pa /var/log/
.Ta
Miscellaneous system log files.
.It
.Ta
.Pa /var/mail/
.Ta
User mailbox files.
.It
.Ta
.Pa /var/spool/
.Ta
Miscellaneous printer and mail system spooling directories.
.It
.Ta
.Pa /var/tmp/
.Ta
Temporary files which are usually preserved across a system reboot, unless
.Pa /var
is a memory-based file system.
.It
.Ta
.Pa /var/yp/
.Ta
NIS maps.
.El
.Ss DISK ORGANIZATION
.Pp
The smallest unit of organization that FreeBSD uses to find files is the
filename.
Filenames are case-sensitive, which means that
.Pa readme.txt
and
.Pa README.TXT
are two separate files.
FreeBSD does not use the extension of a file to determine whether the file is a
program, document, or some other form of data.
.Pp
Files are stored in directories.
A directory may contain no files, or it may contain many hundreds of files.
A directory can also contain other directories, allowing a hierarchy of
directories within one another in order to organize data.
.Pp
Files and directories are referenced by giving the file or directory name,
followed by a forward slash,
.Ql /
, followed by any other directory names that are necessary.
For example, if the directory
.Pa foo
contains a directory
.Pa bar
which contains the file
.Pa readme.txt
, the full name, or
.Ql path
, to the file is
.Pa foo/bar/readme.txt
.
Note that this is different from Windows which uses
.Ql \
to separate file and directory names.
FreeBSD does not use drive letters, or other drive names in the path.
For example, one would not type
.Pa c:\foo\bar\readme.txt
on FreeBSD.
.Pp
Directories and files are stored in a file system.
Each file system contains exactly one directory at the very top level, called
the
.Ql root directory
for that file system.
This root directory can contain other directories.
One file system is designated the
.Ql root file system
or
.Ql /
.
Every other file system is
.Ql mounted
under the root file system.
No matter how many disks are on the FreeBSD system, every directory appears to
be part of the same disk.
.Pp
Consider three file systems, called
.Ql A
,
.Ql B
, and
.Ql C
.
Each file system has one root directory, which contains two other directories,
called
.Ql A1
,
.Ql A2
(and likewise
.Ql B1
,
.Ql B2
and
.Ql C1
,
.Ql C2
).
.Pp
Call
.Ql A
the root file system.
If
.Xr ls 1 is used to view the contents of this directory, it will show two
subdirectories,
.Ql A1
and
.Ql A2
.
The directory tree looks like this:
.Bd -literal -offset indent
 /
 |
 +--- A1
 |
 `--- A2
.Ed
.Pp
A file system must be mounted on to a directory in another file system.
When mounting file system
.Ql B
on to the directory
.Ql A1
, the root directory of
.Ql B
replaces
.Ql A1
, and the directories in
.Ql B
appear accordingly:
.Bd -literal -offset indent
 /
 |
 +--- A1
 |     |
 |     +--- B1
 |     |
 |     `--- B2
 |
 `--- A2
.Ed
.Pp
Any files that are in the
.Ql B1
or
.Ql B2
directories can be reached with the path
.Pa /A1/B1
or
.Pa /A1/B2
as necessary.
Any files that were in
.Pa /A1
have been temporarily hidden.
They will reappear if
.Ql B
is
.Ql unmounted
from
.Ql A
.
.Pp
If
.Ql B
had been mounted on
.Ql A2
then the diagram would look like this:
.Bd -literal -offset indent
 /
 |
 +--- A1
 |
 `--- A2
       |
       +--- B1
       |
       `--- B2
.Ed
.Pp
and the paths would be
.Pa /A2/B1
and
.Pa /A2/B2
respectively.
.Pp
File systems can be mounted on top of one another.
Continuing the last example, the
.Ql C
file system could be mounted on top of the
.Ql B1
directory in the
.Ql B
file system, leading to this arrangement:
.Bd -literal -offset indent
 /
 |
 +--- A1
 |
 `--- A2
       |
       +--- B1
       |     |
       |     +--- C1
       |     |
       |     `--- C2
       |
       `--- B2
.Ed
.Pp
Or
.Ql C
could be mounted directly on to the
.Ql A
file system, under the
.Ql A1
directory:
.Bd -literal -offset indent
 /
 |
 +--- A1
 |     |
 |     +--- C1
 |     |
 |     `--- C2
 |
 `--- A2
       |
       +--- B1
       |
       `--- B2
.Ed
.Pp
It is entirely possible to have one large root file system, and not need to
create any others.
There are some drawbacks to this approach, and one advantage.
.Bl -bullet -offset -compact
.Ss BENEFITS OF MULTIPLE FILE SYSTEMS
.It
Different file systems can have different
.Ql mount options
.
For example, the root file system can be mounted read-only, making it
impossible for users to inadvertently delete or edit a critical file.
Separating user-writable file systems, such as
.Pa /home
, from other file systems allows them to be mounted
.Ql nosuid
.
This option prevents the
.Ql suid
/
.Ql guid
bits on executables stored on the file system from taking effect, possibly
improving security.
.It
FreeBSD automatically optimizes the layout of files on a file system, depending
on how the file system is being used.
So a file system that contains many small files that are written frequently
will have a different optimization to one that contains fewer, larger files.
By having one big file system this optimization breaks down.
.It
FreeBSD's file systems are robust if power is lost.
However, a power loss at a critical point could still damage the structure of
the file system.
By splitting data over multiple file systems it is more likely that the system
will still come up, making it easier to restore from backup as necessary.
.El
.Bl -bullet -offset -compact
.Ss BENEFIT OF A SINGLE FILE SYSTEM
.It
File systems are a fixed size.
If you create a file system when you install FreeBSD and give it a specific
size, you may later discover that you need to make the partition bigger.
This is not easily accomplished without backing up, recreating the file system
with the new size, and then restoring the backed up data.
FreeBSD features the
.Xr growfs 8 command, which makes it possible to increase the size of file system on the
fly, removing this limitation.
.El
.Pp
File systems are contained in partitions.
This does not have the same meaning as the common usage of the term partition
(for example, MS-DOS partition), because of FreeBSD's UNIX heritage.
Each partition is identified by a letter from
.Ql a
through to
.Ql h
.
Each partition can contain only one file system, which means that file systems
are often described by either their typical mount point in the file system
hierarchy, or the letter of the partition they are contained in.
.Pp
FreeBSD also uses disk space for
.Ql swap space
to provide
.Ql virtual memory
.
This allows your computer to behave as though it has much more memory than it
actually does.
When FreeBSD runs out of memory, it moves some of the data that is not
currently being used to the swap space, and moves it back in (moving something
else out) when it needs it.
.Pp
Some partitions have certain conventions associated with them.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Partition
.Ta
Convention
.It
.Ta
.Ql a
.Ta
Normally contains the root file system.
.It
.Ta
.Ql b
.Ta
Normally contains swap space.
.It
.Ta
.Ql c
.Ta
Normally the same size as the enclosing slice.
This allows utilities that need to work on the entire slice, such as a bad
block scanner, to work on the
.Ql c
partition.
A file system would not normally be created on this partition.
.It
.Ta
.Ql d
.Ta
Partition
.Ql d
used to have a special meaning associated with it, although that is now gone
and
.Ql d
may work as any normal partition.
.El
.Pp
Disks in FreeBSD are divided into slices, referred to in Windows as partitions, which are numbered from 1 to 4.
These are then divided into partitions, which contain file systems, and are
labeled using letters.
.Pp
Slice numbers follow the device name, prefixed with an
.Ql s
, starting at 1.
So
.Do
da0s1
.Dc
is the first slice on the first SCSI drive.
There can only be four physical slices on a disk, but there can be logical
slices inside physical slices of the appropriate type.
These extended slices are numbered starting at 5, so
.Do
ada0s5
.Dc
is the first extended slice on the first SATA disk.
These devices are used by file systems that expect to occupy a slice.
.Pp
Slices,
.Do
dangerously dedicated
.Dc
physical drives, and other drives contain
.Ql partitions
, which are represented as letters from
.Ql a
to
.Ql h
.
This letter is appended to the device name, so
.Do
da0a
.Dc
is the
.Ql a
partition on the first
.Ql da
drive, which is
.Do
dangerously dedicated
.Dc
.
.Do
ada1s3e
.Dc
is the fifth partition in the third slice of the second SATA disk drive.
.Pp
Finally, each disk on the system is identified.
A disk name starts with a code that indicates the type of disk, and then a
number, indicating which disk it is.
Unlike slices, disk numbering starts at 0.
Common codes are listed in .
.Pp
When referring to a partition, include the disk name,
.Ql s
, the slice number, and then the partition letter.
Examples are shown in .
.Pp
shows a conceptual model of a disk layout.
.Pp
When installing FreeBSD, configure the disk slices, create partitions within
the slice to be used for FreeBSD, create a file system or swap space in each
partition, and decide where each file system will be mounted.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Drive Type
.Ta
Drive Device Name
.It
.Ta
SATA and IDE hard drives
.Ta
.Ql ada
or
.Ql ad
.It
.Ta
SCSI hard drives and USB storage devices
.Ta
.Ql da
.It
.Ta
SATA and IDE  CD-ROM drives
.Ta
.Ql cd
or
.Ql acd
.It
.Ta
SCSI  CD-ROM drives
.Ta
.Ql cd
.It
.Ta
Floppy drives
.Ta
.Ql fd
.It
.Ta
Assorted non-standard CD-ROM drives
.Ta
.Ql mcd
for Mitsumi CD-ROM and
.Ql scd
for Sony CD-ROM devices
.It
.Ta
SCSI tape drives
.Ta
.Ql sa
.It
.Ta
IDE tape drives
.Ta
.Ql ast
.It
.Ta
RAID drives
.Ta
Examples include
.Ql aacd
for Adaptec AdvancedRAID,
.Ql mlxd
and
.Ql mlyd
for Mylex,
.Ql amrd
for AMI MegaRAID,
.Ql idad
for Compaq Smart RAID,
.Ql twed
for 3ware RAID.
.El
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Name
.Ta
Meaning
.It
.Ta
.Ql ada0s1a
.Ta
The first partition (
.Ql a
) on the first slice (
.Ql s1
) on the first SATA disk (
.Ql ada0
).
.It
.Ta
.Ql da1s2e
.Ta
The fifth partition (
.Ql e
) on the second slice (
.Ql s2
) on the second SCSI disk (
.Ql da1
).
.El
.Pp
This diagram shows FreeBSD's view of the first SATA disk attached to the system.
Assume that the disk is 250 GB in size, and contains an 80 GB slice and a 170
GB slice (MS-DOS partitions).
The first slice contains a Windows  NTFS file system,
.Pa C:
, and the second slice contains a FreeBSD installation.
This example FreeBSD installation has four data partitions and a swap
partition.
.Pp
The four partitions each hold a file system.
Partition
.Ql a
is used for the root file system,
.Ql d
for
.Pa /var/
,
.Ql e
for
.Pa /tmp/
, and
.Ql f
for
.Pa /usr/
.
Partition letter
.Ql c
refers to the entire slice, and so is not used for ordinary partitions.
.Ss MOUNTING AND UNMOUNTING FILE SYSTEMS
.Pp
The file system is best visualized as a tree, rooted, as it were, at
.Pa /
.
.Pa /dev
,
.Pa /usr
, and the other directories in the root directory are branches, which may have
their own branches, such as
.Pa /usr/local
, and so on.
.Pp
There are various reasons to house some of these directories on separate file
systems.
.Pa /var
contains the directories
.Pa log/
,
.Pa spool/
, and various types of temporary files, and as such, may get filled up.
Filling up the root file system is not a good idea, so splitting
.Pa /var
from
.Pa /
is often favorable.
.Pp
Another common reason to contain certain directory trees on other file systems
is if they are to be housed on separate physical disks, or are separate virtual
disks, such as Network File System mounts, described in , or CDROM drives.
.Ss THE FSTAB FILE
.Pp
During the boot process (), file systems listed in
.Pa /etc/fstab
are automatically mounted except for the entries containing
.Ar noauto
.
This file contains entries in the following format:
.Bd -literal -offset indent
device       /mount-point fstype     options      dumpfreq     passno
.Ed
.Bl -tag -offset -compact
.It
.Ql device
An existing device name as explained in .
.It
.Ql mount-point
An existing directory on which to mount the file system.
.It
.Ql fstype
The file system type to pass to
.Xr mount 8 .
The default FreeBSD file system is
.Ql ufs
.
.It
.Ql options
Either
.Ar rw
for read-write file systems, or
.Ar ro
for read-only file systems, followed by any other options that may be needed.
A common option is
.Ar noauto
for file systems not normally mounted during the boot sequence.
Other options are listed in
.Xr mount 8 .
.It
.Ql dumpfreq
Used by
.Xr dump 8 to determine which file systems require dumping.
If the field is missing, a value of zero is assumed.
.It
.Ql passno
Determines the order in which file systems should be checked.
File systems that should be skipped should have their
.Ql passno
set to zero.
The root file system needs to be checked before everything else and should have
its
.Ql passno
set to one.
The other file systems should be set to values greater than one.
If more than one file system has the same
.Ql passno
,
.Xr fsck 8 will attempt to check file systems in parallel if possible.
.El
.Pp
Refer to
.Xr fstab 5 for more information on the format of
.Pa /etc/fstab
and its options.
.Ss USING MOUNT
.Pp
File systems are mounted using
.Xr mount 8 .
The most basic syntax is as follows:
.Bd -literal -offset indent
# mount device  mountpoint
.Ed
.Pp
This command provides many options which are described in
.Xr mount 8 , The most commonly used options include:
.Bl -tag -offset -compact
.Ss MOUNT OPTIONS
.It
.Ar -a
Mount all the file systems listed in
.Pa /etc/fstab
, except those marked as
.Do
noauto
.Dc
, excluded by the
.Ar -t
flag, or those that are already mounted.
.It
.Ar -d
Do everything except for the actual mount system call.
This option is useful in conjunction with the
.Ar -v
flag to determine what
.Xr mount 8 is actually trying to do.
.It
.Ar -f
Force the mount of an unclean file system (dangerous), or the revocation of
write access when downgrading a file system's mount status from read-write to
read-only.
.It
.Ar -r
Mount the file system read-only.
This is identical to using
.Ar -o ro
.
.It
.Ar -t
fstype
Mount the specified file system type or mount only file systems of the given
type, if
.Ar -a
is included.
.Do
ufs
.Dc
is the default file system type.
.It
.Ar -u
Update mount options on the file system.
.It
.Ar -v
Be verbose.
.It
.Ar -w
Mount the file system read-write.
.El
.Pp
The following options can be passed to
.Ar -o
as a comma-separated list:
.Bl -tag -offset -compact
.It nosuid
Do not interpret setuid or setgid flags on the file system.
This is also a useful security option.
.El
.Ss USING UMOUNT
.Pp
To unmount a file system use
.Xr umount 8 .
This command takes one parameter which can be a mountpoint, device name,
.Ar -a
or
.Ar -A
.
.Pp
All forms take
.Ar -f
to force unmounting, and
.Ar -v
for verbosity.
Be warned that
.Ar -f
is not generally a good idea as it might crash the computer or damage data on
the file system.
.Pp
To unmount all mounted file systems, or just the file system types listed after
.Ar -t
, use
.Ar -a
or
.Ar -A
.
Note that
.Ar -A
does not attempt to unmount the root file system.
.Ss PROCESSES AND DAEMONS
.Pp
FreeBSD is a multi-tasking operating system.
Each program running at any one time is called a
.Ql process
.
Every running command starts at least one new process and there are a number of
system processes that are run by FreeBSD.
.Pp
Each process is uniquely identified by a number called a
.Ql process ID
(PID).
Similar to files, each process has one owner and group, and the owner and group
permissions are used to determine which files and devices the process can open.
Most processes also have a parent process that started them.
For example, the shell is a process, and any command started in the shell is a
process which has the shell as its parent process.
The exception is a special process called
.Xr init 8 which is always the first process to start at boot time and which always has a PID of
.Ql 1
.
.Pp
Some programs are not designed to be run with continuous user input and
disconnect from the terminal at the first opportunity.
For example, a web server responds to web requests, rather than user input.
Mail servers are another example of this type of application.
These types of programs are known as
.Ql daemons
.
The term daemon comes from Greek mythology and represents an entity that is
neither good nor evil, and which invisibly performs useful tasks.
This is why the BSD mascot is the cheerful-looking daemon with sneakers and a
pitchfork.
.Pp
There is a convention to name programs that normally run as daemons with a
trailing
.Do
d
.Dc
.
For example, BIND is the Berkeley Internet Name Domain, but the actual program that executes is
.Cm named
.
The Apache web server program is
.Cm httpd
and the line printer spooling daemon is
.Cm lpd
.
This is only a naming convention.
For example, the main mail daemon for the Sendmail application is
.Cm sendmail
, and not
.Ql maild
.
.Ss VIEWING PROCESSES
.Pp
To see the processes running on the system, use
.Xr ps 1 or
.Xr top 1 .
To display a static list of the currently running processes, their PIDs, how much memory they are using, and the command they were started with, use
.Xr ps 1 .
To display all the running processes and update the display every few seconds
in order to interactively see what the computer is doing, use
.Xr top 1 .
.Pp
By default,
.Xr ps 1 only shows the commands that are running and owned by the user.
For example:
.Bd -literal -offset indent
% ps
 PID TT  STAT    TIME COMMAND
8203  0  Ss   0:00.59 /bin/csh
8895  0  R+   0:00.00 ps
.Ed
.Pp
The output from
.Xr ps 1 is organized into a number of columns.
The
.Ql PID
column displays the process ID.
 PIDs are assigned starting at 1, go up to 99999, then wrap around back to the
beginning.
However, a PID is not reassigned if it is already in use.
The
.Ql TT
column shows the tty the program is running on and
.Ql STAT
shows the program's state.
.Ql TIME
is the amount of time the program has been running on the CPU.
This is usually not the elapsed time since the program was started, as most
programs spend a lot of time waiting for things to happen before they need to
spend time on the CPU.
Finally,
.Ql COMMAND
is the command that was used to start the program.
.Pp
A number of different options are available to change the information that is
displayed.
One of the most useful sets is
.Ql auxww
, where
.Ar a
displays information about all the running processes of all users,
.Ar u
displays the username and memory usage of the process' owner,
.Ar x
displays information about daemon processes, and
.Ar ww
causes
.Xr ps 1 to display the full command line for each process, rather than truncating it
once it gets too long to fit on the screen.
.Pp
The output from
.Xr top 1 is similar:
.Bd -literal -offset indent
% top
last pid:  9609;  load averages:  0.56,  0.45,  0.36              up 0+00:20:03  10:21:46
107 processes: 2 running, 104 sleeping, 1 zombie
CPU:  6.2% user,  0.1% nice,  8.2% system,  0.4% interrupt, 85.1% idle
Mem: 541M Active, 450M Inact, 1333M Wired, 4064K Cache, 1498M Free
ARC: 992M Total, 377M MFU, 589M MRU, 250K Anon, 5280K Header, 21M Other
Swap: 2048M Total, 2048M Free

  PID USERNAME    THR PRI NICE   SIZE    RES STATE   C   TIME   WCPU COMMAND
  557 root          1 -21  r31   136M 42296K select  0   2:20  9.96% Xorg
 8198 dru           2  52    0   449M 82736K select  3   0:08  5.96% kdeinit4
 8311 dru          27  30    0  1150M   187M uwait   1   1:37  0.98% firefox
  431 root          1  20    0 14268K  1728K select  0   0:06  0.98% moused
 9551 dru           1  21    0 16600K  2660K CPU3    3   0:01  0.98% top
 2357 dru           4  37    0   718M   141M select  0   0:21  0.00% kdeinit4
 8705 dru           4  35    0   480M    98M select  2   0:20  0.00% kdeinit4
 8076 dru           6  20    0   552M   113M uwait   0   0:12  0.00% soffice.bin
 2623 root          1  30   10 12088K  1636K select  3   0:09  0.00% powerd
 2338 dru           1  20    0   440M 84532K select  1   0:06  0.00% kwin
 1427 dru           5  22    0   605M 86412K select  1   0:05  0.00% kdeinit4
.Ed
.Pp
The output is split into two sections.
The header (the first five or six lines) shows the PID of the last process to run, the system load averages (which are a measure of
how busy the system is), the system uptime (time since the last reboot) and the
current time.
The other figures in the header relate to how many processes are running, how
much memory and swap space has been used, and how much time the system is
spending in different CPU states.
If the ZFS file system module has been loaded, an
.Ql ARC
line indicates how much data was read from the memory cache instead of from
disk.
.Pp
Below the header is a series of columns containing similar information to the
output from
.Xr ps 1 , such as the PID, username, amount of CPU time, and the command that started the process.
By default,
.Xr top 1 also displays the amount of memory space taken by the process.
This is split into two columns: one for total size and one for resident size.
Total size is how much memory the application has needed and the resident size
is how much it is actually using now.
.Pp
.Xr top 1 automatically updates the display every two seconds.
A different interval can be specified with
.Ar -s
.
.Ss KILLING PROCESSES
.Pp
One way to communicate with any running process or daemon is to send a
.Ql signal
using
.Xr kill 1 .
There are a number of different signals; some have a specific meaning while
others are described in the application's documentation.
A user can only send a signal to a process they own and sending a signal to
someone else's process will result in a permission denied error.
The exception is the
.Ql root
user, who can send signals to anyone's processes.
.Pp
The operating system can also send a signal to a process.
If an application is badly written and tries to access memory that it is not
supposed to, FreeBSD will send the process the
.Do
Segmentation Violation
.Dc
signal (
.Ql SIGSEGV
).
If an application has been written to use the
.Xr alarm 3 system call to be alerted after a period of time has elapsed, it will be sent
the
.Do
Alarm
.Dc
signal (
.Ql SIGALRM
).
.Pp
Two signals can be used to stop a process:
.Ql SIGTERM
and
.Ql SIGKILL
.
.Ql SIGTERM
is the polite way to kill a process as the process can read the signal, close
any log files it may have open, and attempt to finish what it is doing before
shutting down.
In some cases, a process may ignore
.Ql SIGTERM
if it is in the middle of some task that cannot be interrupted.
.Pp
.Ql SIGKILL
cannot be ignored by a process.
Sending a
.Ql SIGKILL
to a process will usually stop that process there and then.
.Pp
There are a few tasks that cannot be interrupted.
For example, if the process is trying to read from a file that is on another
computer on the network, and the other computer is unavailable, the process is
said to be
.Do
uninterruptible
.Dc
.
Eventually the process will time out, typically after two minutes.
As soon as this time out occurs the process will be killed.
.
.Pp
Other commonly used signals are
.Ql SIGHUP
,
.Ql SIGUSR1
, and
.Ql SIGUSR2
.
Since these are general purpose signals, different applications will respond
differently.
.Pp
For example, after changing a web server's configuration file, the web server
needs to be told to re-read its configuration.
Restarting
.Cm httpd
would result in a brief outage period on the web server.
Instead, send the daemon the
.Ql SIGHUP
signal.
Be aware that different daemons will have different behavior, so refer to the
documentation for the daemon to determine if
.Ql SIGHUP
will achieve the desired results.
.Ss SENDING A SIGNAL TO A PROCESS
.Pp
This example shows how to send a signal to
.Xr inetd 8 .
The
.Xr inetd 8 configuration file is
.Pa /etc/inetd.conf
, and
.Xr inetd 8 will re-read this configuration file when it is sent a
.Ql SIGHUP
.
.Pp
Find the PID of the process to send the signal to using
.Xr pgrep 1 .
In this example, the PID for
.Xr inetd 8 is 198:
.Bd -literal -offset indent
% pgrep -l inetd
198  inetd -wW
.Ed
.Pp
Use
.Xr kill 1 to send the signal.
Because
.Xr inetd 8 is owned by
.Ql root
, use
.Xr su 1 to become
.Ql root
first.
.Bd -literal -offset indent
% su
Password:
# /bin/kill -s HUP 198
.Ed
.Pp
Like most UNIX commands,
.Xr kill 1 will not print any output if it is successful.
If a signal is sent to a process not owned by that user, the message
.Er kill: PID: Operation not permitted
will be displayed.
Mistyping the PID will either send the signal to the wrong process, which could have negative
results, or will send the signal to a PID that is not currently in use, resulting in the error
.Er kill: PID: No such process
.
.Ss WHY USE /BIN/KILL ?
.Pp
Many shells provide
.Cm kill
as a built in command, meaning that the shell will send the signal directly,
rather than running
.Pa /bin/kill
.
Be aware that different shells have a different syntax for specifying the name
of the signal to send.
Rather than try to learn all of them, it can be simpler to specify
.Cm /bin/kill
.
.Pp
When sending other signals, substitute
.Ql TERM
or
.Ql KILL
with the name of the signal.
.Pp
Killing a random process on the system is a bad idea.
In particular,
.Xr init 8 , PID 1, is special.
Running
.Cm /bin/kill -s KILL 1
is a quick, and unrecommended, way to shutdown the system.
 Always double check the arguments to
.Xr kill 1 before pressing Return.
.Ss SHELLS
.Pp
A
.Ql shell
provides a command line interface for interacting with the operating system.
A shell receives commands from the input channel and executes them.
Many shells provide built in functions to help with everyday tasks such as file
management, file globbing, command line editing, command macros, and
environment variables.
FreeBSD comes with several shells, including the Bourne shell (
.Xr sh 1 ) and the extended C shell (
.Xr tcsh 1 ).
Other shells are available from the FreeBSD Ports Collection, such as
.Cm zsh
and
.Cm bash
.
.Pp
The shell that is used is really a matter of taste.
A C programmer might feel more comfortable with a C-like shell such as
.Xr tcsh 1 .
A Linux user might prefer
.Cm bash
.
Each shell has unique properties that may or may not work with a user's
preferred working environment, which is why there is a choice of which shell to
use.
.Pp
One common shell feature is filename completion.
After a user types the first few letters of a command or filename and presses Tab, the shell completes the rest of the command or filename.
Consider two files called
.Pa foobar
and
.Pa football
.
To delete
.Pa foobar
, the user might type
.Cm rm foo
and press Tab to complete the filename.
.Pp
But the shell only shows
.Cm rm foo
.
It was unable to complete the filename because both
.Pa foobar
and
.Pa football
start with
.Ql foo
.
Some shells sound a beep or show all the choices if more than one name matches.
The user must then type more characters to identify the desired filename.
Typing a
.Ql t
and pressing Tab again is enough to let the shell determine which filename is desired and fill
in the rest.
.Pp
Another feature of the shell is the use of environment variables.
Environment variables are a variable/key pair stored in the shell's
environment.
This environment can be read by any program invoked by the shell, and thus
contains a lot of program configuration.
 provides a list of common environment variables and their meanings.
Note that the names of environment variables are always in uppercase.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Variable
.Ta
Description
.It
.Ta
.Ev USER
.Ta
Current logged in user's name.
.It
.Ta
.Ev PATH
.Ta
Colon-separated list of directories to search for binaries.
.It
.Ta
.Ev DISPLAY
.Ta
Network name of the Xorg display to connect to, if available.
.It
.Ta
.Ev SHELL
.Ta
The current shell.
.It
.Ta
.Ev TERM
.Ta
The name of the user's type of terminal.
Used to determine the capabilities of the terminal.
.It
.Ta
.Ev TERMCAP
.Ta
Database entry of the terminal escape codes to perform various terminal
functions.
.It
.Ta
.Ev OSTYPE
.Ta
Type of operating system.
.It
.Ta
.Ev MACHTYPE
.Ta
The system's CPU architecture.
.It
.Ta
.Ev EDITOR
.Ta
The user's preferred text editor.
.It
.Ta
.Ev PAGER
.Ta
The user's preferred utility for viewing text one page at a time.
.It
.Ta
.Ev MANPATH
.Ta
Colon-separated list of directories to search for manual pages.
.El
.Pp
How to set an environment variable differs between shells.
In
.Xr tcsh 1 and
.Xr csh 1 , use
.Cm setenv
to set environment variables.
In
.Xr sh 1 and
.Cm bash
, use
.Cm export
to set the current environment variables.
This example sets the default
.Ev EDITOR
to
.Pa /usr/local/bin/emacs
for the
.Xr tcsh 1 shell:
.Bd -literal -offset indent
% setenv EDITOR /usr/local/bin/emacs
.Ed
.Pp
The equivalent command for
.Cm bash
would be:
.Bd -literal -offset indent
% export EDITOR="/usr/local/bin/emacs"
.Ed
.Pp
To expand an environment variable in order to see its current setting, type a
.Ql $
character in front of its name on the command line.
For example,
.Cm echo $TERM
displays the current
.Ev $TERM
setting.
.Pp
Shells treat special characters, known as meta-characters, as special
representations of data.
The most common meta-character is
.Ql *
, which represents any number of characters in a filename.
Meta-characters can be used to perform filename globbing.
For example,
.Cm echo *
is equivalent to
.Cm ls
because the shell takes all the files that match
.Ql *
and
.Cm echo
lists them on the command line.
.Pp
To prevent the shell from interpreting a special character, escape it from the
shell by starting it with a backslash (
.Ql \
).
For example,
.Cm echo $TERM
prints the terminal setting whereas
.Cm echo \$TERM
literally prints the string
.Ql $TERM
.
.Ss CHANGING THE SHELL
.Pp
The easiest way to permanently change the default shell is to use
.Cm chsh
.
Running this command will open the editor that is configured in the
.Ev EDITOR
environment variable, which by default is set to
.Xr vi 1 .
Change the
.Ql Shell:
line to the full path of the new shell.
.Pp
Alternately, use
.Cm chsh -s
which will set the specified shell without opening an editor.
For example, to change the shell to
.Cm bash
:
.Bd -literal -offset indent
% chsh -s /usr/local/bin/bash
.Ed
.Pp
The new shell must be present in
.Pa /etc/shells
.
If the shell was installed from the FreeBSD Ports Collection as described in , it should be automatically added to this file.
If it is missing, add it using this command, replacing the path with the path
of the shell:
.Bd -literal -offset indent
# echo /usr/local/bin/bash >> /etc/shells
.Ed
.Pp
Then, rerun
.Xr chsh 1 .
.Pp
The UNIX shell is not just a command interpreter, it acts as a powerful tool which
allows users to execute commands, redirect their output, redirect their input
and chain commands together to improve the final command output.
When this functionality is mixed with built in commands, the user is provided
with an environment that can maximize efficiency.
.Pp
Shell redirection is the action of sending the output or the input of a command
into another command or into a file.
To capture the output of the
.Xr ls 1 command, for example, into a file, redirect the output:
.Bd -literal -offset indent
% ls > directory_listing.txt
.Ed
.Pp
The directory contents will now be listed in
.Pa directory_listing.txt
.
Some commands can be used to read input, such as
.Xr sort 1 .
To sort this listing, redirect the input:
.Bd -literal -offset indent
% sort < directory_listing.txt
.Ed
.Pp
The input will be sorted and placed on the screen.
To redirect that input into another file, one could redirect the output of
.Xr sort 1 by mixing the direction:
.Bd -literal -offset indent
% sort < directory_listing.txt > sorted.txt
.Ed
.Pp
In all of the previous examples, the commands are performing redirection using
file descriptors.
Every UNIX system has file descriptors, which include standard input (stdin), standard
output (stdout), and standard error (stderr).
Each one has a purpose, where input could be a keyboard or a mouse, something
that provides input.
Output could be a screen or paper in a printer.
And error would be anything that is used for diagnostic or error messages.
All three are considered I/O based file descriptors and sometimes considered streams.
.Pp
Through the use of these descriptors, the shell allows output and input to be
passed around through various commands and redirected to or from a file.
Another method of redirection is the pipe operator.
.Pp
The UNIX pipe operator,
.Do
|
.Dc
allows the output of one command to be directly passed or directed to another
program.
Basically, a pipe allows the standard output of a command to be passed as
standard input to another command, for example:
.Bd -literal -offset indent
% cat directory_listing.txt | sort | less
.Ed
.Pp
In that example, the contents of
.Pa directory_listing.txt
will be sorted and the output passed to
.Xr less 1 .
This allows the user to scroll through the output at their own pace and prevent
it from scrolling off the screen.
.Ss TEXT EDITORS
.Pp
Most FreeBSD configuration is done by editing text files.
Because of this, it is a good idea to become familiar with a text editor.
FreeBSD comes with a few as part of the base system, and many more are
available in the Ports Collection.
.Pp
A simple editor to learn is
.Xr ee 1 , which stands for easy editor.
To start this editor, type
.Cm ee filename
where filename is the name of the file to be edited.
Once inside the editor, all of the commands for manipulating the editor's
functions are listed at the top of the display.
The caret (
.Ql ^
) represents Ctrl, so
.Ql ^e
expands to Ctrle.
To leave
.Xr ee 1 , press Esc, then choose the
.Do
leave editor
.Dc
option from the main menu.
The editor will prompt to save any changes if the file has been modified.
.Pp
FreeBSD also comes with more powerful text editors, such as
.Xr vi 1 , as part of the base system.
Other editors, like
.Ql editors/emacs
and
.Ql editors/vim
, are part of the FreeBSD Ports Collection.
These editors offer more functionality at the expense of being more complicated
to learn.
Learning a more powerful editor such as vim or Emacs can save more time in the long run.
.Pp
Many applications which modify files or require typed input will automatically
open a text editor.
To change the default editor, set the
.Ev EDITOR
environment variable as described in .
.Ss DEVICES AND DEVICE NODES
.Pp
A device is a term used mostly for hardware-related activities in a system,
including disks, printers, graphics cards, and keyboards.
When FreeBSD boots, the majority of the boot messages refer to devices being
detected.
A copy of the boot messages are saved to
.Pa /var/run/dmesg.boot
.
.Pp
Each device has a device name and number.
For example,
.Pa ada0
is the first SATA hard drive, while
.Pa kbd0
represents the keyboard.
.Pp
Most devices in FreeBSD must be accessed through special files called device
nodes, which are located in
.Pa /dev
.
.Ss MANUAL PAGES
.Pp
The most comprehensive documentation on FreeBSD is in the form of manual pages.
Nearly every program on the system comes with a short reference manual
explaining the basic operation and available arguments.
These manuals can be viewed using
.Cm man
:
.Bd -literal -offset indent
% man command
.Ed
.Pp
where command is the name of the command to learn about.
For example, to learn more about
.Xr ls 1 , type:
.Bd -literal -offset indent
% man ls
.Ed
.Pp
Manual pages are divided into sections which represent the type of topic.
In FreeBSD, the following sections are available:
.Bl -enum -offset -compact
.It
User commands.
.It
System calls and error numbers.
.It
Functions in the C libraries.
.It
Device drivers.
.It
File formats.
.It
Games and other diversions.
.It
Miscellaneous information.
.It
System maintenance and operation commands.
.It
System kernel interfaces.
.El
.Pp
In some cases, the same topic may appear in more than one section of the online
manual.
For example, there is a
.Cm chmod
user command and a
.Fn chmod
system call.
To tell
.Xr man 1 which section to display, specify the section number:
.Bd -literal -offset indent
% man 1 chmod
.Ed
.Pp
This will display the manual page for the user command
.Xr chmod 1 .
References to a particular section of the online manual are traditionally
placed in parenthesis in written documentation, so
.Xr chmod 1 refers to the user command and
.Xr chmod 2 refers to the system call.
.Pp
If the name of the manual page is unknown, use
.Cm man -k
to search for keywords in the manual page descriptions:
.Bd -literal -offset indent
% man -k mail
.Ed
.Pp
This command displays a list of commands that have the keyword
.Do
mail
.Dc
in their descriptions.
This is equivalent to using
.Xr apropos 1 .
.Pp
To read the descriptions for all of the commands in
.Pa /usr/bin
, type:
.Bd -literal -offset indent
% cd /usr/bin
% man -f * | more
.Ed
.Pp
or
.Bd -literal -offset indent
% cd /usr/bin
% whatis * |more
.Ed
.Ss GNU INFO FILES
.Pp
FreeBSD includes several applications and utilities produced by the Free
Software Foundation (FSF).
In addition to manual pages, these programs may include hypertext documents
called
.Ql info
files.
These can be viewed using
.Xr info 1 or, if
.Ql editors/emacs
is installed, the info mode of emacs.
.Pp
To use
.Xr info 1 , type:
.Bd -literal -offset indent
% info
.Ed
.Pp
For a brief introduction, type
.Ql h
.
For a quick command reference, type
.Ql ?
.
.Sh INSTALLING APPLICATIONS: PACKAGES AND PORTS
.Ss SYNOPSIS
.Pp
FreeBSD is bundled with a rich collection of system tools as part of the base
system.
In addition, FreeBSD provides two complementary technologies for installing
third-party software: the FreeBSD Ports Collection, for installing from source,
and packages, for installing from pre-built binaries.
Either method may be used to install software from local media or from the
network.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
The difference between binary packages and ports.
.It
How to find third-party software that has been ported to FreeBSD.
.It
How to manage binary packages using pkg.
.It
How to build third-party software from source using the Ports Collection.
.It
How to find the files installed with the application for post-installation
configuration.
.It
What to do if a software installation fails.
.El
.Ss OVERVIEW OF SOFTWARE INSTALLATION
.Pp
The typical steps for installing third-party software on a UNIX system include:
.Pp
Find and download the software, which might be distributed in source code
format or as a binary.
.Pp
Unpack the software from its distribution format.
This is typically a tarball compressed with a program such as
.Xr compress 1 ,
.Xr gzip 1 ,
.Xr bzip2 1 or
.Xr xz 1 .
.Pp
Locate the documentation in
.Pa INSTALL
,
.Pa README
or some file in a
.Pa doc/
subdirectory and read up on how to install the software.
.Pp
If the software was distributed in source format, compile it.
This may involve editing a
.Pa Makefile
or running a
.Cm configure
script.
.Pp
Test and install the software.
.Pp
A FreeBSD port is a collection of files designed to automate the process of compiling an
application from source code.
The files that comprise a port contain all the necessary information to
automatically download, extract, patch, compile, and install the application.
.Pp
If the software has not already been adapted and tested on FreeBSD, the source
code might need editing in order for it to install and run properly.
.Pp
However, over 24,000 third-party applications have already been ported to FreeBSD.
When feasible, these applications are made available for download as
pre-compiled packages.
.Pp
Packages can be manipulated with the FreeBSD package management commands.
.Pp
Both packages and ports understand dependencies.
If a package or port is used to install an application and a dependent library
is not already installed, the library will automatically be installed first.
.Pp
A FreeBSD package contains pre-compiled copies of all the commands for an
application, as well as any configuration files and documentation.
A package can be manipulated with the
.Xr pkg 8 commands, such as
.Cm pkg install
.
.Pp
While the two technologies are similar, packages and ports each have their own
strengths.
Select the technology that meets your requirements for installing a particular
application.
.Bl -bullet -offset -compact
.Ss PACKAGE BENEFITS
.It
A compressed package tarball is typically smaller than the compressed tarball
containing the source code for the application.
.It
Packages do not require compilation time.
For large applications, such as Mozilla, KDE, or GNOME, this can be important on a slow system.
.It
Packages do not require any understanding of the process involved in compiling
software on FreeBSD.
.El
.Bl -bullet -offset -compact
.Ss PORT BENEFITS
.It
Packages are normally compiled with conservative options because they have to
run on the maximum number of systems.
By compiling from the port, one can change the compilation options.
.It
Some applications have compile-time options relating to which features are
installed.
For example, Apache can be configured with a wide variety of different built-in options.
In some cases, multiple packages will exist for the same application to specify
certain settings.
For example, Ghostscript is available as a
.Pa ghostscript
package and a
.Pa ghostscript-nox11
package, depending on whether or not Xorg is installed.
Creating multiple packages rapidly becomes impossible if an application has
more than one or two different compile-time options.
.It
The licensing conditions of some software forbid binary distribution.
Such software must be distributed as source code which must be compiled by the
end-user.
.It
Some people do not trust binary distributions or prefer to read through source
code in order to look for potential problems.
.It
Source code is needed in order to apply custom patches.
.El
.Pp
To keep track of updated ports, subscribe to the FreeBSD ports mailing list and the FreeBSD ports bugs mailing list.
.Pp
Before installing any application, check https://vuxml.freebsd.org/ for security issues related to the application or type
.Cm pkg audit -F
to check all installed applications for known vulnerabilities.
.Pp
The remainder of this chapter explains how to use packages and ports to install
and manage third-party software on FreeBSD.
.Ss FINDING SOFTWARE
.Pp
FreeBSD's list of available applications is growing all the time.
There are a number of ways to find software to install:
.Bl -bullet -offset -compact
.It
The FreeBSD web site maintains an up-to-date searchable list of all the
available applications, at https://www.FreeBSD.org/ports/.
The ports can be searched by application name or by software category.
.It
Dan Langille maintains FreshPorts.org which provides a comprehensive search utility and also tracks changes to the
applications in the Ports Collection.
Registered users can create a customized watch list in order to receive an
automated email when their watched ports are updated.
.It
If finding a particular application becomes challenging, try searching a site
like SourceForge.net or GitHub.com then check back at the FreeBSD site to see if the application has been ported.
.It
To search the binary package repository for an application:
.Bd -literal -offset indent
# pkg search subversion
git-subversion-1.9.2
java-subversion-1.8.8_2
p5-subversion-1.8.8_2
py27-hgsubversion-1.6
py27-subversion-1.8.8_2
ruby-subversion-1.8.8_2
subversion-1.8.8_2
subversion-book-4515
subversion-static-1.8.8_2
subversion16-1.6.23_4
subversion17-1.7.16_2
.Ed
Package names include the version number and, in the case of ports based on
python, the version number of the version of python the package was built with.
Some ports also have multiple versions available.
In the case of Subversion, there are different versions available, as well as different compile options.
In this case, the statically linked version of Subversion.
When indicating which package to install, it is best to specify the application
by the port origin, which is the path in the ports tree.
Repeat the
.Cm pkg search
with
.Ar -o
to list the origin of each package:
.Bd -literal -offset indent
# pkg search -o subversion
devel/git-subversion
java/java-subversion
devel/p5-subversion
devel/py-hgsubversion
devel/py-subversion
devel/ruby-subversion
devel/subversion16
devel/subversion17
devel/subversion
devel/subversion-book
devel/subversion-static
.Ed
Searching by shell globs, regular expressions, exact match, by description, or
any other field in the repository database is also supported by
.Cm pkg search
.
After installing
.Ql ports-mgmt/pkg
or
.Ql ports-mgmt/pkg-devel
, see
.Xr pkg-search 8 for more details.
.It
If the Ports Collection is already installed, there are several methods to
query the local version of the ports tree.
To find out which category a port is in, type
.Cm whereis file
, where file is the program to be installed:
.Bd -literal -offset indent
# whereis lsof
lsof: /usr/ports/sysutils/lsof
.Ed
Alternately, an
.Xr echo 1 statement can be used:
.Bd -literal -offset indent
# echo /usr/ports/*/*lsof*
/usr/ports/sysutils/lsof
.Ed
Note that this will also return any matched files downloaded into the
.Pa /usr/ports/distfiles
directory.
.It
Another way to find software is by using the Ports Collection's built-in search
mechanism.
To use the search feature, cd to
.Pa /usr/ports
then run
.Cm make search name=program-name
where program-name is the name of the software.
For example, to search for
.Cm lsof
:
.Bd -literal -offset indent
# cd /usr/ports
# make search name=lsof
Port:   lsof-4.88.d,8
Path:   /usr/ports/sysutils/lsof
Info:   Lists information about open files (similar to fstat(1))
Maint:  ler@lerctr.org
Index:  sysutils
B-deps:
R-deps:
.Ed
The built-in search mechanism uses a file of index information.
If a message indicates that the
.Pa INDEX
is required, run
.Cm make fetchindex
to download the current index file.
With the
.Pa INDEX
present,
.Cm make search
will be able to perform the requested search.
The
.Do
Path:
.Dc
line indicates where to find the port.
To receive less information, use the
.Cm quicksearch
feature:
.Bd -literal -offset indent
# cd /usr/ports
# make quicksearch name=lsof
Port:   lsof-4.88.d,8
Path:   /usr/ports/sysutils/lsof
Info:   Lists information about open files (similar to fstat(1))
.Ed
For more in-depth searching, use
.Cm make search key=string
or
.Cm make quicksearch key=string
, where string is some text to search for.
The text can be in comments, descriptions, or dependencies in order to find
ports which relate to a particular subject when the name of the program is
unknown.
When using
.Ql search
or
.Ql quicksearch
, the search string is case-insensitive.
Searching for
.Do
LSOF
.Dc
will yield the same results as searching for
.Do
lsof
.Dc
.
.El
.Ss USING PKG FOR BINARY PACKAGE MANAGEMENT
.Pp
pkg is the next generation replacement for the traditional FreeBSD package
management tools, offering many features that make dealing with binary packages
faster and easier.
.Pp
For sites wishing to only use prebuilt binary packages from the FreeBSD
mirrors, managing packages with pkg can be sufficient.
.Pp
However, for those sites building from source or using their own repositories,
a separate port management tool will be needed.
.Pp
Since pkg only works with binary packages, it is not a replacement for such tools.
Those tools can be used to install software from both binary packages and the
Ports Collection, while pkg installs only binary packages.
.Ss GETTING STARTED WITH PKG
.Pp
FreeBSD includes a bootstrap utility which can be used to download and install pkg and its manual pages.
This utility is designed to work with versions of FreeBSD starting with 10.
X.
.Pp
Not all FreeBSD versions and architectures support this bootstrap process.
The current list is at https://pkg.freebsd.org/.
For other cases, pkg must instead be installed from the Ports Collection or as a binary package.
.Pp
To bootstrap the system, run:
.Bd -literal -offset indent
# /usr/sbin/pkg
.Ed
.Pp
You must have a working Internet connection for the bootstrap process to
succeed.
.Pp
Otherwise, to install the port, run:
.Bd -literal -offset indent
# cd /usr/ports/ports-mgmt/pkg
# make
# make install clean
.Ed
.Pp
When upgrading an existing system that originally used the older pkg_* tools,
the database must be converted to the new format, so that the new tools are
aware of the already installed packages.
Once pkg has been installed, the package database must be converted from the traditional
format to the new format by running this command:
.Bd -literal -offset indent
# pkg2ng
.Ed
.Pp
This step is not required for new installations that do not yet have any
third-party software installed.
.Pp
This step is not reversible.
Once the package database has been converted to the pkg format, the traditional
.Ql pkg_*
tools should no longer be used.
.Pp
The package database conversion may emit errors as the contents are converted
to the new version.
Generally, these errors can be safely ignored.
However, a list of software that was not successfully converted is shown after
.Cm pkg2ng
finishes.
These applications must be manually reinstalled.
.Pp
To ensure that the Ports Collection registers new software with pkg instead of the traditional packages database, FreeBSD versions earlier than 10.
X require this line in
.Pa /etc/make.conf
:
.Bd -literal -offset indent
WITH_PKGNG=	yes
.Ed
.Pp
By default, pkg uses the binary packages from the FreeBSD package mirrors (the repository).
For information about building a custom package repository, see .
.Pp
Additional pkg configuration options are described in
.Xr pkg.conf 5 .
.Pp
Usage information for pkg is available in the
.Xr pkg 8 manual page or by running
.Cm pkg
without additional arguments.
.Pp
Each pkg command argument is documented in a command-specific manual page.
To read the manual page for
.Cm pkg install
, for example, run either of these commands:
.Bd -literal -offset indent
# pkg help install
.Ed
.Bd -literal -offset indent
# man pkg-install
.Ed
.Pp
The rest of this section demonstrates common binary package management tasks
which can be performed using pkg.
Each demonstrated command provides many switches to customize its use.
Refer to a command's help or man page for details and more examples.
.Ss OBTAINING INFORMATION ABOUT INSTALLED PACKAGES
.Pp
Information about the packages installed on a system can be viewed by running
.Cm pkg info
which, when run without any switches, will list the package version for either
all installed packages or the specified package.
.Pp
For example, to see which version of pkg is installed, run:
.Bd -literal -offset indent
# pkg info pkg
pkg-1.1.4_1
.Ed
.Ss INSTALLING AND REMOVING PACKAGES
.Pp
To install a binary package use the following command, where packagename is the name of the package to install:
.Bd -literal -offset indent
# pkg install packagename
.Ed
.Pp
This command uses repository data to determine which version of the software to
install and if it has any uninstalled dependencies.
For example, to install curl:
.Bd -literal -offset indent
# pkg install curl
Updating repository catalogue
/usr/local/tmp/All/curl-7.31.0_1.txz          100% of 1181 kB 1380 kBps 00m01s

/usr/local/tmp/All/ca_root_nss-3.15.1_1.txz   100% of  288 kB 1700 kBps 00m00s

Updating repository catalogue
The following 2 packages will be installed:

        Installing ca_root_nss: 3.15.1_1
        Installing curl: 7.31.0_1

The installation will require 3 MB more space

0 B to be downloaded

Proceed with installing packages [y/N]: y
Checking integrity... done
[1/2] Installing ca_root_nss-3.15.1_1... done
[2/2] Installing curl-7.31.0_1... done
Cleaning up cache files...Done
.Ed
.Pp
The new package and any additional packages that were installed as dependencies
can be seen in the installed packages list:
.Bd -literal -offset indent
# pkg info
ca_root_nss-3.15.1_1	The root certificate bundle from the Mozilla Project
curl-7.31.0_1	Non-interactive tool to get files from FTP, GOPHER, HTTP(S) servers
pkg-1.1.4_6	New generation package manager
.Ed
.Pp
Packages that are no longer needed can be removed with
.Cm pkg delete
.
For example:
.Bd -literal -offset indent
# pkg delete curl
The following packages will be deleted:

	curl-7.31.0_1

The deletion will free 3 MB

Proceed with deleting packages [y/N]: y
[1/1] Deleting curl-7.31.0_1... done
.Ed
.Ss UPGRADING INSTALLED PACKAGES
.Pp
Installed packages can be upgraded to their latest versions by running:
.Bd -literal -offset indent
# pkg upgrade
.Ed
.Pp
This command will compare the installed versions with those available in the
repository catalogue and upgrade them from the repository.
.Ss AUDITING INSTALLED PACKAGES
.Pp
Software vulnerabilities are regularly discovered in third-party applications.
To address this, pkg includes a built-in auditing mechanism.
To determine if there are any known vulnerabilities for the software installed
on the system, run:
.Bd -literal -offset indent
# pkg audit -F
.Ed
.Ss AUTOMATICALLY REMOVING LEAF DEPENDENCIES
.Pp
Removing a package may leave behind dependencies which are no longer required.
Unneeded packages that were installed as dependencies can be automatically
detected and removed using:
.Bd -literal -offset indent
# pkg autoremove
Packages to be autoremoved:
	ca_root_nss-3.15.1_1

The autoremoval will free 723 kB

Proceed with autoremoval of packages [y/N]: y
Deinstalling ca_root_nss-3.15.1_1... done
.Ed
.Ss RESTORING THE PACKAGE DATABASE
.Pp
Unlike the traditional package management system, pkg includes its own package database backup mechanism.
This functionality is enabled by default.
.Pp
To disable the periodic script from backing up the package database, set
.Ql daily_backup_pkgdb_enable="NO"
in
.Xr periodic.conf 5 .
.Pp
To restore the contents of a previous package database backup, run the
following command replacing /path/to/pkg.sql with the location of the backup:
.Bd -literal -offset indent
# pkg backup -r /path/to/pkg.sql
.Ed
.Pp
If restoring a backup taken by the periodic script, it must be decompressed
prior to being restored.
.Pp
To run a manual backup of the pkg database, run the following command, replacing /path/to/pkg.sql with a suitable file name and location:
.Bd -literal -offset indent
# pkg backup -d /path/to/pkg.sql
.Ed
.Ss REMOVING STALE PACKAGES
.Pp
By default, pkg stores binary packages in a cache directory defined by
.Ev PKG_CACHEDIR
in
.Xr pkg.conf 5 .
Only copies of the latest installed packages are kept.
Older versions of pkg kept all previous packages.
To remove these outdated binary packages, run:
.Bd -literal -offset indent
# pkg clean
.Ed
.Pp
The entire cache may be cleared by running:
.Bd -literal -offset indent
# pkg clean -a
.Ed
.Ss MODIFYING PACKAGE METADATA
.Pp
Software within the FreeBSD Ports Collection can undergo major version number
changes.
To address this, pkg has a built-in command to update package origins.
This can be useful, for example, if
.Ql lang/php5
is renamed to
.Ql lang/php53
so that
.Ql lang/php5
can now represent version
.Ql 5.4
.
.Pp
To change the package origin for the above example, run:
.Bd -literal -offset indent
# pkg set -o lang/php5:lang/php53
.Ed
.Pp
As another example, to update
.Ql lang/ruby18
to
.Ql lang/ruby19
, run:
.Bd -literal -offset indent
# pkg set -o lang/ruby18:lang/ruby19
.Ed
.Pp
As a final example, to change the origin of the
.Pa libglut
shared libraries from
.Ql graphics/libglut
to
.Ql graphics/freeglut
, run:
.Bd -literal -offset indent
# pkg set -o graphics/libglut:graphics/freeglut
.Ed
.Pp
When changing package origins, it is important to reinstall packages that are
dependent on the package with the modified origin.
To force a reinstallation of dependent packages, run:
.Bd -literal -offset indent
# pkg install -Rf graphics/freeglut
.Ed
.Ss USING THE PORTS COLLECTION
.Pp
The Ports Collection is a set of
.Pa Makefiles
, patches, and description files.
Each set of these files is used to compile and install an individual
application on FreeBSD, and is called a port.
.Pp
By default, the Ports Collection itself is stored as a subdirectory of
.Pa /usr/ports
.
.Pp
Before an application can be compiled using a port, the Ports Collection must
first be installed.
If it was not installed during the installation of FreeBSD, use one of the
following methods to install it:
.Ss PORTSNAP METHOD
.Pp
The base system of FreeBSD includes Portsnap.
This is a fast and user-friendly tool for retrieving the Ports Collection and
is the recommended choice for most users.
This utility connects to a FreeBSD site, verifies the secure key, and downloads
a new copy of the Ports Collection.
The key is used to verify the integrity of all downloaded files.
.Pp
To download a compressed snapshot of the Ports Collection into
.Pa /var/db/portsnap
:
.Bd -literal -offset indent
# portsnap fetch
.Ed
.Pp
When running Portsnap for the first time, extract the snapshot into
.Pa /usr/ports
:
.Bd -literal -offset indent
# portsnap extract
.Ed
.Pp
After the first use of Portsnap has been completed as shown above,
.Pa /usr/ports
can be updated as needed by running:
.Bd -literal -offset indent
# portsnap fetch
# portsnap update
.Ed
.Pp
When using
.Ql fetch
, the
.Ql extract
or the
.Ql update
operation may be run consecutively, like so:
.Bd -literal -offset indent
# portsnap fetch update
.Ed
.Ss SUBVERSION METHOD
.Pp
If more control over the ports tree is needed or if local changes need to be
maintained, Subversion can be used to obtain the Ports Collection.
Refer to the Subversion Primer for a detailed description of Subversion.
.Pp
Subversion must be installed before it can be used to check out the ports tree.
If a copy of the ports tree is already present, install Subversion like this:
.Bd -literal -offset indent
# cd /usr/ports/devel/subversion
# make install clean
.Ed
.Pp
If the ports tree is not available, or pkg is being used to manage packages, Subversion can be installed as a package:
.Bd -literal -offset indent
# pkg install subversion
.Ed
.Pp
Check out a copy of the ports tree:
.Bd -literal -offset indent
# svn checkout https://svn.FreeBSD.org/ports/head /usr/ports
.Ed
.Pp
As needed, update
.Pa /usr/ports
after the initial Subversion checkout:
.Bd -literal -offset indent
# svn update /usr/ports
.Ed
.Pp
The Ports Collection contains directories for software categories.
Inside each category are subdirectories for individual applications.
Each application subdirectory contains a set of files that tells FreeBSD how to
compile and install that program, called a ports skeleton.
Each port skeleton includes these files and directories:
.Bl -bullet -offset -compact
.It
.Pa Makefile
: contains statements that specify how the application should be compiled and
where its components should be installed.
.It
.Pa distinfo
: contains the names and checksums of the files that must be downloaded to
build the port.
.It
.Pa files/
: this directory contains any patches needed for the program to compile and
install on FreeBSD.
This directory may also contain other files used to build the port.
.It
.Pa pkg-descr
: provides a more detailed description of the program.
.It
.Pa pkg-plist
: a list of all the files that will be installed by the port.
It also tells the ports system which files to remove upon deinstallation.
.El
.Pp
Some ports include
.Pa pkg-message
or other files to handle special situations.
For more details on these files, and on ports in general, refer to the FreeBSD Porter's Handbook.
.Pp
The port does not include the actual source code, also known as a
.Pa distfile
.
The extract portion of building a port will automatically save the downloaded
source to
.Pa /usr/ports/distfiles
.
.Ss INSTALLING PORTS
.Pp
This section provides basic instructions on using the Ports Collection to
install or remove software.
The detailed description of available
.Cm make
targets and environment variables is available in
.Xr ports 7 .
.Pp
Before compiling any port, be sure to update the Ports Collection as described
in the previous section.
Since the installation of any third-party software can introduce security
vulnerabilities, it is recommended to first check https://vuxml.freebsd.org/ for known security issues related to the port.
Alternately, run
.Cm pkg audit -F
before installing a new port.
This command can be configured to automatically perform a security audit and an
update of the vulnerability database during the daily security system check.
For more information, refer to
.Xr pkg-audit 8 and
.Xr periodic 8 .
.Pp
Using the Ports Collection assumes a working Internet connection.
It also requires superuser privilege.
.Pp
To compile and install the port, change to the directory of the port to be
installed, then type
.Cm make install
at the prompt.
Messages will indicate the progress:
.Bd -literal -offset indent
# cd /usr/ports/sysutils/lsof
# make install
>> lsof_4.88D.freebsd.tar.gz doesn't seem to exist in /usr/ports/distfiles/.
>> Attempting to fetch from ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/.
===>  Extracting for lsof-4.88
...
[extraction output snipped]
...
>> Checksum OK for lsof_4.88D.freebsd.tar.gz.
===>  Patching for lsof-4.88.d,8
===>  Applying FreeBSD patches for lsof-4.88.d,8
===>  Configuring for lsof-4.88.d,8
...
[configure output snipped]
...
===>  Building for lsof-4.88.d,8
...
[compilation output snipped]
...

===>  Installing for lsof-4.88.d,8
...
[installation output snipped]
...
===>   Generating temporary packing list
===>   Compressing manual pages for lsof-4.88.d,8
===>   Registering installation for lsof-4.88.d,8
===>  SECURITY NOTE:
      This port has installed the following binaries which execute with
      increased privileges.
/usr/local/sbin/lsof
#
.Ed
.Pp
Since
.Cm lsof
is a program that runs with increased privileges, a security warning is
displayed as it is installed.
Once the installation is complete, the prompt will be returned.
.Pp
Some shells keep a cache of the commands that are available in the directories
listed in the
.Ev PATH
environment variable, to speed up lookup operations for the executable file of
these commands.
Users of the
.Cm tcsh
shell should type
.Cm rehash
so that a newly installed command can be used without specifying its full path.
Use
.Cm hash -r
instead for the
.Cm sh
shell.
Refer to the documentation for the shell for more information.
.Pp
During installation, a working subdirectory is created which contains all the
temporary files used during compilation.
Removing this directory saves disk space and minimizes the chance of problems
later when upgrading to the newer version of the port:
.Bd -literal -offset indent
# make clean
===>  Cleaning for lsof-88.d,8
#
.Ed
.Pp
To save this extra step, instead use
.Cm make install clean
when compiling the port.
.Ss CUSTOMIZING PORTS INSTALLATION
.Pp
Some ports provide build options which can be used to enable or disable
application components, provide security options, or allow for other
customizations.
Examples include
.Ql www/firefox
,
.Ql security/gpgme
, and
.Ql mail/sylpheed-claws
.
If the port depends upon other ports which have configurable options, it may
pause several times for user interaction as the default behavior is to prompt
the user to select options from a menu.
To avoid this and do all of the configuration in one batch, run
.Cm make config-recursive
within the port skeleton.
Then, run
.Cm make install [clean]
to compile and install the port.
.Pp
When using
.Ql config-recursive
, the list of ports to configure are gathered by the
.Ql all-depends-list
target.
It is recommended to run
.Cm make config-recursive
until all dependent ports options have been defined, and ports options screens
no longer appear, to be certain that all dependency options have been
configured.
.Pp
There are several ways to revisit a port's build options menu in order to add,
remove, or change these options after a port has been built.
One method is to
.Cm cd
into the directory containing the port and type
.Cm make config
.
Another option is to use
.Cm make showconfig
.
Another option is to execute
.Cm make rmconfig
which will remove all selected options and allow you to start over.
All of these options, and others, are explained in great detail in
.Xr ports 7 .
.Pp
The ports system uses
.Xr fetch 1 to download the source files, which supports various environment variables.
The
.Ev FTP_PASSIVE_MODE
,
.Ev FTP_PROXY
, and
.Ev FTP_PASSWORD
variables may need to be set if the FreeBSD system is behind a firewall or
FTP/HTTP proxy.
See
.Xr fetch 3 for the complete list of supported variables.
.Pp
For users who cannot be connected to the Internet all the time,
.Cm make fetch
can be run within
.Pa /usr/ports
, to fetch all distfiles, or within a category, such as
.Pa /usr/ports/net
, or within the specific port skeleton.
Note that if a port has any dependencies, running this command in a category or
ports skeleton will not fetch the distfiles of ports from another category.
Instead, use
.Cm make fetch-recursive
to also fetch the distfiles for all the dependencies of a port.
.Pp
In rare cases, such as when an organization has a local distfiles repository,
the
.Ev MASTER_SITES
variable can be used to override the download locations specified in the
.Pa Makefile
.
When using, specify the alternate location:
.Bd -literal -offset indent
# cd /usr/ports/directory
# make MASTER_SITE_OVERRIDE= \ ftp://ftp.organization.org/pub/FreeBSD/ports/distfiles/ fetch
.Ed
.Pp
The
.Ev WRKDIRPREFIX
and
.Ev PREFIX
variables can override the default working and target directories.
For example:
.Bd -literal -offset indent
# make WRKDIRPREFIX=/usr/home/example/ports install
.Ed
.Pp
will compile the port in
.Pa /usr/home/example/ports
and install everything under
.Pa /usr/local
.
.Bd -literal -offset indent
# make PREFIX=/usr/home/example/local install
.Ed
.Pp
will compile the port in
.Pa /usr/ports
and install it in
.Pa /usr/home/example/local
.
And:
.Bd -literal -offset indent
# make WRKDIRPREFIX=../ports PREFIX=../local install
.Ed
.Pp
will combine the two.
.Pp
These can also be set as environmental variables.
Refer to the manual page for your shell for instructions on how to set an
environmental variable.
.Ss REMOVING INSTALLED PORTS
.Pp
Installed ports can be uninstalled using
.Cm pkg delete
.
Examples for using this command can be found in the
.Xr pkg-delete 8 manual page.
.Pp
Alternately,
.Cm make deinstall
can be run in the port's directory:
.Bd -literal -offset indent
# cd /usr/ports/sysutils/lsof
make deinstall
===>  Deinstalling for sysutils/lsof
===>   Deinstalling
Deinstallation has been requested for the following 1 packages:

	lsof-4.88.d,8

The deinstallation will free 229 kB
[1/1] Deleting lsof-4.88.d,8... done
.Ed
.Pp
It is recommended to read the messages as the port is uninstalled.
If the port has any applications that depend upon it, this information will be
displayed but the uninstallation will proceed.
In such cases, it may be better to reinstall the application in order to
prevent broken dependencies.
.Ss UPGRADING PORTS
.Pp
Over time, newer versions of software become available in the Ports Collection.
This section describes how to determine which software can be upgraded and how
to perform the upgrade.
.Pp
To determine if newer versions of installed ports are available, ensure that
the latest version of the ports tree is installed, using the updating command
described in either or .
On FreeBSD 10 and later, or if the system has been converted to pkg, the following command will list the installed ports which are out of date:
.Bd -literal -offset indent
# pkg version -l "<"
.Ed
.Pp
For FreeBSD 9.
X and lower, the following command will list the installed ports that are out of
date:
.Bd -literal -offset indent
# pkg_version -l "<"
.Ed
.Pp
Before attempting an upgrade, read
.Pa /usr/ports/UPDATING
from the top of the file to the date closest to the last time ports were
upgraded or the system was installed.
This file describes various issues and additional steps users may encounter and
need to perform when updating a port, including such things as file format
changes, changes in locations of configuration files, or any incompatibilities
with previous versions.
Make note of any instructions which match any of the ports that need upgrading
and follow these instructions when performing the upgrade.
.Ss TOOLS TO UPGRADE AND MANAGE PORTS
.Pp
The Ports Collection contains several utilities to perform the actual upgrade.
Each has its strengths and weaknesses.
.Pp
Historically, most installations used either Portmaster or Portupgrade.
 Synth is a newer alternative.
.Pp
The choice of which tool is best for a particular system is up to the system
administrator.
It is recommended practice to back up your data before using any of these
tools.
.Ss UPGRADING PORTS USING PORTMASTER
.Pp
.Ql ports-mgmt/portmaster
is a very small utility for upgrading installed ports.
It is designed to use the tools installed with the FreeBSD base system without
depending on other ports or databases.
To install this utility as a port:
.Bd -literal -offset indent
# cd /usr/ports/ports-mgmt/portmaster
# make install clean
.Ed
.Pp
Portmaster defines four categories of ports:
.Bl -bullet -offset -compact
.It
Root port: has no dependencies and is not a dependency of any other ports.
.It
Trunk port: has no dependencies, but other ports depend upon it.
.It
Branch port: has dependencies and other ports depend upon it.
.It
Leaf port: has dependencies but no other ports depend upon it.
.El
.Pp
To list these categories and search for updates:
.Bd -literal -offset indent
# portmaster -L
===>>> Root ports (No dependencies, not depended on)
===>>> ispell-3.2.06_18
===>>> screen-4.0.3
        ===>>> New version available: screen-4.0.3_1
===>>> tcpflow-0.21_1
===>>> 7 root ports
...
===>>> Branch ports (Have dependencies, are depended on)
===>>> apache22-2.2.3
        ===>>> New version available: apache22-2.2.8
...
===>>> Leaf ports (Have dependencies, not depended on)
===>>> automake-1.9.6_2
===>>> bash-3.1.17
        ===>>> New version available: bash-3.2.33
...
===>>> 32 leaf ports

===>>> 137 total installed ports
        ===>>> 83 have new versions available
.Ed
.Pp
This command is used to upgrade all outdated ports:
.Bd -literal -offset indent
# portmaster -a
.Ed
.Pp
By default, Portmaster makes a backup package before deleting the existing port.
If the installation of the new version is successful, Portmaster deletes the backup.
Using
.Ar -b
instructs Portmaster not to automatically delete the backup.
Adding
.Ar -i
starts Portmaster in interactive mode, prompting for confirmation before upgrading each port.
Many other options are available.
Read through the manual page for
.Xr portmaster 8 for details regarding their usage.
.Pp
If errors are encountered during the upgrade process, add
.Ar -f
to upgrade and rebuild all ports:
.Bd -literal -offset indent
# portmaster -af
.Ed
.Pp
Portmaster can also be used to install new ports on the system, upgrading all dependencies
before building and installing the new port.
To use this function, specify the location of the port in the Ports Collection:
.Bd -literal -offset indent
# portmaster shells/bash
.Ed
.Pp
More information about
.Ql ports-mgmt/portmaster
may be found in its
.Pa pkg-descr
.
.Ss UPGRADING PORTS USING PORTUPGRADE
.Pp
.Ql ports-mgmt/portupgrade
is another utility that can be used to upgrade ports.
It installs a suite of applications which can be used to manage ports.
However, it is dependent upon Ruby.
To install the port:
.Bd -literal -offset indent
# cd /usr/ports/ports-mgmt/portupgrade
# make install clean
.Ed
.Pp
Before performing an upgrade using this utility, it is recommended to scan the
list of installed ports using
.Cm pkgdb -F
and to fix all the inconsistencies it reports.
.Pp
To upgrade all the outdated ports installed on the system, use
.Cm portupgrade -a
.
Alternately, include
.Ar -i
to be asked for confirmation of every individual upgrade:
.Bd -literal -offset indent
# portupgrade -ai
.Ed
.Pp
To upgrade only a specified application instead of all available ports, use
.Cm portupgrade pkgname
.
It is very important to include
.Ar -R
to first upgrade all the ports required by the given application:
.Bd -literal -offset indent
# portupgrade -R firefox
.Ed
.Pp
If
.Ar -P
is included, Portupgrade searches for available packages in the local directories listed in
.Ev PKG_PATH
.
If none are available locally, it then fetches packages from a remote site.
If packages can not be found locally or fetched remotely, Portupgrade will use ports.
To avoid using ports entirely, specify
.Ar -PP
.
This last set of options tells Portupgrade to abort if no packages are available:
.Bd -literal -offset indent
# portupgrade -PP gnome3
.Ed
.Pp
To just fetch the port distfiles, or packages, if
.Ar -P
is specified, without building or installing anything, use
.Ar -F
.
For further information on all of the available switches, refer to the manual
page for
.Cm portupgrade
.
.Pp
More information about
.Ql ports-mgmt/portupgrade
may be found in its
.Pa pkg-descr
.
.Ss PORTS AND DISK SPACE
.Pp
Using the Ports Collection will use up disk space over time.
After building and installing a port, running
.Cm make clean
within the ports skeleton will clean up the temporary
.Pa work
directory.
If Portmaster is used to install a port, it will automatically remove this directory unless
.Ar -K
is specified.
If Portupgrade is installed, this command will remove all
.Pa work
directories found within the local copy of the Ports Collection:
.Bd -literal -offset indent
# portsclean -C
.Ed
.Pp
In addition, outdated source distribution files accumulate in
.Pa /usr/ports/distfiles
over time.
To use Portupgrade to delete all the distfiles that are no longer referenced by any ports:
.Bd -literal -offset indent
# portsclean -D
.Ed
.Pp
Portupgrade can remove all distfiles not referenced by any port currently installed on the
system:
.Bd -literal -offset indent
# portsclean -DD
.Ed
.Pp
If Portmaster is installed, use:
.Bd -literal -offset indent
# portmaster --clean-distfiles
.Ed
.Pp
By default, this command is interactive and prompts the user to confirm if a
distfile should be deleted.
.Pp
In addition to these commands,
.Ql ports-mgmt/pkg_cutleaves
automates the task of removing installed ports that are no longer needed.
.Ss BUILDING PACKAGES WITH POUDRIERE
.Pp
Poudriere is a BSD-licensed utility for creating and testing FreeBSD packages.
It uses FreeBSD jails to set up isolated compilation environments.
These jails can be used to build packages for versions of FreeBSD that are
different from the system on which it is installed, and also to build packages
for i386 if the host is an amd64 system.
Once the packages are built, they are in a layout identical to the official
mirrors.
These packages are usable by
.Xr pkg 8 and other package management tools.
.Pp
Poudriere is installed using the
.Ql ports-mgmt/poudriere
package or port.
The installation includes a sample configuration file
.Pa /usr/local/etc/poudriere.conf.sample
.
Copy this file to
.Pa /usr/local/etc/poudriere.conf
.
Edit the copied file to suit the local configuration.
.Pp
While ZFS is not required on the system running poudriere, it is beneficial.
When ZFS is used,
.Ev ZPOOL
must be specified in
.Pa /usr/local/etc/poudriere.conf
and
.Ev FREEBSD_HOST
should be set to a nearby mirror.
Defining
.Ev CCACHE_DIR
enables the use of
.Ql devel/ccache
to cache compilation and reduce build times for frequently-compiled code.
It may be convenient to put poudriere datasets in an isolated tree mounted at
.Pa /poudriere
.
Defaults for the other configuration values are adequate.
.Pp
The number of processor cores detected is used to define how many builds will
run in parallel.
Supply enough virtual memory, either with RAM or swap space.
If virtual memory runs out, the compilation jails will stop and be torn down,
resulting in weird error messages.
.Ss INITIALIZE JAILS AND PORT TREES
.Pp
After configuration, initialize poudriere so that it installs a jail with the required FreeBSD tree and a ports tree.
Specify a name for the jail using
.Ar -j
and the FreeBSD version with
.Ar -v
.
On systems running FreeBSD/amd64, the architecture can be set with
.Ar -a
to either
.Ql i386
or
.Ql amd64
.
The default is the architecture shown by
.Cm uname
.
.Bd -literal -offset indent
# poudriere jail -c -j 10amd64 -v 10.0-RELEASE
====>> Creating 10amd64 fs... done
====>> Fetching base.txz for FreeBSD 10.0-RELEASE amd64
/poudriere/jails/10amd64/fromftp/base.txz      100% of   59 MB 1470 kBps 00m42s
====>> Extracting base.txz... done
====>> Fetching src.txz for FreeBSD 10.0-RELEASE amd64
/poudriere/jails/10amd64/fromftp/src.txz       100% of  107 MB 1476 kBps 01m14s
====>> Extracting src.txz... done
====>> Fetching games.txz for FreeBSD 10.0-RELEASE amd64
/poudriere/jails/10amd64/fromftp/games.txz     100% of  865 kB  734 kBps 00m01s
====>> Extracting games.txz... done
====>> Fetching lib32.txz for FreeBSD 10.0-RELEASE amd64
/poudriere/jails/10amd64/fromftp/lib32.txz     100% of   14 MB 1316 kBps 00m12s
====>> Extracting lib32.txz... done
====>> Cleaning up... done
====>> Jail 10amd64 10.0-RELEASE amd64 is ready to be used
.Ed
.Bd -literal -offset indent
# poudriere ports -c -p local
====>> Creating local fs... done
====>> Extracting portstree "local"...
Looking up portsnap.FreeBSD.org mirrors... 7 mirrors found.
Fetching public key from ec2-eu-west-1.portsnap.freebsd.org... done.
Fetching snapshot tag from ec2-eu-west-1.portsnap.freebsd.org... done.
Fetching snapshot metadata... done.
Fetching snapshot generated at Tue Feb 11 01:07:15 CET 2014:
94a3431f0ce567f6452ffde4fd3d7d3c6e1da143efec76100% of   69 MB 1246 kBps 00m57s
Extracting snapshot... done.
Verifying snapshot integrity... done.
Fetching snapshot tag from ec2-eu-west-1.portsnap.freebsd.org... done.
Fetching snapshot metadata... done.
Updating from Tue Feb 11 01:07:15 CET 2014 to Tue Feb 11 16:05:20 CET 2014.
Fetching 4 metadata patches... done.
Applying metadata patches... done.
Fetching 0 metadata files... done.
Fetching 48 patches.
(48/48) 100.00%  done.
done.
Applying patches...
done.
Fetching 1 new ports or files... done.
/poudriere/ports/tester/CHANGES
/poudriere/ports/tester/COPYRIGHT

[...]

Building new INDEX files... done.
.Ed
.Pp
On a single computer, poudriere can build ports with multiple configurations, in multiple jails, and from
different port trees.
Custom configurations for these combinations are called sets.
See the CUSTOMIZATION section of
.Xr poudriere 8 for details after
.Ql ports-mgmt/poudriere
or
.Ql ports-mgmt/poudriere-devel
is installed.
.Pp
The basic configuration shown here puts a single jail-, port-, and set-specific
.Pa make.conf
in
.Pa /usr/local/etc/poudriere.d
.
The filename in this example is created by combining the jail name, port name,
and set name:
.Pa 10amd64-local-workstation-make.conf
.
The system
.Pa make.conf
and this new file are combined at build time to create the
.Pa make.conf
used by the build jail.
.Pp
Packages to be built are entered in
.Pa 10amd64-local-workstation-pkglist
:
.Bd -literal -offset indent
editors/emacs
devel/git
ports-mgmt/pkg
...
.Ed
.Pp
Options and dependencies for the specified ports are configured:
.Bd -literal -offset indent
# poudriere options -j 10amd64 -p local -z workstation -f 10amd64-local-workstation-pkglist
.Ed
.Pp
Finally, packages are built and a package repository is created:
.Bd -literal -offset indent
# poudriere bulk -j 10amd64 -p local -z workstation -f 10amd64-local-workstation-pkglist
.Ed
.Pp
While running, pressing Ctrlt displays the current state of the build.
 Poudriere also builds files in
.Pa /poudriere/logs/bulk/jailname
that can be used with a web server to display build information.
.Pp
After completion, the new packages are now available for installation from the poudriere repository.
.Pp
For more information on using poudriere, see
.Xr poudriere 8 and the main web site, https://github.com/freebsd/poudriere/wiki.
.Ss CONFIGURING PKG CLIENTS TO USE A POUDRIERE REPOSITORY
.Pp
While it is possible to use both a custom repository along side of the official
repository, sometimes it is useful to disable the official repository.
This is done by creating a configuration file that overrides and disables the
official configuration file.
Create
.Pa /usr/local/etc/pkg/repos/FreeBSD.conf
that contains the following:
.Bd -literal -offset indent
FreeBSD: {
	enabled: no
}
.Ed
.Pp
Usually it is easiest to serve a poudriere repository to the client machines
via HTTP.
Set up a webserver to serve up the package directory, for instance:
.Pa /usr/local/poudriere/data/packages/10amd64
, where
.Pa 10amd64
is the name of the build.
.Pp
If the URL to the package repository is:
.Ql http://pkg.example.com/10amd64
, then the repository configuration file in
.Pa /usr/local/etc/pkg/repos/custom.conf
would look like:
.Bd -literal -offset indent
custom: {
	url: "http://pkg.example.com/10amd64",
	enabled: yes,
}
.Ed
.Ss POST-INSTALLATION CONSIDERATIONS
.Pp
Regardless of whether the software was installed from a binary package or port,
most third-party applications require some level of configuration after
installation.
The following commands and locations can be used to help determine what was
installed with the application.
.Bl -bullet -offset -compact
.It
Most applications install at least one default configuration file in
.Pa /usr/local/etc
.
In cases where an application has a large number of configuration files, a
subdirectory will be created to hold them.
Often, sample configuration files are installed which end with a suffix such as
.Pa .sample
.
The configuration files should be reviewed and possibly edited to meet the
system's needs.
To edit a sample file, first copy it without the
.Pa .sample
extension.
.It
Applications which provide documentation will install it into
.Pa /usr/local/share/doc
and many applications also install manual pages.
This documentation should be consulted before continuing.
.It
Some applications run services which must be added to
.Pa /etc/rc.conf
before starting the application.
These applications usually install a startup script in
.Pa /usr/local/etc/rc.d
.
See Starting Services for more information.
By design, applications do not run their startup script upon installation, nor
do they run their stop script upon deinstallation or upgrade.
This decision is left to the individual system administrator.
.It
Users of
.Xr csh 1 should run
.Cm rehash
to rebuild the known binary list in the shells
.Ev PATH
.
.It
Use
.Cm pkg info
to determine which files, man pages, and binaries were installed with the
application.
.El
.Ss DEALING WITH BROKEN PORTS
.Pp
When a port does not build or install, try the following:
.Bl -enum -offset -compact
.It
Search to see if there is a fix pending for the port in the Problem Report database.
If so, implementing the proposed fix may fix the issue.
.It
Ask the maintainer of the port for help.
Type
.Cm make maintainer
in the ports skeleton or read the port's
.Pa Makefile
to find the maintainer's email address.
Remember to include the
.Ql $FreeBSD:
line from the port's
.Pa Makefile
and the output leading up to the error in the email to the maintainer.
Some ports are not maintained by an individual but instead by a group
maintainer represented by a mailing list.
Many, but not all, of these addresses look like
.Mt freebsd-listname@FreeBSD.org
.
Please take this into account when sending an email.
In particular, ports maintained by
.Mt ports@FreeBSD.org
are not maintained by a specific individual.
Instead, any fixes and support come from the general community who subscribe to
that mailing list.
More volunteers are always needed!
If there is no response to the email, use Bugzilla to submit a bug report using
the instructions in Writing FreeBSD Problem Reports.
.It
Fix it!
The Porter's Handbook includes detailed information on the ports infrastructure so that you can fix
the occasional broken port or even submit your own!
.It
Install the package instead of the port using the instructions in .
.El
.Sh THE X WINDOW SYSTEM
.Ss SYNOPSIS
.Pp
An installation of FreeBSD using bsdinstall does not automatically install a graphical user interface.
This chapter describes how to install and configure Xorg, which provides the open source X Window System used to provide a graphical
environment.
It then describes how to find and install a desktop environment or window
manager.
.Pp
Users who prefer an installation method that automatically configures the Xorg and offers a choice of window managers during installation should refer to the http://www.trueos.org/ website.
.Pp
For more information on the video hardware that Xorg supports, refer to the x.org website.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
The various components of the X Window System, and how they interoperate.
.It
How to install and configure Xorg.
.It
How to install and configure several window managers and desktop environments.
.It
How to use TrueType fonts in Xorg.
.It
How to set up your system for graphical logins (XDM).
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Know how to install additional third-party software as described in .
.El
.Ss TERMINOLOGY
.Pp
While it is not necessary to understand all of the details of the various
components in the X Window System and how they interact, some basic knowledge
of these components can be useful.
.Bl -tag -offset -compact
.It X server
X was designed from the beginning to be network-centric, and adopts a
.Do
client-server
.Dc
model.
In this model, the
.Do
X server
.Dc
runs on the computer that has the keyboard, monitor, and mouse attached.
The server's responsibility includes tasks such as managing the display,
handling input from the keyboard and mouse, and handling input or output from
other devices such as a tablet or a video projector.
This confuses some people, because the X terminology is exactly backward to
what they expect.
They expect the
.Do
X server
.Dc
to be the big powerful machine down the hall, and the
.Do
X client
.Dc
to be the machine on their desk.
.It X client
Each X application, such as XTerm or Firefox, is a
.Do
client
.Dc
.
A client sends messages to the server such as
.Do
Please draw a window at these coordinates
.Dc
, and the server sends back messages such as
.Do
The user just clicked on the OK button
.Dc
.
In a home or small office environment, the X server and the X clients commonly
run on the same computer.
It is also possible to run the X server on a less powerful computer and to run
the X applications on a more powerful system.
In this scenario, the communication between the X client and server takes place
over the network.
.It window manager
X does not dictate what windows should look like on-screen, how to move them
around with the mouse, which keystrokes should be used to move between windows,
what the title bars on each window should look like, whether or not they have
close buttons on them, and so on.
Instead, X delegates this responsibility to a separate window manager
application.
There are dozens of window managers available.
Each window manager provides a different look and feel: some support virtual
desktops, some allow customized keystrokes to manage the desktop, some have a
.Do
Start
.Dc
button, and some are themeable, allowing a complete change of the desktop's
look-and-feel.
Window managers are available in the
.Pa x11-wm
category of the Ports Collection.
Each window manager uses a different configuration mechanism.
Some expect configuration file written by hand while others provide graphical
tools for most configuration tasks.
.It desktop environment
KDE and GNOME are considered to be desktop environments as they include an entire suite of
applications for performing common desktop tasks.
These may include office suites, web browsers, and games.
.It focus policy
The window manager is responsible for the mouse focus policy.
This policy provides some means for choosing which window is actively receiving
keystrokes and it should also visibly indicate which window is currently
active.
One focus policy is called
.Do
click-to-focus
.Dc
.
In this model, a window becomes active upon receiving a mouse click.
In the
.Do
focus-follows-mouse
.Dc
policy, the window that is under the mouse pointer has focus and the focus is
changed by pointing at another window.
If the mouse is over the root window, then this window is focused.
In the
.Do
sloppy-focus
.Dc
model, if the mouse is moved over the root window, the most recently used
window still has the focus.
With sloppy-focus, focus is only changed when the cursor enters a new window,
and not when exiting the current window.
In the
.Do
click-to-focus
.Dc
policy, the active window is selected by mouse click.
The window may then be raised and appear in front of all other windows.
All keystrokes will now be directed to this window, even if the cursor is moved
to another window.
Different window managers support different focus models.
All of them support click-to-focus, and the majority of them also support other
policies.
Consult the documentation for the window manager to determine which focus
models are available.
.It widgets
Widget is a term for all of the items in the user interface that can be clicked
or manipulated in some way.
This includes buttons, check boxes, radio buttons, icons, and lists.
A widget toolkit is a set of widgets used to create graphical applications.
There are several popular widget toolkits, including Qt, used by KDE, and GTK+, used by GNOME.
As a result, applications will have a different look and feel, depending upon
which widget toolkit was used to create the application.
.El
.Ss INSTALLING XORG
.Pp
On FreeBSD, Xorg can be installed as a package or port.
.Pp
The binary package can be installed quickly but with fewer options for
customization:
.Bd -literal -offset indent
# pkg install xorg
.Ed
.Pp
To build and install from the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/x11/xorg
# make install clean
.Ed
.Pp
Either of these installations results in the complete Xorg system being installed.
Binary packages are the best option for most users.
.Pp
A smaller version of the X system suitable for experienced users is available
in
.Ql x11/xorg-minimal
.
Most of the documents, libraries, and applications will not be installed.
Some applications require these additional components to function.
.Ss XORG CONFIGURATION
.Ss QUICK START
.Pp
Xorg supports most common video cards, keyboards, and pointing devices.
.Pp
Video cards, monitors, and input devices are automatically detected and do not
require any manual configuration.
Do not create
.Pa xorg.conf
or run a
.Ar -configure
step unless automatic configuration fails.
.Pp
If Xorg has been used on this computer before, move or remove any existing
configuration files:
.Bd -literal -offset indent
# mv /etc/X11/xorg.conf ~/xorg.conf.etc
# mv /usr/local/etc/X11/xorg.conf ~/xorg.conf.localetc
.Ed
.Pp
Add the user who will run Xorg to the
.Ql video
or
.Ql wheel
group to enable 3D acceleration when available.
To add user jru to whichever group is available:
.Bd -literal -offset indent
# pw groupmod video -m jru || pw groupmod wheel -m jru
.Ed
.Pp
The TWM window manager is included by default.
It is started when Xorg starts:
.Bd -literal -offset indent
% startx
.Ed
.Pp
On some older versions of FreeBSD, the system console must be set to
.Xr vt 4 before switching back to the text console will work properly.
See .
.Ss USER GROUP FOR ACCELERATED VIDEO
.Pp
Access to
.Pa /dev/dri
is needed to allow 3D acceleration on video cards.
It is usually simplest to add the user who will be running X to either the
.Ql video
or
.Ql wheel
group.
Here,
.Xr pw 8 is used to add user slurms to the
.Ql video
group, or to the
.Ql wheel
group if there is no
.Ql video
group:
.Bd -literal -offset indent
# pw groupmod video -m slurms || pw groupmod wheel -m slurms
.Ed
.Ss KERNEL MODE SETTING (KMS)
.Pp
When the computer switches from displaying the console to a higher screen
resolution for X, it must set the video output mode.
Recent versions of Xorg use a system inside the kernel to do these mode changes more efficiently.
Older versions of FreeBSD use
.Xr sc 4 , which is not aware of the KMS system.
The end result is that after closing X, the system console is blank, even
though it is still working.
The newer
.Xr vt 4 console avoids this problem.
.Pp
Add this line to
.Pa /boot/loader.conf
to enable
.Xr vt 4 :
.Bd -literal -offset indent
kern.vty=vt
.Ed
.Ss CONFIGURATION FILES
.Pp
Manual configuration is usually not necessary.
Please do not manually create configuration files unless autoconfiguration does
not work.
.Ss DIRECTORY
.Pp
Xorg looks in several directories for configuration files.
.Pa /usr/local/etc/X11/
is the recommended directory for these files on FreeBSD.
Using this directory helps keep application files separate from operating
system files.
.Pp
Storing configuration files in the legacy
.Pa /etc/X11/
still works.
However, this mixes application files with the base FreeBSD files and is not
recommended.
.Ss SINGLE OR MULTIPLE FILES
.Pp
It is easier to use multiple files that each configure a specific setting than
the traditional single
.Pa xorg.conf
.
These files are stored in the
.Pa xorg.conf.d/
subdirectory of the main configuration file directory.
The full path is typically
.Pa /usr/local/etc/X11/xorg.conf.d/
.
.Pp
Examples of these files are shown later in this section.
.Pp
The traditional single
.Pa xorg.conf
still works, but is neither as clear nor as flexible as multiple files in the
.Pa xorg.conf.d/
subdirectory.
.Ss VIDEO CARDS
.Bl -tag -offset -compact
.It Intel
3D acceleration is supported on most Intel graphics up to Ivy Bridge (HD Graphics 2500, 4000, and P4000), including Iron
Lake (HD Graphics) and Sandy Bridge (HD Graphics 2000).
Driver name:
.Ql intel
For reference, see https://en.wikipedia.org/wiki/List_of_Intel_graphics_processing_units.
.It AMD Radeon
2D and 3D acceleration is supported on Radeon cards up to and including the
HD6000 series.
Driver name:
.Ql radeon
For reference, see https://en.wikipedia.org/wiki/List_of_AMD_graphics_processing_units.
.It NVIDIA
Several NVIDIA drivers are available in the
.Pa x11
category of the Ports Collection.
Install the driver that matches the video card.
For reference, see https://en.wikipedia.org/wiki/List_of_Nvidia_graphics_processing_units.
.It Hybrid Combination Graphics
Some notebook computers add additional graphics processing units to those built
into the chipset or processor.
 Optimus combines Intel and NVIDIA hardware.
 Switchable Graphics or Hybrid Graphics are a combination of an Intel or AMD processor and an AMD Radeon GPU.
Implementations of these hybrid graphics systems vary, and Xorg on FreeBSD is not able to drive all versions of them.
Some computers provide a BIOS option to disable one of the graphics adapters or select a discrete mode which can be used with one of the standard video card drivers.
For example, it is sometimes possible to disable the NVIDIA GPU in an Optimus system.
The Intel video can then be used with an Intel driver.
BIOS settings depend on the model of computer.
In some situations, both GPUs can be left enabled, but creating a configuration file that only uses the
main GPU in the
.Ql Device
section is enough to make such a system functional.
.It Other Video Cards
Drivers for some less-common video cards can be found in the
.Pa x11-drivers
directory of the Ports Collection.
Cards that are not supported by a specific driver might still be usable with
the
.Ql x11-drivers/xf86-video-vesa
driver.
This driver is installed by
.Ql x11/xorg
.
It can also be installed manually as
.Ql x11-drivers/xf86-video-vesa
.
 Xorg attempts to use this driver when a specific driver is not found for the video
card.
.Ql x11-drivers/xf86-video-scfb
is a similar nonspecialized video driver that works on many UEFI and ARM computers.
.It Setting the Video Driver in a File
To set the Intel driver in a configuration file:
.Pa /usr/local/etc/X11/xorg.conf.d/driver-intel.conf
.Bd -literal -offset indent
Section "Device"
	Identifier "Card0"
	Driver     "intel"
	# BusID    "PCI:1:0:0"
EndSection
.Ed
If more than one video card is present, the
.Ql BusID
identifier can be uncommented and set to select the desired card.
A list of video card bus IDs can be displayed with
.Cm pciconf -lv | grep -B3 display
.
To set the Radeon driver in a configuration file:
.Pa /usr/local/etc/X11/xorg.conf.d/driver-radeon.conf
.Bd -literal -offset indent
Section "Device"
	Identifier "Card0"
	Driver     "radeon"
EndSection
.Ed
To set the VESA driver in a configuration file:
.Pa /usr/local/etc/X11/xorg.conf.d/driver-vesa.conf
.Bd -literal -offset indent
Section "Device"
	Identifier "Card0"
	Driver     "vesa"
EndSection
.Ed
To set the
.Ql scfb
driver for use with a UEFI or ARM computer:
.Pa /usr/local/etc/X11/xorg.conf.d/driver-scfb.conf
.Bd -literal -offset indent
Section "Device"
	Identifier "Card0"
	Driver     "scfb"
EndSection
.Ed
.El
.Ss MONITORS
.Pp
Almost all monitors support the Extended Display Identification Data standard (EDID).
 Xorg uses EDID to communicate with the monitor and detect the supported resolutions and
refresh rates.
Then it selects the most appropriate combination of settings to use with that
monitor.
.Pp
Other resolutions supported by the monitor can be chosen by setting the desired
resolution in configuration files, or after the X server has been started with
.Xr xrandr 1 .
.Bl -tag -offset -compact
.It Using
.Xr xrandr 1
Run
.Xr xrandr 1 without any parameters to see a list of video outputs and detected monitor
modes:
.Bd -literal -offset indent
% xrandr
Screen 0: minimum 320 x 200, current 3000 x 1920, maximum 8192 x 8192
DVI-0 connected primary 1920x1200+1080+0 (normal left inverted right x axis y axis) 495mm x 310mm
   1920x1200     59.95*+
   1600x1200     60.00
   1280x1024     85.02    75.02    60.02
   1280x960      60.00
   1152x864      75.00
   1024x768      85.00    75.08    70.07    60.00
   832x624       74.55
   800x600       75.00    60.32
   640x480       75.00    60.00
   720x400       70.08
DisplayPort-0 disconnected (normal left inverted right x axis y axis)
HDMI-0 disconnected (normal left inverted right x axis y axis)
.Ed
This shows that the
.Ql DVI-0
output is being used to display a screen resolution of 1920x1200 pixels at a
refresh rate of about 60 Hz.
Monitors are not attached to the
.Ql DisplayPort-0
and
.Ql HDMI-0
connectors.
Any of the other display modes can be selected with
.Xr xrandr 1 .
For example, to switch to 1280x1024 at 60 Hz:
.Bd -literal -offset indent
% xrandr --mode 1280x1024 --rate 60
.Ed
A common task is using the external video output on a notebook computer for a
video projector.
The type and quantity of output connectors varies between devices, and the name
given to each output varies from driver to driver.
What one driver calls
.Ql HDMI-1
, another might call
.Ql HDMI1
.
So the first step is to run
.Xr xrandr 1 to list all the available outputs:
.Bd -literal -offset indent
% xrandr
Screen 0: minimum 320 x 200, current 1366 x 768, maximum 8192 x 8192
LVDS1 connected 1366x768+0+0 (normal left inverted right x axis y axis) 344mm x 193mm
   1366x768      60.04*+
   1024x768      60.00
   800x600       60.32    56.25
   640x480       59.94
VGA1 connected (normal left inverted right x axis y axis)
   1280x1024     60.02 +  75.02
   1280x960      60.00
   1152x864      75.00
   1024x768      75.08    70.07    60.00
   832x624       74.55
   800x600       72.19    75.00    60.32    56.25
   640x480       75.00    72.81    66.67    60.00
   720x400       70.08
HDMI1 disconnected (normal left inverted right x axis y axis)
DP1 disconnected (normal left inverted right x axis y axis)
.Ed
Four outputs were found: the built-in panel
.Ql LVDS1
, and external
.Ql VGA1
,
.Ql HDMI1
, and
.Ql DP1
connectors.
The projector has been connected to the
.Ql VGA1
output.
.Xr xrandr 1 is now used to set that output to the native resolution of the projector and
add the additional space to the right side of the desktop:
.Bd -literal -offset indent
% xrandr --output VGA1 --auto --right-of LVDS1
.Ed
.Ql --auto
chooses the resolution and refresh rate detected by EDID.
If the resolution is not correctly detected, a fixed value can be given with
.Ql --mode
instead of the
.Ql --auto
statement.
For example, most projectors can be used with a 1024x768 resolution, which is
set with
.Ql --mode 1024x768
.
.Xr xrandr 1 is often run from
.Pa .xinitrc
to set the appropriate mode when X starts.
.It Setting Monitor Resolution in a File
To set a screen resolution of 1024x768 in a configuration file:
.Pa /usr/local/etc/X11/xorg.conf.d/screen-resolution.conf
.Bd -literal -offset indent
Section "Screen"
	Identifier "Screen0"
	Device     "Card0"
	SubSection "Display"
	Modes      "1024x768"
	EndSubSection
EndSection
.Ed
The few monitors that do not have EDID can be configured by setting
.Ql HorizSync
and
.Ql VertRefresh
to the range of frequencies supported by the monitor.
.Pa /usr/local/etc/X11/xorg.conf.d/monitor0-freq.conf
.Bd -literal -offset indent
Section "Monitor"
	Identifier   "Monitor0"
	HorizSync    30-83   # kHz
	VertRefresh  50-76   # Hz
EndSection
.Ed
.El
.Ss INPUT DEVICES
.Ss KEYBOARDS
.Bl -tag -offset -compact
.It Keyboard Layout
The standardized location of keys on a keyboard is called a layout.
Layouts and other adjustable parameters are listed in
.Xr xkeyboard-config 7 .
A United States layout is the default.
To select an alternate layout, set the
.Ql XkbLayout
and
.Ql XkbVariant
options in an
.Ql InputClass
.
This will be applied to all input devices that match the class.
This example selects a French keyboard layout with the
.Ql oss
variant.
.Pa /usr/local/etc/X11/xorg.conf.d/keyboard-fr-oss.conf
.Bd -literal -offset indent
Section	"InputClass"
	Identifier	"KeyboardDefaults"
	Driver		"keyboard"
	MatchIsKeyboard	"on"
	Option		"XkbLayout" "fr"
	Option		"XkbVariant" "oss"
EndSection
.Ed
Set United States, Spanish, and Ukrainian keyboard layouts.
Cycle through these layouts by pressing AltShift.
.Ql x11/xxkb
or
.Ql x11/sbxkb
can be used for improved layout switching control and current layout
indicators.
.Pa /usr/local/etc/X11/xorg.conf.d/kbd-layout-multi.conf
.Bd -literal -offset indent
Section	"InputClass"
	Identifier	"All Keyboards"
	MatchIsKeyboard	"yes"
	Option		"XkbLayout" "us, es, ua"
EndSection
.Ed
.It Closing Xorg From the Keyboard
X can be closed with a combination of keys.
By default, that key combination is not set because it conflicts with keyboard
commands for some applications.
Enabling this option requires changes to the keyboard
.Ql InputDevice
section:
.Pa /usr/local/etc/X11/xorg.conf.d/keyboard-zap.conf
.Bd -literal -offset indent
Section	"InputClass"
	Identifier	"KeyboardDefaults"
	Driver		"keyboard"
	MatchIsKeyboard	"on"
	Option		"XkbOptions" "terminate:ctrl_alt_bksp"
EndSection
.Ed
.El
.Ss MICE AND POINTING DEVICES
.Pp
Many mouse parameters can be adjusted with configuration options.
See
.Xr mousedrv 4 for a full list.
.Bl -tag -offset -compact
.It Mouse Buttons
The number of buttons on a mouse can be set in the mouse
.Ql InputDevice
section of
.Pa xorg.conf
.
To set the number of buttons to 7:
.Pa /usr/local/etc/X11/xorg.conf.d/mouse0-buttons.conf
.Bd -literal -offset indent
Section "InputDevice"
	Identifier  "Mouse0"
	Option      "Buttons" "7"
EndSection
.Ed
.El
.Ss MANUAL CONFIGURATION
.Pp
In some cases, Xorg autoconfiguration does not work with particular hardware, or a different
configuration is desired.
For these cases, a custom configuration file can be created.
.Pp
Do not create manual configuration files unless required.
Unnecessary manual configuration can prevent proper operation.
.Pp
A configuration file can be generated by Xorg based on the detected hardware.
This file is often a useful starting point for custom configurations.
.Pp
Generating an
.Pa xorg.conf
:
.Bd -literal -offset indent
# Xorg -configure
.Ed
.Pp
The configuration file is saved to
.Pa /root/xorg.conf.new
.
Make any changes desired, then test that file with:
.Bd -literal -offset indent
# Xorg -config /root/xorg.conf.new
.Ed
.Pp
After the new configuration has been adjusted and tested, it can be split into
smaller files in the normal location,
.Pa /usr/local/etc/X11/xorg.conf.d/
.
.Ss USING FONTS IN XORG
.Ss TYPE1 FONTS
.Pp
The default fonts that ship with Xorg are less than ideal for typical desktop publishing applications.
Large presentation fonts show up jagged and unprofessional looking, and small
fonts are almost completely unintelligible.
However, there are several free, high quality Type1 (PostScript) fonts available which can be readily used with Xorg.
For instance, the URW font collection (
.Ql x11-fonts/urwfonts
) includes high quality versions of standard type1 fonts (Times Roman, Helvetica, Palatino and others).
The Freefonts collection (
.Ql x11-fonts/freefonts
) includes many more fonts, but most of them are intended for use in graphics
software such as the Gimp, and are not complete enough to serve as screen fonts.
In addition, Xorg can be configured to use TrueType fonts with a minimum of effort.
For more details on this, see the
.Xr X 7 manual page or .
.Pp
To install the above Type1 font collections from binary packages, run the
following commands:
.Bd -literal -offset indent
# pkg install urwfonts
.Ed
.Pp
Alternatively, to build from the Ports Collection, run the following commands:
.Bd -literal -offset indent
# cd /usr/ports/x11-fonts/urwfonts
# make install clean
.Ed
.Pp
And likewise with the freefont or other collections.
To have the X server detect these fonts, add an appropriate line to the X
server configuration file (
.Pa /etc/X11/xorg.conf
), which reads:
.Bd -literal -offset indent
FontPath "/usr/local/share/fonts/urwfonts/"
.Ed
.Pp
Alternatively, at the command line in the X session run:
.Bd -literal -offset indent
% xset fp+ /usr/local/share/fonts/urwfonts
% xset fp rehash
.Ed
.Pp
This will work but will be lost when the X session is closed, unless it is
added to the startup file (
.Pa ~/.xinitrc
for a normal
.Cm startx
session, or
.Pa ~/.xsession
when logging in through a graphical login manager like XDM).
A third way is to use the new
.Pa /usr/local/etc/fonts/local.conf
as demonstrated in .
.Ss TRUETYPE FONTS
.Pp
Xorg has built in support for rendering TrueType fonts.
There are two different modules that can enable this functionality.
The freetype module is used in this example because it is more consistent with
the other font rendering back-ends.
To enable the freetype module just add the following line to the
.Ql "Module"
section of
.Pa /etc/X11/xorg.conf
.
.Bd -literal -offset indent
Load  "freetype"
.Ed
.Pp
Now make a directory for the TrueType fonts (for example,
.Pa /usr/local/share/fonts/TrueType
) and copy all of the TrueType fonts into this directory.
Keep in mind that TrueType fonts cannot be directly taken from an Apple  Mac; they must be in UNIX/MS-DOS/Windows format for use by Xorg.
Once the files have been copied into this directory, use mkfontdir to create a
.Pa fonts.dir
, so that the X font renderer knows that these new files have been installed.
.Cm mkfontdir
can be installed as a package:
.Bd -literal -offset indent
# pkg install mkfontdir
.Ed
.Pp
Then create an index of X font files in a directory:
.Bd -literal -offset indent
# cd /usr/local/share/fonts/TrueType
# mkfontdir
.Ed
.Pp
Now add the TrueType directory to the font path.
This is just the same as described in :
.Bd -literal -offset indent
% xset fp+ /usr/local/share/fonts/TrueType
% xset fp rehash
.Ed
.Pp
or add a
.Ql FontPath
line to
.Pa xorg.conf
.
.Pp
Now Gimp, Apache OpenOffice, and all of the other X applications should now recognize the installed TrueType fonts.
Extremely small fonts (as with text in a high resolution display on a web page)
and extremely large fonts (within StarOffice) will look much better now.
.Ss ANTI-ALIASED FONTS
.Pp
All fonts in Xorg that are found in
.Pa /usr/local/share/fonts/
and
.Pa ~/.fonts/
are automatically made available for anti-aliasing to Xft-aware applications.
Most recent applications are Xft-aware, including KDE, GNOME, and Firefox.
.Pp
To control which fonts are anti-aliased, or to configure anti-aliasing
properties, create (or edit, if it already exists) the file
.Pa /usr/local/etc/fonts/local.conf
.
Several advanced features of the Xft font system can be tuned using this file;
this section describes only some simple possibilities.
For more details, please see
.Xr fonts-conf 5 .
.Pp
This file must be in XML format.
Pay careful attention to case, and make sure all tags are properly closed.
The file begins with the usual XML header followed by a DOCTYPE definition, and
then the
.Ql <fontconfig>
tag:
.Bd -literal -offset indent
<?xml version="1.0"?>
      <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
      <fontconfig>
.Ed
.Pp
As previously stated, all fonts in
.Pa /usr/local/share/fonts/
as well as
.Pa ~/.fonts/
are already made available to Xft-aware applications.
To add another directory outside of these two directory trees, add a line like
this to
.Pa /usr/local/etc/fonts/local.conf
:
.Bd -literal -offset indent
<dir>/path/to/my/fonts</dir>
.Ed
.Pp
After adding new fonts, and especially new font directories, rebuild the font
caches:
.Bd -literal -offset indent
# fc-cache -f
.Ed
.Pp
Anti-aliasing makes borders slightly fuzzy, which makes very small text more
readable and removes
.Do
staircases
.Dc
from large text, but can cause eyestrain if applied to normal text.
To exclude font sizes smaller than 14 point from anti-aliasing, include these
lines:
.Bd -literal -offset indent
        <match target="font">
	    <test name="size" compare="less">
		<double>14</double>
	    </test>
	    <edit name="antialias" mode="assign">
		<bool>false</bool>
	    </edit>
	</match>
	<match target="font">
	    <test name="pixelsize" compare="less" qual="any">
		<double>14</double>
	    </test>
	    <edit mode="assign" name="antialias">
		<bool>false</bool>
	    </edit>
	</match>
.Ed
.Pp
Spacing for some monospaced fonts might also be inappropriate with
anti-aliasing.
This seems to be an issue with KDE, in particular.
One possible fix is to force the spacing for such fonts to be 100.
Add these lines:
.Bd -literal -offset indent
	<match target="pattern" name="family">
	   <test qual="any" name="family">
	       <string>fixed</string>
	   </test>
	   <edit name="family" mode="assign">
	       <string>mono</string>
	   </edit>
	</match>
	<match target="pattern" name="family">
	    <test qual="any" name="family">
		<string>console</string>
	    </test>
	    <edit name="family" mode="assign">
		<string>mono</string>
	    </edit>
	</match>
.Ed
.Pp
(this aliases the other common names for fixed fonts as
.Ql "mono"
), and then add:
.Bd -literal -offset indent
         <match target="pattern" name="family">
	     <test qual="any" name="family">
		 <string>mono</string>
	     </test>
	     <edit name="spacing" mode="assign">
		 <int>100</int>
	     </edit>
	 </match>
.Ed
.Pp
Certain fonts, such as Helvetica, may have a problem when anti-aliased.
Usually this manifests itself as a font that seems cut in half vertically.
At worst, it may cause applications to crash.
To avoid this, consider adding the following to
.Pa local.conf
:
.Bd -literal -offset indent
         <match target="pattern" name="family">
	     <test qual="any" name="family">
		 <string>Helvetica</string>
	     </test>
	     <edit name="family" mode="assign">
		 <string>sans-serif</string>
	     </edit>
	 </match>
.Ed
.Pp
After editing
.Pa local.conf
, make certain to end the file with the
.Ql </fontconfig>
tag.
Not doing this will cause changes to be ignored.
.Pp
Users can add personalized settings by creating their own
.Pa ~/.config/fontconfig/fonts.conf
.
This file uses the same XML format described above.
.Pp
One last point: with an LCD screen, sub-pixel sampling may be desired.
This basically treats the (horizontally separated) red, green and blue
components separately to improve the horizontal resolution; the results can be
dramatic.
To enable this, add the line somewhere in
.Pa local.conf
:
.Bd -literal -offset indent
	 <match target="font">
	     <test qual="all" name="rgba">
		 <const>unknown</const>
	     </test>
	     <edit name="rgba" mode="assign">
		 <const>rgb</const>
	     </edit>
	 </match>
.Ed
.Pp
Depending on the sort of display,
.Ql rgb
may need to be changed to
.Ql bgr
,
.Ql vrgb
or
.Ql vbgr
: experiment and see which works best.
.Pp
Xorg provides an X Display Manager, XDM, which can be used for login session management.
 XDM provides a graphical interface for choosing which display server to connect to
and for entering authorization information such as a login and password
combination.
.Pp
This section demonstrates how to configure the X Display Manager on FreeBSD.
Some desktop environments provide their own graphical login manager.
Refer to for instructions on how to configure the GNOME Display Manager and for instructions on how to configure the KDE Display Manager.
.Ss CONFIGURING XDM
.Pp
To install XDM, use the
.Ql x11/xdm
package or port.
Once installed, XDM can be configured to run when the machine boots up by editing this entry in
.Pa /etc/ttys
:
.Bd -literal -offset indent
ttyv8   "/usr/local/bin/xdm -nodaemon"  xterm   off secure
.Ed
.Pp
Change the
.Ql off
to
.Ql on
and save the edit.
The
.Ql ttyv8
in this entry indicates that XDM will run on the ninth virtual terminal.
.Pp
The XDM configuration directory is located in
.Pa /usr/local/etc/X11/xdm
.
This directory contains several files used to change the behavior and
appearance of XDM, as well as a few scripts and programs used to set up the desktop when XDM is running.
 summarizes the function of each of these files.
The exact syntax and usage of these files is described in
.Xr xdm 1 .
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
File
.Ta
Description
.It
.Ta
.Pa Xaccess
.Ta
The protocol for connecting to XDM is called the X Display Manager Connection Protocol (XDMCP) This file is a client authorization ruleset for controlling XDMCP connections from remote machines.
By default, this file does not allow any remote clients to connect.
.It
.Ta
.Pa Xresources
.Ta
This file controls the look and feel of the XDM display chooser and login screens.
The default configuration is a simple rectangular login window with the
hostname of the machine displayed at the top in a large font and
.Do
Login:
.Dc
and
.Do
Password:
.Dc
prompts below.
The format of this file is identical to the app-defaults file described in the Xorg documentation.
.It
.Ta
.Pa Xservers
.Ta
The list of local and remote displays the chooser should provide as login
choices.
.It
.Ta
.Pa Xsession
.Ta
Default session script for logins which is run by XDM after a user has logged in.
This points to a customized session script in
.Pa ~/.xsession
.
.It
.Ta
.Pa Xsetup_
*
.Ta
Script to automatically launch applications before displaying the chooser or
login interfaces.
There is a script for each display being used, named
.Pa Xsetup_*
, where
.Ql *
is the local display number.
Typically these scripts run one or two programs in the background such as
.Cm xconsole
.
.It
.Ta
.Pa xdm-config
.Ta
Global configuration for all displays running on this machine.
.It
.Ta
.Pa xdm-errors
.Ta
Contains errors generated by the server program.
If a display that XDM is trying to start hangs, look at this file for error messages.
These messages are also written to the user's
.Pa ~/.xsession-errors
on a per-session basis.
.It
.Ta
.Pa xdm-pid
.Ta
The running process ID of XDM.
.El
.Ss CONFIGURING REMOTE ACCESS
.Pp
By default, only users on the same system can login using XDM.
To enable users on other systems to connect to the display server, edit the
access control rules and enable the connection listener.
.Pp
To configure XDM to listen for any remote connection, comment out the
.Ql DisplayManager.requestPort
line in
.Pa /usr/local/etc/X11/xdm/xdm-config
by putting a
.Ql !
in front of it:
.Bd -literal -offset indent
! SECURITY: do not listen for XDMCP or Chooser requests
! Comment out this line if you want to manage X terminals with xdm
DisplayManager.requestPort:     0
.Ed
.Pp
Save the edits and restart XDM.
To restrict remote access, look at the example entries in
.Pa /usr/local/etc/X11/xdm/Xaccess
and refer to
.Xr xdm 1 for further information.
.Pp
This section describes how to install three popular desktop environments on a
FreeBSD system.
A desktop environment can range from a simple window manager to a complete
suite of desktop applications.
Over a hundred desktop environments are available in the
.Pa x11-wm
category of the Ports Collection.
.Ss GNOME
.Pp
GNOME is a user-friendly desktop environment.
It includes a panel for starting applications and displaying status, a desktop,
a set of tools and applications, and a set of conventions that make it easy for
applications to cooperate and be consistent with each other.
More information regarding GNOME on FreeBSD can be found at https://www.FreeBSD.org/gnome.
That web site contains additional documentation about installing, configuring,
and managing GNOME on FreeBSD.
.Pp
This desktop environment can be installed from a package:
.Bd -literal -offset indent
# pkg install gnome3
.Ed
.Pp
To instead build GNOME from ports, use the following command.
 GNOME is a large application and will take some time to compile, even on a fast
computer.
.Bd -literal -offset indent
# cd /usr/ports/x11/gnome3
# make install clean
.Ed
.Pp
GNOME requires
.Pa /proc
to be mounted.
Add this line to
.Pa /etc/fstab
to mount this file system automatically during system startup:
.Bd -literal -offset indent
proc           /proc       procfs  rw  0   0
.Ed
.Pp
GNOME uses D-Bus and HAL for a message bus and hardware abstraction.
These applications are automatically installed as dependencies of GNOME.
Enable them in
.Pa /etc/rc.conf
so they will be started when the system boots:
.Bd -literal -offset indent
dbus_enable="YES"
hald_enable="YES"
.Ed
.Pp
After installation, configure Xorg to start GNOME.
The easiest way to do this is to enable the GNOME Display Manager, GDM, which is installed as part of the GNOME package or port.
It can be enabled by adding this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
gdm_enable="YES"
.Ed
.Pp
It is often desirable to also start all GNOME services.
To achieve this, add a second line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
gnome_enable="YES"
.Ed
.Pp
GDM will start automatically when the system boots.
.Pp
A second method for starting GNOME is to type
.Cm startx
from the command-line after configuring
.Pa ~/.xinitrc
.
If this file already exists, replace the line that starts the current window
manager with one that starts
.Pa /usr/local/bin/gnome-session
.
If this file does not exist, create it with this command:
.Bd -literal -offset indent
% echo "exec /usr/local/bin/gnome-session" > ~/.xinitrc
.Ed
.Pp
A third method is to use XDM as the display manager.
In this case, create an executable
.Pa ~/.xsession
:
.Bd -literal -offset indent
% echo "#!/bin/sh" > ~/.xsession
% echo "exec /usr/local/bin/gnome-session" >> ~/.xsession
% chmod +x ~/.xsession
.Ed
.Ss KDE
.Pp
KDE is another easy-to-use desktop environment.
This desktop provides a suite of applications with a consistent look and feel,
a standardized menu and toolbars, keybindings, color-schemes,
internationalization, and a centralized, dialog-driven desktop configuration.
More information on KDE can be found at http://www.kde.org/.
For FreeBSD-specific information, consult http://freebsd.kde.org.
.Pp
To install the KDE package, type:
.Bd -literal -offset indent
# pkg install x11/kde4
.Ed
.Pp
To instead build the KDE port, use the following command.
Installing the port will provide a menu for selecting which components to
install.
 KDE is a large application and will take some time to compile, even on a fast
computer.
.Bd -literal -offset indent
# cd /usr/ports/x11/kde4
# make install clean
.Ed
.Pp
KDE requires
.Pa /proc
to be mounted.
Add this line to
.Pa /etc/fstab
to mount this file system automatically during system startup:
.Bd -literal -offset indent
proc           /proc       procfs  rw  0   0
.Ed
.Pp
KDE uses D-Bus and HAL for a message bus and hardware abstraction.
These applications are automatically installed as dependencies of KDE.
Enable them in
.Pa /etc/rc.conf
so they will be started when the system boots:
.Bd -literal -offset indent
dbus_enable="YES"
hald_enable="YES"
.Ed
.Pp
The installation of KDE includes the KDE Display Manager, KDM.
To enable this display manager, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
kdm4_enable="YES"
.Ed
.Pp
A second method for launching KDE is to type
.Cm startx
from the command line.
For this to work, the following line is needed in
.Pa ~/.xinitrc
:
.Bd -literal -offset indent
exec /usr/local/bin/startkde
.Ed
.Pp
A third method for starting KDE is through XDM.
To do so, create an executable
.Pa ~/.xsession
as follows:
.Bd -literal -offset indent
% echo "#!/bin/sh" > ~/.xsession
% echo "exec /usr/local/bin/startkde" >> ~/.xsession
% chmod +x ~/.xsession
.Ed
.Pp
Once KDE is started, refer to its built-in help system for more information on how to
use its various menus and applications.
.Ss XFCE
.Pp
Xfce is a desktop environment based on the GTK+ toolkit used by GNOME.
However, it is more lightweight and provides a simple, efficient, easy-to-use
desktop.
It is fully configurable, has a main panel with menus, applets, and application
launchers, provides a file manager and sound manager, and is themeable.
Since it is fast, light, and efficient, it is ideal for older or slower
machines with memory limitations.
More information on Xfce can be found at http://www.xfce.org.
.Pp
To install the Xfce package:
.Bd -literal -offset indent
# pkg install xfce
.Ed
.Pp
Alternatively, to build the port:
.Bd -literal -offset indent
# cd /usr/ports/x11-wm/xfce4
# make install clean
.Ed
.Pp
Unlike GNOME or KDE, Xfce does not provide its own login manager.
In order to start Xfce from the command line by typing
.Cm startx
, first add its entry to
.Pa ~/.xinitrc
:
.Bd -literal -offset indent
% echo "exec /usr/local/bin/startxfce4 --with-ck-launch" > ~/.xinitrc
.Ed
.Pp
An alternate method is to use XDM.
To configure this method, create an executable
.Pa ~/.xsession
:
.Bd -literal -offset indent
% echo "#!/bin/sh" > ~/.xsession
% echo "exec /usr/local/bin/startxfce4 --with-ck-launch" >> ~/.xsession
% chmod +x ~/.xsession
.Ed
.Ss INSTALLING COMPIZ FUSION
.Pp
One way to make using a desktop computer more pleasant is with nice 3D effects.
.Pp
Installing the Compiz Fusion package is easy, but configuring it requires a few steps that are not described
in the port's documentation.
.Ss SETTING UP THE FREEBSD NVIDIA DRIVER
.Pp
Desktop effects can cause quite a load on the graphics card.
For an nVidia-based graphics card, the proprietary driver is required for good
performance.
Users of other graphics cards can skip this section and continue with the
.Pa xorg.conf
configuration.
.Pp
To determine which nVidia driver is needed see the FAQ question on the subject.
.Pp
Having determined the correct driver to use for your card, installation is as
simple as installing any other package.
.Pp
For example, to install the latest driver:
.Bd -literal -offset indent
# pkg install x11/nvidia-driver
.Ed
.Pp
The driver will create a kernel module, which needs to be loaded at system
startup.
Add the following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
nvidia_load="YES"
.Ed
.Pp
To immediately load the kernel module into the running kernel by issuing a
command like
.Cm kldload nvidia
, however it has been noted that the some versions of Xorg will not function properly if the driver is not loaded at boot time.
After editing
.Pa /boot/loader.conf
, a reboot is recommended.
.Pp
With the kernel module loaded, you normally only need to change a single line
in
.Pa xorg.conf
to enable the proprietary driver:
.Pp
Find the following line in
.Pa /etc/X11/xorg.conf
:
.Bd -literal -offset indent
Driver      "nv"
.Ed
.Pp
and change it to:
.Bd -literal -offset indent
Driver      "nvidia"
.Ed
.Pp
Start the GUI as usual, and you should be greeted by the nVidia splash.
Everything should work as usual.
.Ss CONFIGURING XORG.CONF FOR DESKTOP EFFECTS
.Pp
To enable Compiz Fusion,
.Pa /etc/X11/xorg.conf
needs to be modified:
.Pp
Add the following section to enable composite effects:
.Bd -literal -offset indent
Section "Extensions"
    Option         "Composite" "Enable"
EndSection
.Ed
.Pp
Locate the
.Do
Screen
.Dc
section which should look similar to the one below:
.Bd -literal -offset indent
Section "Screen"
    Identifier     "Screen0"
    Device         "Card0"
    Monitor        "Monitor0"
    ...
.Ed
.Pp
and add the following two lines (after
.Do
Monitor
.Dc
will do):
.Bd -literal -offset indent
DefaultDepth    24
Option         "AddARGBGLXVisuals" "True"
.Ed
.Pp
Locate the
.Do
Subsection
.Dc
that refers to the screen resolution that you wish to use.
For example, if you wish to use 1280x1024, locate the section that follows.
If the desired resolution does not appear in any subsection, you may add the
relevant entry by hand:
.Bd -literal -offset indent
SubSection     "Display"
    Viewport    0 0
    Modes      "1280x1024"
EndSubSection
.Ed
.Pp
A color depth of 24 bits is needed for desktop composition, change the above
subsection to:
.Bd -literal -offset indent
SubSection     "Display"
    Viewport    0 0
    Depth       24
    Modes      "1280x1024"
EndSubSection
.Ed
.Pp
Finally, confirm that the
.Do
glx
.Dc
and
.Do
extmod
.Dc
modules are loaded in the
.Do
Module
.Dc
section:
.Bd -literal -offset indent
Section "Module"
    Load           "extmod"
    Load           "glx"
    ...
.Ed
.Pp
The preceding can be done automatically with
.Ql x11/nvidia-xconfig
by running (as root):
.Bd -literal -offset indent
# nvidia-xconfig --add-argb-glx-visuals
# nvidia-xconfig --composite
# nvidia-xconfig --depth=24
.Ed
.Ss INSTALLING AND CONFIGURING COMPIZ FUSION
.Pp
Installing Compiz Fusion is as simple as any other package:
.Bd -literal -offset indent
# pkg install x11-wm/compiz-fusion
.Ed
.Pp
When the installation is finished, start your graphic desktop and at a
terminal, enter the following commands (as a normal user):
.Bd -literal -offset indent
% compiz --replace --sm-disable --ignore-desktop-hints ccp &
% emerald --replace &
.Ed
.Pp
Your screen will flicker for a few seconds, as your window manager (e.g.
 Metacity if you are using GNOME) is replaced by Compiz Fusion.
 Emerald takes care of the window decorations (i.e.
close, minimize, maximize buttons, title bars and so on).
.Pp
You may convert this to a trivial script and have it run at startup
automatically (e.g.
by adding to
.Do
Sessions
.Dc
in a GNOME desktop):
.Bd -literal -offset indent
#! /bin/sh
compiz --replace --sm-disable --ignore-desktop-hints ccp &
emerald --replace &
.Ed
.Pp
Save this in your home directory as, for example,
.Pa start-compiz
and make it executable:
.Bd -literal -offset indent
% chmod +x ~/start-compiz
.Ed
.Pp
Then use the GUI to add it to
.Ql Startup Programs
(located in
.Ql System
,
.Ql Preferences
,
.Ql Sessions
on a GNOME desktop).
.Pp
To actually select all the desired effects and their settings, execute (again
as a normal user) the Compiz Config Settings Manager:
.Bd -literal -offset indent
% ccsm
.Ed
.Pp
In GNOME, this can also be found in the
.Ql System
,
.Ql Preferences
menu.
.Pp
If you have selected
.Do
gconf support
.Dc
during the build, you will also be able to view these settings using
.Cm gconf-editor
under
.Ql apps/compiz
.
.Ss TROUBLESHOOTING
.Pp
If the mouse does not work, you will need to first configure it before
proceeding.
In recent Xorg versions, the
.Ql InputDevice
sections in
.Pa xorg.conf
are ignored in favor of the autodetected devices.
To restore the old behavior, add the following line to the
.Ql ServerLayout
or
.Ql ServerFlags
section of this file:
.Bd -literal -offset indent
Option "AutoAddDevices" "false"
.Ed
.Pp
Input devices may then be configured as in previous versions, along with any
other options needed (e.g., keyboard layout switching).
.Pp
As previously explained the hald daemon will, by default, automatically detect your keyboard.
There are chances that your keyboard layout or model will not be correct,
desktop environments like GNOME, KDE or Xfce provide tools to configure the keyboard.
However, it is possible to set the keyboard properties directly either with the
help of the
.Xr setxkbmap 1 utility or with a hald's configuration rule.
.Pp
For example if, one wants to use a PC 102 keys keyboard coming with a french
layout, we have to create a keyboard configuration file for hald called
.Pa x11-input.fdi
and saved in the
.Pa /usr/local/etc/hal/fdi/policy
directory.
This file should contain the following lines:
.Bd -literal -offset indent
<?xml version="1.0" encoding="iso-8859-1"?>
<deviceinfo version="0.2">
  <device>
    <match key="info.capabilities" contains="input.keyboard">
	  <merge key="input.x11_options.XkbModel" type="string">pc102</merge>
	  <merge key="input.x11_options.XkbLayout" type="string">fr</merge>
    </match>
  </device>
</deviceinfo>
.Ed
.Pp
If this file already exists, just copy and add to your file the lines regarding
the keyboard configuration.
.Pp
You will have to reboot your machine to force hald to read this file.
.Pp
It is possible to do the same configuration from an X terminal or a script with
this command line:
.Bd -literal -offset indent
% setxkbmap -model pc102 -layout fr
.Ed
.Pp
.Pa /usr/local/share/X11/xkb/rules/base.lst
lists the various keyboard, layouts and options available.
.Pp
The
.Pa xorg.conf.new
configuration file may now be tuned to taste.
Open the file in a text editor such as
.Xr emacs 1 or
.Xr ee 1 .
If the monitor is an older or unusual model that does not support autodetection
of sync frequencies, those settings can be added to
.Pa xorg.conf.new
under the
.Ql "Monitor"
section:
.Bd -literal -offset indent
Section "Monitor"
	Identifier   "Monitor0"
	VendorName   "Monitor Vendor"
	ModelName    "Monitor Model"
	HorizSync    30-107
	VertRefresh  48-120
EndSection
.Ed
.Pp
Most monitors support sync frequency autodetection, making manual entry of
these values unnecessary.
For the few monitors that do not support autodetection, avoid potential damage
by only entering values provided by the manufacturer.
.Pp
X allows DPMS (Energy Star) features to be used with capable monitors.
The
.Xr xset 1 program controls the time-outs and can force standby, suspend, or off modes.
If you wish to enable DPMS features for your monitor, you must add the
following line to the monitor section:
.Bd -literal -offset indent
Option       "DPMS"
.Ed
.Pp
While the
.Pa xorg.conf.new
configuration file is still open in an editor, select the default resolution
and color depth desired.
This is defined in the
.Ql "Screen"
section:
.Bd -literal -offset indent
Section "Screen"
	Identifier "Screen0"
	Device     "Card0"
	Monitor    "Monitor0"
	DefaultDepth 24
	SubSection "Display"
		Viewport  0 0
		Depth     24
		Modes     "1024x768"
	EndSubSection
EndSection
.Ed
.Pp
The
.Ql DefaultDepth
keyword describes the color depth to run at by default.
This can be overridden with the
.Ar -depth
command line switch to
.Xr Xorg 1 .
The
.Ql Modes
keyword describes the resolution to run at for the given color depth.
Note that only VESA standard modes are supported as defined by the target
system's graphics hardware.
In the example above, the default color depth is twenty-four bits per pixel.
At this color depth, the accepted resolution is 1024 by 768 pixels.
.Pp
Finally, write the configuration file and test it using the test mode given
above.
.Pp
One of the tools available to assist you during troubleshooting process are the Xorg log files, which contain information on each device that the Xorg server attaches to.
 Xorg log file names are in the format of
.Pa /var/log/Xorg.0.log
.
The exact name of the log can vary from
.Pa Xorg.0.log
to
.Pa Xorg.8.log
and so forth.
.Pp
If all is well, the configuration file needs to be installed in a common
location where
.Xr Xorg 1 can find it.
This is typically
.Pa /etc/X11/xorg.conf
or
.Pa /usr/local/etc/X11/xorg.conf
.
.Bd -literal -offset indent
# cp xorg.conf.new /etc/X11/xorg.conf
.Ed
.Pp
The Xorg configuration process is now complete.
 Xorg may be now started with the
.Xr startx 1 utility.
The Xorg server may also be started with the use of
.Xr xdm 1 .
.Ss CONFIGURATION WITH INTEL I810 GRAPHICS CHIPSETS
.Pp
Configuration with Intel i810 integrated chipsets requires the
.Pa agpgart
AGP programming interface for Xorg to drive the card.
See the
.Xr agp 4 driver manual page for more information.
.Pp
This will allow configuration of the hardware as any other graphics board.
Note on systems without the
.Xr agp 4 driver compiled in the kernel, trying to load the module with
.Xr kldload 8 will not work.
This driver has to be in the kernel at boot time through being compiled in or
using
.Pa /boot/loader.conf
.
.Ss ADDING A WIDESCREEN FLATPANEL TO THE MIX
.Pp
This section assumes a bit of advanced configuration knowledge.
If attempts to use the standard configuration tools above have not resulted in
a working configuration, there is information enough in the log files to be of
use in getting the setup working.
Use of a text editor will be necessary.
.Pp
Current widescreen (WSXGA, WSXGA+, WUXGA, WXGA, WXGA+, et.al.) formats support
16:10 and 10:9 formats or aspect ratios that can be problematic.
Examples of some common screen resolutions for 16:10 aspect ratios are:
.Bl -bullet -offset -compact
.It
2560x1600
.It
1920x1200
.It
1680x1050
.It
1440x900
.It
1280x800
.El
.Pp
At some point, it will be as easy as adding one of these resolutions as a
possible
.Ql Mode
in the
.Ql Section "Screen"
as such:
.Bd -literal -offset indent
Section "Screen"
Identifier "Screen0"
Device     "Card0"
Monitor    "Monitor0"
DefaultDepth 24
SubSection "Display"
	Viewport  0 0
	Depth     24
	Modes     "1680x1050"
EndSubSection
EndSection
.Ed
.Pp
Xorg is smart enough to pull the resolution information from the widescreen via
I2C/DDC information so it knows what the monitor can handle as far as
frequencies and resolutions.
.Pp
If those
.Ql ModeLines
do not exist in the drivers, one might need to give Xorg a little hint.
Using
.Pa /var/log/Xorg.0.log
one can extract enough information to manually create a
.Ql ModeLine
that will work.
Simply look for information resembling this:
.Bd -literal -offset indent
(II) MGA(0): Supported additional Video Mode:
(II) MGA(0): clock: 146.2 MHz   Image Size:  433 x 271 mm
(II) MGA(0): h_active: 1680  h_sync: 1784  h_sync_end 1960 h_blank_end 2240 h_border: 0
(II) MGA(0): v_active: 1050  v_sync: 1053  v_sync_end 1059 v_blanking: 1089 v_border: 0
(II) MGA(0): Ranges: V min: 48  V max: 85 Hz, H min: 30  H max: 94 kHz, PixClock max 170 MHz
.Ed
.Pp
This information is called EDID information.
Creating a
.Ql ModeLine
from this is just a matter of putting the numbers in the correct order:
.Bd -literal -offset indent
ModeLine <name> <clock> <4 horiz. timings> <4 vert. timings>
.Ed
.Pp
So that the
.Ql ModeLine
in
.Ql Section "Monitor"
for this example would look like this:
.Bd -literal -offset indent
Section "Monitor"
Identifier      "Monitor1"
VendorName      "Bigname"
ModelName       "BestModel"
ModeLine        "1680x1050" 146.2 1680 1784 1960 2240 1050 1053 1059 1089
Option          "DPMS"
EndSection
.Ed
.Pp
Now having completed these simple editing steps, X should start on your new
widescreen monitor.
.Ss TROUBLESHOOTING COMPIZ FUSION
.Pp
I have installed Compiz Fusion, and after running the commands you mention, my windows are left without title
bars and buttons.
What is wrong?
.Pp
You are probably missing a setting in
.Pa /etc/X11/xorg.conf
.
Review this file carefully and check especially the
.Ql DefaultDepth
and
.Ql AddARGBGLXVisuals
directives.
.Pp
When I run the command to start Compiz Fusion, the X server crashes and I am back at the console.
What is wrong?
.Pp
If you check
.Pa /var/log/Xorg.0.log
, you will probably find error messages during the X startup.
The most common would be:
.Bd -literal -offset indent
(EE) NVIDIA(0):     Failed to initialize the GLX module; please check in your X
(EE) NVIDIA(0):     log file that the GLX module has been loaded in your X
(EE) NVIDIA(0):     server, and that the module is the NVIDIA GLX module.  If
(EE) NVIDIA(0):     you continue to encounter problems, Please try
(EE) NVIDIA(0):     reinstalling the NVIDIA driver.
.Ed
.Pp
This is usually the case when you upgrade Xorg.
You will need to reinstall the
.Ql x11/nvidia-driver
package so glx is built again.
.Sh COMMON TASKS
.Pp
Now that the basics have been covered, this part of the book discusses some
frequently used features of FreeBSD.
These chapters:
.Bl -bullet -offset -compact
.It
Introduce popular and useful desktop applications: browsers, productivity
tools, document viewers, and more.
.It
Introduce a number of multimedia tools available for FreeBSD.
.It
Explain the process of building a customized FreeBSD kernel to enable extra
functionality.
.It
Describe the print system in detail, both for desktop and network-connected
printer setups.
.It
Show how to run Linux applications on the FreeBSD system.
.El
.Pp
Some of these chapters recommend prior reading, and this is noted in the
synopsis at the beginning of each chapter.
.Sh DESKTOP APPLICATIONS
.Ss SYNOPSIS
.Pp
While FreeBSD is popular as a server for its performance and stability, it is
also suited for day-to-day use as a desktop.
With over 24,000 applications available as FreeBSD packages or ports, it is
easy to build a customized desktop that runs a wide variety of desktop
applications.
This chapter demonstrates how to install numerous desktop applications,
including web browsers, productivity software, document viewers, and financial
software.
.Pp
Users who prefer to install a pre-built desktop version of FreeBSD rather than
configuring one from scratch should refer to the trueos.org website.
.Pp
Readers of this chapter should know how to:
.Bl -bullet -offset -compact
.It
Install additional software using packages or ports as described in .
.It
Install X and a window manager as described in .
.El
.Pp
For information on how to configure a multimedia environment, refer to .
.Ss BROWSERS
.Pp
FreeBSD does not come with a pre-installed web browser.
Instead, the www category of the Ports Collection contains many browsers which can be installed
as a package or compiled from the Ports Collection.
.Pp
The KDE and GNOME desktop environments include their own HTML browser.
Refer to for more information on how to set up these complete desktops.
.Pp
Some lightweight browsers include
.Ql www/dillo2
,
.Ql www/links
, and
.Ql www/w3m
.
.Pp
This section demonstrates how to install the following popular web browsers and
indicates if the application is resource-heavy, takes time to compile from
ports, or has any major dependencies.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Application Name
.Ta
Resources Needed
.Ta
Installation from Ports
.Ta
Notes
.It
.Ta
Firefox
.Ta
medium
.Ta
heavy
.Ta
FreeBSD, Linux, and localized versions are available
.It
.Ta
Opera
.Ta
light
.Ta
light
.Ta
FreeBSD and Linux versions are available
.It
.Ta
Konqueror
.Ta
medium
.Ta
heavy
.Ta
Requires KDE libraries
.It
.Ta
Chromium
.Ta
medium
.Ta
heavy
.Ta
Requires Gtk+
.El
.Ss FIREFOX
.Pp
Firefox is an open source browser that features a standards-compliant HTML display
engine, tabbed browsing, popup blocking, extensions, improved security, and
more.
 Firefox is based on the Mozilla codebase.
.Pp
To install the package of the latest release version of Firefox, type:
.Bd -literal -offset indent
# pkg install firefox
.Ed
.Pp
To instead install Firefox Extended Support Release (ESR) version, use:
.Bd -literal -offset indent
# pkg install firefox-esr
.Ed
.Pp
Localized versions are available in
.Ql www/firefox-i18n
and
.Ql www/firefox-esr-i18n
.
.Pp
The Ports Collection can instead be used to compile the desired version of Firefox from source code.
This example builds
.Ql www/firefox
, where
.Ql firefox
can be replaced with the ESR or localized version to install.
.Bd -literal -offset indent
# cd /usr/ports/www/firefox
# make install clean
.Ed
.Ss OPERA
.Pp
Opera is a full-featured and standards-compliant browser which is still lightweight
and fast.
It comes with a built-in mail and news reader, an IRC client, an RSS/Atom feeds
reader, and more.
It is available as a native FreeBSD version and as a version that runs under Linux emulation.
.Pp
This command installs the package of the FreeBSD version of Opera.
Replace
.Ql opera
with
.Ql linux-opera
to instead install the Linux version.
.Bd -literal -offset indent
# pkg install opera
.Ed
.Pp
Alternately, install either version through the Ports Collection.
This example compiles the native version:
.Bd -literal -offset indent
# cd /usr/ports/www/opera
# make install clean
.Ed
.Pp
To install the Linux version, substitute
.Ql linux-opera
in place of
.Ql opera
.
.Pp
To install Adobe  Flash plugin support, first compile the
.Ql www/linux-flashplayer
port.
Licensing restrictions prevent making a package available.
Then install
.Ql www/opera-linuxplugins
.
This example compiles both applications from ports:
.Bd -literal -offset indent
# cd /usr/ports/www/linux-flashplayer
# make install clean
# cd /usr/ports/www/opera-linuxplugins
# make install clean
.Ed
.Pp
Once installed, check the presence of the plugin by starting the browser,
entering
.Ql opera:plugins
in the location bar and pressing Enter.
A list should appear with all the currently available plugins.
.Pp
To add the Java plugin, follow install
.Ql java/icedtea-web
.
.Ss KONQUEROR
.Pp
Konqueror is more than a web browser as it is also a file manager and a multimedia
viewer.
It is included in the
.Ql x11/kde4-baseapps
package or port.
.Pp
Konqueror supports WebKit as well as its own KHTML.
WebKit is a rendering engine used by many modern browsers including Chromium.
To use WebKit with Konqueror on FreeBSD, install the
.Ql www/kwebkitpart
package or port.
This example installs the package:
.Bd -literal -offset indent
# pkg install kwebkitpart
.Ed
.Pp
To install from the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/www/kwebkitpart
# make install clean
.Ed
.Pp
To enable WebKit within Konqueror, click
.Do
Settings
.Dc
,
.Do
Configure Konqueror
.Dc
.
In the
.Do
General
.Dc
settings page, click the drop-down menu next to
.Do
Default web browser engine
.Dc
and change
.Do
KHTML
.Dc
to
.Do
WebKit
.Dc
.
.Pp
Konqueror also supports Flash.
A
.Do
How To
.Dc
guide for getting Flash support on Konqueror is available at
.Lk http://freebsd.kde.org/howtos/konqueror-flash.php
.
.Ss CHROMIUM
.Pp
Chromium is an open source browser project that aims to build a safer, faster, and more
stable web browsing experience.
 Chromium features tabbed browsing, popup blocking, extensions, and much more.
 Chromium is the open source project upon which the Google Chrome web browser is based.
.Pp
Chromium can be installed as a package by typing:
.Bd -literal -offset indent
# pkg install chromium
.Ed
.Pp
Alternatively, Chromium can be compiled from source using the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/www/chromium
# make install clean
.Ed
.Pp
The executable for Chromium is
.Pa /usr/local/bin/chrome
, not
.Pa /usr/local/bin/chromium
.
.Ss PRODUCTIVITY
.Pp
When it comes to productivity, users often look for an office suite or an
easy-to-use word processor.
While some desktop environments like KDE provide an office suite, there is no default productivity package.
Several office suites and graphical word processors are available for FreeBSD,
regardless of the installed window manager.
.Pp
This section demonstrates how to install the following popular productivity
software and indicates if the application is resource-heavy, takes time to
compile from ports, or has any major dependencies.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Application Name
.Ta
Resources Needed
.Ta
Installation from Ports
.Ta
Major Dependencies
.It
.Ta
Calligra
.Ta
light
.Ta
heavy
.Ta
KDE
.It
.Ta
AbiWord
.Ta
light
.Ta
light
.Ta
Gtk+ or GNOME
.It
.Ta
The Gimp
.Ta
light
.Ta
heavy
.Ta
Gtk+
.It
.Ta
Apache OpenOffice
.Ta
heavy
.Ta
huge
.Ta
JDK and Mozilla
.It
.Ta
LibreOffice
.Ta
somewhat heavy
.Ta
huge
.Ta
Gtk+, or KDE/ GNOME, or JDK
.El
.Ss CALLIGRA
.Pp
The KDE desktop environment includes an office suite which can be installed
separately from KDE.
 Calligra includes standard components that can be found in other office suites.
 Words is the word processor, Sheets is the spreadsheet program, Stage manages slide presentations, and Karbon is used to draw graphical documents.
.Pp
In FreeBSD,
.Ql editors/calligra
can be installed as a package or a port.
To install the package:
.Bd -literal -offset indent
# pkg install calligra
.Ed
.Pp
If the package is not available, use the Ports Collection instead:
.Bd -literal -offset indent
# cd /usr/ports/editors/calligra
# make install clean
.Ed
.Ss ABIWORD
.Pp
AbiWord is a free word processing program similar in look and feel to Microsoft Word.
It is fast, contains many features, and is user-friendly.
.Pp
AbiWord can import or export many file formats, including some proprietary ones like Microsoft
.Pa .rtf
.
.Pp
To install the AbiWord package:
.Bd -literal -offset indent
# pkg install abiword
.Ed
.Pp
If the package is not available, it can be compiled from the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/editors/abiword
# make install clean
.Ed
.Ss THE GIMP
.Pp
For image authoring or picture retouching, The GIMP provides a sophisticated image manipulation program.
It can be used as a simple paint program or as a quality photo retouching
suite.
It supports a large number of plugins and features a scripting interface.
 The GIMP can read and write a wide range of file formats and supports interfaces with
scanners and tablets.
.Pp
To install the package:
.Bd -literal -offset indent
# pkg install gimp
.Ed
.Pp
Alternately, use the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/graphics/gimp
# make install clean
.Ed
.Pp
The graphics category (freebsd.org/ports/graphics.html) of the Ports Collection contains several GIMP-related plugins, help files, and user manuals.
.Ss APACHE OPENOFFICE
.Pp
Apache OpenOffice is an open source office suite which is developed under the wing of the Apache
Software Foundation's Incubator.
It includes all of the applications found in a complete office productivity
suite: a word processor, spreadsheet, presentation manager, and drawing
program.
Its user interface is similar to other office suites, and it can import and
export in various popular file formats.
It is available in a number of different languages and internationalization has
been extended to interfaces, spell checkers, and dictionaries.
.Pp
The word processor of Apache OpenOffice uses a native XML file format for increased portability and flexibility.
The spreadsheet program features a macro language which can be interfaced with
external databases.
 Apache OpenOffice is stable and runs natively on Windows, Solaris, Linux, FreeBSD, and Mac OSX.
More information about Apache OpenOffice can be found at openoffice.org.
For FreeBSD specific information refer to porting.openoffice.org/freebsd/.
.Pp
To install the Apache OpenOffice package:
.Bd -literal -offset indent
# pkg install apache-openoffice
.Ed
.Pp
Once the package is installed, type the following command to launch Apache OpenOffice:
.Bd -literal -offset indent
% openoffice-X.Y.Z
.Ed
.Pp
where X.Y.Z is the version number of the installed version of Apache OpenOffice.
The first time Apache OpenOffice launches, some questions will be asked and a
.Pa .openoffice.org
folder will be created in the user's home directory.
.Pp
If the desired Apache OpenOffice package is not available, compiling the port is still an option.
However, this requires a lot of disk space and a fairly long time to compile:
.Bd -literal -offset indent
# cd /usr/ports/editors/openoffice-4
# make install clean
.Ed
.Pp
To build a localized version, replace the previous command with:
.Bd -literal -offset indent
# make LOCALIZED_LANG=your_language install clean
.Ed
.Pp
Replace your_language with the correct language ISO-code.
A list of supported language codes is available in
.Pa files/Makefile.localized
, located in the port's directory.
.Ss LIBREOFFICE
.Pp
LibreOffice is a free software office suite developed by documentfoundation.org.
It is compatible with other major office suites and available on a variety of
platforms.
It is a rebranded fork of Apache OpenOffice and includes applications found in a complete office productivity suite: a word
processor, spreadsheet, presentation manager, drawing program, database
management program, and a tool for creating and editing mathematical formulæ.
It is available in a number of different languages and internationalization has
been extended to interfaces, spell checkers, and dictionaries.
.Pp
The word processor of LibreOffice uses a native XML file format for increased portability and flexibility.
The spreadsheet program features a macro language which can be interfaced with
external databases.
 LibreOffice is stable and runs natively on Windows, Linux, FreeBSD, and Mac OSX.
More information about LibreOffice can be found at libreoffice.org.
.Pp
To install the English version of the LibreOffice package:
.Bd -literal -offset indent
# pkg install libreoffice
.Ed
.Pp
The editors category (freebsd.org/ports/editors.html) of the Ports Collection contains several localizations for LibreOffice.
When installing a localized package, replace
.Ql libreoffice
with the name of the localized package.
.Pp
Once the package is installed, type the following command to run LibreOffice:
.Bd -literal -offset indent
% libreoffice
.Ed
.Pp
During the first launch, some questions will be asked and a
.Pa .libreoffice
folder will be created in the user's home directory.
.Pp
If the desired LibreOffice package is not available, compiling the port is still an option.
However, this requires a lot of disk space and a fairly long time to compile.
This example compiles the English version:
.Bd -literal -offset indent
# cd /usr/ports/editors/libreoffice
# make install clean
.Ed
.Pp
To build a localized version,
.Cm cd
into the port directory of the desired language.
Supported languages can be found in the editors category (freebsd.org/ports/editors.html) of the Ports Collection.
.Ss DOCUMENT VIEWERS
.Pp
Some new document formats have gained popularity since the advent of UNIX and the viewers they require may not be available in the base system.
This section demonstrates how to install the following document viewers:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Application Name
.Ta
Resources Needed
.Ta
Installation from Ports
.Ta
Major Dependencies
.It
.Ta
Xpdf
.Ta
light
.Ta
light
.Ta
FreeType
.It
.Ta
gv
.Ta
light
.Ta
light
.Ta
Xaw3d
.It
.Ta
Geeqie
.Ta
light
.Ta
light
.Ta
Gtk+ or GNOME
.It
.Ta
ePDFView
.Ta
light
.Ta
light
.Ta
Gtk+
.It
.Ta
Okular
.Ta
light
.Ta
heavy
.Ta
KDE
.El
.Ss XPDF
.Pp
For users that prefer a small FreeBSD PDF viewer, Xpdf provides a light-weight and efficient viewer which requires few resources.
It uses the standard X fonts and does not require any additional toolkits.
.Pp
To install the Xpdf package:
.Bd -literal -offset indent
# pkg install xpdf
.Ed
.Pp
If the package is not available, use the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/graphics/xpdf
# make install clean
.Ed
.Pp
Once the installation is complete, launch
.Cm xpdf
and use the right mouse button to activate the menu.
.Ss GV
.Pp
gv is a PostScript and PDF viewer.
It is based on ghostview, but has a nicer look as it is based on the Xaw3d widget toolkit.
 gv has many configurable features, such as orientation, paper size, scale, and
anti-aliasing.
Almost any operation can be performed with either the keyboard or the mouse.
.Pp
To install gv as a package:
.Bd -literal -offset indent
# pkg install gv
.Ed
.Pp
If a package is unavailable, use the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/print/gv
# make install clean
.Ed
.Ss GEEQIE
.Pp
Geeqie is a fork from the unmaintained GQView project, in an effort to move development forward and integrate the existing
patches.
 Geeqie is an image manager which supports viewing a file with a single click,
launching an external editor, and thumbnail previews.
It also features a slideshow mode and some basic file operations, making it
easy to manage image collections and to find duplicate files.
 Geeqie supports full screen viewing and internationalization.
.Pp
To install the Geeqie package:
.Bd -literal -offset indent
# pkg install geeqie
.Ed
.Pp
If the package is not available, use the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/graphics/geeqie
# make install clean
.Ed
.Ss EPDFVIEW
.Pp
ePDFView is a lightweight PDF document viewer that only uses the Gtk+ and Poppler libraries.
It is currently under development, but already opens most PDF files (even encrypted), save copies of documents, and has support for printing
using CUPS.
.Pp
To install ePDFView as a package:
.Bd -literal -offset indent
# pkg install epdfview
.Ed
.Pp
If a package is unavailable, use the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/graphics/epdfview
# make install clean
.Ed
.Ss OKULAR
.Pp
Okular is a universal document viewer based on KPDF for KDE.
It can open many document formats, including PDF, PostScript, DjVu, CHM, XPS, and ePub.
.Pp
To install Okular as a package:
.Bd -literal -offset indent
# pkg install okular
.Ed
.Pp
If a package is unavailable, use the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/graphics/okular
# make install clean
.Ed
.Ss FINANCE
.Pp
For managing personal finances on a FreeBSD desktop, some powerful and
easy-to-use applications can be installed.
Some are compatible with widespread file formats, such as the formats used by Quicken and Excel.
.Pp
This section covers these programs:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Application Name
.Ta
Resources Needed
.Ta
Installation from Ports
.Ta
Major Dependencies
.It
.Ta
GnuCash
.Ta
light
.Ta
heavy
.Ta
GNOME
.It
.Ta
Gnumeric
.Ta
light
.Ta
heavy
.Ta
GNOME
.It
.Ta
KMyMoney
.Ta
light
.Ta
heavy
.Ta
KDE
.El
.Ss GNUCASH
.Pp
GnuCash is part of the GNOME effort to provide user-friendly, yet powerful, applications to end-users.
 GnuCash can be used to keep track of income and expenses, bank accounts, and stocks.
It features an intuitive interface while remaining professional.
.Pp
GnuCash provides a smart register, a hierarchical system of accounts, and many keyboard
accelerators and auto-completion methods.
It can split a single transaction into several more detailed pieces.
 GnuCash can import and merge Quicken QIF files.
It also handles most international date and currency formats.
.Pp
To install the GnuCash package:
.Bd -literal -offset indent
# pkg install gnucash
.Ed
.Pp
If the package is not available, use the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/finance/gnucash
# make install clean
.Ed
.Ss GNUMERIC
.Pp
Gnumeric is a spreadsheet program developed by the GNOME community.
It features convenient automatic guessing of user input according to the cell
format with an autofill system for many sequences.
It can import files in a number of popular formats, including Excel, Lotus 1-2-3, and Quattro Pro.
It has a large number of built-in functions and allows all of the usual cell
formats such as number, currency, date, time, and much more.
.Pp
To install Gnumeric as a package:
.Bd -literal -offset indent
# pkg install gnumeric
.Ed
.Pp
If the package is not available, use the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/math/gnumeric
# make install clean
.Ed
.Ss KMYMONEY
.Pp
KMyMoney is a personal finance application created by the KDE community.
 KMyMoney aims to provide the important features found in commercial personal finance
manager applications.
It also highlights ease-of-use and proper double-entry accounting among its
features.
 KMyMoney imports from standard Quicken QIF files, tracks investments, handles multiple currencies, and provides a
wealth of reports.
.Pp
To install KMyMoney as a package:
.Bd -literal -offset indent
# pkg install kmymoney-kde4
.Ed
.Pp
If the package is not available, use the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/finance/kmymoney-kde4
# make install clean
.Ed
.Ss SYNOPSIS
.Pp
FreeBSD supports a wide variety of sound cards, allowing users to enjoy high
fidelity output from a FreeBSD system.
This includes the ability to record and play back audio in the MPEG Audio Layer
3 (MP3), Waveform Audio File (WAV), Ogg Vorbis, and other formats.
The FreeBSD Ports Collection contains many applications for editing recorded
audio, adding sound effects, and controlling attached MIDI devices.
.Pp
FreeBSD also supports the playback of video files and DVDs.
The FreeBSD Ports Collection contains applications to encode, convert, and
playback various video media.
.Pp
This chapter describes how to configure sound cards, video playback, TV tuner
cards, and scanners on FreeBSD.
It also describes some of the applications which are available for using these
devices.
.Pp
After reading this chapter, you will know how to:
.Bl -bullet -offset -compact
.It
Configure a sound card on FreeBSD.
.It
Troubleshoot the sound setup.
.It
Playback and encode MP3s and other audio.
.It
Prepare a FreeBSD system for video playback.
.It
Play DVDs,
.Pa .mpg
, and
.Pa .avi
files.
.It
Rip CD and DVD content into files.
.It
Configure a TV card.
.It
Install and setup MythTV on FreeBSD
.It
Configure an image scanner.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Know how to install applications as described in .
.El
.Pp
Before beginning the configuration, determine the model of the sound card and
the chip it uses.
FreeBSD supports a wide variety of sound cards.
Check the supported audio devices list of the Hardware Notes to see if the card is supported and which FreeBSD driver it uses.
.Pp
In order to use the sound device, its device driver must be loaded.
The easiest way is to load a kernel module for the sound card with
.Xr kldload 8 .
This example loads the driver for a built-in audio chipset based on the Intel
specification:
.Bd -literal -offset indent
# kldload snd_hda
.Ed
.Pp
To automate the loading of this driver at boot time, add the driver to
.Pa /boot/loader.conf
.
The line for this driver is:
.Bd -literal -offset indent
snd_hda_load="YES"
.Ed
.Pp
Other available sound modules are listed in
.Pa /boot/defaults/loader.conf
.
When unsure which driver to use, load the
.Pa snd_driver
module:
.Bd -literal -offset indent
# kldload snd_driver
.Ed
.Pp
This is a metadriver which loads all of the most common sound drivers and can
be used to speed up the search for the correct driver.
It is also possible to load all sound drivers by adding the metadriver to
.Pa /boot/loader.conf
.
.Pp
To determine which driver was selected for the sound card after loading the
.Pa snd_driver
metadriver, type
.Cm cat /dev/sndstat
.
.Ss CONFIGURING A CUSTOM KERNEL WITH SOUND SUPPORT
.Pp
This section is for users who prefer to statically compile in support for the
sound card in a custom kernel.
For more information about recompiling a kernel, refer to .
.Pp
When using a custom kernel to provide sound support, make sure that the audio
framework driver exists in the custom kernel configuration file:
.Bd -literal -offset indent
device sound
.Ed
.Pp
Next, add support for the sound card.
To continue the example of the built-in audio chipset based on the Intel
specification from the previous section, use the following line in the custom
kernel configuration file:
.Bd -literal -offset indent
device snd_hda
.Ed
.Pp
Be sure to read the manual page of the driver for the device name to use for
the driver.
.Pp
Non-PnP ISA sound cards may require the IRQ and I/O port settings of the card
to be added to
.Pa /boot/device.hints
.
During the boot process,
.Xr loader 8 reads this file and passes the settings to the kernel.
For example, an old Creative SoundBlaster 16 ISA non-PnP card will use the
.Xr snd_sbc 4 driver in conjunction with
.Ql snd_sb16
.
For this card, the following lines must be added to the kernel configuration
file:
.Bd -literal -offset indent
device snd_sbc
device snd_sb16
.Ed
.Pp
If the card uses the
.Ql 0x220
I/O port and IRQ
.Ql 5
, these lines must also be added to
.Pa /boot/device.hints
:
.Bd -literal -offset indent
hint.sbc.0.at="isa"
hint.sbc.0.port="0x220"
hint.sbc.0.irq="5"
hint.sbc.0.drq="1"
hint.sbc.0.flags="0x15"
.Ed
.Pp
The syntax used in
.Pa /boot/device.hints
is described in
.Xr sound 4 and the manual page for the driver of the sound card.
.Pp
The settings shown above are the defaults.
In some cases, the IRQ or other settings may need to be changed to match the
card.
Refer to
.Xr snd_sbc 4 for more information about this card.
.Ss TESTING SOUND
.Pp
After loading the required module or rebooting into the custom kernel, the
sound card should be detected.
To confirm, run
.Cm dmesg | grep pcm
.
This example is from a system with a built-in Conexant CX20590 chipset:
.Bd -literal -offset indent
pcm0: <NVIDIA (0x001c) (HDMI/DP 8ch)> at nid 5 on hdaa0
pcm1: <NVIDIA (0x001c) (HDMI/DP 8ch)> at nid 6 on hdaa0
pcm2: <Conexant CX20590 (Analog 2.0+HP/2.0)> at nid 31,25 and 35,27 on hdaa1
.Ed
.Pp
The status of the sound card may also be checked using this command:
.Bd -literal -offset indent
# cat /dev/sndstat
FreeBSD Audio Driver (newpcm: 64bit 2009061500/amd64)
Installed devices:
pcm0: <NVIDIA (0x001c) (HDMI/DP 8ch)> (play)
pcm1: <NVIDIA (0x001c) (HDMI/DP 8ch)> (play)
pcm2: <Conexant CX20590 (Analog 2.0+HP/2.0)> (play/rec) default
.Ed
.Pp
The output will vary depending upon the sound card.
If no
.Pa pcm
devices are listed, double-check that the correct device driver was loaded or
compiled into the kernel.
The next section lists some common problems and their solutions.
.Pp
If all goes well, the sound card should now work in FreeBSD.
If the CD or DVD drive is properly connected to the sound card, one can insert an audio CD in the drive and play it with
.Xr cdcontrol 1 :
.Bd -literal -offset indent
% cdcontrol -f /dev/acd0 play 1
.Ed
.Pp
Audio CDs have specialized encodings which means that they should not be mounted using
.Xr mount 8 .
.Pp
Various applications, such as
.Ql audio/workman
, provide a friendlier interface.
The
.Ql audio/mpg123
port can be installed to listen to MP3 audio files.
.Pp
Another quick way to test the card is to send data to
.Pa /dev/dsp
:
.Bd -literal -offset indent
% cat filename > /dev/dsp
.Ed
.Pp
where
.Pa filename
can be any type of file.
This command should produce some noise, confirming that the sound card is
working.
.Pp
The
.Pa /dev/dsp*
device nodes will be created automatically as needed.
When not in use, they do not exist and will not appear in the output of
.Xr ls 1 .
.Ss TROUBLESHOOTING SOUND
.Pp
lists some common error messages and their solutions:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Error
.Ta
Solution
.It
.Ta
.Er sb_dspwr(XX) timed out
.Ta
.Pp
The I/O port is not set correctly.
.It
.Ta
.Er bad irq XX
.Ta
.Pp
The IRQ is set incorrectly.
Make sure that the set IRQ and the sound IRQ are the same.
.It
.Ta
.Er xxx: gus pcm not attached, out of memory
.Ta
.Pp
There is not enough available memory to use the device.
.It
.Ta
.Er xxx: can't open /dev/dsp!
.Ta
.Pp
Type
.Cm fstat | grep dsp
to check if another application is holding the device open.
Noteworthy troublemakers are esound and KDE's sound support.
.El
.Pp
Modern graphics cards often come with their own sound driver for use with HDMI.
This sound device is sometimes enumerated before the sound card meaning that
the sound card will not be used as the default playback device.
To check if this is the case, run dmesg and look for
.Ql pcm
.
The output looks something like this:
.Bd -literal -offset indent
...
hdac0: HDA Driver Revision: 20100226_0142
hdac1: HDA Driver Revision: 20100226_0142
hdac0: HDA Codec #0: NVidia (Unknown)
hdac0: HDA Codec #1: NVidia (Unknown)
hdac0: HDA Codec #2: NVidia (Unknown)
hdac0: HDA Codec #3: NVidia (Unknown)
pcm0: <HDA NVidia (Unknown) PCM #0 DisplayPort> at cad 0 nid 1 on hdac0
pcm1: <HDA NVidia (Unknown) PCM #0 DisplayPort> at cad 1 nid 1 on hdac0
pcm2: <HDA NVidia (Unknown) PCM #0 DisplayPort> at cad 2 nid 1 on hdac0
pcm3: <HDA NVidia (Unknown) PCM #0 DisplayPort> at cad 3 nid 1 on hdac0
hdac1: HDA Codec #2: Realtek ALC889
pcm4: <HDA Realtek ALC889 PCM #0 Analog> at cad 2 nid 1 on hdac1
pcm5: <HDA Realtek ALC889 PCM #1 Analog> at cad 2 nid 1 on hdac1
pcm6: <HDA Realtek ALC889 PCM #2 Digital> at cad 2 nid 1 on hdac1
pcm7: <HDA Realtek ALC889 PCM #3 Digital> at cad 2 nid 1 on hdac1
...
.Ed
.Pp
In this example, the graphics card (
.Ql NVidia
) has been enumerated before the sound card (
.Ql Realtek ALC889
).
To use the sound card as the default playback device, change
.Ev hw.snd.default_unit
to the unit that should be used for playback:
.Bd -literal -offset indent
# sysctl hw.snd.default_unit=n
.Ed
.Pp
where
.Ql n
is the number of the sound device to use.
In this example, it should be
.Ql 4
.
Make this change permanent by adding the following line to
.Pa /etc/sysctl.conf
:
.Bd -literal -offset indent
hw.snd.default_unit=4
.Ed
.Pp
It is often desirable to have multiple sources of sound that are able to play
simultaneously.
FreeBSD uses
.Do
Virtual Sound Channels
.Dc
to multiplex the sound card's playback by mixing sound in the kernel.
.Pp
Three
.Xr sysctl 8 knobs are available for configuring virtual channels:
.Bd -literal -offset indent
# sysctl dev.pcm.0.play.vchans=4
# sysctl dev.pcm.0.rec.vchans=4
# sysctl hw.snd.maxautovchans=4
.Ed
.Pp
This example allocates four virtual channels, which is a practical number for
everyday use.
Both
.Ev dev.pcm.0.play.vchans=4
and
.Ev dev.pcm.0.rec.vchans=4
are configurable after a device has been attached and represent the number of
virtual channels
.Pa pcm0
has for playback and recording.
Since the
.Pa pcm
module can be loaded independently of the hardware drivers,
.Ev hw.snd.maxautovchans
indicates how many virtual channels will be given to an audio device when it is
attached.
Refer to
.Xr pcm 4 for more information.
.Pp
The number of virtual channels for a device cannot be changed while it is in
use.
First, close any programs using the device, such as music players or sound
daemons.
.Pp
The correct
.Pa pcm
device will automatically be allocated transparently to a program that requests
.Pa /dev/dsp0
.
.Pp
The default values for the different mixer channels are hardcoded in the source
code of the
.Xr pcm 4 driver.
While sound card mixer levels can be changed using
.Xr mixer 8 or third-party applications and daemons, this is not a permanent solution.
To instead set default mixer values at the driver level, define the appropriate
values in
.Pa /boot/device.hints
, as seen in this example:
.Bd -literal -offset indent
hint.pcm.0.vol="50"
.Ed
.Pp
This will set the volume channel to a default value of
.Ql 50
when the
.Xr pcm 4 module is loaded.
.Pp
This section describes some MP3 players available for FreeBSD, how to rip audio CD tracks, and how to encode and decode MP3s.
.Ss MP3 PLAYERS
.Pp
A popular graphical MP3 player is Audacious.
It supports Winamp skins and additional plugins.
The interface is intuitive, with a playlist, graphic equalizer, and more.
Those familiar with Winamp will find Audacious simple to use.
On FreeBSD, Audacious can be installed from the
.Ql multimedia/audacious
port or package.
Audacious is a descendant of XMMS.
.Pp
The
.Ql audio/mpg123
package or port provides an alternative, command-line MP3 player.
Once installed, specify the MP3 file to play on the command line.
If the system has multiple audio devices, the sound device can also be
specified:
.Bd -literal -offset indent
# mpg123 -a /dev/dsp1.0 Foobar-GreatestHits.mp3
High Performance MPEG 1.0/2.0/2.5 Audio Player for Layers 1, 2 and 3
        version 1.18.1; written and copyright by Michael Hipp and others
        free software (LGPL) without any warranty but with best wishes

Playing MPEG stream from Foobar-GreatestHits.mp3 ...
MPEG 1.0 layer III, 128 kbit/s, 44100 Hz joint-stereo
.Ed
.Pp
Additional MP3 players are available in the FreeBSD Ports Collection.
.Ss RIPPING CD AUDIO TRACKS
.Pp
Before encoding a CD or CD track to MP3, the audio data on the CD must be ripped to the hard drive.
This is done by copying the raw CD Digital Audio (CDDA) data to WAV files.
.Pp
The
.Cm cdda2wav
tool, which is installed with the
.Ql sysutils/cdrtools
suite, can be used to rip audio information from CDs.
.Pp
With the audio CD in the drive, the following command can be issued as
.Ql root
to rip an entire CD into individual, per track, WAV files:
.Bd -literal -offset indent
# cdda2wav -D 0,1,0 -B
.Ed
.Pp
In this example, the
.Ar -D 0,1,0
indicates the SCSI device
.Pa 0,1,0
containing the CD to rip.
Use
.Cm cdrecord -scanbus
to determine the correct device parameters for the system.
.Pp
To rip individual tracks, use
.Ar -t
to specify the track:
.Bd -literal -offset indent
# cdda2wav -D 0,1,0 -t 7
.Ed
.Pp
To rip a range of tracks, such as track one to seven, specify a range:
.Bd -literal -offset indent
# cdda2wav -D 0,1,0 -t 1+7
.Ed
.Pp
To rip from an ATAPI (IDE) CDROM drive, specify the device name in place of the SCSI unit numbers.
For example, to rip track 7 from an IDE drive:
.Bd -literal -offset indent
# cdda2wav -D /dev/acd0 -t 7
.Ed
.Pp
Alternately,
.Cm dd
can be used to extract audio tracks on ATAPI drives, as described in .
.Ss ENCODING AND DECODING MP3S
.Pp
Lame is a popular MP3 encoder which can be installed from the
.Ql audio/lame
port.
Due to patent issues, a package is not available.
.Pp
The following command will convert the ripped WAV file
.Pa audio01.wav
to
.Pa audio01.mp3
:
.Bd -literal -offset indent
# lame -h -b 128 --tt "Foo Song Title" --ta "FooBar Artist" --tl "FooBar Album" \ --ty "2014" --tc "Ripped and encoded by Foo" --tg "Genre" audio01.wav audio01.mp3
.Ed
.Pp
The specified 128 kbits is a standard MP3 bitrate while the 160 and 192 bitrates provide higher quality.
The higher the bitrate, the larger the size of the resulting MP3.
The
.Ar -h
turns on the
.Do
higher quality but a little slower
.Dc
mode.
The options beginning with
.Ar --t
indicate ID3 tags, which usually contain song information, to be embedded within the MP3 file.
Additional encoding options can be found in the lame manual page.
.Pp
In order to burn an audio CD from MP3s, they must first be converted to a non-compressed file format.
 XMMS can be used to convert to the WAV format, while mpg123 can be used to convert to the raw Pulse-Code Modulation (PCM) audio data format.
.Pp
To convert
.Pa audio01.mp3
using mpg123, specify the name of the PCM file:
.Bd -literal -offset indent
# mpg123 -s audio01.mp3 > audio01.pcm
.Ed
.Pp
To use XMMS to convert a MP3 to WAV format, use these steps:
.Ss CONVERTING TO WAV FORMAT IN XMMS
.Pp
Launch XMMS.
.Pp
Right-click the window to bring up the XMMS menu.
.Pp
Select
.Ql Preferences
under
.Ql Options
.
.Pp
Change the Output Plugin to
.Do
Disk Writer Plugin
.Dc
.
.Pp
Press
.Ql Configure
.
.Pp
Enter or browse to a directory to write the uncompressed files to.
.Pp
Load the MP3 file into XMMS as usual, with volume at 100% and EQ settings turned off.
.Pp
Press
.Ql Play
.
The XMMS will appear as if it is playing the MP3, but no music will be heard.
It is actually playing the MP3 to a file.
.Pp
When finished, be sure to set the default Output Plugin back to what it was
before in order to listen to MP3s again.
.Pp
Both the WAV and PCM formats can be used with cdrecord.
When using WAV files, there will be a small tick sound at the beginning of each track.
This sound is the header of the WAV file.
The
.Ql audio/sox
port or package can be used to remove the header:
.Bd -literal -offset indent
% sox -t wav -r 44100 -s -w -c 2 track.wav track.raw
.Ed
.Pp
Refer to for more information on using a CD burner in FreeBSD.
.Pp
Before configuring video playback, determine the model and chipset of the video
card.
While Xorg supports a wide variety of video cards, not all provide good playback
performance.
To obtain a list of extensions supported by the Xorg server using the card, run
.Cm xdpyinfo
while Xorg is running.
.Pp
It is a good idea to have a short MPEG test file for evaluating various players
and options.
Since some DVD applications look for DVD media in
.Pa /dev/dvd
by default, or have this device name hardcoded in them, it might be useful to
make a symbolic link to the proper device:
.Bd -literal -offset indent
# ln -sf /dev/cd0 /dev/dvd
.Ed
.Pp
Due to the nature of
.Xr devfs 5 , manually created links will not persist after a system reboot.
In order to recreate the symbolic link automatically when the system boots, add
the following line to
.Pa /etc/devfs.conf
:
.Bd -literal -offset indent
link cd0 dvd
.Ed
.Pp
DVD decryption invokes certain functions that require write permission to the DVD device.
.Pp
To enhance the shared memory Xorg interface, it is recommended to increase the values of these
.Xr sysctl 8 variables:
.Bd -literal -offset indent
kern.ipc.shmmax=67108864
kern.ipc.shmall=32768
.Ed
.Ss DETERMINING VIDEO CAPABILITIES
.Pp
There are several possible ways to display video under Xorg and what works is largely hardware dependent.
Each method described below will have varying quality across different
hardware.
.Pp
Common video interfaces include:
.Bl -enum -offset -compact
.It
Xorg: normal output using shared memory.
.It
XVideo: an extension to the Xorg interface which allows video to be directly displayed in drawable objects
through a special acceleration.
This extension provides good quality playback even on low-end machines.
The next section describes how to determine if this extension is running.
.It
SDL: the Simple Directmedia Layer is a porting layer for many operating systems,
allowing cross-platform applications to be developed which make efficient use
of sound and graphics.
 SDL provides a low-level abstraction to the hardware which can sometimes be more
efficient than the Xorg interface.
On FreeBSD, SDL can be installed using the
.Ql devel/sdl20
package or port.
.It
DGA: the Direct Graphics Access is an Xorg extension which allows a program to bypass the Xorg server and directly alter the framebuffer.
Because it relies on a low level memory mapping, programs using it must be run
as
.Ql root
.
The DGA extension can be tested and benchmarked using
.Xr dga 1 .
When
.Cm dga
is running, it changes the colors of the display whenever a key is pressed.
To quit, press q.
.It
SVGAlib: a low level console graphics layer.
.El
.Ss XVIDEO
.Pp
To check whether this extension is running, use
.Cm xvinfo
:
.Bd -literal -offset indent
% xvinfo
.Ed
.Pp
XVideo is supported for the card if the result is similar to:
.Bd -literal -offset indent
X-Video Extension version 2.2
  screen #0
  Adaptor #0: "Savage Streams Engine"
    number of ports: 1
    port base: 43
    operations supported: PutImage
    supported visuals:
      depth 16, visualID 0x22
      depth 16, visualID 0x23
    number of attributes: 5
      "XV_COLORKEY" (range 0 to 16777215)
              client settable attribute
              client gettable attribute (current value is 2110)
      "XV_BRIGHTNESS" (range -128 to 127)
              client settable attribute
              client gettable attribute (current value is 0)
      "XV_CONTRAST" (range 0 to 255)
              client settable attribute
              client gettable attribute (current value is 128)
      "XV_SATURATION" (range 0 to 255)
              client settable attribute
              client gettable attribute (current value is 128)
      "XV_HUE" (range -180 to 180)
              client settable attribute
              client gettable attribute (current value is 0)
    maximum XvImage size: 1024 x 1024
    Number of image formats: 7
      id: 0x32595559 (YUY2)
        guid: 59555932-0000-0010-8000-00aa00389b71
        bits per pixel: 16
        number of planes: 1
        type: YUV (packed)
      id: 0x32315659 (YV12)
        guid: 59563132-0000-0010-8000-00aa00389b71
        bits per pixel: 12
        number of planes: 3
        type: YUV (planar)
      id: 0x30323449 (I420)
        guid: 49343230-0000-0010-8000-00aa00389b71
        bits per pixel: 12
        number of planes: 3
        type: YUV (planar)
      id: 0x36315652 (RV16)
        guid: 52563135-0000-0000-0000-000000000000
        bits per pixel: 16
        number of planes: 1
        type: RGB (packed)
        depth: 0
        red, green, blue masks: 0x1f, 0x3e0, 0x7c00
      id: 0x35315652 (RV15)
        guid: 52563136-0000-0000-0000-000000000000
        bits per pixel: 16
        number of planes: 1
        type: RGB (packed)
        depth: 0
        red, green, blue masks: 0x1f, 0x7e0, 0xf800
      id: 0x31313259 (Y211)
        guid: 59323131-0000-0010-8000-00aa00389b71
        bits per pixel: 6
        number of planes: 3
        type: YUV (packed)
      id: 0x0
        guid: 00000000-0000-0000-0000-000000000000
        bits per pixel: 0
        number of planes: 0
        type: RGB (packed)
        depth: 1
        red, green, blue masks: 0x0, 0x0, 0x0
.Ed
.Pp
The formats listed, such as YUV2 and YUV12, are not present with every
implementation of XVideo and their absence may hinder some players.
.Pp
If the result instead looks like:
.Bd -literal -offset indent
X-Video Extension version 2.2
screen #0
no adaptors present
.Ed
.Pp
XVideo is probably not supported for the card.
This means that it will be more difficult for the display to meet the
computational demands of rendering video, depending on the video card and
processor.
.Ss PORTS AND PACKAGES DEALING WITH VIDEO
.Pp
This section introduces some of the software available from the FreeBSD Ports
Collection which can be used for video playback.
.Ss MPLAYER AND MENCODER
.Pp
MPlayer is a command-line video player with an optional graphical interface which aims
to provide speed and flexibility.
Other graphical front-ends to MPlayer are available from the FreeBSD Ports Collection.
.Pp
MPlayer can be installed using the
.Ql multimedia/mplayer
package or port.
Several compile options are available and a variety of hardware checks occur
during the build process.
For these reasons, some users prefer to build the port rather than install the
package.
.Pp
When compiling the port, the menu options should be reviewed to determine the
type of support to compile into the port.
If an option is not selected, MPlayer will not be able to display that type of video format.
Use the arrow keys and spacebar to select the required formats.
When finished, press Enter to continue the port compile and installation.
.Pp
By default, the package or port will build the
.Cm mplayer
command line utility and the
.Cm gmplayer
graphical utility.
To encode videos, compile the
.Ql multimedia/mencoder
port.
Due to licensing restrictions, a package is not available for MEncoder.
.Pp
The first time MPlayer is run, it will create
.Pa ~/.mplayer
in the user's home directory.
This subdirectory contains default versions of the user-specific configuration
files.
.Pp
This section describes only a few common uses.
Refer to mplayer(1) for a complete description of its numerous options.
.Pp
To play the file
.Pa testfile.avi
, specify the video interfaces with
.Ar -vo
, as seen in the following examples:
.Bd -literal -offset indent
% mplayer -vo xv testfile.avi
.Ed
.Bd -literal -offset indent
% mplayer -vo sdl testfile.avi
.Ed
.Bd -literal -offset indent
% mplayer -vo x11 testfile.avi
.Ed
.Bd -literal -offset indent
# mplayer -vo dga testfile.avi
.Ed
.Bd -literal -offset indent
# mplayer -vo 'sdl:dga' testfile.avi
.Ed
.Pp
It is worth trying all of these options, as their relative performance depends
on many factors and will vary significantly with hardware.
.Pp
To play a DVD, replace
.Pa testfile.avi
with
.Ar dvd://N -dvd-device DEVICE
, where N is the title number to play and DEVICE is the device node for the DVD.
For example, to play title 3 from
.Pa /dev/dvd
:
.Bd -literal -offset indent
# mplayer -vo xv dvd://3 -dvd-device /dev/dvd
.Ed
.Pp
The default DVD device can be defined during the build of the MPlayer port by including the
.Ev WITH_DVD_DEVICE=/path/to/desired/device
option.
By default, the device is
.Pa /dev/cd0
.
More details can be found in the port's
.Pa Makefile.options
.
.Pp
To stop, pause, advance, and so on, use a keybinding.
To see the list of keybindings, run
.Cm mplayer -h
or read mplayer(1).
.Pp
Additional playback options include
.Ar -fs -zoom
, which engages fullscreen mode, and
.Ar -framedrop
, which helps performance.
.Pp
Each user can add commonly used options to their
.Pa ~/.mplayer/config
like so:
.Bd -literal -offset indent
vo=xv
fs=yes
zoom=yes
.Ed
.Pp
.Cm mplayer
can be used to rip a DVD title to a
.Pa .vob
.
To dump the second title from a DVD:
.Bd -literal -offset indent
# mplayer -dumpstream -dumpfile out.vob dvd://2 -dvd-device /dev/dvd
.Ed
.Pp
The output file,
.Pa out.vob
, will be in MPEG format.
.Pp
Anyone wishing to obtain a high level of expertise with UNIX video should consult mplayerhq.hu/DOCS as it is technically informative.
This documentation should be considered as required reading before submitting
any bug reports.
.Pp
Before using
.Cm mencoder
, it is a good idea to become familiar with the options described at mplayerhq.hu/DOCS/HTML/en/mencoder.html.
There are innumerable ways to improve quality, lower bitrate, and change
formats, and some of these options may make the difference between good or bad
performance.
Improper combinations of command line options can yield output files that are
unplayable even by
.Cm mplayer
.
.Pp
Here is an example of a simple copy:
.Bd -literal -offset indent
% mencoder input.avi -oac copy -ovc copy -o output.avi
.Ed
.Pp
To rip to a file, use
.Ar -dumpfile
with
.Cm mplayer
.
.Pp
To convert
.Pa input.avi
to the MPEG4 codec with MPEG3 audio encoding, first install the
.Ql audio/lame
port.
Due to licensing restrictions, a package is not available.
Once installed, type:
.Bd -literal -offset indent
% mencoder input.avi -oac mp3lame -lameopts br=192 \ -ovc lavc -lavcopts vcodec=mpeg4:vhq -o output.avi
.Ed
.Pp
This will produce output playable by applications such as
.Cm mplayer
and
.Cm xine
.
.Pp
.Pa input.avi
can be replaced with
.Ar dvd://1 -dvd-device /dev/dvd
and run as
.Ql root
to re-encode a DVD title directly.
Since it may take a few tries to get the desired result, it is recommended to
instead dump the title to a file and to work on the file.
.Ss THE XINE VIDEO PLAYER
.Pp
xine is a video player with a reusable base library and a modular executable which
can be extended with plugins.
It can be installed using the
.Ql multimedia/xine
package or port.
.Pp
In practice, xine requires either a fast CPU with a fast video card, or support for the XVideo
extension.
The xine video player performs best on XVideo interfaces.
.Pp
By default, the xine player starts a graphical user interface.
The menus can then be used to open a specific file.
.Pp
Alternatively, xine may be invoked from the command line by specifying the name of the file to
play:
.Bd -literal -offset indent
% xine -g -p mymovie.avi
.Ed
.Pp
Refer to xine-project.org/faq for more information and troubleshooting tips.
.Ss THE TRANSCODE UTILITIES
.Pp
Transcode provides a suite of tools for re-encoding video and audio files.
 Transcode can be used to merge video files or repair broken files using command line
tools with stdin/stdout stream interfaces.
.Pp
In FreeBSD, Transcode can be installed using the
.Ql multimedia/transcode
package or port.
Many users prefer to compile the port as it provides a menu of compile options
for specifying the support and codecs to compile in.
If an option is not selected, Transcode will not be able to encode that format.
Use the arrow keys and spacebar to select the required formats.
When finished, press Enter to continue the port compile and installation.
.Pp
This example demonstrates how to convert a DivX file into a PAL MPEG-1 file
(PAL VCD):
.Bd -literal -offset indent
% transcode -i input.avi -V --export_prof vcd-pal -o output_vcd
% mplex -f 1 -o output_vcd.mpg output_vcd.m1v output_vcd.mpa
.Ed
.Pp
The resulting MPEG file,
.Pa output_vcd.mpg
, is ready to be played with MPlayer.
The file can be burned on a CD media to create a video CD using a utility such as
.Ql multimedia/vcdimager
or
.Ql sysutils/cdrdao
.
.Pp
In addition to the manual page for
.Cm transcode
, refer to transcoding.org/cgi-bin/transcode for further information and examples.
.Pp
TV cards can be used to watch broadcast or cable TV on a computer.
Most cards accept composite video via an RCA or S-video input and some cards include a FM radio tuner.
.Pp
FreeBSD provides support for PCI-based TV cards using a Brooktree
Bt848/849/878/879 video capture chip with the
.Xr bktr 4 driver.
This driver supports most Pinnacle PCTV video cards.
Before purchasing a TV card, consult
.Xr bktr 4 for a list of supported tuners.
.Ss LOADING THE DRIVER
.Pp
In order to use the card, the
.Xr bktr 4 driver must be loaded.
To automate this at boot time, add the following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
bktr_load="YES"
.Ed
.Pp
Alternatively, one can statically compile support for the TV card into a custom
kernel.
In that case, add the following lines to the custom kernel configuration file:
.Bd -literal -offset indent
device	 bktr
device	iicbus
device	iicbb
device	smbus
.Ed
.Pp
These additional devices are necessary as the card components are
interconnected via an I2C bus.
Then, build and install a new kernel.
.Pp
To test that the tuner is correctly detected, reboot the system.
The TV card should appear in the boot messages, as seen in this example:
.Bd -literal -offset indent
bktr0: <BrookTree 848A> mem 0xd7000000-0xd7000fff irq 10 at device 10.0 on pci0
iicbb0: <I2C bit-banging driver> on bti2c0
iicbus0: <Philips I2C bus> on iicbb0 master-only
iicbus1: <Philips I2C bus> on iicbb0 master-only
smbus0: <System Management Bus> on bti2c0
bktr0: Pinnacle/Miro TV, Philips SECAM tuner.
.Ed
.Pp
The messages will differ according to the hardware.
If necessary, it is possible to override some of the detected parameters using
.Xr sysctl 8 or custom kernel configuration options.
For example, to force the tuner to a Philips SECAM tuner, add the following
line to a custom kernel configuration file:
.Bd -literal -offset indent
options OVERRIDE_TUNER=6
.Ed
.Pp
or, use
.Xr sysctl 8 :
.Bd -literal -offset indent
# sysctl hw.bt848.tuner=6
.Ed
.Pp
Refer to
.Xr bktr 4 for a description of the available
.Xr sysctl 8 parameters and kernel options.
.Ss USEFUL APPLICATIONS
.Pp
To use the TV card, install one of the following applications:
.Bl -bullet -offset -compact
.It
.Ql multimedia/fxtv
provides TV-in-a-window and image/audio/video capture capabilities.
.It
.Ql multimedia/xawtv
is another TV application with similar features.
.It
.Ql audio/xmradio
provides an application for using the FM radio tuner of a TV card.
.El
.Pp
More applications are available in the FreeBSD Ports Collection.
.Ss TROUBLESHOOTING
.Pp
If any problems are encountered with the TV card, check that the video capture
chip and the tuner are supported by
.Xr bktr 4 and that the right configuration options were used.
For more support or to ask questions about supported TV cards, refer to the freebsd-multimedia mailing list.
.Ss MYTHTV
.Pp
MythTV is a popular, open source Personal Video Recorder (PVR) application.
This section demonstrates how to install and setup MythTV on FreeBSD.
Refer to mythtv.org/wiki for more information on how to use MythTV.
.Pp
MythTV requires a frontend and a backend.
These components can either be installed on the same system or on different
machines.
.Pp
The frontend can be installed on FreeBSD using the
.Ql multimedia/mythtv-frontend
package or port.
 Xorg must also be installed and configured as described in .
Ideally, this system has a video card that supports X-Video Motion Compensation
(XvMC) and, optionally, a Linux Infrared Remote Control (LIRC)-compatible remote.
.Pp
To install both the backend and the frontend on FreeBSD, use the
.Ql multimedia/mythtv
package or port.
A MySQL database server is also required and should automatically be installed as a
dependency.
Optionally, this system should have a tuner card and sufficient storage to hold
recorded data.
.Ss HARDWARE
.Pp
MythTV uses Video for Linux (V4L) to access video input devices such as encoders and tuners.
In FreeBSD, MythTV works best with USB DVB-S/C/T cards as they are well supported by the
.Ql multimedia/webcamd
package or port which provides a V4L userland application.
Any Digital Video Broadcasting (DVB) card supported by webcamd should work with MythTV.
A list of known working cards can be found at wiki.freebsd.org/WebcamCompat.
Drivers are also available for Hauppauge cards in the
.Ql multimedia/pvr250
and
.Ql multimedia/pvrxxx
ports, but they provide a non-standard driver interface that does not work with
versions of MythTV greater than 0.23.
Due to licensing restrictions, no packages are available and these two ports
must be compiled.
.Pp
The wiki.freebsd.org/HTPC page contains a list of all available DVB drivers.
.Ss SETTING UP THE MYTHTV BACKEND
.Pp
To install MythTV using binary packages:
.Bd -literal -offset indent
# pkg install mythtv
.Ed
.Pp
Alternatively, to install from the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/multimedia/mythtv
# make install
.Ed
.Pp
Once installed, set up the MythTV database:
.Bd -literal -offset indent
# mysql -uroot -p < /usr/local/share/mythtv/database/mc.sql
.Ed
.Pp
Then, configure the backend:
.Bd -literal -offset indent
# mythtv-setup
.Ed
.Pp
Finally, start the backend:
.Bd -literal -offset indent
# echo 'mythbackend_enable="YES"' >> /etc/rc.conf
# service mythbackend start
.Ed
.Pp
In FreeBSD, access to image scanners is provided by SANE (Scanner Access Now Easy), which is available in the FreeBSD Ports Collection.
 SANE will also use some FreeBSD device drivers to provide access to the scanner
hardware.
.Pp
FreeBSD supports both SCSI and USB scanners.
Depending upon the scanner interface, different device drivers are required.
Be sure the scanner is supported by SANE prior to performing any configuration.
Refer to http://www.sane-project.org/sane-supported-devices.html for more information about supported scanners.
.Pp
This chapter describes how to determine if the scanner has been detected by
FreeBSD.
It then provides an overview of how to configure and use SANE on a FreeBSD system.
.Ss CHECKING THE SCANNER
.Pp
The
.Pa GENERIC
kernel includes the device drivers needed to support USB scanners.
Users with a custom kernel should ensure that the following lines are present
in the custom kernel configuration file:
.Bd -literal -offset indent
device usb
device uhci
device ohci
device ehci
.Ed
.Pp
To determine if the USB scanner is detected, plug it in and use
.Cm dmesg
to determine whether the scanner appears in the system message buffer.
If it does, it should display a message similar to this:
.Bd -literal -offset indent
ugen0.2: <EPSON> at usbus0
.Ed
.Pp
In this example, an EPSON Perfection1650 USB scanner was detected on
.Pa /dev/ugen0.2
.
.Pp
If the scanner uses a SCSI interface, it is important to know which SCSI controller board it will use.
Depending upon the SCSI chipset, a custom kernel configuration file may be needed.
The
.Pa GENERIC
kernel supports the most common SCSI controllers.
Refer to
.Pa /usr/src/sys/conf/NOTES
to determine the correct line to add to a custom kernel configuration file.
In addition to the SCSI adapter driver, the following lines are needed in a custom kernel configuration
file:
.Bd -literal -offset indent
device scbus
device pass
.Ed
.Pp
Verify that the device is displayed in the system message buffer:
.Bd -literal -offset indent
pass2 at aic0 bus 0 target 2 lun 0
pass2: <AGFA SNAPSCAN 600 1.10> Fixed Scanner SCSI-2 device
pass2: 3.300MB/s transfers
.Ed
.Pp
If the scanner was not powered-on at system boot, it is still possible to
manually force detection by performing a SCSI bus scan with
.Cm camcontrol
:
.Bd -literal -offset indent
# camcontrol rescan all
Re-scan of bus 0 was successful
Re-scan of bus 1 was successful
Re-scan of bus 2 was successful
Re-scan of bus 3 was successful
.Ed
.Pp
The scanner should now appear in the SCSI devices list:
.Bd -literal -offset indent
# camcontrol devlist
<IBM DDRS-34560 S97B>              at scbus0 target 5 lun 0 (pass0,da0)
<IBM DDRS-34560 S97B>              at scbus0 target 6 lun 0 (pass1,da1)
<AGFA SNAPSCAN 600 1.10>           at scbus1 target 2 lun 0 (pass3)
<PHILIPS CDD3610 CD-R/RW 1.00>     at scbus2 target 0 lun 0 (pass2,cd0)
.Ed
.Pp
Refer to
.Xr scsi 4 and
.Xr camcontrol 8 for more details about SCSI devices on FreeBSD.
.Ss SANE CONFIGURATION
.Pp
The SANE system is split in two parts: the backends (
.Ql graphics/sane-backends
) and the frontends (
.Ql graphics/sane-frontends
or
.Ql graphics/xsane
).
The backends provide access to the scanner.
Refer to http://www.sane-project.org/sane-supported-devices.html to determine which backend supports the scanner.
The frontends provide the graphical scanning interface.
.Ql graphics/sane-frontends
installs xscanimage while
.Ql graphics/xsane
installs xsane.
.Pp
To install the two parts from binary packages:
.Bd -literal -offset indent
# pkg install xsane sane-frontends
.Ed
.Pp
Alternatively, to install from the Ports Collection
.Bd -literal -offset indent
# cd /usr/ports/graphics/sane-frontends
# make install clean
# cd /usr/ports/graphics/xsane
# make install clean
.Ed
.Pp
After installing the
.Ql graphics/sane-backends
port or package, use
.Cm sane-find-scanner
to check the scanner detection by the SANE system:
.Bd -literal -offset indent
# sane-find-scanner -q
found SCSI scanner "AGFA SNAPSCAN 600 1.10" at /dev/pass3
.Ed
.Pp
The output should show the interface type of the scanner and the device node
used to attach the scanner to the system.
The vendor and the product model may or may not appear.
.Pp
Some USB scanners require firmware to be loaded.
Refer to sane-find-scanner(1) and sane(7) for details.
.Pp
Next, check if the scanner will be identified by a scanning frontend.
The SANE backends include
.Cm scanimage
which can be used to list the devices and perform an image acquisition.
Use
.Ar -L
to list the scanner devices.
The first example is for a SCSI scanner and the second is for a USB scanner:
.Bd -literal -offset indent
# scanimage -L
device `snapscan:/dev/pass3' is a AGFA SNAPSCAN 600 flatbed scanner
# scanimage -L
device 'epson2:libusb:/dev/usb:/dev/ugen0.2' is a Epson GT-8200 flatbed scanner
.Ed
.Pp
In this second example,
.Ql 'epson2:libusb:/dev/usb:/dev/ugen0.2'
is the backend name (
.Ql epson2
) and
.Ql /dev/ugen0.2
is the device node used by the scanner.
.Pp
If
.Cm scanimage
is unable to identify the scanner, this message will appear:
.Bd -literal -offset indent
# scanimage -L

No scanners were identified. If you were expecting something different,
check that the scanner is plugged in, turned on and detected by the
sane-find-scanner tool (if appropriate). Please read the documentation
which came with this software (README, FAQ, manpages).
.Ed
.Pp
If this happens, edit the backend configuration file in
.Pa /usr/local/etc/sane.d/
and define the scanner device used.
For example, if the undetected scanner model is an EPSON Perfection1650 and it uses the
.Ql epson2
backend, edit
.Pa /usr/local/etc/sane.d/epson2.conf
.
When editing, add a line specifying the interface and the device node used.
In this case, add the following line:
.Bd -literal -offset indent
usb /dev/ugen0.2
.Ed
.Pp
Save the edits and verify that the scanner is identified with the right backend
name and the device node:
.Bd -literal -offset indent
# scanimage -L
device 'epson2:libusb:/dev/usb:/dev/ugen0.2' is a Epson GT-8200 flatbed scanner
.Ed
.Pp
Once
.Cm scanimage -L
sees the scanner, the configuration is complete and the scanner is now ready to
use.
.Pp
While
.Cm scanimage
can be used to perform an image acquisition from the command line, it is often
preferable to use a graphical interface to perform image scanning.
The
.Ql graphics/sane-frontends
package or port installs a simple but efficient graphical interface, xscanimage.
.Pp
Alternately, xsane, which is installed with the
.Ql graphics/xsane
package or port, is another popular graphical scanning frontend.
It offers advanced features such as various scanning modes, color correction,
and batch scans.
Both of these applications are usable as a GIMP plugin.
.Ss SCANNER PERMISSIONS
.Pp
In order to have access to the scanner, a user needs read and write permissions
to the device node used by the scanner.
In the previous example, the USB scanner uses the device node
.Pa /dev/ugen0.2
which is really a symlink to the real device node
.Pa /dev/usb/0.2.0
.
The symlink and the device node are owned, respectively, by the
.Ql wheel
and
.Ql operator
groups.
While adding the user to these groups will allow access to the scanner, it is
considered insecure to add a user to
.Ql wheel
.
A better solution is to create a group and make the scanner device accessible
to members of this group.
.Pp
This example creates a group called
.Ql usb
:
.Bd -literal -offset indent
# pw groupadd usb
.Ed
.Pp
Then, make the
.Pa /dev/ugen0.2
symlink and the
.Pa /dev/usb/0.2.0
device node accessible to the
.Ql usb
group with write permissions of
.Ql 0660
or
.Ql 0664
by adding the following lines to
.Pa /etc/devfs.rules
:
.Bd -literal -offset indent
[system=5]
add path ugen0.2 mode 0660 group usb
add path usb/0.2.0 mode 0666 group usb
.Ed
.Pp
Finally, add the users to
.Ql usb
in order to allow access to the scanner:
.Bd -literal -offset indent
# pw groupmod usb -m joe
.Ed
.Pp
For more details refer to
.Xr pw 8 .
.Sh CONFIGURING THE FREEBSD KERNEL
.Ss SYNOPSIS
.Pp
The kernel is the core of the FreeBSD operating system.
It is responsible for managing memory, enforcing security controls, networking,
disk access, and much more.
While much of FreeBSD is dynamically configurable, it is still occasionally
necessary to configure and compile a custom kernel.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
When to build a custom kernel.
.It
How to take a hardware inventory.
.It
How to customize a kernel configuration file.
.It
How to use the kernel configuration file to create and build a new kernel.
.It
How to install the new kernel.
.It
How to troubleshoot if things go wrong.
.El
.Pp
All of the commands listed in the examples in this chapter should be executed
as
.Ql root
.
.Ss WHY BUILD A CUSTOM KERNEL?
.Pp
Traditionally, FreeBSD used a monolithic kernel.
The kernel was one large program, supported a fixed list of devices, and in
order to change the kernel's behavior, one had to compile and then reboot into
a new kernel.
.Pp
Today, most of the functionality in the FreeBSD kernel is contained in modules
which can be dynamically loaded and unloaded from the kernel as necessary.
This allows the running kernel to adapt immediately to new hardware and for new
functionality to be brought into the kernel.
This is known as a modular kernel.
.Pp
Occasionally, it is still necessary to perform static kernel configuration.
Sometimes the needed functionality is so tied to the kernel that it can not be
made dynamically loadable.
Some security environments prevent the loading and unloading of kernel modules
and require that only needed functionality is statically compiled into the
kernel.
.Pp
Building a custom kernel is often a rite of passage for advanced BSD users.
This process, while time consuming, can provide benefits to the FreeBSD system.
Unlike the
.Pa GENERIC
kernel, which must support a wide range of hardware, a custom kernel can be
stripped down to only provide support for that computer's hardware.
This has a number of benefits, such as:
.Bl -bullet -offset -compact
.It
Faster boot time.
Since the kernel will only probe the hardware on the system, the time it takes
the system to boot can decrease.
.It
Lower memory usage.
A custom kernel often uses less memory than the
.Pa GENERIC
kernel by omitting unused features and device drivers.
This is important because the kernel code remains resident in physical memory
at all times, preventing that memory from being used by applications.
For this reason, a custom kernel is useful on a system with a small amount of
RAM.
.It
Additional hardware support.
A custom kernel can add support for devices which are not present in the
.Pa GENERIC
kernel.
.El
.Pp
Before building a custom kernel, consider the reason for doing so.
If there is a need for specific hardware support, it may already exist as a
module.
.Pp
Kernel modules exist in
.Pa /boot/kernel
and may be dynamically loaded into the running kernel using
.Xr kldload 8 .
Most kernel drivers have a loadable module and manual page.
For example, the
.Xr ath 4 wireless Ethernet driver has the following information in its manual page:
.Bd -literal -offset indent
Alternatively, to load the driver as a module at boot time, place the
following line in
.Xr loader.conf 5 :

    if_ath_load="YES"
.Ed
.Pp
Adding
.Ql if_ath_load="YES"
to
.Pa /boot/loader.conf
will load this module dynamically at boot time.
.Pp
In some cases, there is no associated module in
.Pa /boot/kernel
.
This is mostly true for certain subsystems.
.Ss FINDING THE SYSTEM HARDWARE
.Pp
Before editing the kernel configuration file, it is recommended to perform an
inventory of the machine's hardware.
On a dual-boot system, the inventory can be created from the other operating
system.
For example, Microsoft's Device Manager contains information about installed devices.
.Pp
Some versions of MicrosoftWindows have a System icon which can be used to access Device Manager.
.Pp
If FreeBSD is the only installed operating system, use
.Xr dmesg 8 to determine the hardware that was found and listed during the boot probe.
Most device drivers on FreeBSD have a manual page which lists the hardware
supported by that driver.
For example, the following lines indicate that the
.Xr psm 4 driver found a mouse:
.Bd -literal -offset indent
psm0: <PS/2 Mouse> irq 12 on atkbdc0
psm0: [GIANT-LOCKED]
psm0: [ITHREAD]
psm0: model Generic PS/2 mouse, device ID 0
.Ed
.Pp
Since this hardware exists, this driver should not be removed from a custom
kernel configuration file.
.Pp
If the output of
.Cm dmesg
does not display the results of the boot probe output, instead read the
contents of
.Pa /var/run/dmesg.boot
.
.Pp
Another tool for finding hardware is
.Xr pciconf 8 , which provides more verbose output.
For example:
.Bd -literal -offset indent
% pciconf -lv
ath0@pci0:3:0:0:        class=0x020000 card=0x058a1014 chip=0x1014168c rev=0x01 hdr=0x00
    vendor     = 'Atheros Communications Inc.'
    device     = 'AR5212 Atheros AR5212 802.11abg wireless'
    class      = network
    subclass   = ethernet
.Ed
.Pp
This output shows that the
.Pa ath
driver located a wireless Ethernet device.
.Pp
The
.Ar -k
flag of
.Xr man 1 can be used to provide useful information.
For example, it can be used to display a list of manual pages which contain a
particular device brand or name:
.Bd -literal -offset indent
# man -k Atheros
ath(4)                   - Atheros IEEE 802.11 wireless network driver
ath_hal(4)               - Atheros Hardware Access Layer (HAL)
.Ed
.Pp
Once the hardware inventory list is created, refer to it to ensure that drivers
for installed hardware are not removed as the custom kernel configuration is
edited.
.Ss THE CONFIGURATION FILE
.Pp
In order to create a custom kernel configuration file and build a custom
kernel, the full FreeBSD source tree must first be installed.
.Pp
If
.Pa /usr/src/
does not exist or it is empty, source has not been installed.
Source can be installed using Subversion and the instructions in .
.Pp
Once source is installed, review the contents of
.Pa /usr/src/sys
.
This directory contains a number of subdirectories, including those which
represent the following supported architectures:
.Pa amd64
,
.Pa i386
,
.Pa ia64
,
.Pa pc98
,
.Pa powerpc
, and
.Pa sparc64
.
Everything inside a particular architecture's directory deals with that
architecture only and the rest of the code is machine independent code common
to all platforms.
Each supported architecture has a
.Pa conf
subdirectory which contains the
.Pa GENERIC
kernel configuration file for that architecture.
.Pp
Do not make edits to
.Pa GENERIC
.
Instead, copy the file to a different name and make edits to the copy.
The convention is to use a name with all capital letters.
When maintaining multiple FreeBSD machines with different hardware, it is a
good idea to name it after the machine's hostname.
This example creates a copy, named
.Pa MYKERNEL
, of the
.Pa GENERIC
configuration file for the
.Ql amd64
architecture:
.Bd -literal -offset indent
# cd /usr/src/sys/amd64/conf
# cp GENERIC MYKERNEL
.Ed
.Pp
.Pa MYKERNEL
can now be customized with any ASCII text editor.
The default editor is vi, though an easier editor for beginners, called ee, is also installed with FreeBSD.
.Pp
The format of the kernel configuration file is simple.
Each line contains a keyword that represents a device or subsystem, an
argument, and a brief description.
Any text after a
.Ql #
is considered a comment and ignored.
To remove kernel support for a device or subsystem, put a
.Ql #
at the beginning of the line representing that device or subsystem.
Do not add or remove a
.Ql #
for any line that you do not understand.
.Pp
It is easy to remove support for a device or option and end up with a broken
kernel.
For example, if the
.Xr ata 4 driver is removed from the kernel configuration file, a system using ATA disk drivers may not boot.
When in doubt, just leave support in the kernel.
.Pp
In addition to the brief descriptions provided in this file, additional
descriptions are contained in
.Pa NOTES
, which can be found in the same directory as
.Pa GENERIC
for that architecture.
For architecture independent options, refer to
.Pa /usr/src/sys/conf/NOTES
.
.Pp
When finished customizing the kernel configuration file, save a backup copy to
a location outside of
.Pa /usr/src
.
.Pp
Alternately, keep the kernel configuration file elsewhere and create a symbolic
link to the file:
.Bd -literal -offset indent
# cd /usr/src/sys/amd64/conf
# mkdir /root/kernels
# cp GENERIC /root/kernels/MYKERNEL
# ln -s /root/kernels/MYKERNEL
.Ed
.Pp
An
.Ql include
directive is available for use in configuration files.
This allows another configuration file to be included in the current one,
making it easy to maintain small changes relative to an existing file.
If only a small number of additional options or drivers are required, this
allows a delta to be maintained with respect to
.Pa GENERIC
, as seen in this example:
.Bd -literal -offset indent
include GENERIC
ident MYKERNEL

options         IPFIREWALL
options         DUMMYNET
options         IPFIREWALL_DEFAULT_TO_ACCEPT
options         IPDIVERT
.Ed
.Pp
Using this method, the local configuration file expresses local differences
from a
.Pa GENERIC
kernel.
As upgrades are performed, new features added to
.Pa GENERIC
will also be added to the local kernel unless they are specifically prevented
using
.Ql nooptions
or
.Ql nodevice
.
A comprehensive list of configuration directives and their descriptions may be
found in
.Xr config 5 .
.Pp
To build a file which contains all available options, run the following command
as
.Ql root
:
.Bd -literal -offset indent
# cd /usr/src/sys/arch/conf && make LINT
.Ed
.Ss BUILDING AND INSTALLING A CUSTOM KERNEL
.Pp
Once the edits to the custom configuration file have been saved, the source
code for the kernel can be compiled using the following steps:
.Ss BUILDING A KERNEL
.Pp
Change to this directory:
.Bd -literal -offset indent
# cd /usr/src
.Ed
.Pp
Compile the new kernel by specifying the name of the custom kernel
configuration file:
.Bd -literal -offset indent
# make buildkernel KERNCONF=MYKERNEL
.Ed
.Pp
Install the new kernel associated with the specified kernel configuration file.
This command will copy the new kernel to
.Pa /boot/kernel/kernel
and save the old kernel to
.Pa /boot/kernel.old/kernel
:
.Bd -literal -offset indent
# make installkernel KERNCONF=MYKERNEL
.Ed
.Pp
Shutdown the system and reboot into the new kernel.
If something goes wrong, refer to .
.Pp
By default, when a custom kernel is compiled, all kernel modules are rebuilt.
To update a kernel faster or to build only custom modules, edit
.Pa /etc/make.conf
before starting to build the kernel.
.Pp
For example, this variable specifies the list of modules to build instead of
using the default of building all modules:
.Bd -literal -offset indent
MODULES_OVERRIDE = linux acpi
.Ed
.Pp
Alternately, this variable lists which modules to exclude from the build
process:
.Bd -literal -offset indent
WITHOUT_MODULES = linux acpi sound
.Ed
.Pp
Additional variables are available.
Refer to
.Xr make.conf 5 for details.
.Ss IF SOMETHING GOES WRONG
.Pp
There are four categories of trouble that can occur when building a custom
kernel:
.Bl -tag -offset -compact
.It
.Cm config
fails
If
.Cm config
fails, it will print the line number that is incorrect.
As an example, for the following message, make sure that line 17 is typed
correctly by comparing it to
.Pa GENERIC
or
.Pa NOTES
:
.Bd -literal -offset indent
config: line 17: syntax error
.Ed
.It
.Cm make
fails
If
.Cm make
fails, it is usually due to an error in the kernel configuration file which is
not severe enough for
.Cm config
to catch.
Review the configuration, and if the problem is not apparent, send an email to
the FreeBSD general questions mailing list which contains the kernel configuration file.
.It The kernel does not boot
If the new kernel does not boot or fails to recognize devices, do not panic!
Fortunately, FreeBSD has an excellent mechanism for recovering from
incompatible kernels.
Simply choose the kernel to boot from at the FreeBSD boot loader.
This can be accessed when the system boot menu appears by selecting the
.Do
Escape to a loader prompt
.Dc
option.
At the prompt, type
.Cm boot kernel.old
, or the name of any other kernel that is known to boot properly.
After booting with a good kernel, check over the configuration file and try to
build it again.
One helpful resource is
.Pa /var/log/messages
which records the kernel messages from every successful boot.
Also,
.Xr dmesg 8 will print the kernel messages from the current boot.
When troubleshooting a kernel, make sure to keep a copy of
.Pa GENERIC
, or some other kernel that is known to work, as a different name that will not
get erased on the next build.
This is important because every time a new kernel is installed,
.Pa kernel.old
is overwritten with the last installed kernel, which may or may not be
bootable.
As soon as possible, move the working kernel by renaming the directory
containing the good kernel:
.Bd -literal -offset indent
# mv /boot/kernel /boot/kernel.bad
# mv /boot/kernel.good /boot/kernel
.Ed
.It The kernel works, but
.Xr ps 1 does not
If the kernel version differs from the one that the system utilities have been
built with, for example, a kernel built from -CURRENT sources is installed on a
-RELEASE system, many system status commands like
.Xr ps 1 and
.Xr vmstat 8 will not work.
To fix this, recompile and install a world built with the same version of the source tree as the kernel.
It is never a good idea to use a different version of the kernel than the rest
of the operating system.
.El
.Pp
Putting information on paper is a vital function, despite many attempts to
eliminate it.
Printing has two basic components.
The data must be delivered to the printer, and must be in a form that the
printer can understand.
.Ss QUICK START
.Pp
Basic printing can be set up quickly.
The printer must be capable of printing plain ASCII text.
For printing to other types of files, see .
.Pp
Create a directory to store files while they are being printed:
.Bd -literal -offset indent
# mkdir -p /var/spool/lpd/lp
# chown daemon:daemon /var/spool/lpd/lp
# chmod 770 /var/spool/lpd/lp
.Ed
.Pp
As
.Ql root
, create
.Pa /etc/printcap
with these contents:
.Bd -literal -offset indent
lp:\
	:lp=/dev/unlpt0:\  
	:sh:\
	:mx#0:\
	:sd=/var/spool/lpd/lp:\
	:lf=/var/log/lpd-errs:
.Ed
.Pp
This line is for a printer connected to a USB port.
.Pp
For a printer connected to a parallel or
.Do
printer
.Dc
port, use:
.Bd -literal -offset indent
:lp=/dev/lpt0:\
.Ed
.Pp
For a printer connected directly to a network, use:
.Bd -literal -offset indent
:lp=:rm=network-printer-name:rp=raw:\
.Ed
.Pp
Replace network-printer-name with the DNS host name of the network printer.
.Pp
Enable
.Cm lpd
by editing
.Pa /etc/rc.conf
, adding this line:
.Bd -literal -offset indent
lpd_enable="YES"
.Ed
.Pp
Start the service:
.Bd -literal -offset indent
# service lpd start
Starting lpd.
.Ed
.Pp
Print a test:
.Bd -literal -offset indent
# printf "1.
This printer can print.\n2.
This is the second line.\n" | lpr
.Ed
.Pp
If both lines do not start at the left border, but
.Do
stairstep
.Dc
instead, see .
.Pp
Text files can now be printed with
.Cm lpr
.
Give the filename on the command line, or pipe output directly into
.Cm lpr
.
.Bd -literal -offset indent
% lpr textfile.txt
% ls -lh | lpr
.Ed
.Ss PRINTER CONNECTIONS
.Pp
Printers are connected to computer systems in a variety of ways.
Small desktop printers are usually connected directly to a computer's USB port.
Older printers are connected to a parallel or
.Do
printer
.Dc
port.
Some printers are directly connected to a network, making it easy for multiple
computers to share them.
A few printers use a rare serial port connection.
.Pp
FreeBSD can communicate with all of these types of printers.
.Bl -tag -offset -compact
.It USB
USB printers can be connected to any available USB port on the computer.
When FreeBSD detects a USB printer, two device entries are created:
.Pa /dev/ulpt0
and
.Pa /dev/unlpt0
.
Data sent to either device will be relayed to the printer.
After each print job,
.Pa ulpt0
resets the USB port.
Resetting the port can cause problems with some printers, so the
.Pa unlpt0
device is usually used instead.
.Pa unlpt0
does not reset the USB port at all.
.It Parallel (IEEE-1284)
The parallel port device is
.Pa /dev/lpt0
.
This device appears whether a printer is attached or not, it is not
autodetected.
Vendors have largely moved away from these
.Do
legacy
.Dc
ports, and many computers no longer have them.
Adapters can be used to connect a parallel printer to a USB port.
With such an adapter, the printer can be treated as if it were actually a USB printer.
Devices called print servers can also be used to connect parallel printers directly to a network.
.It Serial (RS-232)
Serial ports are another legacy port, rarely used for printers except in
certain niche applications.
Cables, connectors, and required wiring vary widely.
For serial ports built into a motherboard, the serial device name is
.Pa /dev/cuau0
or
.Pa /dev/cuau1
.
Serial USB adapters can also be used, and these will appear as
.Pa /dev/cuaU0
.
Several communication parameters must be known to communicate with a serial
printer.
The most important are baud rate or BPS (Bits Per Second) and parity.
Values vary, but typical serial printers use a baud rate of 9600 and no parity.
.It Network
Network printers are connected directly to the local computer network.
The DNS hostname of the printer must be known.
If the printer is assigned a dynamic address by DHCP, DNS should be dynamically updated so that the host name always has the correct IP address.
Network printers are often given static IP addresses to avoid this problem.
Most network printers understand print jobs sent with the LPD protocol.
A print queue name can also be specified.
Some printers process data differently depending on which queue is used.
For example, a
.Ql raw
queue prints the data unchanged, while the
.Ql text
queue adds carriage returns to plain text.
Many network printers can also print data sent directly to port 9100.
.El
.Ss SUMMARY
.Pp
Wired network connections are usually the easiest to set up and give the
fastest printing.
For direct connection to the computer, USB is preferred for speed and simplicity.
Parallel connections work but have limitations on cable length and speed.
Serial connections are more difficult to configure.
Cable wiring differs between models, and communication parameters like baud
rate and parity bits must add to the complexity.
Fortunately, serial printers are rare.
.Ss COMMON PAGE DESCRIPTION LANGUAGES
.Pp
Data sent to a printer must be in a language that the printer can understand.
These languages are called Page Description Languages, or PDLs.
.Bl -tag -offset -compact
.It ASCII
Plain ASCII text is the simplest way to send data to a printer.
Characters correspond one to one with what will be printed: an
.Ql A
in the data prints an
.Ql A
on the page.
Very little formatting is available.
There is no way to select a font or proportional spacing.
The forced simplicity of plain ASCII means that text can be printed straight from the computer with little or no
encoding or translation.
The printed output corresponds directly with what was sent.
Some inexpensive printers cannot print plain ASCII text.
This makes them more difficult to set up, but it is usually still possible.
.It PostScript
PostScript is almost the opposite of ASCII.
Rather than simple text, a PostScript program is a set of instructions that draw the final document.
Different fonts and graphics can be used.
However, this power comes at a price.
The program that draws the page must be written.
Usually this program is generated by application software, so the process is
invisible to the user.
Inexpensive printers sometimes leave out PostScript compatibility as a cost-saving measure.
.It PCL (Printer Command Language)
PCL is an extension of ASCII, adding escape sequences for formatting, font selection, and printing
graphics.
Many printers provide PCL5 support.
Some support the newer PCL6 or PCLXL.
These later versions are supersets of PCL5 and can provide faster printing.
.It Host-Based
Manufacturers can reduce the cost of a printer by giving it a simple processor
and very little memory.
These printers are not capable of printing plain text.
Instead, bitmaps of text and graphics are drawn by a driver on the host
computer and then sent to the printer.
These are called host-based printers.
Communication between the driver and a host-based printer is often through
proprietary or undocumented protocols, making them functional only on the most
common operating systems.
.El
.Ss CONVERTING POSTSCRIPT TO OTHER PDLS
.Pp
Many applications from the Ports Collection and FreeBSD utilities produce PostScript output.
This table shows the utilities available to convert that into other common PDLs:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Output PDL
.Ta
Generated By
.Ta
Notes
.It
.Ta
PCL or PCL5
.Ta
.Ql print/ghostscript9
.Ta
.Ql -sDEVICE=ljet4
for monochrome,
.Ql -sDEVICE=cljet5
for color
.It
.Ta
PCLXL or PCL6
.Ta
.Ql print/ghostscript9
.Ta
.Ql -sDEVICE=pxlmono
for monochrome,
.Ql -sDEVICE=pxlcolor
for color
.It
.Ta
ESC/P2
.Ta
.Ql print/ghostscript9
.Ta
.Ql -sDEVICE=uniprint
.It
.Ta
XQX
.Ta
.Ql print/foo2zjs
.Ta
.El
.Ss SUMMARY
.Pp
For the easiest printing, choose a printer that supports PostScript.
Printers that support PCL are the next preferred.
With
.Ql print/ghostscript
, these printers can be used as if they understood PostScript natively.
Printers that support PostScript or PCL directly almost always support direct printing of plain ASCII text files also.
.Pp
Line-based printers like typical inkjets usually do not support PostScript or PCL.
They often can print plain ASCII text files.
.Ql print/ghostscript
supports the PDLs used by some of these printers.
However, printing an entire graphic-based page on these printers is often very
slow due to the large amount of data to be transferred and printed.
.Pp
Host-based printers are often more difficult to set up.
Some cannot be used at all because of proprietary PDLs.
Avoid these printers when possible.
.Pp
Descriptions of many PDLs can be found at http://www.undocprint.org/formats/page_description_languages.
The particular PDL used by various models of printers can be found at http://www.openprinting.org/printers.
.Ss DIRECT PRINTING
.Pp
For occasional printing, files can be sent directly to a printer device without
any setup.
For example, a file called
.Pa sample.txt
can be sent to a USB printer:
.Bd -literal -offset indent
# cp sample.txt /dev/unlpt0
.Ed
.Pp
Direct printing to network printers depends on the abilities of the printer,
but most accept print jobs on port 9100, and
.Xr nc 1 can be used with them.
To print the same file to a printer with the DNS hostname of netlaser:
.Bd -literal -offset indent
# nc netlaser 9100 < sample.txt
.Ed
.Ss LPD (LINE PRINTER DAEMON)
.Pp
Printing a file in the background is called spooling.
A spooler allows the user to continue with other programs on the computer
without waiting for the printer to slowly complete the print job.
.Pp
FreeBSD includes a spooler called
.Xr lpd 8 .
Print jobs are submitted with
.Xr lpr 1 .
.Ss INITIAL SETUP
.Pp
A directory for storing print jobs is created, ownership is set, and the
permissions are set to prevent other users from viewing the contents of those
files:
.Bd -literal -offset indent
# mkdir -p /var/spool/lpd/lp
# chown daemon:daemon /var/spool/lpd/lp
# chmod 770 /var/spool/lpd/lp
.Ed
.Pp
Printers are defined in
.Pa /etc/printcap
.
An entry for each printer includes details like a name, the port where it is
attached, and various other settings.
Create
.Pa /etc/printcap
with these contents:
.Bd -literal -offset indent
lp:\				
	:lp=/dev/unlpt0:\	
	:sh:\			
	:mx#0:\			
	:sd=/var/spool/lpd/lp:\	
	:lf=/var/log/lpd-errs:
.Ed
.Pp
The name of this printer.
.Xr lpr 1 sends print jobs to the
.Ql lp
printer unless another printer is specified with
.Ar -P
, so the default printer should be named
.Ql lp
.
.Pp
The device where the printer is connected.
Replace this line with the appropriate one for the connection type shown here.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Connection Type
.Ta
Device Entry in
.Pa /etc/printcap
.It
.Ta
USB
.Ta
.Bd -literal -offset indent
:lp=/dev/unlpt0:\
.Ed
.Pp
This is the non-resetting  USB printer device.
If problems are experienced, use
.Pa ulpt0
instead, which resets the USB port on each use.
.It
.Ta
Parallel
.Ta
.Bd -literal -offset indent
:lp=/dev/lpt0:\
.Ed
.It
.Ta
Network
.Ta
.Pp
For a printer supporting the LPD protocol:
.Bd -literal -offset indent
:lp=:rm=network-printer-name:rp=raw:\
.Ed
.Pp
For printers supporting port 9100 printing:
.Bd -literal -offset indent
:lp=9100@network-printer-name:\
.Ed
.Pp
For both types, replace network-printer-name with the DNS host name of the network printer.
.It
.Ta
Serial
.Ta
.Bd -literal -offset indent
:lp=/dev/cuau0:br=9600:pa=none:\
.Ed
.Pp
These values are for a typical serial printer connected to a motherboard serial
port.
The baud rate is 9600, and no parity is used.
.El
.Pp
Suppress the printing of a header page at the start of a print job.
.Pp
Do not limit the maximum size of a print job.
.Pp
The path to the spooling directory for this printer.
Each printer uses its own spooling directory.
.Pp
The log file where errors on this printer will be reported.
.Pp
After creating
.Pa /etc/printcap
, use
.Xr chkprintcap 8 to test it for errors:
.Bd -literal -offset indent
# chkprintcap
.Ed
.Pp
Fix any reported problems before continuing.
.Pp
Enable
.Xr lpd 8 in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
lpd_enable="YES"
.Ed
.Pp
Start the service:
.Bd -literal -offset indent
# service lpd start
.Ed
.Ss PRINTING WITH LPR
.Pp
Documents are sent to the printer with
.Cm lpr
.
A file to be printed can be named on the command line or piped into
.Cm lpr
.
These two commands are equivalent, sending the contents of
.Pa doc.txt
to the default printer:
.Bd -literal -offset indent
% lpr doc.txt
% cat doc.txt | lpr
.Ed
.Pp
Printers can be selected with
.Ar -P
.
To print to a printer called laser:
.Bd -literal -offset indent
% lpr -Plaser doc.txt
.Ed
.Ss FILTERS
.Pp
The examples shown so far have sent the contents of a text file directly to the
printer.
As long as the printer understands the content of those files, output will be
printed correctly.
.Pp
Some printers are not capable of printing plain text, and the input file might
not even be plain text.
.Pp
Filters allow files to be translated or processed.
The typical use is to translate one type of input, like plain text, into a form
that the printer can understand, like PostScript or PCL.
Filters can also be used to provide additional features, like adding page
numbers or highlighting source code to make it easier to read.
.Pp
The filters discussed here are input filters or text filters.
These filters convert the incoming file into different forms.
Use
.Xr su 1 to become
.Ql root
before creating the files.
.Pp
Filters are specified in
.Pa /etc/printcap
with the
.Ql if=
identifier.
To use
.Pa /usr/local/libexec/lf2crlf
as a filter, modify
.Pa /etc/printcap
like this:
.Bd -literal -offset indent
lp:\
	:lp=/dev/unlpt0:\
	:sh:\
	:mx#0:\
	:sd=/var/spool/lpd/lp:\
	:if=/usr/local/libexec/lf2crlf:\   
	:lf=/var/log/lpd-errs:
.Ed
.Pp
.Ql if=
identifies the input filter that will be used on incoming text.
.Pp
The backslash line continuation characters at the end of the lines in
.Pa printcap
entries reveal that an entry for a printer is really just one long line with
entries delimited by colon characters.
An earlier example can be rewritten as a single less-readable line:
.Bd -literal -offset indent
lp:lp=/dev/unlpt0:sh:mx#0:sd=/var/spool/lpd/lp:if=/usr/local/libexec/lf2crlf:lf=/var/log/lpd-errs:
.Ed
.Ss PREVENTING STAIRSTEPPING ON PLAIN TEXT PRINTERS
.Pp
Typical FreeBSD text files contain only a single line feed character at the end
of each line.
These lines will
.Do
stairstep
.Dc
on a standard printer:
.Bd -literal -offset indent
A printed file looks
                    like the steps of a staircase
                                                 scattered by the wind
.Ed
.Pp
A filter can convert the newline characters into carriage returns and newlines.
The carriage returns make the printer return to the left after each line.
Create
.Pa /usr/local/libexec/lf2crlf
with these contents:
.Bd -literal -offset indent
#!/bin/sh
CR=$'\r'
/usr/bin/sed -e "s/$/${CR}/g"
.Ed
.Pp
Set the permissions and make it executable:
.Bd -literal -offset indent
# chmod 555 /usr/local/libexec/lf2crlf
.Ed
.Pp
Modify
.Pa /etc/printcap
to use the new filter:
.Bd -literal -offset indent
:if=/usr/local/libexec/lf2crlf:\
.Ed
.Pp
Test the filter by printing the same plain text file.
The carriage returns will cause each line to start at the left side of the
page.
.Ss FANCY PLAIN TEXT ON POSTSCRIPT PRINTERS WITH PRINT/ENSCRIPT
.Pp
GNU  Enscript converts plain text files into nicely-formatted PostScript for printing on PostScript printers.
It adds page numbers, wraps long lines, and provides numerous other features to
make printed text files easier to read.
Depending on the local paper size, install either
.Ql print/enscript-letter
or
.Ql print/enscript-a4
from the Ports Collection.
.Pp
Create
.Pa /usr/local/libexec/enscript
with these contents:
.Bd -literal -offset indent
#!/bin/sh
/usr/local/bin/enscript -o -
.Ed
.Pp
Set the permissions and make it executable:
.Bd -literal -offset indent
# chmod 555 /usr/local/libexec/enscript
.Ed
.Pp
Modify
.Pa /etc/printcap
to use the new filter:
.Bd -literal -offset indent
:if=/usr/local/libexec/enscript:\
.Ed
.Pp
Test the filter by printing a plain text file.
.Ss PRINTING POSTSCRIPT TO PCL PRINTERS
.Pp
Many programs produce PostScript documents.
However, inexpensive printers often only understand plain text or PCL.
This filter converts PostScript files to PCL before sending them to the printer.
.Pp
Install the Ghostscript PostScript interpreter,
.Ql print/ghostscript9
, from the Ports Collection.
.Pp
Create
.Pa /usr/local/libexec/ps2pcl
with these contents:
.Bd -literal -offset indent
#!/bin/sh
/usr/local/bin/gs -dSAFER -dNOPAUSE -dBATCH -q -sDEVICE=ljet4 -sOutputFile=- -
.Ed
.Pp
Set the permissions and make it executable:
.Bd -literal -offset indent
# chmod 555 /usr/local/libexec/ps2pcl
.Ed
.Pp
PostScript input sent to this script will be rendered and converted to PCL before being sent on to the printer.
.Pp
Modify
.Pa /etc/printcap
to use this new input filter:
.Bd -literal -offset indent
:if=/usr/local/libexec/ps2pcl:\
.Ed
.Pp
Test the filter by sending a small PostScript program to it:
.Bd -literal -offset indent
% printf "%%\!PS \n /Helvetica findfont 18 scalefont setfont \ 72 432 moveto
(PostScript printing successful.) show showpage \004" | lpr
.Ed
.Ss SMART FILTERS
.Pp
A filter that detects the type of input and automatically converts it to the
correct format for the printer can be very convenient.
The first two characters of a PostScript file are usually
.Ql %!
.
A filter can detect those two characters.
 PostScript files can be sent on to a PostScript printer unchanged.
Text files can be converted to PostScript with Enscript as shown earlier.
Create
.Pa /usr/local/libexec/psif
with these contents:
.Bd -literal -offset indent
#!/bin/sh
#
#  psif - Print PostScript or plain text on a PostScript printer
#
IFS="" read -r first_line
first_two_chars=`expr "$first_line" : '\(..\)'`

case "$first_two_chars" in
%!)
    # %! : PostScript job, print it.
    echo "$first_line" && cat && exit 0
    exit 2
    ;;
*)
    # otherwise, format with enscript
    ( echo "$first_line"; cat ) | /usr/local/bin/enscript -o - && exit 0
    exit 2
    ;;
esac
.Ed
.Pp
Set the permissions and make it executable:
.Bd -literal -offset indent
# chmod 555 /usr/local/libexec/psif
.Ed
.Pp
Modify
.Pa /etc/printcap
to use this new input filter:
.Bd -literal -offset indent
:if=/usr/local/libexec/psif:\
.Ed
.Pp
Test the filter by printing PostScript and plain text files.
.Ss OTHER SMART FILTERS
.Pp
Writing a filter that detects many different types of input and formats them
correctly is challenging.
.Ql print/apsfilter
from the Ports Collection is a smart
.Do
magic
.Dc
filter that detects dozens of file types and automatically converts them to the PDL understood by the printer.
See http://www.apsfilter.org for more details.
.Ss MULTIPLE QUEUES
.Pp
The entries in
.Pa /etc/printcap
are really definitions of queues.
There can be more than one queue for a single printer.
When combined with filters, multiple queues provide users more control over how
their jobs are printed.
.Pp
As an example, consider a networked PostScript laser printer in an office.
Most users want to print plain text, but a few advanced users want to be able
to print PostScript files directly.
Two entries can be created for the same printer in
.Pa /etc/printcap
:
.Bd -literal -offset indent
textprinter:\
	:lp=9100@officelaser:\
	:sh:\
	:mx#0:\
	:sd=/var/spool/lpd/textprinter:\
	:if=/usr/local/libexec/enscript:\
	:lf=/var/log/lpd-errs:

psprinter:\
	:lp=9100@officelaser:\
	:sh:\
	:mx#0:\
	:sd=/var/spool/lpd/psprinter:\
	:lf=/var/log/lpd-errs:
.Ed
.Pp
Documents sent to
.Ql textprinter
will be formatted by the
.Pa /usr/local/libexec/enscript
filter shown in an earlier example.
Advanced users can print PostScript files on
.Ql psprinter
, where no filtering is done.
.Pp
This multiple queue technique can be used to provide direct access to all kinds
of printer features.
A printer with a duplexer could use two queues, one for ordinary single-sided
printing, and one with a filter that sends the command sequence to enable
double-sided printing and then sends the incoming file.
.Ss MONITORING AND CONTROLLING PRINTING
.Pp
Several utilities are available to monitor print jobs and check and control
printer operation.
.Ss LPQ
.Pp
.Xr lpq 1 shows the status of a user's print jobs.
Print jobs from other users are not shown.
.Pp
Show the current user's pending jobs on a single printer:
.Bd -literal -offset indent
% lpq -Plp
Rank   Owner      Job  Files                                 Total Size
1st    jsmith     0    (standard input)                      12792 bytes
.Ed
.Pp
Show the current user's pending jobs on all printers:
.Bd -literal -offset indent
% lpq -a
lp:
Rank   Owner      Job  Files                                 Total Size
1st    jsmith     1    (standard input)                      27320 bytes

laser:
Rank   Owner      Job  Files                                 Total Size
1st    jsmith     287  (standard input)                      22443 bytes
.Ed
.Ss LPRM
.Pp
.Xr lprm 1 is used to remove print jobs.
Normal users are only allowed to remove their own jobs.
.Ql root
can remove any or all jobs.
.Pp
Remove all pending jobs from a printer:
.Bd -literal -offset indent
# lprm -Plp -
dfA002smithy dequeued
cfA002smithy dequeued
dfA003smithy dequeued
cfA003smithy dequeued
dfA004smithy dequeued
cfA004smithy dequeued
.Ed
.Pp
Remove a single job from a printer.
.Xr lpq 1 is used to find the job number.
.Bd -literal -offset indent
% lpq
Rank   Owner      Job  Files                                 Total Size
1st    jsmith     5    (standard input)                      12188 bytes
% lprm -Plp  5
dfA005smithy dequeued
cfA005smithy dequeued
.Ed
.Ss LPC
.Pp
.Xr lpc 8 is used to check and modify printer status.
.Ql lpc
is followed by a command and an optional printer name.
.Ql all
can be used instead of a specific printer name, and the command will be applied
to all printers.
Normal users can view status with
.Xr lpc 8 .
Only
.Ql class="username">root
can use commands which modify printer status.
.Pp
Show the status of all printers:
.Bd -literal -offset indent
% lpc status all
lp:
	queuing is enabled
	printing is enabled
	1 entry in spool area
	printer idle
laser:
	queuing is enabled
	printing is enabled
	1 entry in spool area
	waiting for laser to come up
.Ed
.Pp
Prevent a printer from accepting new jobs, then begin accepting new jobs again:
.Bd -literal -offset indent
# lpc disable lp
lp:
	queuing disabled
# lpc enable lp
lp:
	queuing enabled
.Ed
.Pp
Stop printing, but continue to accept new jobs.
Then begin printing again:
.Bd -literal -offset indent
# lpc stop lp
lp:
	printing disabled
# lpc start lp
lp:
	printing enabled
	daemon started
.Ed
.Pp
Restart a printer after some error condition:
.Bd -literal -offset indent
# lpc restart lp
lp:
	no daemon to abort
	printing enabled
	daemon restarted
.Ed
.Pp
Turn the print queue off and disable printing, with a message to explain the
problem to users:
.Bd -literal -offset indent
# lpc down lp Repair parts will arrive on Monday
lp:
	printer and queuing disabled
	status message is now: Repair parts will arrive on Monday
.Ed
.Pp
Re-enable a printer that is down:
.Bd -literal -offset indent
# lpc up lp
lp:
	printing enabled
	daemon started
.Ed
.Pp
See
.Xr lpc 8 for more commands and options.
.Ss SHARED PRINTERS
.Pp
Printers are often shared by multiple users in businesses and schools.
Additional features are provided to make sharing printers more convenient.
.Ss ALIASES
.Pp
The printer name is set in the first line of the entry in
.Pa /etc/printcap
.
Additional names, or aliases, can be added after that name.
Aliases are separated from the name and each other by vertical bars:
.Bd -literal -offset indent
lp|repairsprinter|salesprinter:\
.Ed
.Pp
Aliases can be used in place of the printer name.
For example, users in the Sales department print to their printer with
.Bd -literal -offset indent
% lpr -Psalesprinter  sales-report.txt
.Ed
.Pp
Users in the Repairs department print to their printer with
.Bd -literal -offset indent
% lpr -Prepairsprinter  repairs-report.txt
.Ed
.Pp
All of the documents print on that single printer.
When the Sales department grows enough to need their own printer, the alias can
be removed from the shared printer entry and used as the name of a new printer.
Users in both departments continue to use the same commands, but the Sales
documents are sent to the new printer.
.Ss HEADER PAGES
.Pp
It can be difficult for users to locate their documents in the stack of pages
produced by a busy shared printer.
 Header pages were created to solve this problem.
A header page with the user name and document name is printed before each print
job.
These pages are also sometimes called banner or separator pages.
.Pp
Enabling header pages differs depending on whether the printer is connected
directly to the computer with a USB, parallel, or serial cable, or is connected remotely over a network.
.Pp
Header pages on directly-connected printers are enabled by removing the
.Ql :sh:\
(Suppress Header) line from the entry in
.Pa /etc/printcap
.
These header pages only use line feed characters for new lines.
Some printers will need the
.Pa /usr/share/examples/printing/hpif
filter to prevent stairstepped text.
The filter configures PCL printers to print both carriage returns and line feeds when a line feed is
received.
.Pp
Header pages for network printers must be configured on the printer itself.
Header page entries in
.Pa /etc/printcap
are ignored.
Settings are usually available from the printer front panel or a configuration
web page accessible with a web browser.
.Ss REFERENCES
.Pp
Example files:
.Pa /usr/share/examples/printing/
.
.Pp
The 4.3BSD Line Printer Spooler Manual,
.Pa /usr/share/doc/smm/07.lpd/paper.ascii.gz
.
.Pp
Manual pages:
.Xr printcap 5 ,
.Xr lpd 8 ,
.Xr lpr 1 ,
.Xr lpc 8 ,
.Xr lprm 1 ,
.Xr lpq 1 .
.Ss OTHER PRINTING SYSTEMS
.Pp
Several other printing systems are available in addition to the built-in
.Xr lpd 8 .
These systems offer support for other protocols or additional features.
.Ss CUPS (COMMON UNIX PRINTING SYSTEM)
.Pp
CUPS is a popular printing system available on many operating systems.
Using CUPS on FreeBSD is documented in a separate article:../../../../doc/en_US.ISO8859-1/articles/cups
.Ss HPLIP
.Pp
Hewlett Packard provides a printing system that supports many of their inkjet
and laser printers.
The port is
.Ql print/hplip
.
The main web page is at http://hplipopensource.com/hplip-web/index.html.
The port handles all the installation details on FreeBSD.
Configuration information is shown at http://hplipopensource.com/hplip-web/install/manual/hp_setup.html.
.Ss LPRNG
.Pp
LPRng was developed as an enhanced alternative to
.Xr lpd 8 .
The port is
.Ql sysutils/LPRng
.
For details and documentation, see http://www.lprng.com/.
.Ss SYNOPSIS
.Pp
FreeBSD provides binary compatibility with Linux, allowing users to install and run most Linux binaries on a FreeBSD system without having to first modify the binary.
It has even been reported that, in some situations, Linux binaries perform better on FreeBSD than they do on Linux.
.Pp
However, some Linux-specific operating system features are not supported under FreeBSD.
For example, Linux binaries will not work on FreeBSD if they overly use i386 specific calls, such as enabling virtual 8086 mode.
.Pp
Support for 64-bit binary compatibility with Linux was added in FreeBSD 10.3.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
How to enable Linux binary compatibility on a FreeBSD system.
.It
How to install additional Linux shared libraries.
.It
How to install Linux applications on a FreeBSD system.
.It
The implementation details of Linux compatibility in FreeBSD.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Know how to install additional third-party software.
.El
.Ss CONFIGURING LINUX BINARY COMPATIBILITY
.Pp
By default, Linux libraries are not installed and Linux binary compatibility is not enabled.
 Linux libraries can either be installed manually or from the FreeBSD Ports
Collection.
.Pp
Before attempting to build the port, load the Linux kernel module, otherwise the build will fail:
.Bd -literal -offset indent
# kldload linux
.Ed
.Pp
For 64-bit compatibility:
.Bd -literal -offset indent
# kldload linux64
.Ed
.Pp
To verify that the module is loaded:
.Bd -literal -offset indent
% kldstat
      Id Refs Address    Size     Name
      1    2 0xc0100000 16bdb8   kernel
      7    1 0xc24db000 d000     linux.ko
.Ed
.Pp
The
.Ql emulators/linux_base-c6
package or port is the easiest way to install a base set of Linux libraries and binaries on a FreeBSD system.
To install the port:
.Bd -literal -offset indent
# pkg install emulators/linux_base-c6
.Ed
.Pp
For Linux compatibility to be enabled at boot time, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
linux_enable="YES"
.Ed
.Pp
On 64-bit machines,
.Pa /etc/rc.d/abi
will automatically load the module for 64-bit emulation.
.Pp
Since the Linux binary compatibility layer has gained support for running both
32- and 64-bit Linux binaries (on 64-bit x86 hosts), it is no longer possible
to link the emulation functionality statically into a custom kernel.
.Ss INSTALLING ADDITIONAL LIBRARIES MANUALLY
.Pp
If a Linux application complains about missing shared libraries after configuring Linux binary compatibility, determine which shared libraries the Linux binary needs and install them manually.
.Pp
From a Linux system,
.Cm ldd
can be used to determine which shared libraries the application needs.
For example, to check which shared libraries
.Cm linuxdoom
needs, run this command from a Linux system that has Doom installed:
.Bd -literal -offset indent
% ldd linuxdoom
libXt.so.3 (DLL Jump 3.1) => /usr/X11/lib/libXt.so.3.1.0
libX11.so.3 (DLL Jump 3.1) => /usr/X11/lib/libX11.so.3.1.0
libc.so.4 (DLL Jump 4.5pl26) => /lib/libc.so.4.6.29
.Ed
.Pp
Then, copy all the files in the last column of the output from the Linux system into
.Pa /compat/linux
on the FreeBSD system.
Once copied, create symbolic links to the names in the first column.
This example will result in the following files on the FreeBSD system:
.Bd -literal -offset indent
/compat/linux/usr/X11/lib/libXt.so.3.1.0
/compat/linux/usr/X11/lib/libXt.so.3 -> libXt.so.3.1.0
/compat/linux/usr/X11/lib/libX11.so.3.1.0
/compat/linux/usr/X11/lib/libX11.so.3 -> libX11.so.3.1.0
/compat/linux/lib/libc.so.4.6.29
/compat/linux/lib/libc.so.4 -> libc.so.4.6.29
.Ed
.Pp
If a Linux shared library already exists with a matching major revision number to the
first column of the
.Cm ldd
output, it does not need to be copied to the file named in the last column, as
the existing library should work.
It is advisable to copy the shared library if it is a newer version, though.
The old one can be removed, as long as the symbolic link points to the new one.
.Pp
For example, these libraries already exist on the FreeBSD system:
.Bd -literal -offset indent
/compat/linux/lib/libc.so.4.6.27
/compat/linux/lib/libc.so.4 -> libc.so.4.6.27
.Ed
.Pp
and
.Cm ldd
indicates that a binary requires a later version:
.Bd -literal -offset indent
libc.so.4 (DLL Jump 4.5pl26) -> libc.so.4.6.29
.Ed
.Pp
Since the existing library is only one or two versions out of date in the last
digit, the program should still work with the slightly older version.
However, it is safe to replace the existing
.Pa libc.so
with the newer version:
.Bd -literal -offset indent
/compat/linux/lib/libc.so.4.6.29
/compat/linux/lib/libc.so.4 -> libc.so.4.6.29
.Ed
.Pp
Generally, one will need to look for the shared libraries that Linux binaries depend on only the first few times that a Linux program is installed on FreeBSD.
After a while, there will be a sufficient set of Linux shared libraries on the system to be able to run newly installed Linux binaries without any extra work.
.Ss INSTALLING LINUX ELF BINARIES
.Pp
ELF binaries sometimes require an extra step.
When an unbranded ELF binary is executed, it will generate an error message:
.Bd -literal -offset indent
% ./my-linux-elf-binary
ELF binary type not known
Abort
.Ed
.Pp
To help the FreeBSD kernel distinguish between a FreeBSD ELF binary and a Linux binary, use
.Xr brandelf 1 :
.Bd -literal -offset indent
% brandelf -t Linux my-linux-elf-binary
.Ed
.Pp
Since the GNU toolchain places the appropriate branding information into ELF binaries automatically, this step is usually not necessary.
.Ss INSTALLING A LINUX RPM BASED APPLICATION
.Pp
To install a Linux  RPM-based application, first install the
.Ql archivers/rpm4
package or port.
Once installed,
.Ql root
can use this command to install a
.Pa .rpm
:
.Bd -literal -offset indent
# cd /compat/linux
# rpm2cpio < /path/to/linux.archive.rpm | cpio -id
.Ed
.Pp
If necessary,
.Cm brandelf
the installed ELF binaries.
Note that this will prevent a clean uninstall.
.Ss CONFIGURING THE HOSTNAME RESOLVER
.Pp
If DNS does not work or this error appears:
.Bd -literal -offset indent
resolv+: "bind" is an invalid keyword resolv+:
"hosts" is an invalid keyword
.Ed
.Pp
configure
.Pa /compat/linux/etc/host.conf
as follows:
.Bd -literal -offset indent
order hosts, bind
multi on
.Ed
.Pp
This specifies that
.Pa /etc/hosts
is searched first and DNS is searched second.
When
.Pa /compat/linux/etc/host.conf
does not exist, Linux applications use
.Pa /etc/host.conf
and complain about the incompatible FreeBSD syntax.
Remove
.Ql bind
if a name server is not configured using
.Pa /etc/resolv.conf
.
.Ss ADVANCED TOPICS
.Pp
This section describes how Linux binary compatibility works and is based on an email written to FreeBSD chat mailing list by Terry Lambert
.Mt tlambert@primenet.com
(Message ID:
.Ql <199906020108.SAA07001@usr09.primenet.com>
).
.Pp
FreeBSD has an abstraction called an
.Do
execution class loader
.Dc
.
This is a wedge into the
.Xr execve 2 system call.
.Pp
Historically, the UNIX loader examined the magic number (generally the first 4 or 8 bytes of the file)
to see if it was a binary known to the system, and if so, invoked the binary
loader.
.Pp
If it was not the binary type for the system, the
.Xr execve 2 call returned a failure, and the shell attempted to start executing it as shell
commands.
The assumption was a default of
.Do
whatever the current shell is
.Dc
.
.Pp
Later, a hack was made for
.Xr sh 1 to examine the first two characters, and if they were
.Ql :\n
, it invoked the
.Xr csh 1 shell instead.
.Pp
FreeBSD has a list of loaders, instead of a single loader, with a fallback to
the
.Ql #!
loader for running shell interpreters or shell scripts.
.Pp
For the Linux  ABI support, FreeBSD sees the magic number as an ELF binary.
The ELF loader looks for a specialized brand, which is a comment section in the ELF image, and which is not present on
SVR4/Solaris ELF binaries.
.Pp
For Linux binaries to function, they must be branded as type
.Ql Linux
using
.Xr brandelf 1 :
.Bd -literal -offset indent
# brandelf -t Linux file
.Ed
.Pp
When the ELF loader sees the
.Ql Linux
brand, the loader replaces a pointer in the
.Ql proc
structure.
All system calls are indexed through this pointer.
In addition, the process is flagged for special handling of the trap vector for
the signal trampoline code, and several other (minor) fix-ups that are handled
by the Linux kernel module.
.Pp
The Linux system call vector contains, among other things, a list of
.Ql sysent[]
entries whose addresses reside in the kernel module.
.Pp
When a system call is called by the Linux binary, the trap code dereferences the system call function pointer off the
.Ql proc
structure, and gets the Linux, not the FreeBSD, system call entry points.
.Pp
Linux mode dynamically reroots lookups.
This is, in effect, equivalent to the
.Ar union
option to file system mounts.
First, an attempt is made to lookup the file in
.Pa /compat/linux/original-path
.
If that fails, the lookup is done in
.Pa /original-path
.
This makes sure that binaries that require other binaries can run.
For example, the Linux toolchain can all run under Linux  ABI support.
It also means that the Linux binaries can load and execute FreeBSD binaries, if there are no corresponding Linux binaries present, and that a
.Xr uname 1 command can be placed in the
.Pa /compat/linux
directory tree to ensure that the Linux binaries cannot tell they are not running on Linux.
.Pp
In effect, there is a Linux kernel in the FreeBSD kernel.
The various underlying functions that implement all of the services provided by
the kernel are identical to both the FreeBSD system call table entries, and the Linux system call table entries: file system operations, virtual memory operations,
signal delivery, and System V IPC.
The only difference is that FreeBSD binaries get the FreeBSD glue functions, and Linux binaries get the Linux  glue functions.
The FreeBSD glue functions are statically linked into the kernel, and the Linux  glue functions can be statically linked, or they can be accessed via a kernel
module.
.Pp
Technically, this is not really emulation, it is an ABI implementation.
It is sometimes called
.Do
Linux emulation
.Dc
because the implementation was done at a time when there was no other word to
describe what was going on.
Saying that FreeBSD ran Linux binaries was not true, since the code was not compiled in.
.Sh SYSTEM ADMINISTRATION
.Pp
The remaining chapters cover all aspects of FreeBSD system administration.
Each chapter starts by describing what will be learned as a result of reading
the chapter, and also details what the reader is expected to know before
tackling the material.
.Pp
These chapters are designed to be read as the information is needed.
They do not need to be read in any particular order, nor must all of them be
read before beginning to use FreeBSD.
.Ss SYNOPSIS
.Pp
One of the important aspects of FreeBSD is proper system configuration.
This chapter explains much of the FreeBSD configuration process, including some
of the parameters which can be set to tune a FreeBSD system.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
The basics of
.Pa rc.conf
configuration and
.Pa /usr/local/etc/rc.d
startup scripts.
.It
How to configure and test a network card.
.It
How to configure virtual hosts on network devices.
.It
How to use the various configuration files in
.Pa /etc
.
.It
How to tune FreeBSD using
.Xr sysctl 8 variables.
.It
How to tune disk performance and modify kernel limitations.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Understand UNIX and FreeBSD basics ().
.It
Be familiar with the basics of kernel configuration and compilation ().
.El
.Pp
Many users install third party software on FreeBSD from the Ports Collection
and require the installed services to be started upon system initialization.
Services, such as
.Ql mail/postfix
or
.Ql www/apache22
are just two of the many software packages which may be started during system
initialization.
This section explains the procedures available for starting third party
software.
.Pp
In FreeBSD, most included services, such as
.Xr cron 8 , are started through the system startup scripts.
.Ss EXTENDED APPLICATION CONFIGURATION
.Pp
Now that FreeBSD includes
.Pa rc.d
, configuration of application startup is easier and provides more features.
Using the key words discussed in , applications can be set to start after certain other services and extra flags
can be passed through
.Pa /etc/rc.conf
in place of hard coded flags in the startup script.
A basic script may look similar to the following:
.Bd -literal -offset indent
#!/bin/sh
#
# PROVIDE: utility
# REQUIRE: DAEMON
# KEYWORD: shutdown

. /etc/rc.subr

name=utility
rcvar=utility_enable

command="/usr/local/sbin/utility"

load_rc_config $name

#
# DO NOT CHANGE THESE DEFAULT VALUES HERE
# SET THEM IN THE /etc/rc.conf FILE
#
utility_enable=${utility_enable-"NO"}
pidfile=${utility_pidfile-"/var/run/utility.pid"}

run_rc_command "$1"
.Ed
.Pp
This script will ensure that the provided
.Ql utility
will be started after the
.Ql DAEMON
pseudo-service.
It also provides a method for setting and tracking the process ID (PID).
.Pp
This application could then have the following line placed in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
utility_enable="YES"
.Ed
.Pp
This method allows for easier manipulation of command line arguments, inclusion
of the default functions provided in
.Pa /etc/rc.subr
, compatibility with
.Xr rcorder 8 , and provides for easier configuration via
.Pa rc.conf
.
.Ss USING SERVICES TO START SERVICES
.Pp
Other services can be started using
.Xr inetd 8 .
Working with
.Xr inetd 8 and its configuration is described in depth in .
.Pp
In some cases, it may make more sense to use
.Xr cron 8 to start system services.
This approach has a number of advantages as
.Xr cron 8 runs these processes as the owner of the
.Xr crontab 5 .
This allows regular users to start and maintain their own applications.
.Pp
The
.Ql @reboot
feature of
.Xr cron 8 , may be used in place of the time specification.
This causes the job to run when
.Xr cron 8 is started, normally during system initialization.
.Pp
One of the most useful utilities in FreeBSD is cron.
This utility runs in the background and regularly checks
.Pa /etc/crontab
for tasks to execute and searches
.Pa /var/cron/tabs
for custom crontab files.
These files are used to schedule tasks which cron runs at the specified times.
Each entry in a crontab defines a task to run and is known as a
.Ql cron job
.
.Pp
Two different types of configuration files are used: the system crontab, which
should not be modified, and user crontabs, which can be created and edited as
needed.
The format used by these files is documented in
.Xr crontab 5 .
The format of the system crontab,
.Pa /etc/crontab
includes a
.Ql who
column which does not exist in user crontabs.
In the system crontab, cron runs the command as the user specified in this column.
In a user crontab, all commands run as the user who created the crontab.
.Pp
User crontabs allow individual users to schedule their own tasks.
The
.Ql root
user can also have a user
.Pa crontab
which can be used to schedule tasks that do not exist in the system
.Pa crontab
.
.Pp
Here is a sample entry from the system crontab,
.Pa /etc/crontab
:
.Bd -literal -offset indent
# /etc/crontab - root's crontab for FreeBSD
#
# $FreeBSD$
# 
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin 
#
#minute	hour	mday	month	wday	who	command 
#
*/5	*	*	*	*	root	/usr/libexec/atrun
.Ed
.Pp
Lines that begin with the
.Ql #
character are comments.
A comment can be placed in the file as a reminder of what and why a desired
action is performed.
Comments cannot be on the same line as a command or else they will be
interpreted as part of the command; they must be on a new line.
Blank lines are ignored.
.Pp
The equals (
.Ql =
) character is used to define any environment settings.
In this example, it is used to define the
.Ev SHELL
and
.Ev PATH
.
If the
.Ev SHELL
is omitted, cron will use the default Bourne shell.
If the
.Ev PATH
is omitted, the full path must be given to the command or script to run.
.Pp
This line defines the seven fields used in a system crontab:
.Ql minute
,
.Ql hour
,
.Ql mday
,
.Ql month
,
.Ql wday
,
.Ql who
, and
.Ql command
.
The
.Ql minute
field is the time in minutes when the specified command will be run, the
.Ql hour
is the hour when the specified command will be run, the
.Ql mday
is the day of the month,
.Ql month
is the month, and
.Ql wday
is the day of the week.
These fields must be numeric values, representing the twenty-four hour clock,
or a
.Ql *
, representing all values for that field.
The
.Ql who
field only exists in the system crontab and specifies which user the command
should be run as.
The last field is the command to be executed.
.Pp
This entry defines the values for this cron job.
The
.Ql */5
, followed by several more
.Ql *
characters, specifies that
.Cm /usr/libexec/atrun
is invoked by
.Ql root
every five minutes of every hour, of every day and day of the week, of every
month.
.Pp
Commands can include any number of switches.
However, commands which extend to multiple lines need to be broken with the
backslash
.Do
\
.Dc
continuation character.
.Ss CREATING A USER CRONTAB
.Pp
To create a user crontab, invoke
.Cm crontab
in editor mode:
.Bd -literal -offset indent
% crontab -e
.Ed
.Pp
This will open the user's crontab using the default text editor.
The first time a user runs this command, it will open an empty file.
Once a user creates a crontab, this command will open that file for editing.
.Pp
It is useful to add these lines to the top of the crontab file in order to set
the environment variables and to remember the meanings of the fields in the
crontab:
.Bd -literal -offset indent
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin
# Order of crontab fields
# minute	hour	mday	month	wday	command
.Ed
.Pp
Then add a line for each command or script to run, specifying the time to run
the command.
This example runs the specified custom Bourne shell script every day at two in
the afternoon.
Since the path to the script is not specified in
.Ql PATH
, the full path to the script is given:
.Bd -literal -offset indent
0	14	*	*	*	/usr/home/dru/bin/mycustomscript.sh
.Ed
.Pp
Before using a custom script, make sure it is executable and test it with the
limited set of environment variables set by cron.
To replicate the environment that would be used to run the above cron entry,
use:
.Bd -literal -offset indent
env -i SHELL=/bin/sh PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin HOME=/home/dru LOGNAME=dru /usr/home/dru/bin/mycustomscript.sh
.Ed
.Pp
The environment set by cron is discussed in
.Xr crontab 5 .
Checking that scripts operate correctly in a cron environment is especially
important if they include any commands that delete files using wildcards.
.Pp
When finished editing the crontab, save the file.
It will automatically be installed and cron will read the crontab and run its cron jobs at their specified times.
To list the cron jobs in a crontab, use this command:
.Bd -literal -offset indent
% crontab -l
0	14	*	*	*	/usr/home/dru/bin/mycustomscript.sh
.Ed
.Pp
To remove all of the cron jobs in a user crontab:
.Bd -literal -offset indent
% crontab -r
remove crontab for dru? y
.Ed
.Pp
FreeBSD uses the
.Xr rc 8 system of startup scripts during system initialization and for managing
services.
The scripts listed in
.Pa /etc/rc.d
provide basic services which can be controlled with the
.Ar start
,
.Ar stop
, and
.Ar restart
options to
.Xr service 8 .
For instance,
.Xr sshd 8 can be restarted with the following command:
.Bd -literal -offset indent
# service sshd restart
.Ed
.Pp
This procedure can be used to start services on a running system.
Services will be started automatically at boot time as specified in
.Xr rc.conf 5 .
For example, to enable
.Xr natd 8 at system startup, add the following line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
natd_enable="YES"
.Ed
.Pp
If a
.Ar natd_enable="NO"
line is already present, change the
.Ql NO
to
.Ql YES
.
The
.Xr rc 8 scripts will automatically load any dependent services during the next boot, as
described below.
.Pp
Since the
.Xr rc 8 system is primarily intended to start and stop services at system startup and
shutdown time, the
.Ar start
,
.Ar stop
and
.Ar restart
options will only perform their action if the appropriate
.Pa /etc/rc.conf
variable is set.
For instance,
.Cm sshd restart
will only work if
.Ev sshd_enable
is set to
.Ar YES
in
.Pa /etc/rc.conf
.
To
.Ar start
,
.Ar stop
or
.Ar restart
a service regardless of the settings in
.Pa /etc/rc.conf
, these commands should be prefixed with
.Do
one
.Dc
.
For instance, to restart
.Xr sshd 8 regardless of the current
.Pa /etc/rc.conf
setting, execute the following command:
.Bd -literal -offset indent
# service sshd onerestart
.Ed
.Pp
To check if a service is enabled in
.Pa /etc/rc.conf
, run the appropriate
.Xr rc 8 script with
.Ar rcvar
.
This example checks to see if
.Xr sshd 8 is enabled in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
# service sshd rcvar
# sshd
#
sshd_enable="YES"
#   (default: "")
.Ed
.Pp
The
.Ql # sshd
line is output from the above command, not a
.Ql root
console.
.Pp
To determine whether or not a service is running, use
.Ar status
.
For instance, to verify that
.Xr sshd 8 is running:
.Bd -literal -offset indent
# service sshd status
sshd is running as pid 433.
.Ed
.Pp
In some cases, it is also possible to
.Ar reload
a service.
This attempts to send a signal to an individual service, forcing the service to
reload its configuration files.
In most cases, this means sending the service a
.Ql SIGHUP
signal.
Support for this feature is not included for every service.
.Pp
The
.Xr rc 8 system is used for network services and it also contributes to most of the
system initialization.
For instance, when the
.Pa /etc/rc.d/bgfsck
script is executed, it prints out the following message:
.Bd -literal -offset indent
Starting background file system checks in 60 seconds.
.Ed
.Pp
This script is used for background file system checks, which occur only during
system initialization.
.Pp
Many system services depend on other services to function properly.
For example,
.Xr yp 8 and other RPC-based services may fail to start until after the
.Xr rpcbind 8 service has started.
To resolve this issue, information about dependencies and other meta-data is
included in the comments at the top of each startup script.
The
.Xr rcorder 8 program is used to parse these comments during system initialization to
determine the order in which system services should be invoked to satisfy the
dependencies.
.Pp
The following key word must be included in all startup scripts as it is
required by
.Xr rc.subr 8 to
.Do
enable
.Dc
the startup script:
.Bl -bullet -offset -compact
.It
.Ql PROVIDE
: Specifies the services this file provides.
.El
.Pp
The following key words may be included at the top of each startup script.
They are not strictly necessary, but are useful as hints to
.Xr rcorder 8 :
.Bl -bullet -offset -compact
.It
.Ql REQUIRE
: Lists services which are required for this service.
The script containing this key word will run after the specified services.
.It
.Ql BEFORE
: Lists services which depend on this service.
The script containing this key word will run before the specified services.
.El
.Pp
By carefully setting these keywords for each startup script, an administrator
has a fine-grained level of control of the startup order of the scripts,
without the need for
.Do
runlevels
.Dc
used by some UNIX operating systems.
.Pp
Additional information can be found in
.Xr rc 8 and
.Xr rc.subr 8 .
Refer to this article for instructions on how to create custom
.Xr rc 8 scripts.
.Ss MANAGING SYSTEM-SPECIFIC CONFIGURATION
.Pp
The principal location for system configuration information is
.Pa /etc/rc.conf
.
This file contains a wide range of configuration information and it is read at
system startup to configure the system.
It provides the configuration information for the
.Pa rc*
files.
.Pp
The entries in
.Pa /etc/rc.conf
override the default settings in
.Pa /etc/defaults/rc.conf
.
The file containing the default settings should not be edited.
Instead, all system-specific changes should be made to
.Pa /etc/rc.conf
.
.Pp
A number of strategies may be applied in clustered applications to separate
site-wide configuration from system-specific configuration in order to reduce
administration overhead.
The recommended approach is to place system-specific configuration into
.Pa /etc/rc.conf.local
.
For example, these entries in
.Pa /etc/rc.conf
apply to all systems:
.Bd -literal -offset indent
sshd_enable="YES"
keyrate="fast"
defaultrouter="10.1.1.254"
.Ed
.Pp
Whereas these entries in
.Pa /etc/rc.conf.local
apply to this system only:
.Bd -literal -offset indent
hostname="node1.example.org"
ifconfig_fxp0="inet 10.1.1.1/8"
.Ed
.Pp
Distribute
.Pa /etc/rc.conf
to every system using an application such as rsync or puppet, while
.Pa /etc/rc.conf.local
remains unique.
.Pp
Upgrading the system will not overwrite
.Pa /etc/rc.conf
, so system configuration information will not be lost.
.Pp
Both
.Pa /etc/rc.conf
and
.Pa /etc/rc.conf.local
are parsed by
.Xr sh 1 .
This allows system operators to create complex configuration scenarios.
Refer to
.Xr rc.conf 5 for further information on this topic.
.Pp
Adding and configuring a network interface card (NIC) is a common task for any FreeBSD administrator.
.Ss LOCATING THE CORRECT DRIVER
.Pp
First, determine the model of the NIC and the chip it uses.
FreeBSD supports a wide variety of NICs.
Check the Hardware Compatibility List for the FreeBSD release to see if the NIC is supported.
.Pp
If the NIC is supported, determine the name of the FreeBSD driver for the NIC.
Refer to
.Pa /usr/src/sys/conf/NOTES
and
.Pa /usr/src/sys/arch/conf/NOTES
for the list of NIC drivers with some information about the supported chipsets.
When in doubt, read the manual page of the driver as it will provide more
information about the supported hardware and any known limitations of the
driver.
.Pp
The drivers for common NICs are already present in the
.Pa GENERIC
kernel, meaning the NIC should be probed during boot.
The system's boot messages can be viewed by typing
.Cm more /var/run/dmesg.boot
and using the spacebar to scroll through the text.
In this example, two Ethernet NICs using the
.Xr dc 4 driver are present on the system:
.Bd -literal -offset indent
dc0: <82c169 PNIC 10/100BaseTX> port 0xa000-0xa0ff mem 0xd3800000-0xd38
000ff irq 15 at device 11.0 on pci0
miibus0: <MII bus> on dc0
bmtphy0: <BCM5201 10/100baseTX PHY> PHY 1 on miibus0
bmtphy0:  10baseT, 10baseT-FDX, 100baseTX, 100baseTX-FDX, auto
dc0: Ethernet address: 00:a0:cc:da:da:da
dc0: [ITHREAD]
dc1: <82c169 PNIC 10/100BaseTX> port 0x9800-0x98ff mem 0xd3000000-0xd30
000ff irq 11 at device 12.0 on pci0
miibus1: <MII bus> on dc1
bmtphy1: <BCM5201 10/100baseTX PHY> PHY 1 on miibus1
bmtphy1:  10baseT, 10baseT-FDX, 100baseTX, 100baseTX-FDX, auto
dc1: Ethernet address: 00:a0:cc:da:da:db
dc1: [ITHREAD]
.Ed
.Pp
If the driver for the NIC is not present in
.Pa GENERIC
, but a driver is available, the driver will need to be loaded before the NIC can be configured and used.
This may be accomplished in one of two ways:
.Bl -bullet -offset -compact
.It
The easiest way is to load a kernel module for the NIC using
.Xr kldload 8 .
To also automatically load the driver at boot time, add the appropriate line to
.Pa /boot/loader.conf
.
Not all NIC drivers are available as modules.
.It
Alternatively, statically compile support for the NIC into a custom kernel.
Refer to
.Pa /usr/src/sys/conf/NOTES
,
.Pa /usr/src/sys/arch/conf/NOTES
and the manual page of the driver to determine which line to add to the custom
kernel configuration file.
For more information about recompiling the kernel, refer to .
If the NIC was detected at boot, the kernel does not need to be recompiled.
.El
.Ss USING WINDOWS NDIS DRIVERS
.Pp
Unfortunately, there are still many vendors that do not provide schematics for
their drivers to the open source community because they regard such information
as trade secrets.
Consequently, the developers of FreeBSD and other operating systems are left
with two choices: develop the drivers by a long and pain-staking process of
reverse engineering or using the existing driver binaries available for MicrosoftWindows platforms.
.Pp
FreeBSD provides
.Do
native
.Dc
support for the Network Driver Interface Specification (NDIS).
It includes
.Xr ndisgen 8 which can be used to convert a WindowsXP driver into a format that can be used on FreeBSD.
Because the
.Xr ndis 4 driver uses a WindowsXP binary, it only runs on i386 and amd64 systems.
 PCI, CardBus, PCMCIA, and USB devices are supported.
.Pp
To use
.Xr ndisgen 8 , three things are needed:
.Bl -enum -offset -compact
.It
FreeBSD kernel sources.
.It
A WindowsXP driver binary with a
.Pa .SYS
extension.
.It
A WindowsXP driver configuration file with a
.Pa .INF
extension.
.El
.Pp
Download the
.Pa .SYS
and
.Pa .INF
files for the specific NIC.
Generally, these can be found on the driver CD or at the vendor's website.
The following examples use
.Pa W32DRIVER.SYS
and
.Pa W32DRIVER.INF
.
.Pp
The driver bit width must match the version of FreeBSD.
For FreeBSD/i386, use a Windows 32-bit driver.
For FreeBSD/amd64, a Windows 64-bit driver is needed.
.Pp
The next step is to compile the driver binary into a loadable kernel module.
As
.Ql root
, use
.Xr ndisgen 8 :
.Bd -literal -offset indent
# ndisgen /path/to/W32DRIVER.INF  /path/to/W32DRIVER.SYS
.Ed
.Pp
This command is interactive and prompts for any extra information it requires.
A new kernel module will be generated in the current directory.
Use
.Xr kldload 8 to load the new module:
.Bd -literal -offset indent
# kldload ./W32DRIVER_SYS.ko
.Ed
.Pp
In addition to the generated kernel module, the
.Pa ndis.ko
and
.Pa if_ndis.ko
modules must be loaded.
This should happen automatically when any module that depends on
.Xr ndis 4 is loaded.
If not, load them manually, using the following commands:
.Bd -literal -offset indent
# kldload ndis
# kldload if_ndis
.Ed
.Pp
The first command loads the
.Xr ndis 4 miniport driver wrapper and the second loads the generated NIC driver.
.Pp
Check
.Xr dmesg 8 to see if there were any load errors.
If all went well, the output should be similar to the following:
.Bd -literal -offset indent
ndis0: <Wireless-G PCI Adapter> mem 0xf4100000-0xf4101fff irq 3 at device 8.0 on pci1
ndis0: NDIS API version: 5.0
ndis0: Ethernet address: 0a:b1:2c:d3:4e:f5
ndis0: 11b rates: 1Mbps 2Mbps 5.5Mbps 11Mbps
ndis0: 11g rates: 6Mbps 9Mbps 12Mbps 18Mbps 36Mbps 48Mbps 54Mbps
.Ed
.Pp
From here,
.Pa ndis0
can be configured like any other NIC.
.Pp
To configure the system to load the
.Xr ndis 4 modules at boot time, copy the generated module,
.Pa W32DRIVER_SYS.ko
, to
.Pa /boot/modules
.
Then, add the following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
W32DRIVER_SYS_load="YES"
.Ed
.Ss CONFIGURING THE NETWORK CARD
.Pp
Once the right driver is loaded for the NIC, the card needs to be configured.
It may have been configured at installation time by
.Xr bsdinstall 8 .
.Pp
To display the NIC configuration, enter the following command:
.Bd -literal -offset indent
% ifconfig
dc0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
        options=80008<VLAN_MTU,LINKSTATE>
        ether 00:a0:cc:da:da:da
        inet 192.168.1.3 netmask 0xffffff00 broadcast 192.168.1.255
        media: Ethernet autoselect (100baseTX <full-duplex>)
        status: active
dc1: flags=8802<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
        options=80008<VLAN_MTU,LINKSTATE>
        ether 00:a0:cc:da:da:db
        inet 10.0.0.1 netmask 0xffffff00 broadcast 10.0.0.255
        media: Ethernet 10baseT/UTP
        status: no carrier
lo0: flags=8049<UP,LOOPBACK,RUNNING,MULTICAST> metric 0 mtu 16384
        options=3<RXCSUM,TXCSUM>
        inet6 fe80::1%lo0 prefixlen 64 scopeid 0x4
        inet6 ::1 prefixlen 128
        inet 127.0.0.1 netmask 0xff000000
        nd6 options=3<PERFORMNUD,ACCEPT_RTADV>
.Ed
.Pp
In this example, the following devices were displayed:
.Bl -bullet -offset -compact
.It
.Pa dc0
: The first Ethernet interface.
.It
.Pa dc1
: The second Ethernet interface.
.It
.Pa lo0
: The loopback device.
.El
.Pp
FreeBSD uses the driver name followed by the order in which the card is
detected at boot to name the NIC.
For example,
.Pa sis2
is the third NIC on the system using the
.Xr sis 4 driver.
.Pp
In this example,
.Pa dc0
is up and running.
The key indicators are:
.Bl -enum -offset -compact
.It
.Ql UP
means that the card is configured and ready.
.It
The card has an Internet (
.Ql inet
) address,
.Ql 192.168.1.3
.
.It
It has a valid subnet mask (
.Ql netmask
), where
.Ql 0xffffff00
is the same as
.Ql 255.255.255.0
.
.It
It has a valid broadcast address,
.Ql 192.168.1.255
.
.It
The MAC address of the card (
.Ql ether
) is
.Ql 00:a0:cc:da:da:da
.
.It
The physical media selection is on autoselection mode (
.Ql media: Ethernet autoselect (100baseTX <full-duplex>)
).
In this example,
.Pa dc1
is configured to run with
.Ql 10baseT/UTP
media.
For more information on available media types for a driver, refer to its manual
page.
.It
The status of the link (
.Ql status
) is
.Ql active
, indicating that the carrier signal is detected.
For
.Pa dc1
, the
.Ql status: no carrier
status is normal when an Ethernet cable is not plugged into the card.
.El
.Pp
If the
.Xr ifconfig 8 output had shown something similar to:
.Bd -literal -offset indent
dc0: flags=8843<BROADCAST,SIMPLEX,MULTICAST> metric 0 mtu 1500
	options=80008<VLAN_MTU,LINKSTATE>
	ether 00:a0:cc:da:da:da
	media: Ethernet autoselect (100baseTX <full-duplex>)
	status: active
.Ed
.Pp
it would indicate the card has not been configured.
.Pp
The card must be configured as
.Ql root
.
The NIC configuration can be performed from the command line with
.Xr ifconfig 8 but will not persist after a reboot unless the configuration is also added to
.Pa /etc/rc.conf
.
If a DHCP server is present on the LAN, just add this line:
.Bd -literal -offset indent
ifconfig_dc0="DHCP"
.Ed
.Pp
Replace dc0 with the correct value for the system.
.Pp
The line added, then, follow the instructions given in .
.Pp
If the network was configured during installation, some entries for the NIC(s) may be already present.
Double check
.Pa /etc/rc.conf
before adding any lines.
.Pp
In the case, there is no DHCP server, the NIC(s) have to be configured manually.
Add a line for each NIC present on the system, as seen in this example:
.Bd -literal -offset indent
ifconfig_dc0="inet 192.168.1.3 netmask 255.255.255.0"
ifconfig_dc1="inet 10.0.0.1 netmask 255.255.255.0 media 10baseT/UTP"
.Ed
.Pp
Replace
.Pa dc0
and
.Pa dc1
and the IP address information with the correct values for the system.
Refer to the man page for the driver,
.Xr ifconfig 8 , and
.Xr rc.conf 5 for more details about the allowed options and the syntax of
.Pa /etc/rc.conf
.
.Pp
If the network is not using DNS, edit
.Pa /etc/hosts
to add the names and IP addresses of the hosts on the LAN, if they are not already there.
For more information, refer to
.Xr hosts 5 and to
.Pa /usr/share/examples/etc/hosts
.
.Pp
If there is no DHCP server and access to the Internet is needed, manually configure the default
gateway and the nameserver:
.Bd -literal -offset indent
# echo 'defaultrouter="your_default_router"' >> /etc/rc.conf
# echo 'nameserver your_DNS_server' >> /etc/resolv.conf
.Ed
.Ss TESTING AND TROUBLESHOOTING
.Pp
Once the necessary changes to
.Pa /etc/rc.conf
are saved, a reboot can be used to test the network configuration and to verify
that the system restarts without any configuration errors.
Alternatively, apply the settings to the networking system with this command:
.Bd -literal -offset indent
# service netif restart
.Ed
.Pp
If a default gateway has been set in
.Pa /etc/rc.conf
, also issue this command:
.Bd -literal -offset indent
# service routing restart
.Ed
.Pp
Once the networking system has been relaunched, test the NICs.
.Ss TESTING THE ETHERNET CARD
.Pp
To verify that an Ethernet card is configured correctly,
.Xr ping 8 the interface itself, and then
.Xr ping 8 another machine on the LAN:
.Bd -literal -offset indent
% ping -c5 192.168.1.3
PING 192.168.1.3 (192.168.1.3): 56 data bytes
64 bytes from 192.168.1.3: icmp_seq=0 ttl=64 time=0.082 ms
64 bytes from 192.168.1.3: icmp_seq=1 ttl=64 time=0.074 ms
64 bytes from 192.168.1.3: icmp_seq=2 ttl=64 time=0.076 ms
64 bytes from 192.168.1.3: icmp_seq=3 ttl=64 time=0.108 ms
64 bytes from 192.168.1.3: icmp_seq=4 ttl=64 time=0.076 ms

--- 192.168.1.3 ping statistics ---
5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.074/0.083/0.108/0.013 ms
.Ed
.Bd -literal -offset indent
% ping -c5 192.168.1.2
PING 192.168.1.2 (192.168.1.2): 56 data bytes
64 bytes from 192.168.1.2: icmp_seq=0 ttl=64 time=0.726 ms
64 bytes from 192.168.1.2: icmp_seq=1 ttl=64 time=0.766 ms
64 bytes from 192.168.1.2: icmp_seq=2 ttl=64 time=0.700 ms
64 bytes from 192.168.1.2: icmp_seq=3 ttl=64 time=0.747 ms
64 bytes from 192.168.1.2: icmp_seq=4 ttl=64 time=0.704 ms

--- 192.168.1.2 ping statistics ---
5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.700/0.729/0.766/0.025 ms
.Ed
.Pp
To test network resolution, use the host name instead of the IP address.
If there is no DNS server on the network,
.Pa /etc/hosts
must first be configured.
To this purpose, edit
.Pa /etc/hosts
to add the names and IP addresses of the hosts on the LAN, if they are not already there.
For more information, refer to
.Xr hosts 5 and to
.Pa /usr/share/examples/etc/hosts
.
.Ss TROUBLESHOOTING
.Pp
When troubleshooting hardware and software configurations, check the simple
things first.
Is the network cable plugged in?
Are the network services properly configured?
Is the firewall configured correctly?
Is the NIC supported by FreeBSD?
Before sending a bug report, always check the Hardware Notes, update the
version of FreeBSD to the latest STABLE version, check the mailing list
archives, and search the Internet.
.Pp
If the card works, yet performance is poor, read through
.Xr tuning 7 .
Also, check the network configuration as incorrect network settings can cause
slow connections.
.Pp
Some users experience one or two
.Er device timeout
messages, which is normal for some cards.
If they continue, or are bothersome, determine if the device is conflicting
with another device.
Double check the cable connections.
Consider trying another card.
.Pp
To resolve
.Er watchdog timeout
errors, first check the network cable.
Many cards require a PCI slot which supports bus mastering.
On some old motherboards, only one PCI slot allows it, usually slot 0.
Check the NIC and the motherboard documentation to determine if that may be the problem.
.Pp
.Er No route to host
messages occur if the system is unable to route a packet to the destination
host.
This can happen if no default route is specified or if a cable is unplugged.
Check the output of
.Cm netstat -rn
and make sure there is a valid route to the host.
If there is not, read .
.Pp
.Er ping: sendto: Permission denied
error messages are often caused by a misconfigured firewall.
If a firewall is enabled on FreeBSD but no rules have been defined, the default
policy is to deny all traffic, even
.Xr ping 8 .
Refer to for more information.
.Pp
Sometimes performance of the card is poor or below average.
In these cases, try setting the media selection mode from
.Ql autoselect
to the correct media selection.
While this works for most hardware, it may or may not resolve the issue.
Again, check all the network settings, and refer to
.Xr tuning 7 .
.Ss VIRTUAL HOSTS
.Pp
A common use of FreeBSD is virtual site hosting, where one server appears to
the network as many servers.
This is achieved by assigning multiple network addresses to a single interface.
.Pp
A given network interface has one
.Do
real
.Dc
address, and may have any number of
.Do
alias
.Dc
addresses.
These aliases are normally added by placing alias entries in
.Pa /etc/rc.conf
, as seen in this example:
.Bd -literal -offset indent
ifconfig_fxp0_alias0="inet xxx.xxx.xxx.xxx netmask xxx.xxx.xxx.xxx"
.Ed
.Pp
Alias entries must start with
.Ql alias0
using a sequential number such as
.Ql alias0
,
.Ql alias1
, and so on.
The configuration process will stop at the first missing number.
.Pp
The calculation of alias netmasks is important.
For a given interface, there must be one address which correctly represents the
network's netmask.
Any other addresses which fall within this network must have a netmask of all
.Ql 1
s, expressed as either
.Ql 255.255.255.255
or
.Ql 0xffffffff
.
.Pp
For example, consider the case where the
.Pa fxp0
interface is connected to two networks:
.Ql 10.1.1.0
with a netmask of
.Ql 255.255.255.0
and
.Ql 202.0.75.16
with a netmask of
.Ql 255.255.255.240
.
The system is to be configured to appear in the ranges
.Ql 10.1.1.1
through
.Ql 10.1.1.5
and
.Ql 202.0.75.17
through
.Ql 202.0.75.20
.
Only the first address in a given network range should have a real netmask.
All the rest (
.Ql 10.1.1.2
through
.Ql 10.1.1.5
and
.Ql 202.0.75.18
through
.Ql 202.0.75.20
) must be configured with a netmask of
.Ql 255.255.255.255
.
.Pp
The following
.Pa /etc/rc.conf
entries configure the adapter correctly for this scenario:
.Bd -literal -offset indent
ifconfig_fxp0="inet 10.1.1.1 netmask 255.255.255.0"
ifconfig_fxp0_alias0="inet 10.1.1.2 netmask 255.255.255.255"
ifconfig_fxp0_alias1="inet 10.1.1.3 netmask 255.255.255.255"
ifconfig_fxp0_alias2="inet 10.1.1.4 netmask 255.255.255.255"
ifconfig_fxp0_alias3="inet 10.1.1.5 netmask 255.255.255.255"
ifconfig_fxp0_alias4="inet 202.0.75.17 netmask 255.255.255.240"
ifconfig_fxp0_alias5="inet 202.0.75.18 netmask 255.255.255.255"
ifconfig_fxp0_alias6="inet 202.0.75.19 netmask 255.255.255.255"
ifconfig_fxp0_alias7="inet 202.0.75.20 netmask 255.255.255.255"
.Ed
.Pp
A simpler way to express this is with a space-separated list of IP address ranges.
The first address will be given the indicated subnet mask and the additional
addresses will have a subnet mask of
.Ql 255.255.255.255
.
.Bd -literal -offset indent
ifconfig_fxp0_aliases="inet 10.1.1.1-5/24 inet 202.0.75.17-20/28"
.Ed
.Pp
Generating and reading system logs is an important aspect of system
administration.
The information in system logs can be used to detect hardware and software
issues as well as application and system configuration errors.
This information also plays an important role in security auditing and incident
response.
Most system daemons and applications will generate log entries.
.Pp
FreeBSD provides a system logger, syslogd, to manage logging.
By default, syslogd is started when the system boots.
This is controlled by the variable
.Ql syslogd_enable
in
.Pa /etc/rc.conf
.
There are numerous application arguments that can be set using
.Ql syslogd_flags
in
.Pa /etc/rc.conf
.
Refer to
.Xr syslogd 8 for more information on the available arguments.
.Pp
This section describes how to configure the FreeBSD system logger for both
local and remote logging and how to perform log rotation and log management.
.Ss CONFIGURING LOCAL LOGGING
.Pp
The configuration file,
.Pa /etc/syslog.conf
, controls what syslogd does with log entries as they are received.
There are several parameters to control the handling of incoming events.
The
.Ql facility
describes which subsystem generated the message, such as the kernel or a
daemon, and the
.Ql level
describes the severity of the event that occurred.
This makes it possible to configure if and where a log message is logged,
depending on the facility and level.
It is also possible to take action depending on the application that sent the
message, and in the case of remote logging, the hostname of the machine
generating the logging event.
.Pp
This configuration file contains one line per action, where the syntax for each
line is a selector field followed by an action field.
The syntax of the selector field is facility.level which will match log messages from facility at level level or higher.
It is also possible to add an optional comparison flag before the level to
specify more precisely what is logged.
Multiple selector fields can be used for the same action, and are separated
with a semicolon (
.Ql ;
).
Using
.Ql *
will match everything.
The action field denotes where to send the log message, such as to a file or
remote log host.
As an example, here is the default
.Pa syslog.conf
from FreeBSD:
.Bd -literal -offset indent
# $FreeBSD$
#
#       Spaces ARE valid field separators in this file. However,
#       other *nix-like systems still insist on using tabs as field
#       separators. If you are sharing this file between systems, you
#       may want to use only tabs as field separators here.
#       Consult the syslog.conf(5) manpage.
*.err;kern.warning;auth.notice;mail.crit                /dev/console
*.notice;authpriv.none;kern.debug;lpr.info;mail.crit;news.err   /var/log/messages
security.*                                      /var/log/security
auth.info;authpriv.info                         /var/log/auth.log
mail.info                                       /var/log/maillog
lpr.info                                        /var/log/lpd-errs
ftp.info                                        /var/log/xferlog
cron.*                                          /var/log/cron
!-devd
*.=debug                                        /var/log/debug.log
*.emerg                                         *
# uncomment this to log all writes to /dev/console to /var/log/console.log
#console.info                                   /var/log/console.log
# uncomment this to enable logging of all log messages to /var/log/all.log
# touch /var/log/all.log and chmod it to mode 600 before it will work
#*.*                                            /var/log/all.log
# uncomment this to enable logging to a remote loghost named loghost
#*.*                                            @loghost
# uncomment these if you're running inn
# news.crit                                     /var/log/news/news.crit
# news.err                                      /var/log/news/news.err
# news.notice                                   /var/log/news/news.notice
# Uncomment this if you wish to see messages produced by devd
# !devd
# *.>=info
!ppp
*.*                                             /var/log/ppp.log
!*
.Ed
.Pp
In this example:
.Bl -bullet -offset -compact
.It
Line 8 matches all messages with a level of
.Ql err
or higher, as well as
.Ql kern.warning
,
.Ql auth.notice
and
.Ql mail.crit
, and sends these log messages to the console (
.Pa /dev/console
).
.It
Line 12 matches all messages from the
.Ql mail
facility at level
.Ql info
or above and logs the messages to
.Pa /var/log/maillog
.
.It
Line 17 uses a comparison flag (
.Ql =
) to only match messages at level
.Ql debug
and logs them to
.Pa /var/log/debug.log
.
.It
Line 33 is an example usage of a program specification.
This makes the rules following it only valid for the specified program.
In this case, only the messages generated by ppp are logged to
.Pa /var/log/ppp.log
.
.El
.Pp
The available levels, in order from most to least critical are
.Ql emerg
,
.Ql alert
,
.Ql crit
,
.Ql err
,
.Ql warning
,
.Ql notice
,
.Ql info
, and
.Ql debug
.
.Pp
The facilities, in no particular order, are
.Ql auth
,
.Ql authpriv
,
.Ql console
,
.Ql cron
,
.Ql daemon
,
.Ql ftp
,
.Ql kern
,
.Ql lpr
,
.Ql mail
,
.Ql mark
,
.Ql news
,
.Ql security
,
.Ql syslog
,
.Ql user
,
.Ql uucp
, and
.Ql local0
through
.Ql local7
.
Be aware that other operating systems might have different facilities.
.Pp
To log everything of level
.Ql notice
and higher to
.Pa /var/log/daemon.log
, add the following entry:
.Bd -literal -offset indent
daemon.notice                                        /var/log/daemon.log
.Ed
.Pp
For more information about the different levels and facilities, refer to
.Xr syslog 3 and
.Xr syslogd 8 .
For more information about
.Pa /etc/syslog.conf
, its syntax, and more advanced usage examples, see
.Xr syslog.conf 5 .
.Ss LOG MANAGEMENT AND ROTATION
.Pp
Log files can grow quickly, taking up disk space and making it more difficult
to locate useful information.
Log management attempts to mitigate this.
In FreeBSD, newsyslog is used to manage log files.
This built-in program periodically rotates and compresses log files, and
optionally creates missing log files and signals programs when log files are
moved.
The log files may be generated by syslogd or by any other program which generates log files.
While newsyslog is normally run from
.Xr cron 8 , it is not a system daemon.
In the default configuration, it runs every hour.
.Pp
To know which actions to take, newsyslog reads its configuration file,
.Pa /etc/newsyslog.conf
.
This file contains one line for each log file that newsyslog manages.
Each line states the file owner, permissions, when to rotate that file,
optional flags that affect log rotation, such as compression, and programs to
signal when the log is rotated.
Here is the default configuration in FreeBSD:
.Bd -literal -offset indent
# configuration file for newsyslog
# $FreeBSD$
#
# Entries which do not specify the '/pid_file' field will cause the
# syslogd process to be signalled when that log file is rotated.  This
# action is only appropriate for log files which are written to by the
# syslogd process (ie, files listed in /etc/syslog.conf).  If there
# is no process which needs to be signalled when a given log file is
# rotated, then the entry for that file should include the 'N' flag.
#
# The 'flags' field is one or more of the letters: BCDGJNUXZ or a '-'.
#
# Note: some sites will want to select more restrictive protections than the
# defaults.  In particular, it may be desirable to switch many of the 644
# entries to 640 or 600.  For example, some sites will consider the
# contents of maillog, messages, and lpd-errs to be confidential.  In the
# future, these defaults may change to more conservative ones.
#
# logfilename          [owner:group]    mode count size when  flags [/pid_file] [sig_num]
/var/log/all.log                        600  7     *    @T00  J
/var/log/amd.log                        644  7     100  *     J
/var/log/auth.log                       600  7     100  @0101T JC
/var/log/console.log                    600  5     100  *     J
/var/log/cron                           600  3     100  *     JC
/var/log/daily.log                      640  7     *    @T00  JN
/var/log/debug.log                      600  7     100  *     JC
/var/log/kerberos.log                   600  7     100  *     J
/var/log/lpd-errs                       644  7     100  *     JC
/var/log/maillog                        640  7     *    @T00  JC
/var/log/messages                       644  5     100  @0101T JC
/var/log/monthly.log                    640  12    *    $M1D0 JN
/var/log/pflog                          600  3     100  *     JB    /var/run/pflogd.pid
/var/log/ppp.log        root:network    640  3     100  *     JC
/var/log/devd.log                       644  3     100  *     JC
/var/log/security                       600  10    100  *     JC
/var/log/sendmail.st                    640  10    *    168   B
/var/log/utx.log                        644  3     *    @01T05 B
/var/log/weekly.log                     640  5     1    $W6D0 JN
/var/log/xferlog                        600  7     100  *     JC
.Ed
.Pp
Each line starts with the name of the log to be rotated, optionally followed by
an owner and group for both rotated and newly created files.
The
.Ql mode
field sets the permissions on the log file and
.Ql count
denotes how many rotated log files should be kept.
The
.Ql size
and
.Ql when
fields tell newsyslog when to rotate the file.
A log file is rotated when either its size is larger than the
.Ql size
field or when the time in the
.Ql when
field has passed.
An asterisk (
.Ql *
) means that this field is ignored.
The flags field gives further instructions, such as how to compress the rotated file or
to create the log file if it is missing.
The last two fields are optional and specify the name of the Process ID (PID) file of a process and a signal number to send to that process when the file
is rotated.
.Pp
For more information on all fields, valid flags, and how to specify the
rotation time, refer to
.Xr newsyslog.conf 5 .
Since newsyslog is run from
.Xr cron 8 , it cannot rotate files more often than it is scheduled to run from
.Xr cron 8 .
.Pp
Monitoring the log files of multiple hosts can become unwieldy as the number of
systems increases.
Configuring centralized logging can reduce some of the administrative burden of
log file administration.
.Pp
In FreeBSD, centralized log file aggregation, merging, and rotation can be
configured using syslogd and newsyslog.
This section demonstrates an example configuration, where host
.Ql A
, named
.Ql logserv.example.com
, will collect logging information for the local network.
Host
.Ql B
, named
.Ql logclient.example.com
, will be configured to pass logging information to the logging server.
.Ss LOG SERVER CONFIGURATION
.Pp
A log server is a system that has been configured to accept logging information
from other hosts.
Before configuring a log server, check the following:
.Bl -bullet -offset -compact
.It
If there is a firewall between the logging server and any logging clients,
ensure that the firewall ruleset allows UDP port 514 for both the clients and the server.
.It
The logging server and all client machines must have forward and reverse
entries in the local DNS.
If the network does not have a DNS server, create entries in each system's
.Pa /etc/hosts
.
Proper name resolution is required so that log entries are not rejected by the
logging server.
.El
.Pp
On the log server, edit
.Pa /etc/syslog.conf
to specify the name of the client to receive log entries from, the logging
facility to be used, and the name of the log to store the host's log entries.
This example adds the hostname of
.Ql B
, logs all facilities, and stores the log entries in
.Pa /var/log/logclient.log
.
.Bd -literal -offset indent
+logclient.example.com
*.*     /var/log/logclient.log
.Ed
.Pp
When adding multiple log clients, add a similar two-line entry for each client.
More information about the available facilities may be found in
.Xr syslog.conf 5 .
.Pp
Next, configure
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
syslogd_enable="YES"
syslogd_flags="-a logclient.example.com -v -v"
.Ed
.Pp
The first entry starts syslogd at system boot.
The second entry allows log entries from the specified client.
The
.Ar -v -v
increases the verbosity of logged messages.
This is useful for tweaking facilities as administrators are able to see what
type of messages are being logged under each facility.
.Pp
Multiple
.Ar -a
options may be specified to allow logging from multiple clients.
 IP addresses and whole netblocks may also be specified.
Refer to
.Xr syslogd 8 for a full list of possible options.
.Pp
Finally, create the log file:
.Bd -literal -offset indent
# touch /var/log/logclient.log
.Ed
.Pp
At this point, syslogd should be restarted and verified:
.Bd -literal -offset indent
# service syslogd restart
# pgrep syslog
.Ed
.Pp
If a PID is returned, the server restarted successfully, and client configuration can
begin.
If the server did not restart, consult
.Pa /var/log/messages
for the error.
.Ss LOG CLIENT CONFIGURATION
.Pp
A logging client sends log entries to a logging server on the network.
The client also keeps a local copy of its own logs.
.Pp
Once a logging server has been configured, edit
.Pa /etc/rc.conf
on the logging client:
.Bd -literal -offset indent
syslogd_enable="YES"
syslogd_flags="-s -v -v"
.Ed
.Pp
The first entry enables syslogd on boot up.
The second entry prevents logs from being accepted by this client from other
hosts (
.Ar -s
) and increases the verbosity of logged messages.
.Pp
Next, define the logging server in the client's
.Pa /etc/syslog.conf
.
In this example, all logged facilities are sent to a remote system, denoted by
the
.Ql @
symbol, with the specified hostname:
.Bd -literal -offset indent
*.*		@logserv.example.com
.Ed
.Pp
After saving the edit, restart syslogd for the changes to take effect:
.Bd -literal -offset indent
# service syslogd restart
.Ed
.Pp
To test that log messages are being sent across the network, use
.Xr logger 1 on the client to send a message to syslogd:
.Bd -literal -offset indent
# logger "Test message from logclient"
.Ed
.Pp
This message should now exist both in
.Pa /var/log/messages
on the client and
.Pa /var/log/logclient.log
on the log server.
.Ss DEBUGGING LOG SERVERS
.Pp
If no messages are being received on the log server, the cause is most likely a
network connectivity issue, a hostname resolution issue, or a typo in a
configuration file.
To isolate the cause, ensure that both the logging server and the logging
client are able to
.Cm ping
each other using the hostname specified in their
.Pa /etc/rc.conf
.
If this fails, check the network cabling, the firewall ruleset, and the
hostname entries in the DNS server or
.Pa /etc/hosts
on both the logging server and clients.
Repeat until the
.Cm ping
is successful from both hosts.
.Pp
If the
.Cm ping
succeeds on both hosts but log messages are still not being received,
temporarily increase logging verbosity to narrow down the configuration issue.
In the following example,
.Pa /var/log/logclient.log
on the logging server is empty and
.Pa /var/log/messages
on the logging client does not indicate a reason for the failure.
To increase debugging output, edit the
.Ql syslogd_flags
entry on the logging server and issue a restart:
.Bd -literal -offset indent
syslogd_flags="-d -a logclient.example.com -v -v"
.Ed
.Bd -literal -offset indent
# service syslogd restart
.Ed
.Pp
Debugging data similar to the following will flash on the console immediately
after the restart:
.Bd -literal -offset indent
logmsg: pri 56, flags 4, from logserv.example.com, msg syslogd: restart
syslogd: restarted
logmsg: pri 6, flags 4, from logserv.example.com, msg syslogd: kernel boot file is /boot/kernel/kernel
Logging to FILE /var/log/messages
syslogd: kernel boot file is /boot/kernel/kernel
cvthname(192.168.1.10)
validate: dgram from IP 192.168.1.10, port 514, name logclient.example.com;
rejected in rule 0 due to name mismatch.
.Ed
.Pp
In this example, the log messages are being rejected due to a typo which
results in a hostname mismatch.
The client's hostname should be
.Ql logclient
, not
.Ql logclien
.
Fix the typo, issue a restart, and verify the results:
.Bd -literal -offset indent
# service syslogd restart
logmsg: pri 56, flags 4, from logserv.example.com, msg syslogd: restart
syslogd: restarted
logmsg: pri 6, flags 4, from logserv.example.com, msg syslogd: kernel boot file is /boot/kernel/kernel
syslogd: kernel boot file is /boot/kernel/kernel
logmsg: pri 166, flags 17, from logserv.example.com,
msg Dec 10 20:55:02 <syslog.err> logserv.example.com syslogd: exiting on signal 2
cvthname(192.168.1.10)
validate: dgram from IP 192.168.1.10, port 514, name logclient.example.com;
accepted in rule 0.
logmsg: pri 15, flags 0, from logclient.example.com, msg Dec 11 02:01:28 trhodes: Test message 2
Logging to FILE /var/log/logclient.log
Logging to FILE /var/log/messages
.Ed
.Pp
At this point, the messages are being properly received and placed in the
correct file.
.Ss SECURITY CONSIDERATIONS
.Pp
As with any network service, security requirements should be considered before
implementing a logging server.
Log files may contain sensitive data about services enabled on the local host,
user accounts, and configuration data.
Network data sent from the client to the server will not be encrypted or
password protected.
If a need for encryption exists, consider using
.Ql security/stunnel
, which will transmit the logging data over an encrypted tunnel.
.Pp
Local security is also an issue.
Log files are not encrypted during use or after log rotation.
Local users may access log files to gain additional insight into system
configuration.
Setting proper permissions on log files is critical.
The built-in log rotator, newsyslog, supports setting permissions on newly created and rotated log files.
Setting log files to mode
.Ql 600
should prevent unwanted access by local users.
Refer to
.Xr newsyslog.conf 5 for additional information.
.Ss CONFIGURATION FILES
.Ss /ETC LAYOUT
.Pp
There are a number of directories in which configuration information is kept.
These include:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
.Pa /etc
.Ta
Generic system-specific configuration information.
.It
.Ta
.Pa /etc/defaults
.Ta
Default versions of system configuration files.
.It
.Ta
.Pa /etc/mail
.Ta
Extra
.Xr sendmail 8 configuration and other MTA configuration files.
.It
.Ta
.Pa /etc/ppp
.Ta
Configuration for both user- and kernel-ppp programs.
.It
.Ta
.Pa /usr/local/etc
.Ta
Configuration files for installed applications.
May contain per-application subdirectories.
.It
.Ta
.Pa /usr/local/etc/rc.d
.Ta
.Xr rc 8 scripts for installed applications.
.It
.Ta
.Pa /var/db
.Ta
Automatically generated system-specific database files, such as the package
database and the
.Xr locate 1 database.
.El
.Ss HOSTNAMES
.Ss /ETC/RESOLV.CONF
.Pp
How a FreeBSD system accesses the Internet Domain Name System (DNS) is controlled by
.Xr resolv.conf 5 .
.Pp
The most common entries to
.Pa /etc/resolv.conf
are:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
.Ql nameserver
.Ta
The IP address of a name server the resolver should query.
The servers are queried in the order listed with a maximum of three.
.It
.Ta
.Ql search
.Ta
Search list for hostname lookup.
This is normally determined by the domain of the local hostname.
.It
.Ta
.Ql domain
.Ta
The local domain name.
.El
.Pp
A typical
.Pa /etc/resolv.conf
looks like this:
.Bd -literal -offset indent
search example.com
nameserver 147.11.1.11
nameserver 147.11.100.30
.Ed
.Pp
Only one of the
.Ql search
and
.Ql domain
options should be used.
.Pp
When using DHCP,
.Xr dhclient 8 usually rewrites
.Pa /etc/resolv.conf
with information received from the DHCP server.
.Ss /ETC/HOSTS
.Pp
.Pa /etc/hosts
is a simple text database which works in conjunction with DNS and NIS to provide host name to IP address mappings.
Entries for local computers connected via a LAN can be added to this file for simplistic naming purposes instead of setting up
a
.Xr named 8 server.
Additionally,
.Pa /etc/hosts
can be used to provide a local record of Internet names, reducing the need to
query external DNS servers for commonly accessed names.
.Bd -literal -offset indent
# $FreeBSD$
#
#
# Host Database
#
# This file should contain the addresses and aliases for local hosts that
# share this file.  Replace 'my.domain' below with the domainname of your
# machine.
#
# In the presence of the domain name service or NIS, this file may
# not be consulted at all; see /etc/nsswitch.conf for the resolution order.
#
#
::1			localhost localhost.my.domain
127.0.0.1		localhost localhost.my.domain
#
# Imaginary network.
#10.0.0.2		myname.my.domain myname
#10.0.0.3		myfriend.my.domain myfriend
#
# According to RFC 1918, you can use the following IP networks for
# private nets which will never be connected to the Internet:
#
#	10.0.0.0	-   10.255.255.255
#	172.16.0.0	-   172.31.255.255
#	192.168.0.0	-   192.168.255.255
#
# In case you want to be able to connect to the Internet, you need
# real official assigned numbers.  Do not try to invent your own network
# numbers but instead get one from your network provider (if any) or
# from your regional registry (ARIN, APNIC, LACNIC, RIPE NCC, or AfriNIC.)
#
.Ed
.Pp
The format of
.Pa /etc/hosts
is as follows:
.Bd -literal -offset indent
[Internet address] [official hostname] [alias1] [alias2] ...
.Ed
.Pp
For example:
.Bd -literal -offset indent
10.0.0.1 myRealHostname.example.com myRealHostname foobar1 foobar2
.Ed
.Pp
Consult
.Xr hosts 5 for more information.
.Ss TUNING WITH SYSCTL
.Pp
.Xr sysctl 8 is used to make changes to a running FreeBSD system.
This includes many advanced options of the TCP/IP stack and virtual memory system that can dramatically improve performance for
an experienced system administrator.
Over five hundred system variables can be read and set using
.Xr sysctl 8 .
.Pp
At its core,
.Xr sysctl 8 serves two functions: to read and to modify system settings.
.Pp
To view all readable variables:
.Bd -literal -offset indent
% sysctl -a
.Ed
.Pp
To read a particular variable, specify its name:
.Bd -literal -offset indent
% sysctl kern.maxproc
kern.maxproc: 1044
.Ed
.Pp
To set a particular variable, use the variable=value syntax:
.Bd -literal -offset indent
# sysctl kern.maxfiles=5000
kern.maxfiles: 2088 -> 5000
.Ed
.Pp
Settings of sysctl variables are usually either strings, numbers, or booleans,
where a boolean is
.Ql 1
for yes or
.Ql 0
for no.
.Pp
To automatically set some variables each time the machine boots, add them to
.Pa /etc/sysctl.conf
.
For more information, refer to
.Xr sysctl.conf 5 and .
.Ss SYSCTL.CONF
.Pp
The configuration file for
.Xr sysctl 8 ,
.Pa /etc/sysctl.conf
, looks much like
.Pa /etc/rc.conf
.
Values are set in a
.Ql variable=value
form.
The specified values are set after the system goes into multi-user mode.
Not all variables are settable in this mode.
.Pp
For example, to turn off logging of fatal signal exits and prevent users from
seeing processes started by other users, the following tunables can be set in
.Pa /etc/sysctl.conf
:
.Bd -literal -offset indent
# Do not log fatal signal exits (e.g., sig 11)
kern.logsigexit=0

# Prevent users from seeing information about processes that
# are being run under another UID.
security.bsd.see_other_uids=0
.Ed
.Pp
In some cases it may be desirable to modify read-only
.Xr sysctl 8 values, which will require a reboot of the system.
.Pp
For instance, on some laptop models the
.Xr cardbus 4 device will not probe memory ranges and will fail with errors similar to:
.Bd -literal -offset indent
cbb0: Could not map register memory
device_probe_and_attach: cbb0 attach returned 12
.Ed
.Pp
The fix requires the modification of a read-only
.Xr sysctl 8 setting.
Add
.Ar hw.pci.allow_unsupported_io_range=1
to
.Pa /boot/loader.conf
and reboot.
Now
.Xr cardbus 4 should work properly.
.Ss TUNING DISKS
.Pp
The following section will discuss various tuning mechanisms and options which
may be applied to disk devices.
In many cases, disks with mechanical parts, such as SCSI drives, will be the bottleneck driving down the overall system performance.
While a solution is to install a drive without mechanical parts, such as a
solid state drive, mechanical drives are not going away anytime in the near
future.
When tuning disks, it is advisable to utilize the features of the
.Xr iostat 8 command to test various changes to the system.
This command will allow the user to obtain valuable information on system IO.
.Ss SYSCTL VARIABLES
.Ss VFS.VMIODIRENABLE
.Pp
The
.Ev vfs.vmiodirenable
.Xr sysctl 8 variable may be set to either
.Ql 0
(off) or
.Ql 1
(on).
It is set to
.Ql 1
by default.
This variable controls how directories are cached by the system.
Most directories are small, using just a single fragment (typically 1 K) in the
file system and typically 512 bytes in the buffer cache.
With this variable turned off, the buffer cache will only cache a fixed number
of directories, even if the system has a huge amount of memory.
When turned on, this
.Xr sysctl 8 allows the buffer cache to use the VM page cache to cache the directories, making all the memory available for
caching directories.
However, the minimum in-core memory used to cache a directory is the physical
page size (typically 4 K) rather than 512 bytes.
Keeping this option enabled is recommended if the system is running any
services which manipulate large numbers of files.
Such services can include web caches, large mail systems, and news systems.
Keeping this option on will generally not reduce performance, even with the
wasted memory, but one should experiment to find out.
.Ss VFS.WRITE_BEHIND
.Pp
The
.Ev vfs.write_behind
.Xr sysctl 8 variable defaults to
.Ql 1
(on).
This tells the file system to issue media writes as full clusters are
collected, which typically occurs when writing large sequential files.
This avoids saturating the buffer cache with dirty buffers when it would not
benefit I/O performance.
However, this may stall processes and under certain circumstances should be
turned off.
.Ss VFS.HIRUNNINGSPACE
.Pp
The
.Ev vfs.hirunningspace
.Xr sysctl 8 variable determines how much outstanding write I/O may be queued to disk
controllers system-wide at any given instance.
The default is usually sufficient, but on machines with many disks, try bumping
it up to four or five megabytes.
Setting too high a value which exceeds the buffer cache's write threshold can
lead to bad clustering performance.
Do not set this value arbitrarily high as higher write values may add latency
to reads occurring at the same time.
.Pp
There are various other buffer cache and VM page cache related
.Xr sysctl 8 values.
Modifying these values is not recommended as the VM system does a good job of automatically tuning itself.
.Ss VM.SWAP_IDLE_ENABLED
.Pp
The
.Ev vm.swap_idle_enabled
.Xr sysctl 8 variable is useful in large multi-user systems with many active login users and
lots of idle processes.
Such systems tend to generate continuous pressure on free memory reserves.
Turning this feature on and tweaking the swapout hysteresis (in idle seconds)
via
.Ev vm.swap_idle_threshold1
and
.Ev vm.swap_idle_threshold2
depresses the priority of memory pages associated with idle processes more
quickly then the normal pageout algorithm.
This gives a helping hand to the pageout daemon.
Only turn this option on if needed, because the tradeoff is essentially
pre-page memory sooner rather than later which eats more swap and disk
bandwidth.
In a small system this option will have a determinable effect, but in a large
system that is already doing moderate paging, this option allows the VM system to stage whole processes into and out of memory easily.
.Ss HW.ATA.WC
.Pp
Turning off IDE write caching reduces write bandwidth to IDE disks, but may sometimes be necessary due to data consistency issues introduced
by hard drive vendors.
The problem is that some IDE drives lie about when a write completes.
With IDE write caching turned on, IDE hard drives write data to disk out of order and will sometimes delay writing
some blocks indefinitely when under heavy disk load.
A crash or power failure may cause serious file system corruption.
Check the default on the system by observing the
.Ev hw.ata.wc
.Xr sysctl 8 variable.
If IDE write caching is turned off, one can set this read-only variable to
.Ql 1
in
.Pa /boot/loader.conf
in order to enable it at boot time.
.Pp
For more information, refer to
.Xr ata 4 .
.Ss SCSI_DELAY (KERN.CAM.SCSI_DELAY )
.Pp
The
.Ql SCSI_DELAY
kernel configuration option may be used to reduce system boot times.
The defaults are fairly high and can be responsible for
.Ql 15
seconds of delay in the boot process.
Reducing it to
.Ql 5
seconds usually works with modern drives.
The
.Ev kern.cam.scsi_delay
boot time tunable should be used.
The tunable and kernel configuration option accept values in terms of milliseconds and not  seconds.
.Ss SOFT UPDATES
.Pp
To fine-tune a file system, use
.Xr tunefs 8 .
This program has many different options.
To toggle Soft Updates on and off, use:
.Bd -literal -offset indent
# tunefs -n enable /filesystem
# tunefs -n disable /filesystem
.Ed
.Pp
A file system cannot be modified with
.Xr tunefs 8 while it is mounted.
A good time to enable Soft Updates is before any partitions have been mounted,
in single-user mode.
.Pp
Soft Updates is recommended for UFS file systems as it drastically improves meta-data performance, mainly file
creation and deletion, through the use of a memory cache.
There are two downsides to Soft Updates to be aware of.
First, Soft Updates guarantee file system consistency in the case of a crash,
but could easily be several seconds or even a minute behind updating the
physical disk.
If the system crashes, unwritten data may be lost.
Secondly, Soft Updates delay the freeing of file system blocks.
If the root file system is almost full, performing a major update, such as
.Cm make installworld
, can cause the file system to run out of space and the update to fail.
.Ss MORE DETAILS ABOUT SOFT UPDATES
.Pp
Meta-data updates are updates to non-content data like inodes or directories.
There are two traditional approaches to writing a file system's meta-data back
to disk.
.Pp
Historically, the default behavior was to write out meta-data updates
synchronously.
If a directory changed, the system waited until the change was actually written
to disk.
The file data buffers (file contents) were passed through the buffer cache and
backed up to disk later on asynchronously.
The advantage of this implementation is that it operates safely.
If there is a failure during an update, meta-data is always in a consistent
state.
A file is either created completely or not at all.
If the data blocks of a file did not find their way out of the buffer cache
onto the disk by the time of the crash,
.Xr fsck 8 recognizes this and repairs the file system by setting the file length to
.Ql 0
.
Additionally, the implementation is clear and simple.
The disadvantage is that meta-data changes are slow.
For example,
.Cm rm -r
touches all the files in a directory sequentially, but each directory change
will be written synchronously to the disk.
This includes updates to the directory itself, to the inode table, and possibly
to indirect blocks allocated by the file.
Similar considerations apply for unrolling large hierarchies using
.Cm tar -x
.
.Pp
The second approach is to use asynchronous meta-data updates.
This is the default for a UFS file system mounted with
.Cm mount -o async
.
Since all meta-data updates are also passed through the buffer cache, they will
be intermixed with the updates of the file content data.
The advantage of this implementation is there is no need to wait until each
meta-data update has been written to disk, so all operations which cause huge
amounts of meta-data updates work much faster than in the synchronous case.
This implementation is still clear and simple, so there is a low risk for bugs
creeping into the code.
The disadvantage is that there is no guarantee for a consistent state of the
file system.
If there is a failure during an operation that updated large amounts of
meta-data, like a power failure or someone pressing the reset button, the file
system will be left in an unpredictable state.
There is no opportunity to examine the state of the file system when the system
comes up again as the data blocks of a file could already have been written to
the disk while the updates of the inode table or the associated directory were
not.
It is impossible to implement a
.Xr fsck 8 which is able to clean up the resulting chaos because the necessary information
is not available on the disk.
If the file system has been damaged beyond repair, the only choice is to
reformat it and restore from backup.
.Pp
The usual solution for this problem is to implement dirty region logging, which is also referred to as journaling.
Meta-data updates are still written synchronously, but only into a small region
of the disk.
Later on, they are moved to their proper location.
Because the logging area is a small, contiguous region on the disk, there are
no long distances for the disk heads to move, even during heavy operations, so
these operations are quicker than synchronous updates.
Additionally, the complexity of the implementation is limited, so the risk of
bugs being present is low.
A disadvantage is that all meta-data is written twice, once into the logging
region and once to the proper location, so performance
.Do
pessimization
.Dc
might result.
On the other hand, in case of a crash, all pending meta-data operations can be
either quickly rolled back or completed from the logging area after the system
comes up again, resulting in a fast file system startup.
.Pp
Kirk McKusick, the developer of Berkeley FFS, solved this problem with Soft Updates.
All pending meta-data updates are kept in memory and written out to disk in a
sorted sequence (
.Do
ordered meta-data updates
.Dc
).
This has the effect that, in case of heavy meta-data operations, later updates
to an item
.Do
catch
.Dc
the earlier ones which are still in memory and have not already been written to
disk.
All operations are generally performed in memory before the update is written
to disk and the data blocks are sorted according to their position so that they
will not be on the disk ahead of their meta-data.
If the system crashes, an implicit
.Do
log rewind
.Dc
causes all operations which were not written to the disk appear as if they
never happened.
A consistent file system state is maintained that appears to be the one of 30
to 60 seconds earlier.
The algorithm used guarantees that all resources in use are marked as such in
their blocks and inodes.
After a crash, the only resource allocation error that occurs is that resources
are marked as
.Do
used
.Dc
which are actually
.Do
free
.Dc
.
.Xr fsck 8 recognizes this situation, and frees the resources that are no longer used.
It is safe to ignore the dirty state of the file system after a crash by
forcibly mounting it with
.Cm mount -f
.
In order to free resources that may be unused,
.Xr fsck 8 needs to be run at a later time.
This is the idea behind the background
.Xr fsck 8 : at system startup time, only a snapshot of the file system is recorded and
.Xr fsck 8 is run afterwards.
All file systems can then be mounted
.Do
dirty
.Dc
, so the system startup proceeds in multi-user mode.
Then, background
.Xr fsck 8 is scheduled for all file systems where this is required, to free resources
that may be unused.
File systems that do not use Soft Updates still need the usual foreground
.Xr fsck 8 .
.Pp
The advantage is that meta-data operations are nearly as fast as asynchronous
updates and are faster than logging, which has to write the meta-data twice.
The disadvantages are the complexity of the code, a higher memory consumption,
and some idiosyncrasies.
After a crash, the state of the file system appears to be somewhat
.Do
older
.Dc
.
In situations where the standard synchronous approach would have caused some
zero-length files to remain after the
.Xr fsck 8 , these files do not exist at all with Soft Updates because neither the
meta-data nor the file contents have been written to disk.
Disk space is not released until the updates have been written to disk, which
may take place some time after running
.Xr rm 1 .
This may cause problems when installing large amounts of data on a file system
that does not have enough free space to hold all the files twice.
.Ss TUNING KERNEL LIMITS
.Ss FILE/PROCESS LIMITS
.Ss KERN.MAXFILES
.Pp
The
.Ev kern.maxfiles
.Xr sysctl 8 variable can be raised or lowered based upon system requirements.
This variable indicates the maximum number of file descriptors on the system.
When the file descriptor table is full,
.Er file: table is full
will show up repeatedly in the system message buffer, which can be viewed using
.Xr dmesg 8 .
.Pp
Each open file, socket, or fifo uses one file descriptor.
A large-scale production server may easily require many thousands of file
descriptors, depending on the kind and number of services running concurrently.
.Pp
In older FreeBSD releases, the default value of
.Ev kern.maxfiles
is derived from
.Ar maxusers
in the kernel configuration file.
.Ev kern.maxfiles
grows proportionally to the value of
.Ar maxusers
.
When compiling a custom kernel, consider setting this kernel configuration
option according to the use of the system.
From this number, the kernel is given most of its pre-defined limits.
Even though a production machine may not have 256 concurrent users, the
resources needed may be similar to a high-scale web server.
.Pp
The read-only
.Xr sysctl 8 variable
.Ev kern.maxusers
is automatically sized at boot based on the amount of memory available in the
system, and may be determined at run-time by inspecting the value of
.Ev kern.maxusers
.
Some systems require larger or smaller values of
.Ev kern.maxusers
and values of
.Ql 64
,
.Ql 128
, and
.Ql 256
are not uncommon.
Going above
.Ql 256
is not recommended unless a huge number of file descriptors is needed.
Many of the tunable values set to their defaults by
.Ev kern.maxusers
may be individually overridden at boot-time or run-time in
.Pa /boot/loader.conf
.
Refer to
.Xr loader.conf 5 and
.Pa /boot/defaults/loader.conf
for more details and some hints.
.Pp
In older releases, the system will auto-tune
.Ql maxusers
if it is set to
.Ql 0
.
.Pp
The auto-tuning algorithm sets
.Ql maxusers
equal to the amount of memory in the system, with a minimum of
.Ql 32
, and a maximum of
.Ql 384
.
.
When setting this option, set
.Ql maxusers
to at least
.Ql 4
, especially if the system runs Xorg or is used to compile software.
The most important table set by
.Ql maxusers
is the maximum number of processes, which is set to
.Ql 20 + 16 * maxusers
.
If
.Ql maxusers
is set to
.Ql 1
, there can only be
.Ql 36
simultaneous processes, including the
.Ql 18
or so that the system starts up at boot time and the
.Ql 15
or so used by Xorg.
Even a simple task like reading a manual page will start up nine processes to
filter, decompress, and view it.
Setting
.Ql maxusers
to
.Ql 64
allows up to
.Ql 1044
simultaneous processes, which should be enough for nearly all uses.
If, however, the
.Ql proc table full
error is displayed when trying to start another program, or a server is running
with a large number of simultaneous users, increase the number and rebuild.
.Pp
.Ql maxusers
does not limit the number of users which can log into the machine.
It instead sets various table sizes to reasonable values considering the
maximum number of users on the system and how many processes each user will be
running.
.Ss KERN.IPC.SOACCEPTQUEUE
.Pp
The
.Ev kern.ipc.soacceptqueue
.Xr sysctl 8 variable limits the size of the listen queue for accepting new
.Ql TCP
connections.
The default value of
.Ql 128
is typically too low for robust handling of new connections on a heavily loaded
web server.
For such environments, it is recommended to increase this value to
.Ql 1024
or higher.
A service such as
.Xr sendmail 8 , or Apache may itself limit the listen queue size, but will often have a directive in its
configuration file to adjust the queue size.
Large listen queues do a better job of avoiding Denial of Service (DoS) attacks.
.Ss NETWORK LIMITS
.Pp
The
.Ql NMBCLUSTERS
kernel configuration option dictates the amount of network Mbufs available to
the system.
A heavily-trafficked server with a low number of Mbufs will hinder performance.
Each cluster represents approximately 2 K of memory, so a value of
.Ql 1024
represents
.Ql 2
megabytes of kernel memory reserved for network buffers.
A simple calculation can be done to figure out how many are needed.
A web server which maxes out at
.Ql 1000
simultaneous connections where each connection uses a 6 K receive and 16 K send
buffer, requires approximately 32 MB worth of network buffers to cover the web
server.
A good rule of thumb is to multiply by
.Ql 2
, so 2x32 MB / 2 KB = 64 MB / 2 kB =
.Ql 32768
.
Values between
.Ql 4096
and
.Ql 32768
are recommended for machines with greater amounts of memory.
Never specify an arbitrarily high value for this parameter as it could lead to
a boot time crash.
To observe network cluster usage, use
.Ar -m
with
.Xr netstat 1 .
.Pp
The
.Ev kern.ipc.nmbclusters
loader tunable should be used to tune this at boot time.
Only older versions of FreeBSD will require the use of the
.Ql NMBCLUSTERS
kernel
.Xr config 8 option.
.Pp
For busy servers that make extensive use of the
.Xr sendfile 2 system call, it may be necessary to increase the number of
.Xr sendfile 2 buffers via the
.Ql NSFBUFS
kernel configuration option or by setting its value in
.Pa /boot/loader.conf
(see
.Xr loader 8 for details).
A common indicator that this parameter needs to be adjusted is when processes
are seen in the
.Ql sfbufa
state.
The
.Xr sysctl 8 variable
.Ev kern.ipc.nsfbufs
is read-only.
This parameter nominally scales with
.Ev kern.maxusers
, however it may be necessary to tune accordingly.
.Pp
Even though a socket has been marked as non-blocking, calling
.Xr sendfile 2 on the non-blocking socket may result in the
.Xr sendfile 2 call blocking until enough
.Ql struct sf_buf
's are made available.
.Ss NET.INET.IP.PORTRANGE.*
.Pp
The
.Ev net.inet.ip.portrange.*
.Xr sysctl 8 variables control the port number ranges automatically bound to
.Ql TCP
and
.Ql UDP
sockets.
There are three ranges: a low range, a default range, and a high range.
Most network programs use the default range which is controlled by
.Ev net.inet.ip.portrange.first
and
.Ev net.inet.ip.portrange.last
, which default to
.Ql 1024
and
.Ql 5000
, respectively.
Bound port ranges are used for outgoing connections and it is possible to run
the system out of ports under certain circumstances.
This most commonly occurs when running a heavily loaded web proxy.
The port range is not an issue when running a server which handles mainly
incoming connections, such as a web server, or has a limited number of outgoing
connections, such as a mail relay.
For situations where there is a shortage of ports, it is recommended to
increase
.Ev net.inet.ip.portrange.last
modestly.
A value of
.Ql 10000
,
.Ql 20000
or
.Ql 30000
may be reasonable.
Consider firewall effects when changing the port range.
Some firewalls may block large ranges of ports, usually low-numbered ports, and
expect systems to use higher ranges of ports for outgoing connections.
For this reason, it is not recommended that the value of
.Ev net.inet.ip.portrange.first
be lowered.
.Ss TCP BANDWIDTH DELAY PRODUCT
.Pp
.Ql TCP
bandwidth delay product limiting can be enabled by setting the
.Ev net.inet.tcp.inflight.enable
.Xr sysctl 8 variable to
.Ql 1
.
This instructs the system to attempt to calculate the bandwidth delay product
for each connection and limit the amount of data queued to the network to just
the amount required to maintain optimum throughput.
.Pp
This feature is useful when serving data over modems, Gigabit Ethernet, high
speed
.Ql WAN
links, or any other link with a high bandwidth delay product, especially when
also using window scaling or when a large send window has been configured.
When enabling this option, also set
.Ev net.inet.tcp.inflight.debug
to
.Ql 0
to disable debugging.
For production use, setting
.Ev net.inet.tcp.inflight.min
to at least
.Ql 6144
may be beneficial.
Setting high minimums may effectively disable bandwidth limiting, depending on
the link.
The limiting feature reduces the amount of data built up in intermediate route
and switch packet queues and reduces the amount of data built up in the local
host's interface queue.
With fewer queued packets, interactive connections, especially over slow
modems, will operate with lower Round Trip Times.
This feature only effects server side data transmission such as uploading.
It has no effect on data reception or downloading.
.Pp
Adjusting
.Ev net.inet.tcp.inflight.stab
is not recommended.
This parameter defaults to
.Ql 20
, representing 2 maximal packets added to the bandwidth delay product window
calculation.
The additional window is required to stabilize the algorithm and improve
responsiveness to changing conditions, but it can also result in higher
.Xr ping 8 times over slow links, though still much lower than without the inflight
algorithm.
In such cases, try reducing this parameter to
.Ql 15
,
.Ql 10
, or
.Ql 5
and reducing
.Ev net.inet.tcp.inflight.min
to a value such as
.Ql 3500
to get the desired effect.
Reducing these parameters should be done as a last resort only.
.Ss VIRTUAL MEMORY
.Ss KERN.MAXVNODES
.Pp
A vnode is the internal representation of a file or directory.
Increasing the number of vnodes available to the operating system reduces disk
I/O.
Normally, this is handled by the operating system and does not need to be
changed.
In some cases where disk I/O is a bottleneck and the system is running out of
vnodes, this setting needs to be increased.
The amount of inactive and free RAM will need to be taken into account.
.Pp
To see the current number of vnodes in use:
.Bd -literal -offset indent
# sysctl vfs.numvnodes
vfs.numvnodes: 91349
.Ed
.Pp
To see the maximum vnodes:
.Bd -literal -offset indent
# sysctl kern.maxvnodes
kern.maxvnodes: 100000
.Ed
.Pp
If the current vnode usage is near the maximum, try increasing
.Ev kern.maxvnodes
by a value of
.Ql 1000
.
Keep an eye on the number of
.Ev vfs.numvnodes
.
If it climbs up to the maximum again,
.Ev kern.maxvnodes
will need to be increased further.
Otherwise, a shift in memory usage as reported by
.Xr top 1 should be visible and more memory should be active.
.Ss ADDING SWAP SPACE
.Pp
Sometimes a system requires more swap space.
This section describes two methods to increase swap space: adding swap to an
existing partition or new hard drive, and creating a swap file on an existing
partition.
.Pp
For information on how to encrypt swap space, which options exist, and why it
should be done, refer to .
.Ss SWAP ON A NEW HARD DRIVE OR EXISTING PARTITION
.Pp
Adding a new hard drive for swap gives better performance than using a
partition on an existing drive.
Setting up partitions and hard drives is explained in while discusses partition layouts and swap partition size considerations.
.Pp
Use
.Cm swapon
to add a swap partition to the system.
For example:
.Bd -literal -offset indent
# swapon /dev/ada1s1b
.Ed
.Pp
It is possible to use any partition not currently mounted, even if it already
contains data.
Using
.Cm swapon
on a partition that contains data will overwrite and destroy that data.
Make sure that the partition to be added as swap is really the intended
partition before running
.Cm swapon
.
.Pp
To automatically add this swap partition on boot, add an entry to
.Pa /etc/fstab
:
.Bd -literal -offset indent
/dev/ada1s1b	none	swap	sw	0	0
.Ed
.Pp
See
.Xr fstab 5 for an explanation of the entries in
.Pa /etc/fstab
.
More information about
.Cm swapon
can be found in
.Xr swapon 8 .
.Ss CREATING A SWAP FILE
.Pp
These examples create a 64M swap file called
.Pa /usr/swap0
instead of using a partition.
.Pp
Using swap files requires that the module needed by
.Xr md 4 has either been built into the kernel or has been loaded before swap is
enabled.
See for information about building a custom kernel.
.Pp
Create the swap file:
.Bd -literal -offset indent
# dd if=/dev/zero of=/usr/swap0 bs=1m count=64
.Ed
.Pp
Set the proper permissions on the new file:
.Bd -literal -offset indent
# chmod 0600 /usr/swap0
.Ed
.Pp
Inform the system about the swap file by adding a line to
.Pa /etc/fstab
:
.Bd -literal -offset indent
md99	none	swap	sw,file=/usr/swap0,late	0	0
.Ed
.Pp
The
.Xr md 4 device
.Pa md99
is used, leaving lower device numbers available for interactive use.
.Pp
Swap space will be added on system startup.
To add swap space immediately, use
.Xr swapon 8 :
.Bd -literal -offset indent
# swapon -aL
.Ed
.Pp
Create the swap file,
.Pa /usr/swap0
:
.Bd -literal -offset indent
# dd if=/dev/zero of=/usr/swap0 bs=1m count=64
.Ed
.Pp
Set the proper permissions on
.Pa /usr/swap0
:
.Bd -literal -offset indent
# chmod 0600 /usr/swap0
.Ed
.Pp
Enable the swap file in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
swapfile="/usr/swap0"   # Set to name of swap file
.Ed
.Pp
Swap space will be added on system startup.
To enable the swap file immediately, specify a free memory device.
Refer to for more information about memory devices.
.Bd -literal -offset indent
# mdconfig -a -t vnode -f /usr/swap0 -u 0 && swapon /dev/md0
.Ed
.Pp
It is important to utilize hardware resources in an efficient manner.
Power and resource management allows the operating system to monitor system
limits and to possibly provide an alert if the system temperature increases
unexpectedly.
An early specification for providing power management was the Advanced Power
Management (APM) facility.
 APM controls the power usage of a system based on its activity.
However, it was difficult and inflexible for operating systems to manage the
power usage and thermal properties of a system.
The hardware was managed by the BIOS and the user had limited configurability and visibility into the power
management settings.
The APM  BIOS is supplied by the vendor and is specific to the hardware platform.
An APM driver in the operating system mediates access to the APM Software Interface, which allows management of power levels.
.Pp
There are four major problems in APM.
First, power management is done by the vendor-specific BIOS, separate from the operating system.
For example, the user can set idle-time values for a hard drive in the APM  BIOS so that, when exceeded, the BIOS spins down the hard drive without the consent of the operating system.
Second, the APM logic is embedded in the BIOS, and it operates outside the scope of the operating system.
This means that users can only fix problems in the APM  BIOS by flashing a new one into the ROM, which is a dangerous procedure with the potential to leave the system in an
unrecoverable state if it fails.
Third, APM is a vendor-specific technology, meaning that there is a lot of duplication of
efforts and bugs found in one vendor's BIOS may not be solved in others.
Lastly, the APM  BIOS did not have enough room to implement a sophisticated power policy or one that
can adapt well to the purpose of the machine.
.Pp
The Plug and Play BIOS (PNPBIOS) was unreliable in many situations.
 PNPBIOS is 16-bit technology, so the operating system has to use 16-bit emulation in
order to interface with PNPBIOS methods.
FreeBSD provides an APM driver as APM should still be used for systems manufactured at or before the year 2000.
The driver is documented in
.Xr apm 4 .
.Pp
The successor to APM is the Advanced Configuration and Power Interface (ACPI).
 ACPI is a standard written by an alliance of vendors to provide an interface for
hardware resources and power management.
It is a key element in Operating System-directed configuration and Power Management as it provides more control and flexibility to the operating system.
.Pp
This chapter demonstrates how to configure ACPI on FreeBSD.
It then offers some tips on how to debug ACPI and how to submit a problem report containing debugging information so that
developers can diagnosis and fix ACPI issues.
.Ss CONFIGURING ACPI
.Pp
In FreeBSD the
.Xr acpi 4 driver is loaded by default at system boot and should not be compiled into the kernel.
This driver cannot be unloaded after boot because the system bus uses it for
various hardware interactions.
However, if the system is experiencing problems, ACPI can be disabled altogether by rebooting after setting
.Ql hint.acpi.0.disabled="1"
in
.Pa /boot/loader.conf
or by setting this variable at the loader prompt, as described in .
.Pp
ACPI and APM cannot coexist and should be used separately.
The last one to load will terminate if the driver notices the other is running.
.Pp
ACPI can be used to put the system into a sleep mode with
.Cm acpiconf
, the
.Ar -s
flag, and a number from
.Ql 1
to
.Ql 5
.
Most users only need
.Ql 1
(quick suspend to RAM) or
.Ql 3
(suspend to RAM).
Option
.Ql 5
performs a soft-off which is the same as running
.Cm halt -p
.
.Pp
Other options are available using
.Cm sysctl
.
Refer to
.Xr acpi 4 and
.Xr acpiconf 8 for more information.
.Ss COMMON PROBLEMS
.Pp
ACPI is present in all modern computers that conform to the ia32 (x86), ia64
(Itanium), and amd64 (AMD) architectures.
The full standard has many features including CPU performance management, power planes control, thermal zones, various battery
systems, embedded controllers, and bus enumeration.
Most systems implement less than the full standard.
For instance, a desktop system usually only implements bus enumeration while a
laptop might have cooling and battery management support as well.
Laptops also have suspend and resume, with their own associated complexity.
.Pp
An ACPI-compliant system has various components.
The BIOS and chipset vendors provide various fixed tables, such as FADT, in memory that specify things like the APIC map (used for SMP), config registers, and simple configuration values.
Additionally, a bytecode table, the Differentiated System Description Table DSDT, specifies a tree-like name space of devices and methods.
.Pp
The ACPI driver must parse the fixed tables, implement an interpreter for the bytecode,
and modify device drivers and the kernel to accept information from the ACPI subsystem.
For FreeBSD, Intel has provided an interpreter (ACPI-CA) that is shared with Linux and NetBSD.
The path to the ACPI-CA source code is
.Pa src/sys/contrib/dev/acpica
.
The glue code that allows ACPI-CA to work on FreeBSD is in
.Pa src/sys/dev/acpica/Osd
.
Finally, drivers that implement various ACPI devices are found in
.Pa src/sys/dev/acpica
.
.Pp
For ACPI to work correctly, all the parts have to work correctly.
Here are some common problems, in order of frequency of appearance, and some
possible workarounds or fixes.
If a fix does not resolve the issue, refer to for instructions on how to submit a bug report.
.Ss MOUSE ISSUES
.Pp
In some cases, resuming from a suspend operation will cause the mouse to fail.
A known work around is to add
.Ql hint.psm.0.flags="0x3000"
to
.Pa /boot/loader.conf
.
.Ss SUSPEND/RESUME
.Pp
ACPI has three suspend to RAM (STR) states,
.Ql S1
-
.Ql S3
, and one suspend to disk state (STD), called
.Ql S4
.
 STD can be implemented in two separate ways.
The
.Ql S4
BIOS is a BIOS-assisted suspend to disk and
.Ql S4
OS is implemented entirely by the operating system.
The normal state the system is in when plugged in but not powered up is
.Do
soft off
.Dc
(
.Ql S5
).
.Pp
Use
.Cm sysctl hw.acpi
to check for the suspend-related items.
These example results are from a Thinkpad:
.Bd -literal -offset indent
hw.acpi.supported_sleep_state: S3 S4 S5
hw.acpi.s4bios: 0
.Ed
.Pp
Use
.Cm acpiconf -s
to test
.Ql S3
,
.Ql S4
, and
.Ql S5
.
An
.Ar s4bios
of one (
.Ql 1
) indicates
.Ql S4
BIOS support instead of
.Ql S4
operating system support.
.Pp
When testing suspend/resume, start with
.Ql S1
, if supported.
This state is most likely to work since it does not require much driver
support.
No one has implemented
.Ql S2
, which is similar to
.Ql S1
.
Next, try
.Ql S3
.
This is the deepest STR state and requires a lot of driver support to properly reinitialize the
hardware.
.Pp
A common problem with suspend/resume is that many device drivers do not save,
restore, or reinitialize their firmware, registers, or device memory properly.
As a first attempt at debugging the problem, try:
.Bd -literal -offset indent
# sysctl debug.bootverbose=1
# sysctl debug.acpi.suspend_bounce=1
# acpiconf -s 3
.Ed
.Pp
This test emulates the suspend/resume cycle of all device drivers without
actually going into
.Ql S3
state.
In some cases, problems such as losing firmware state, device watchdog time
out, and retrying forever, can be captured with this method.
Note that the system will not really enter
.Ql S3
state, which means devices may not lose power, and many will work fine even if
suspend/resume methods are totally missing, unlike real
.Ql S3
state.
.Pp
Harder cases require additional hardware, such as a serial port and cable for
debugging through a serial console, a Firewire port and cable for using
.Xr dcons 4 , and kernel debugging skills.
.Pp
To help isolate the problem, unload as many drivers as possible.
If it works, narrow down which driver is the problem by loading drivers until
it fails again.
Typically, binary drivers like
.Pa nvidia.ko
, display drivers, and USB will have the most problems while Ethernet interfaces usually work fine.
If drivers can be properly loaded and unloaded, automate this by putting the
appropriate commands in
.Pa /etc/rc.suspend
and
.Pa /etc/rc.resume
.
Try setting
.Ar hw.acpi.reset_video
to
.Ql 1
if the display is messed up after resume.
Try setting longer or shorter values for
.Ar hw.acpi.sleep_delay
to see if that helps.
.Pp
Try loading a recent Linux distribution to see if suspend/resume works on the same hardware.
If it works on Linux, it is likely a FreeBSD driver problem.
Narrowing down which driver causes the problem will assist developers in fixing
the problem.
Since the ACPI maintainers rarely maintain other drivers, such as sound or ATA, any driver problems should also be posted to the freebsd-current list and mailed to the driver maintainer.
Advanced users can include debugging
.Xr printf 3 s in a problematic driver to track down where in its resume function it hangs.
.Pp
Finally, try disabling ACPI and enabling APM instead.
If suspend/resume works with APM, stick with APM, especially on older hardware (pre-2000).
It took vendors a while to get ACPI support correct and older hardware is more likely to have BIOS problems with ACPI.
.Ss SYSTEM HANGS
.Pp
Most system hangs are a result of lost interrupts or an interrupt storm.
Chipsets may have problems based on boot, how the BIOS configures interrupts before correctness of the APIC (MADT) table, and routing of the System Control Interrupt (SCI).
.Pp
Interrupt storms can be distinguished from lost interrupts by checking the
output of
.Cm vmstat -i
and looking at the line that has
.Ql acpi0
.
If the counter is increasing at more than a couple per second, there is an
interrupt storm.
If the system appears hung, try breaking to DDB (CTRLALTESC on console) and type
.Ql show interrupts
.
.Pp
When dealing with interrupt problems, try disabling APIC support with
.Ql hint.apic.0.disabled="1"
in
.Pa /boot/loader.conf
.
.Ss PANICS
.Pp
Panics are relatively rare for ACPI and are the top priority to be fixed.
The first step is to isolate the steps to reproduce the panic, if possible, and
get a backtrace.
Follow the advice for enabling
.Ql options DDB
and setting up a serial console in or setting up a dump partition.
To get a backtrace in DDB, use
.Ql tr
.
When handwriting the backtrace, get at least the last five and the top five
lines in the trace.
.Pp
Then, try to isolate the problem by booting with ACPI disabled.
If that works, isolate the ACPI subsystem by using various values of
.Ar debug.acpi.disable
.
See
.Xr acpi 4 for some examples.
.Ss SYSTEM POWERS UP AFTER SUSPEND OR SHUTDOWN
.Pp
First, try setting
.Ql hw.acpi.disable_on_poweroff="0"
in
.Pa /boot/loader.conf
.
This keeps ACPI from disabling various events during the shutdown process.
Some systems need this value set to
.Ql 1
(the default) for the same reason.
This usually fixes the problem of a system powering up spontaneously after a
suspend or poweroff.
.Ss BIOS CONTAINS BUGGY BYTECODE
.Pp
Some BIOS vendors provide incorrect or buggy bytecode.
This is usually manifested by kernel console messages like this:
.Bd -literal -offset indent
ACPI-1287: *** Error: Method execution failed [\\_SB_.PCI0.LPC0.FIGD._STA] \\
(Node 0xc3f6d160), AE_NOT_FOUND
.Ed
.Pp
Often, these problems may be resolved by updating the BIOS to the latest revision.
Most console messages are harmless, but if there are other problems, like the
battery status is not working, these messages are a good place to start looking
for problems.
.Ss OVERRIDING THE DEFAULT AML
.Pp
The BIOS bytecode, known as ACPI Machine Language (AML), is compiled from a source language called ACPI Source Language (ASL).
The AML is found in the table known as the Differentiated System Description Table (DSDT).
.Pp
The goal of FreeBSD is for everyone to have working ACPI without any user intervention.
Workarounds are still being developed for common mistakes made by BIOS vendors.
The Microsoft interpreter (
.Pa acpi.sys
and
.Pa acpiec.sys
) does not strictly check for adherence to the standard, and thus many BIOS vendors who only test ACPI under Windows never fix their ASL.
FreeBSD developers continue to identify and document which non-standard
behavior is allowed by Microsoft's interpreter and replicate it so that FreeBSD can work without forcing users
to fix the ASL.
.Pp
To help identify buggy behavior and possibly fix it manually, a copy can be
made of the system's ASL.
To copy the system's ASL to a specified file name, use
.Cm acpidump
with
.Ar -t
, to show the contents of the fixed tables, and
.Ar -d
, to disassemble the AML:
.Bd -literal -offset indent
# acpidump -td > my.asl
.Ed
.Pp
Some AML versions assume the user is running Windows.
To override this, set
.Ql hw.acpi.osname="Windows 2009"
in
.Pa /boot/loader.conf
, using the most recent Windows version listed in the ASL.
.Pp
Other workarounds may require
.Pa my.asl
to be customized.
If this file is edited, compile the new ASL using the following command.
Warnings can usually be ignored, but errors are bugs that will usually prevent ACPI from working correctly.
.Bd -literal -offset indent
# iasl -f my.asl
.Ed
.Pp
Including
.Ar -f
forces creation of the AML, even if there are errors during compilation.
Some errors, such as missing return statements, are automatically worked around
by the FreeBSD interpreter.
.Pp
The default output filename for
.Cm iasl
is
.Pa DSDT.aml
.
Load this file instead of the BIOS's buggy copy, which is still present in flash memory, by editing
.Pa /boot/loader.conf
as follows:
.Bd -literal -offset indent
acpi_dsdt_load="YES"
acpi_dsdt_name="/boot/DSDT.aml"
.Ed
.Pp
Be sure to copy
.Pa DSDT.aml
to
.Pa /boot
, then reboot the system.
If this fixes the problem, send a
.Xr diff 1 of the old and new ASL to freebsd-acpi so that developers can work around the buggy behavior in
.Pa acpica
.
.Pp
The ACPI driver has a flexible debugging facility.
A set of subsystems and the level of verbosity can be specified.
The subsystems to debug are specified as layers and are broken down into
components (
.Ql ACPI_ALL_COMPONENTS
) and ACPI hardware support (
.Ql ACPI_ALL_DRIVERS
).
The verbosity of debugging output is specified as the level and ranges from
just report errors (
.Ql ACPI_LV_ERROR
) to everything (
.Ql ACPI_LV_VERBOSE
).
The level is a bitmask so multiple options can be set at once, separated by
spaces.
In practice, a serial console should be used to log the output so it is not
lost as the console message buffer flushes.
A full list of the individual layers and levels is found in
.Xr acpi 4 .
.Pp
Debugging output is not enabled by default.
To enable it, add
.Ql options ACPI_DEBUG
to the custom kernel configuration file if ACPI is compiled into the kernel.
Add
.Ql ACPI_DEBUG=1
to
.Pa /etc/make.conf
to enable it globally.
If a module is used instead of a custom kernel, recompile just the
.Pa acpi.ko
module as follows:
.Bd -literal -offset indent
# cd /sys/modules/acpi/acpi && make clean && make ACPI_DEBUG=1
.Ed
.Pp
Copy the compiled
.Pa acpi.ko
to
.Pa /boot/kernel
and add the desired level and layer to
.Pa /boot/loader.conf
.
The entries in this example enable debug messages for all ACPI components and hardware drivers and output error messages at the least verbose
level:
.Bd -literal -offset indent
debug.acpi.layer="ACPI_ALL_COMPONENTS ACPI_ALL_DRIVERS"
debug.acpi.level="ACPI_LV_ERROR"
.Ed
.Pp
If the required information is triggered by a specific event, such as a suspend
and then resume, do not modify
.Pa /boot/loader.conf
.
Instead, use
.Cm sysctl
to specify the layer and level after booting and preparing the system for the
specific event.
The variables which can be set using
.Cm sysctl
are named the same as the tunables in
.Pa /boot/loader.conf
.
.Pp
Once the debugging information is gathered, it can be sent to freebsd-acpi so that it can be used by the FreeBSD ACPI maintainers to identify the root cause of the problem and to develop a
solution.
.Pp
Before submitting debugging information to this mailing list, ensure the latest BIOS version is installed and, if available, the embedded controller firmware
version.
.Pp
When submitting a problem report, include the following information:
.Bl -bullet -offset -compact
.It
Description of the buggy behavior, including system type, model, and anything
that causes the bug to appear.
Note as accurately as possible when the bug began occurring if it is new.
.It
The output of
.Cm dmesg
after running
.Cm boot -v
, including any error messages generated by the bug.
.It
The
.Cm dmesg
output from
.Cm boot -v
with ACPI disabled, if disabling ACPI helps to fix the problem.
.It
Output from
.Cm sysctl hw.acpi
.
This lists which features the system offers.
.It
The URL to a pasted version of the system's ASL.
Do not send the ASL directly to the list as it can be very large.
Generate a copy of the ASL by running this command:
.Bd -literal -offset indent
# acpidump -dt > name-system.asl
.Ed
Substitute the login name for name and manufacturer/model for system.
For example, use
.Pa njl-FooCo6000.asl
.
.El
.Pp
Most FreeBSD developers watch the FreeBSD-CURRENT mailing list, but one should submit problems to freebsd-acpi to be sure it is seen.
Be patient when waiting for a response.
If the bug is not immediately apparent, submit a PR using
.Xr send-pr 1 .
When entering a PR, include the same information as requested above.
This helps developers to track the problem and resolve it.
Do not send a PR without emailing freebsd-acpi first as it is likely that the problem has been reported before.
.Ss REFERENCES
.Pp
More information about ACPI may be found in the following locations:
.Bl -bullet -offset -compact
.It
The FreeBSD ACPI Mailing List Archives (
.Lk https://lists.freebsd.org/pipermail/freebsd-acpi/
)
.It
The ACPI 2.0 Specification (
.Lk http://acpi.info/spec.htm
)
.It
.Xr acpi 4 ,
.Xr acpi_thermal 4 ,
.Xr acpidump 8 ,
.Xr iasl 8 , and
.Xr acpidb 8
.El
.Sh THE FREEBSD BOOTING PROCESS
.Ss SYNOPSIS
.Pp
The process of starting a computer and loading the operating system is referred
to as
.Do
the bootstrap process
.Dc
, or
.Do
booting
.Dc
.
FreeBSD's boot process provides a great deal of flexibility in customizing what
happens when the system starts, including the ability to select from different
operating systems installed on the same computer, different versions of the
same operating system, or a different installed kernel.
.Pp
This chapter details the configuration options that can be set.
It demonstrates how to customize the FreeBSD boot process, including everything
that happens until the FreeBSD kernel has started, probed for devices, and
started
.Xr init 8 .
This occurs when the text color of the boot messages changes from bright white
to grey.
.Pp
After reading this chapter, you will recognize:
.Bl -bullet -offset -compact
.It
The components of the FreeBSD bootstrap system and how they interact.
.It
The options that can be passed to the components in the FreeBSD bootstrap in
order to control the boot process.
.It
How to configure a customized boot splash screen.
.It
The basics of setting device hints.
.It
How to boot into single- and multi-user mode and how to properly shut down a
FreeBSD system.
.El
.Pp
This chapter only describes the boot process for FreeBSD running on x86 and
amd64 systems.
.Ss FREEBSD BOOT PROCESS
.Pp
Turning on a computer and starting the operating system poses an interesting
dilemma.
By definition, the computer does not know how to do anything until the
operating system is started.
This includes running programs from the disk.
If the computer can not run a program from the disk without the operating
system, and the operating system programs are on the disk, how is the operating
system started?
.Pp
This problem parallels one in the book The Adventures of Baron Munchausen.
A character had fallen part way down a manhole, and pulled himself out by
grabbing his bootstraps and lifting.
In the early days of computing, the term
.Ql bootstrap
was applied to the mechanism used to load the operating system.
It has since become shortened to
.Do
booting
.Dc
.
.Pp
On x86 hardware, the Basic Input/Output System (BIOS) is responsible for loading the operating system.
The BIOS looks on the hard disk for the Master Boot Record (MBR), which must be located in a specific place on the disk.
The BIOS has enough knowledge to load and run the MBR, and assumes that the MBR can then carry out the rest of the tasks involved in loading the operating
system, possibly with the help of the BIOS.
.Pp
FreeBSD provides for booting from both the older MBR standard, and the newer GUID Partition Table (GPT).
 GPT partitioning is often found on computers with the Unified Extensible Firmware
Interface (UEFI).
However, FreeBSD can boot from GPT partitions even on machines with only a legacy BIOS with
.Xr gptboot 8 .
Work is under way to provide direct UEFI booting.
.Pp
The code within the MBR is typically referred to as a boot manager, especially when it interacts with the user.
The boot manager usually has more code in the first track of the disk or within
the file system.
Examples of boot managers include the standard FreeBSD boot manager boot0, also called Boot Easy, and Grub, which is used by many Linux distributions.
.Pp
If only one operating system is installed, the MBR searches for the first bootable (active) slice on the disk, and then runs the
code on that slice to load the remainder of the operating system.
When multiple operating systems are present, a different boot manager can be
installed to display a list of operating systems so the user can select one to
boot.
.Pp
The remainder of the FreeBSD bootstrap system is divided into three stages.
The first stage knows just enough to get the computer into a specific state and
run the second stage.
The second stage can do a little bit more, before running the third stage.
The third stage finishes the task of loading the operating system.
The work is split into three stages because the MBR puts limits on the size of the programs that can be run at stages one and two.
Chaining the tasks together allows FreeBSD to provide a more flexible loader.
.Pp
The kernel is then started and begins to probe for devices and initialize them
for use.
Once the kernel boot process is finished, the kernel passes control to the user
process
.Xr init 8 , which makes sure the disks are in a usable state, starts the user-level
resource configuration which mounts file systems, sets up network cards to
communicate on the network, and starts the processes which have been configured
to run at startup.
.Pp
This section describes these stages in more detail and demonstrates how to
interact with the FreeBSD boot process.
.Ss THE BOOT MANAGER
.Pp
The boot manager code in the MBR is sometimes referred to as stage zero of the boot process.
By default, FreeBSD uses the boot0 boot manager.
.Pp
The MBR installed by the FreeBSD installer is based on
.Pa /boot/boot0
.
The size and capability of boot0 is restricted to 446 bytes due to the slice table and
.Ql 0x55AA
identifier at the end of the MBR.
If boot0 and multiple operating systems are installed, a message similar to this example
will be displayed at boot time:
.Bd -literal -offset indent
F1 Win
F2 FreeBSD

Default: F2
.Ed
.Pp
Other operating systems will overwrite an existing MBR if they are installed after FreeBSD.
If this happens, or to replace the existing MBR with the FreeBSD MBR, use the following command:
.Bd -literal -offset indent
# fdisk -B -b /boot/boot0 device
.Ed
.Pp
where device is the boot disk, such as
.Pa ad0
for the first IDE disk,
.Pa ad2
for the first IDE disk on a second IDE controller, or
.Pa da0
for the first SCSI disk.
To create a custom configuration of the MBR, refer to
.Xr boot0cfg 8 .
.Ss STAGE ONE AND STAGE TWO
.Pp
Conceptually, the first and second stages are part of the same program on the
same area of the disk.
Because of space constraints, they have been split into two, but are always
installed together.
They are copied from the combined
.Pa /boot/boot
by the FreeBSD installer or
.Cm bsdlabel
.
.Pp
These two stages are located outside file systems, in the first track of the
boot slice, starting with the first sector.
This is where boot0, or any other boot manager, expects to find a program to run which will
continue the boot process.
.Pp
The first stage,
.Pa boot1
, is very simple, since it can only be 512 bytes in size.
It knows just enough about the FreeBSD
.Ql bsdlabel
, which stores information about the slice, to find and execute
.Pa boot2
.
.Pp
Stage two,
.Pa boot2
, is slightly more sophisticated, and understands the FreeBSD file system
enough to find files.
It can provide a simple interface to choose the kernel or loader to run.
It runs loader, which is much more sophisticated and provides a boot configuration file.
If the boot process is interrupted at stage two, the following interactive
screen is displayed:
.Bd -literal -offset indent
>> FreeBSD/i386 BOOT
Default: 0:ad(0,a)/boot/loader
boot:
.Ed
.Pp
To replace the installed
.Pa boot1
and
.Pa boot2
, use
.Cm bsdlabel
, where diskslice is the disk and slice to boot from, such as
.Pa ad0s1
for the first slice on the first IDE disk:
.Bd -literal -offset indent
# bsdlabel -B diskslice
.Ed
.Pp
If just the disk name is used, such as
.Pa ad0
,
.Cm bsdlabel
will create the disk in
.Do
dangerously dedicated mode
.Dc
, without slices.
This is probably not the desired action, so double check the diskslice before pressing Return.
.Ss STAGE THREE
.Pp
The loader is the final stage of the three-stage bootstrap process.
It is located on the file system, usually as
.Pa /boot/loader
.
.Pp
The loader is intended as an interactive method for configuration, using a built-in
command set, backed up by a more powerful interpreter which has a more complex
command set.
.Pp
During initialization, loader will probe for a console and for disks, and figure out which disk it is booting
from.
It will set variables accordingly, and an interpreter is started where user
commands can be passed from a script or interactively.
.Pp
The loader will then read
.Pa /boot/loader.rc
, which by default reads in
.Pa /boot/defaults/loader.conf
which sets reasonable defaults for variables and reads
.Pa /boot/loader.conf
for local changes to those variables.
.Pa loader.rc
then acts on these variables, loading whichever modules and kernel are
selected.
.Pp
Finally, by default, loader issues a 10 second wait for key presses, and boots the kernel if it is not
interrupted.
If interrupted, the user is presented with a prompt which understands the
command set, where the user may adjust variables, unload all modules, load
modules, and then finally boot or reboot.
 lists the most commonly used loader commands.
For a complete discussion of all available commands, refer to
.Xr loader 8 .
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Variable
.Ta
Description
.It
.Ta
autoboot seconds
.Ta
Proceeds to boot the kernel if not interrupted within the time span given, in
seconds.
It displays a countdown, and the default time span is 10 seconds.
.It
.Ta
boot
.Ar -options
.Ar kernelname
.Ta
Immediately proceeds to boot the kernel, with any specified options or kernel
name.
Providing a kernel name on the command-line is only applicable after an
.Cm unload
has been issued.
Otherwise, the previously-loaded kernel will be used.
If kernelname is not qualified, it will be searched under /boot/kernel and /boot/modules.
.It
.Ta
boot-conf
.Ta
Goes through the same automatic configuration of modules based on specified
variables, most commonly
.Ev kernel
.
This only makes sense if
.Cm unload
is used first, before changing some variables.
.It
.Ta
help
.Ar topic
.Ta
Shows help messages read from
.Pa /boot/loader.help
.
If the topic given is
.Ql index
, the list of available topics is displayed.
.It
.Ta
include filename …
.Ta
Reads the specified file and interprets it line by line.
An error immediately stops the
.Cm include
.
.It
.Ta
load
.Ar -t type
filename
.Ta
Loads the kernel, kernel module, or file of the type given, with the specified
filename.
Any arguments after filename are passed to the file.
If filename is not qualified, it will be searched under /boot/kernel and /boot/modules.
.It
.Ta
ls
.Ar -l
.Ar path
.Ta
Displays a listing of files in the given path, or the root directory, if the
path is not specified.
If
.Ar -l
is specified, file sizes will also be shown.
.It
.Ta
lsdev
.Ar -v
.Ta
Lists all of the devices from which it may be possible to load modules.
If
.Ar -v
is specified, more details are printed.
.It
.Ta
lsmod
.Ar -v
.Ta
Displays loaded modules.
If
.Ar -v
is specified, more details are shown.
.It
.Ta
more filename
.Ta
Displays the files specified, with a pause at each
.Ev LINES
displayed.
.It
.Ta
reboot
.Ta
Immediately reboots the system.
.It
.Ta
set variable, set variable=value
.Ta
Sets the specified environment variables.
.It
.Ta
unload
.Ta
Removes all loaded modules.
.El
.Pp
Here are some practical examples of loader usage.
To boot the usual kernel in single-user mode :
.Bd -literal -offset indent
boot -s
.Ed
.Pp
To unload the usual kernel and modules and then load the previous or another,
specified kernel:
.Bd -literal -offset indent
unload
load kernel.old
.Ed
.Pp
Use
.Pa kernel.GENERIC
to refer to the default kernel that comes with an installation, or
.Pa kernel.old
, to refer to the previously installed kernel before a system upgrade or before
configuring a custom kernel.
.Pp
Use the following to load the usual modules with another kernel:
.Bd -literal -offset indent
unload
set kernel="kernel.old"
boot-conf
.Ed
.Pp
To load an automated kernel configuration script:
.Bd -literal -offset indent
load -t userconfig_script /boot/kernel.conf
.Ed
.Ss LAST STAGE
.Pp
Once the kernel is loaded by either loader or by boot2, which bypasses loader, it examines any boot flags and adjusts its behavior as necessary.
 lists the commonly used boot flags.
Refer to
.Xr boot 8 for more information on the other boot flags.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Option
.Ta
Description
.It
.Ta
.Ar -a
.Ta
During kernel initialization, ask for the device to mount as the root file
system.
.It
.Ta
.Ar -C
.Ta
Boot the root file system from a CDROM.
.It
.Ta
.Ar -s
.Ta
Boot into single-user mode.
.It
.Ta
.Ar -v
.Ta
Be more verbose during kernel startup.
.El
.Pp
Once the kernel has finished booting, it passes control to the user process
.Xr init 8 , which is located at
.Pa /sbin/init
, or the program path specified in the
.Ev init_path
variable in
.Cm loader
.
This is the last stage of the boot process.
.Pp
The boot sequence makes sure that the file systems available on the system are
consistent.
If a UFS file system is not, and
.Cm fsck
cannot fix the inconsistencies, init drops the system into single-user mode so that the system administrator can
resolve the problem directly.
Otherwise, the system boots into multi-user mode.
.Ss SINGLE-USER MODE
.Pp
A user can specify this mode by booting with
.Ar -s
or by setting the
.Ev boot_single
variable in loader.
It can also be reached by running
.Cm shutdown now
from multi-user mode.
Single-user mode begins with this message:
.Bd -literal -offset indent
Enter full pathname of shell or RETURN for /bin/sh:
.Ed
.Pp
If the user presses Enter, the system will enter the default Bourne shell.
To specify a different shell, input the full path to the shell.
.Pp
Single-user mode is usually used to repair a system that will not boot due to
an inconsistent file system or an error in a boot configuration file.
It can also be used to reset the
.Ql root
password when it is unknown.
These actions are possible as the single-user mode prompt gives full, local
access to the system and its configuration files.
There is no networking in this mode.
.Pp
While single-user mode is useful for repairing a system, it poses a security
risk unless the system is in a physically secure location.
By default, any user who can gain physical access to a system will have full
control of that system after booting into single-user mode.
.Pp
If the system
.Ql console
is changed to
.Ql insecure
in
.Pa /etc/ttys
, the system will first prompt for the
.Ql root
password before initiating single-user mode.
This adds a measure of security while removing the ability to reset the
.Ql root
password when it is unknown.
.Bd -literal -offset indent
# name  getty                           type    status          comments
#
# If console is marked "insecure", then init will ask for the root password
# when going to single-user mode.
console none                            unknown off insecure
.Ed
.Pp
An
.Ql insecure
console means that physical security to the console is considered to be
insecure, so only someone who knows the
.Ql root
password may use single-user mode.
.Ss MULTI-USER MODE
.Pp
If init finds the file systems to be in order, or once the user has finished their
commands in single-user mode and has typed
.Cm exit
to leave single-user mode, the system enters multi-user mode, in which it
starts the resource configuration of the system.
.Pp
The resource configuration system reads in configuration defaults from
.Pa /etc/defaults/rc.conf
and system-specific details from
.Pa /etc/rc.conf
.
It then proceeds to mount the system file systems listed in
.Pa /etc/fstab
.
It starts up networking services, miscellaneous system daemons, then the
startup scripts of locally installed packages.
.Pp
To learn more about the resource configuration system, refer to
.Xr rc 8 and examine the scripts located in
.Pa /etc/rc.d
.
.Pp
Typically when a FreeBSD system boots, it displays its progress as a series of
messages at the console.
A boot splash screen creates an alternate boot screen that hides all of the
boot probe and service startup messages.
A few boot loader messages, including the boot options menu and a timed wait
countdown prompt, are displayed at boot time, even when the splash screen is
enabled.
The display of the splash screen can be turned off by hitting any key on the
keyboard during the boot process.
.Pp
There are two basic environments available in FreeBSD.
The first is the default legacy virtual console command line environment.
After the system finishes booting, a console login prompt is presented.
The second environment is a configured graphical environment.
Refer to for more information on how to install and configure a graphical display
manager and a graphical login manager.
.Pp
Once the system has booted, the splash screen defaults to being a screen saver.
After a time period of non-use, the splash screen will display and will cycle
through steps of changing intensity of the image, from bright to very dark and
over again.
The configuration of the splash screen saver can be overridden by adding a
.Ql saver=
line to
.Pa /etc/rc.conf
.
Several built-in screen savers are available and described in
.Xr splash 4 .
The
.Ql saver=
option only applies to virtual consoles and has no effect on graphical display
managers.
.Pp
Sample splash screen files can be downloaded from the gallery at http://artwork.freebsdgr.org.
By installing the
.Ql sysutils/bsd-splash-changer
package or port, a random splash image from a collection will display at boot.
.Pp
The splash screen function supports 256-colors in the bitmap (
.Pa .bmp
), ZSoft PCX (
.Pa .pcx
), or TheDraw (
.Pa .bin
) formats.
The
.Pa .bmp
,
.Pa .pcx
, or
.Pa .bin
image has to be placed on the root partition, for example in
.Pa /boot
.
The splash image files must have a resolution of 320 by 200 pixels or less in
order to work on standard VGA adapters.
For the default boot display resolution of 256-colors and 320 by 200 pixels or
less, add the following lines to
.Pa /boot/loader.conf
.
Replace splash.bmp with the name of the bitmap file to use:
.Bd -literal -offset indent
splash_bmp_load="YES"
bitmap_load="YES"
bitmap_name="/boot/splash.bmp"
.Ed
.Pp
To use a PCX file instead of a bitmap file:
.Bd -literal -offset indent
splash_pcx_load="YES"
bitmap_load="YES"
bitmap_name="/boot/splash.pcx"
.Ed
.Pp
To instead use ASCII art in the https://en.wikipedia.org/wiki/TheDraw format:
.Bd -literal -offset indent
splash_txt="YES"
bitmap_load="YES"
bitmap_name="/boot/splash.bin"
.Ed
.Pp
To use larger images that fill the whole display screen, up to the maximum
resolution of 1024 by 768 pixels, the VESA module must also be loaded during system boot.
If using a custom kernel, ensure that the custom kernel configuration file
includes the
.Ql VESA
kernel configuration option.
To load the VESA module for the splash screen, add this line to
.Pa /boot/loader.conf
before the three lines mentioned in the above examples:
.Bd -literal -offset indent
vesa_load="YES"
.Ed
.Pp
Other interesting
.Pa loader.conf
options include:
.Bl -tag -offset -compact
.It
.Ql beastie_disable="YES"
This will stop the boot options menu from being displayed, but the timed wait
count down prompt will still be present.
Even with the display of the boot options menu disabled, entering an option
selection at the timed wait count down prompt will enact the corresponding boot
option.
.It
.Ql loader_logo="beastie"
This will replace the default words
.Do
FreeBSD
.Dc
, which are displayed to the right of the boot options menu, with the colored
beastie logo.
.El
.Pp
For more information, refer to
.Xr splash 4 ,
.Xr loader.conf 5 , and
.Xr vga 4 .
.Pp
During initial system startup, the boot
.Xr loader 8 reads
.Xr device.hints 5 .
This file stores kernel boot information known as variables, sometimes referred
to as
.Do
device hints
.Dc
.
These
.Do
device hints
.Dc
are used by device drivers for device configuration.
.Pp
Device hints may also be specified at the Stage 3 boot loader prompt, as
demonstrated in .
Variables can be added using
.Cm set
, removed with
.Cm unset
, and viewed
.Cm show
.
Variables set in
.Pa /boot/device.hints
can also be overridden.
Device hints entered at the boot loader are not permanent and will not be
applied on the next reboot.
.Pp
Once the system is booted,
.Xr kenv 1 can be used to dump all of the variables.
.Pp
The syntax for
.Pa /boot/device.hints
is one variable per line, using the hash
.Do
#
.Dc
as comment markers.
Lines are constructed as follows:
.Bd -literal -offset indent
hint.driver.unit.keyword="value"
.Ed
.Pp
The syntax for the Stage 3 boot loader is:
.Bd -literal -offset indent
set hint.driver.unit.keyword=value
.Ed
.Pp
where
.Ql driver
is the device driver name,
.Ql unit
is the device driver unit number, and
.Ql keyword
is the hint keyword.
The keyword may consist of the following options:
.Bl -bullet -offset -compact
.It
.Ql at
: specifies the bus which the device is attached to.
.It
.Ql port
: specifies the start address of the I/O to be used.
.It
.Ql irq
: specifies the interrupt request number to be used.
.It
.Ql drq
: specifies the DMA channel number.
.It
.Ql maddr
: specifies the physical memory address occupied by the device.
.It
.Ql flags
: sets various flag bits for the device.
.It
.Ql disabled
: if set to
.Ql 1
the device is disabled.
.El
.Pp
Since device drivers may accept or require more hints not listed here, viewing
a driver's manual page is recommended.
For more information, refer to
.Xr device.hints 5 ,
.Xr kenv 1 ,
.Xr loader.conf 5 , and
.Xr loader 8 .
.Ss SHUTDOWN SEQUENCE
.Pp
Upon controlled shutdown using
.Xr shutdown 8 ,
.Xr init 8 will attempt to run the script
.Pa /etc/rc.shutdown
, and then proceed to send all processes the
.Ql TERM
signal, and subsequently the
.Ql KILL
signal to any that do not terminate in a timely manner.
.Pp
To power down a FreeBSD machine on architectures and systems that support power
management, use
.Cm shutdown -p now
to turn the power off immediately.
To reboot a FreeBSD system, use
.Cm shutdown -r now
.
One must be
.Ql root
or a member of
.Ql operator
in order to run
.Xr shutdown 8 .
One can also use
.Xr halt 8 and
.Xr reboot 8 .
Refer to their manual pages and to
.Xr shutdown 8 for more information.
.Pp
Modify group membership by referring to .
.Pp
Power management requires
.Xr acpi 4 to be loaded as a module or statically compiled into a custom kernel.
.Ss SYNOPSIS
.Pp
Security, whether physical or virtual, is a topic so broad that an entire
industry has evolved around it.
Hundreds of standard practices have been authored about how to secure systems
and networks, and as a user of FreeBSD, understanding how to protect against
attacks and intruders is a must.
.Pp
In this chapter, several fundamentals and techniques will be discussed.
The FreeBSD system comes with multiple layers of security, and many more third
party utilities may be added to enhance security.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
Basic FreeBSD system security concepts.
.It
The various crypt mechanisms available in FreeBSD.
.It
How to set up one-time password authentication.
.It
How to configure TCP Wrapper for use with
.Xr inetd 8 .
.It
How to set up Kerberos on FreeBSD.
.It
How to configure IPsec and create a VPN.
.It
How to configure and use OpenSSH on FreeBSD.
.It
How to use file system ACLs.
.It
How to use pkg to audit third party software packages installed from the Ports Collection.
.It
How to utilize FreeBSD security advisories.
.It
What Process Accounting is and how to enable it on FreeBSD.
.It
How to control user resources using login classes or the resource limits
database.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Understand basic FreeBSD and Internet concepts.
.El
.Pp
Additional security topics are covered elsewhere in this Handbook.
For example, Mandatory Access Control is discussed in and Internet firewalls are discussed in .
.Ss INTRODUCTION
.Pp
Security is everyone's responsibility.
A weak entry point in any system could allow intruders to gain access to
critical information and cause havoc on an entire network.
One of the core principles of information security is the CIA triad, which stands for the Confidentiality, Integrity, and Availability of
information systems.
.Pp
The CIA triad is a bedrock concept of computer security as customers and users expect
their data to be protected.
For example, a customer expects that their credit card information is securely
stored (confidentiality), that their orders are not changed behind the scenes
(integrity), and that they have access to their order information at all times
(availablility).
.Pp
To provide CIA, security professionals apply a defense in depth strategy.
The idea of defense in depth is to add several layers of security to prevent
one single layer failing and the entire security system collapsing.
For example, a system administrator cannot simply turn on a firewall and
consider the network or system secure.
One must also audit accounts, check the integrity of binaries, and ensure
malicious tools are not installed.
To implement an effective security strategy, one must understand threats and
how to defend against them.
.Pp
What is a threat as it pertains to computer security?
Threats are not limited to remote attackers who attempt to access a system
without permission from a remote location.
Threats also include employees, malicious software, unauthorized network
devices, natural disasters, security vulnerabilities, and even competing
corporations.
.Pp
Systems and networks can be accessed without permission, sometimes by accident,
or by remote attackers, and in some cases, via corporate espionage or former
employees.
As a user, it is important to prepare for and admit when a mistake has led to a
security breach and report possible issues to the security team.
As an administrator, it is important to know of the threats and be prepared to
mitigate them.
.Pp
When applying security to systems, it is recommended to start by securing the
basic accounts and system configuration, and then to secure the network layer
so that it adheres to the system policy and the organization's security
procedures.
Many organizations already have a security policy that covers the configuration
of technology devices.
The policy should include the security configuration of workstations, desktops,
mobile devices, phones, production servers, and development servers.
In many cases, standard operating procedures (SOPs) already exist.
When in doubt, ask the security team.
.Pp
The rest of this introduction describes how some of these basic security
configurations are performed on a FreeBSD system.
The rest of this chapter describes some specific tools which can be used when
implementing a security policy on a FreeBSD system.
.Ss PREVENTING LOGINS
.Pp
In securing a system, a good starting point is an audit of accounts.
Ensure that
.Ql root
has a strong password and that this password is not shared.
Disable any accounts that do not need login access.
.Pp
To deny login access to accounts, two methods exist.
The first is to lock the account.
This example locks the
.Ql toor
account:
.Bd -literal -offset indent
# pw lock toor
.Ed
.Pp
The second method is to prevent login access by changing the shell to
.Pa /sbin/nologin
.
Only the superuser can change the shell for other users:
.Bd -literal -offset indent
# chsh -s /usr/sbin/nologin toor
.Ed
.Pp
The
.Pa /usr/sbin/nologin
shell prevents the system from assigning a shell to the user when they attempt
to login.
.Ss PERMITTED ACCOUNT ESCALATION
.Pp
In some cases, system administration needs to be shared with other users.
FreeBSD has two methods to handle this.
The first one, which is not recommended, is a shared root password used by
members of the
.Ql wheel
group.
With this method, a user types
.Cm su
and enters the password for
.Ql wheel
whenever superuser access is needed.
The user should then type
.Cm exit
to leave privileged access after finishing the commands that required
administrative access.
To add a user to this group, edit
.Pa /etc/group
and add the user to the end of the
.Ql wheel
entry.
The user must be separated by a comma character with no space.
.Pp
The second, and recommended, method to permit privilege escalation is to
install the
.Ql security/sudo
package or port.
This software provides additional auditing, more fine-grained user control, and
can be configured to lock users into running only the specified privileged
commands.
.Pp
After installation, use
.Cm visudo
to edit
.Pa /usr/local/etc/sudoers
.
This example creates a new
.Ql webadmin
group, adds the
.Ql trhodes
account to that group, and configures that group access to restart
.Ql apache24
:
.Bd -literal -offset indent
# pw groupadd webadmin -M trhodes -g 6000
# visudo
%webadmin ALL=(ALL) /usr/sbin/service apache24 *
.Ed
.Ss PASSWORD HASHES
.Pp
Passwords are a necessary evil of technology.
When they must be used, they should be complex and a powerful hash mechanism
should be used to encrypt the version that is stored in the password database.
FreeBSD supports the DES, MD5, SHA256, SHA512, and Blowfish hash algorithms in its
.Fn crypt
library.
The default of SHA512 should not be changed to a less secure hashing algorithm, but can be changed to
the more secure Blowfish algorithm.
.Pp
Blowfish is not part of AES and is not considered compliant with any Federal Information Processing
Standards (FIPS).
Its use may not be permitted in some environments.
.Pp
To determine which hash algorithm is used to encrypt a user's password, the
superuser can view the hash for the user in the FreeBSD password database.
Each hash starts with a symbol which indicates the type of hash mechanism used
to encrypt the password.
If DES is used, there is no beginning symbol.
For MD5, the symbol is
.Ql $
.
For SHA256 and SHA512, the symbol is
.Ql $6$
.
For Blowfish, the symbol is
.Ql $2a$
.
In this example, the password for
.Ql dru
is hashed using the default SHA512 algorithm as the hash starts with
.Ql $6$
.
Note that the encrypted hash, not the password itself, is stored in the
password database:
.Bd -literal -offset indent
# grep dru /etc/master.passwd
dru:$6$pzIjSvCAn.PBYQBA$PXpSeWPx3g5kscj3IMiM7tUEUSPmGexxta.8Lt9TGSi2lNQqYGKszsBPuGME0:1001:1001::0:0:dru:/usr/home/dru:/bin/csh
.Ed
.Pp
The hash mechanism is set in the user's login class.
For this example, the user is in the
.Ql default
login class and the hash algorithm is set with this line in
.Pa /etc/login.conf
:
.Bd -literal -offset indent
        :passwd_format=sha512:\
.Ed
.Pp
To change the algorithm to Blowfish, modify that line to look like this:
.Bd -literal -offset indent
        :passwd_format=blf:\
.Ed
.Pp
Then run
.Cm cap_mkdb /etc/login.conf
as described in .
Note that this change will not affect any existing password hashes.
This means that all passwords should be re-hashed by asking users to run
.Cm passwd
in order to change their password.
.Pp
For remote logins, two-factor authentication should be used.
An example of two-factor authentication is
.Do
something you have
.Dc
, such as a key, and
.Do
something you know
.Dc
, such as the passphrase for that key.
Since OpenSSH is part of the FreeBSD base system, all network logins should be over an
encrypted connection and use key-based authentication instead of passwords.
For more information, refer to .
Kerberos users may need to make additional changes to implement OpenSSH in their network.
These changes are described in .
.Ss PASSWORD POLICY ENFORCEMENT
.Pp
Enforcing a strong password policy for local accounts is a fundamental aspect
of system security.
In FreeBSD, password length, password strength, and password complexity can be
implemented using built-in Pluggable Authentication Modules (PAM).
.Pp
This section demonstrates how to configure the minimum and maximum password
length and the enforcement of mixed characters using the
.Pa pam_passwdqc.so
module.
This module is enforced when a user changes their password.
.Pp
To configure this module, become the superuser and uncomment the line
containing
.Ql pam_passwdqc.so
in
.Pa /etc/pam.d/passwd
.
Then, edit that line to match the password policy:
.Bd -literal -offset indent
password        requisite       pam_passwdqc.so         min=disabled,disabled,disabled,12,10 similar=deny retry=3 enforce=users
.Ed
.Pp
This example sets several requirements for new passwords.
The
.Ql min
setting controls the minimum password length.
It has five values because this module defines five different types of
passwords based on their complexity.
Complexity is defined by the type of characters that must exist in a password,
such as letters, numbers, symbols, and case.
The types of passwords are described in
.Xr pam_passwdqc 8 .
In this example, the first three types of passwords are disabled, meaning that
passwords that meet those complexity requirements will not be accepted,
regardless of their length.
The
.Ql 12
sets a minimum password policy of at least twelve characters, if the password
also contains characters with three types of complexity.
The
.Ql 10
sets the password policy to also allow passwords of at least ten characters, if
the password contains characters with four types of complexity.
.Pp
The
.Ql similar
setting denies passwords that are similar to the user's previous password.
The
.Ql retry
setting provides a user with three opportunities to enter a new password.
.Pp
Once this file is saved, a user changing their password will see a message
similar to the following:
.Bd -literal -offset indent
% passwd
Changing local password for trhodes
Old Password:

You can now choose the new password.
A valid password should be a mix of upper and lower case letters,
digits and other characters.  You can use a 12 character long
password with characters from at least 3 of these 4 classes, or
a 10 character long password containing characters from all the
classes.  Characters that form a common pattern are discarded by
the check.
Alternatively, if no one else can see your terminal now, you can
pick this as your password: "trait-useful&knob".
Enter new password:
.Ed
.Pp
If a password that does not match the policy is entered, it will be rejected
with a warning and the user will have an opportunity to try again, up to the
configured number of retries.
.Pp
Most password policies require passwords to expire after so many days.
To set a password age time in FreeBSD, set
.Ar passwordtime
for the user's login class in
.Pa /etc/login.conf
.
The
.Ql default
login class contains an example:
.Bd -literal -offset indent
#       :passwordtime=90d:\
.Ed
.Pp
So, to set an expiry of 90 days for this login class, remove the comment symbol
(
.Ql #
), save the edit, and run
.Cm cap_mkdb /etc/login.conf
.
.Pp
To set the expiration on individual users, pass an expiration date or the
number of days to expiry and a username to
.Cm pw
:
.Bd -literal -offset indent
# pw usermod -p 30-apr-2015 -n trhodes
.Ed
.Pp
As seen here, an expiration date is set in the form of day, month, and year.
For more information, see
.Xr pw 8 .
.Ss DETECTING ROOTKITS
.Pp
A
.Ql rootkit
is any unauthorized software that attempts to gain
.Ql root
access to a system.
Once installed, this malicious software will normally open up another avenue of
entry for an attacker.
Realistically, once a system has been compromised by a rootkit and an
investigation has been performed, the system should be reinstalled from
scratch.
There is tremendous risk that even the most prudent security or systems
engineer will miss something an attacker left behind.
.Pp
A rootkit does do one thing useful for administrators: once detected, it is a
sign that a compromise happened at some point.
But, these types of applications tend to be very well hidden.
This section demonstrates a tool that can be used to detect rootkits,
.Ql security/rkhunter
.
.Pp
After installation of this package or port, the system may be checked using the
following command.
It will produce a lot of information and will require some manual pressing of ENTER:
.Bd -literal -offset indent
# rkhunter -c
.Ed
.Pp
After the process completes, a status message will be printed to the screen.
This message will include the amount of files checked, suspect files, possible
rootkits, and more.
During the check, some generic security warnings may be produced about hidden
files, the OpenSSH protocol selection, and known vulnerable versions of installed software.
These can be handled now or after a more detailed analysis has been performed.
.Pp
Every administrator should know what is running on the systems they are
responsible for.
Third-party tools like rkhunter and
.Ql sysutils/lsof
, and native commands such as
.Cm netstat
and
.Cm ps
, can show a great deal of information on the system.
Take notes on what is normal, ask questions when something seems out of place,
and be paranoid.
While preventing a compromise is ideal, detecting a compromise is a must.
.Ss BINARY VERIFICATION
.Pp
Verification of system files and binaries is important because it provides the
system administration and security teams information about system changes.
A software application that monitors the system for changes is called an
Intrusion Detection System (IDS).
.Pp
FreeBSD provides native support for a basic IDS system.
While the nightly security emails will notify an administrator of changes, the
information is stored locally and there is a chance that a malicious user could
modify this information in order to hide their changes to the system.
As such, it is recommended to create a separate set of binary signatures and
store them on a read-only, root-owned directory or, preferably, on a removable USB disk or remote rsync server.
.Pp
The built-in
.Cm mtree
utility can be used to generate a specification of the contents of a directory.
A seed, or a numeric constant, is used to generate the specification and is
required to check that the specification has not changed.
This makes it possible to determine if a file or binary has been modified.
Since the seed value is unknown by an attacker, faking or checking the checksum
values of files will be difficult to impossible.
The following example generates a set of SHA256 hashes, one for each system binary in
.Pa /bin
, and saves those values to a hidden file in
.Ql root
's home directory,
.Pa /root/.bin_chksum_mtree
:
.Bd -literal -offset indent
# mtree -s 3483151339707503 -c -K cksum,sha256digest -p /bin > /root/.bin_chksum_mtree
# mtree: /bin checksum: 3427012225
.Ed
.Pp
The 3483151339707503 represents the seed.
This value should be remembered, but not shared.
.Pp
Viewing
.Pa /root/.bin_cksum_mtree
should yield output similar to the following:
.Bd -literal -offset indent
#          user: root
#       machine: dreadnaught
#          tree: /bin
#          date: Mon Feb  3 10:19:53 2014

# .
/set type=file uid=0 gid=0 mode=0555 nlink=1 flags=none
.               type=dir mode=0755 nlink=2 size=1024 \
                time=1380277977.000000000
    \133        nlink=2 size=11704 time=1380277977.000000000 \
                cksum=484492447 \
                sha256digest=6207490fbdb5ed1904441fbfa941279055c3e24d3a4049aeb45094596400662a
    cat         size=12096 time=1380277975.000000000 cksum=3909216944 \
                sha256digest=65ea347b9418760b247ab10244f47a7ca2a569c9836d77f074e7a306900c1e69
    chflags     size=8168 time=1380277975.000000000 cksum=3949425175 \
                sha256digest=c99eb6fc1c92cac335c08be004a0a5b4c24a0c0ef3712017b12c89a978b2dac3
    chio        size=18520 time=1380277975.000000000 cksum=2208263309 \
                sha256digest=ddf7c8cb92a58750a675328345560d8cc7fe14fb3ccd3690c34954cbe69fc964
    chmod       size=8640 time=1380277975.000000000 cksum=2214429708 \
                sha256digest=a435972263bf814ad8df082c0752aa2a7bdd8b74ff01431ccbd52ed1e490bbe7
.Ed
.Pp
The machine's hostname, the date and time the specification was created, and
the name of the user who created the specification are included in this report.
There is a checksum, size, time, and SHA256 digest for each binary in the directory.
.Pp
To verify that the binary signatures have not changed, compare the current
contents of the directory to the previously generated specification, and save
the results to a file.
This command requires the seed that was used to generate the original
specification:
.Bd -literal -offset indent
# mtree -s 3483151339707503 -p /bin < /root/.bin_chksum_mtree >> /root/.bin_chksum_output
# mtree: /bin checksum: 3427012225
.Ed
.Pp
This should produce the same checksum for
.Pa /bin
that was produced when the specification was created.
If no changes have occurred to the binaries in this directory, the
.Pa /root/.bin_chksum_output
output file will be empty.
To simulate a change, change the date on
.Pa /bin/cat
using
.Cm touch
and run the verification command again:
.Bd -literal -offset indent
# touch /bin/cat
# mtree -s 3483151339707503 -p /bin < /root/.bin_chksum_mtree >> /root/.bin_chksum_output
# more /root/.bin_chksum_output
cat changed
	modification time expected Fri Sep 27 06:32:55 2013 found Mon Feb  3 10:28:43 2014
.Ed
.Pp
It is recommended to create specifications for the directories which contain
binaries and configuration files, as well as any directories containing
sensitive data.
Typically, specifications are created for
.Pa /bin
,
.Pa /sbin
,
.Pa /usr/bin
,
.Pa /usr/sbin
,
.Pa /usr/local/bin
,
.Pa /etc
, and
.Pa /usr/local/etc
.
.Pp
More advanced IDS systems exist, such as
.Ql security/aide
.
In most cases,
.Cm mtree
provides the functionality administrators need.
It is important to keep the seed value and the checksum output hidden from
malicious users.
More information about
.Cm mtree
can be found in
.Xr mtree 8 .
.Ss SYSTEM TUNING FOR SECURITY
.Pp
In FreeBSD, many system features can be tuned using
.Cm sysctl
.
A few of the security features which can be tuned to prevent Denial of Service
(DoS) attacks will be covered in this section.
More information about using
.Cm sysctl
, including how to temporarily change values and how to make the changes
permanent after testing, can be found in .
.Pp
Any time a setting is changed with
.Cm sysctl
, the chance to cause undesired harm is increased, affecting the availability
of the system.
All changes should be monitored and, if possible, tried on a testing system
before being used on a production system.
.Pp
By default, the FreeBSD kernel boots with a security level of
.Ql -1
.
This is called
.Do
insecure mode
.Dc
because immutable file flags may be turned off and all devices may be read from
or written to.
The security level will remain at
.Ql -1
unless it is altered through
.Cm sysctl
or by a setting in the startup scripts.
The security level may be increased during system startup by setting
.Ev kern_securelevel_enable
to
.Ql YES
in
.Pa /etc/rc.conf
, and the value of
.Ev kern_securelevel
to the desired security level.
See
.Xr security 7 and
.Xr init 8 for more information on these settings and the available security levels.
.Pp
Increasing the
.Ev securelevel
can break Xorg and cause other issues.
Be prepared to do some debugging.
.Pp
The
.Ev net.inet.tcp.blackhole
and
.Ev net.inet.udp.blackhole
settings can be used to drop incoming SYN packets on closed ports without sending a return RST response.
The default behavior is to return an RST to show a port is closed.
Changing the default provides some level of protection against ports scans,
which are used to determine which applications are running on a system.
Set
.Ev net.inet.tcp.blackhole
to
.Ql 2
and
.Ev net.inet.udp.blackhole
to
.Ql 1
.
Refer to
.Xr blackhole 4 for more information about these settings.
.Pp
The
.Ev net.inet.icmp.drop_redirect
and
.Ev net.inet.ip.redirect
settings help prevent against
.Ql redirect attacks
.
A redirect attack is a type of DoS which sends mass numbers of ICMP type 5 packets.
Since these packets are not required, set
.Ev net.inet.icmp.drop_redirect
to
.Ql 1
and set
.Ev net.inet.ip.redirect
to
.Ql 0
.
.Pp
Source routing is a method for detecting and accessing non-routable addresses
on the internal network.
This should be disabled as non-routable addresses are normally not routable on
purpose.
To disable this feature, set
.Ev net.inet.ip.sourceroute
and
.Ev net.inet.ip.accept_sourceroute
to
.Ql 0
.
.Pp
When a machine on the network needs to send messages to all hosts on a subnet,
an ICMP echo request message is sent to the broadcast address.
However, there is no reason for an external host to perform such an action.
To reject all external broadcast requests, set
.Ev net.inet.icmp.bmcastecho
to
.Ql 0
.
.Pp
Some additional settings are documented in
.Xr security 7 .
.Ss ONE-TIME PASSWORDS
.Pp
By default, FreeBSD includes support for One-time Passwords In Everything (OPIE).
 OPIE is designed to prevent replay attacks, in which an attacker discovers a user's
password and uses it to access a system.
Since a password is only used once in OPIE, a discovered password is of little use to an attacker.
 OPIE uses a secure hash and a challenge/response system to manage passwords.
The FreeBSD implementation uses the MD5 hash by default.
.Pp
OPIE uses three different types of passwords.
The first is the usual UNIX or Kerberos password.
The second is the one-time password which is generated by
.Cm opiekey
.
The third type of password is the
.Do
secret password
.Dc
which is used to generate one-time passwords.
The secret password has nothing to do with, and should be different from, the UNIX password.
.Pp
There are two other pieces of data that are important to OPIE.
One is the
.Do
seed
.Dc
or
.Do
key
.Dc
, consisting of two letters and five digits.
The other is the
.Do
iteration count
.Dc
, a number between 1 and 100.
 OPIE creates the one-time password by concatenating the seed and the secret
password, applying the MD5 hash as many times as specified by the iteration count, and turning the result
into six short English words which represent the one-time password.
The authentication system keeps track of the last one-time password used, and
the user is authenticated if the hash of the user-provided password is equal to
the previous password.
Because a one-way hash is used, it is impossible to generate future one-time
passwords if a successfully used password is captured.
The iteration count is decremented after each successful login to keep the user
and the login program in sync.
When the iteration count gets down to
.Ql 1
, OPIE must be reinitialized.
.Pp
There are a few programs involved in this process.
A one-time password, or a consecutive list of one-time passwords, is generated
by passing an iteration count, a seed, and a secret password to
.Xr opiekey 1 .
In addition to initializing OPIE,
.Xr opiepasswd 1 is used to change passwords, iteration counts, or seeds.
The relevant credential files in
.Pa /etc/opiekeys
are examined by
.Xr opieinfo 1 which prints out the invoking user's current iteration count and seed.
.Pp
This section describes four different sorts of operations.
The first is how to set up one-time-passwords for the first time over a secure
connection.
The second is how to use
.Cm opiepasswd
over an insecure connection.
The third is how to log in over an insecure connection.
The fourth is how to generate a number of keys which can be written down or
printed out to use at insecure locations.
.Ss INITIALIZING OPIE
.Pp
To initialize OPIE for the first time, run this command from a secure location:
.Bd -literal -offset indent
% opiepasswd -c
Adding unfurl:
Only use this method from the console; NEVER from remote. If you are using
telnet, xterm, or a dial-in, type ^C now or exit with no password.
Then run opiepasswd without the -c parameter.
Using MD5 to compute responses.
Enter new secret pass phrase:
Again new secret pass phrase:

ID unfurl OTP key is 499 to4268
MOS MALL GOAT ARM AVID COED
.Ed
.Pp
The
.Ar -c
sets console mode which assumes that the command is being run from a secure
location, such as a computer under the user's control or a SSH session to a computer under the user's control.
.Pp
When prompted, enter the secret password which will be used to generate the
one-time login keys.
This password should be difficult to guess and should be different than the
password which is associated with the user's login account.
It must be between 10 and 127 characters long.
Remember this password.
.Pp
The
.Ql ID
line lists the login name (
.Ql unfurl
), default iteration count (
.Ql 499
), and default seed (
.Ql to4268
).
When logging in, the system will remember these parameters and display them,
meaning that they do not have to be memorized.
The last line lists the generated one-time password which corresponds to those
parameters and the secret password.
At the next login, use this one-time password.
.Ss INSECURE CONNECTION INITIALIZATION
.Pp
To initialize or change the secret password on an insecure system, a secure
connection is needed to some place where
.Cm opiekey
can be run.
This might be a shell prompt on a trusted machine.
An iteration count is needed, where 100 is probably a good value, and the seed
can either be specified or the randomly-generated one used.
On the insecure connection, the machine being initialized, use
.Xr opiepasswd 1 :
.Bd -literal -offset indent
% opiepasswd

Updating unfurl:
You need the response from an OTP generator.
Old secret pass phrase:
	otp-md5 498 to4268 ext
	Response: GAME GAG WELT OUT DOWN CHAT
New secret pass phrase:
	otp-md5 499 to4269
	Response: LINE PAP MILK NELL BUOY TROY

ID mark OTP key is 499 gr4269
LINE PAP MILK NELL BUOY TROY
.Ed
.Pp
To accept the default seed, press Return.
Before entering an access password, move over to the secure connection and give
it the same parameters:
.Bd -literal -offset indent
% opiekey 498 to4268
Using the MD5 algorithm to compute response.
Reminder: Do not use opiekey from telnet or dial-in sessions.
Enter secret pass phrase:
GAME GAG WELT OUT DOWN CHAT
.Ed
.Pp
Switch back over to the insecure connection, and copy the generated one-time
password over to the relevant program.
.Ss GENERATING A SINGLE ONE-TIME PASSWORD
.Pp
After initializing OPIE and logging in, a prompt like this will be displayed:
.Bd -literal -offset indent
% telnet example.com
Trying 10.0.0.1...
Connected to example.com
Escape character is '^]'.

FreeBSD/i386 (example.com) (ttypa)

login: <username>
otp-md5 498 gr4269 ext
Password:
.Ed
.Pp
The OPIE prompts provides a useful feature.
If Return is pressed at the password prompt, the prompt will turn echo on and display
what is typed.
This can be useful when attempting to type in a password by hand from a
printout.
.Pp
At this point, generate the one-time password to answer this login prompt.
This must be done on a trusted system where it is safe to run
.Xr opiekey 1 .
There are versions of this command for Windows, Mac OS and FreeBSD.
This command needs the iteration count and the seed as command line options.
Use cut-and-paste from the login prompt on the machine being logged in to.
.Pp
On the trusted system:
.Bd -literal -offset indent
% opiekey 498 to4268
Using the MD5 algorithm to compute response.
Reminder: Do not use opiekey from telnet or dial-in sessions.
Enter secret pass phrase:
GAME GAG WELT OUT DOWN CHAT
.Ed
.Pp
Once the one-time password is generated, continue to log in.
.Ss GENERATING MULTIPLE ONE-TIME PASSWORDS
.Pp
Sometimes there is no access to a trusted machine or secure connection.
In this case, it is possible to use
.Xr opiekey 1 to generate a number of one-time passwords beforehand.
For example:
.Bd -literal -offset indent
% opiekey -n 5 30 zz99999
Using the MD5 algorithm to compute response.
Reminder: Do not use opiekey from telnet or dial-in sessions.
Enter secret pass phrase: <secret password>
26: JOAN BORE FOSS DES NAY QUIT
27: LATE BIAS SLAY FOLK MUCH TRIG
28: SALT TIN ANTI LOON NEAL USE
29: RIO ODIN GO BYE FURY TIC
30: GREW JIVE SAN GIRD BOIL PHI
.Ed
.Pp
The
.Ar -n 5
requests five keys in sequence, and
.Ar 30
specifies what the last iteration number should be.
Note that these are printed out in reverse order of use.
The really paranoid might want to write the results down by hand; otherwise,
print the list.
Each line shows both the iteration count and the one-time password.
Scratch off the passwords as they are used.
.Ss RESTRICTING USE OF UNIX PASSWORDS
.Pp
OPIE can restrict the use of UNIX passwords based on the IP address of a login session.
The relevant file is
.Pa /etc/opieaccess
, which is present by default.
Refer to
.Xr opieaccess 5 for more information on this file and which security considerations to be aware
of when using it.
.Pp
Here is a sample
.Pa opieaccess
:
.Bd -literal -offset indent
permit 192.168.0.0 255.255.0.0
.Ed
.Pp
This line allows users whose IP source address (which is vulnerable to
spoofing) matches the specified value and mask, to use UNIX passwords at any time.
.Pp
If no rules in
.Pa opieaccess
are matched, the default is to deny non-OPIE logins.
.Pp
TCP Wrapper is a host-based access control system which extends the abilities of .
It can be configured to provide logging support, return messages, and
connection restrictions for the server daemons under the control of inetd.
Refer to
.Xr tcpd 8 for more information about TCP Wrapper and its features.
.Pp
TCP Wrapper should not be considered a replacement for a properly configured firewall.
Instead, TCP Wrapper should be used in conjunction with a firewall and other security enhancements
in order to provide another layer of protection in the implementation of a
security policy.
.Ss INITIAL CONFIGURATION
.Pp
To enable TCP Wrapper in FreeBSD, add the following lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
inetd_enable="YES"
inetd_flags="-Ww"
.Ed
.Pp
Then, properly configure
.Pa /etc/hosts.allow
.
.Pp
Unlike other implementations of TCP Wrapper, the use of
.Pa hosts.deny
is deprecated in FreeBSD.
All configuration options should be placed in
.Pa /etc/hosts.allow
.
.Pp
In the simplest configuration, daemon connection policies are set to either
permit or block, depending on the options in
.Pa /etc/hosts.allow
.
The default configuration in FreeBSD is to allow all connections to the daemons
started with inetd.
.Pp
Basic configuration usually takes the form of
.Ql daemon : address : action
, where
.Ql daemon
is the daemon which inetd started,
.Ql address
is a valid hostname, IP address, or an IPv6 address enclosed in brackets ([ ]), and
.Ql action
is either
.Ql allow
or
.Ql deny
.
 TCP Wrapper uses a first rule match semantic, meaning that the configuration file is
scanned from the beginning for a matching rule.
When a match is found, the rule is applied and the search process stops.
.Pp
For example, to allow POP3 connections via the
.Ql mail/qpopper
daemon, the following lines should be appended to
.Pa hosts.allow
:
.Bd -literal -offset indent
# This line is required for POP3 connections:
qpopper : ALL : allow
.Ed
.Pp
Whenever this file is edited, restart inetd:
.Bd -literal -offset indent
# service inetd restart
.Ed
.Ss ADVANCED CONFIGURATION
.Pp
TCP Wrapper provides advanced options to allow more control over the way connections are
handled.
In some cases, it may be appropriate to return a comment to certain hosts or
daemon connections.
In other cases, a log entry should be recorded or an email sent to the
administrator.
Other situations may require the use of a service for local connections only.
This is all possible through the use of configuration options known as
wildcards, expansion characters, and external command execution.
.Pp
Suppose that a situation occurs where a connection should be denied yet a
reason should be sent to the host who attempted to establish that connection.
That action is possible with
.Ar twist
.
When a connection attempt is made,
.Ar twist
executes a shell command or script.
An example exists in
.Pa hosts.allow
:
.Bd -literal -offset indent
# The rest of the daemons are protected.
ALL : ALL \
	: severity auth.info \
	: twist /bin/echo "You are not welcome to use %d from %h."
.Ed
.Pp
In this example, the message
.Do
You are not allowed to use daemon name from hostname.
.Dc
will be returned for any daemon not configured in
.Pa hosts.allow
.
This is useful for sending a reply back to the connection initiator right after
the established connection is dropped.
Any message returned must be wrapped in quote (
.Ql "
) characters.
.Pp
It may be possible to launch a denial of service attack on the server if an
attacker floods these daemons with connection requests.
.Pp
Another possibility is to use
.Ar spawn
.
Like
.Ar twist
,
.Ar spawn
implicitly denies the connection and may be used to run external shell commands
or scripts.
Unlike
.Ar twist
,
.Ar spawn
will not send a reply back to the host who established the connection.
For example, consider the following configuration:
.Bd -literal -offset indent
# We do not allow connections from example.com:
ALL : .example.com \
	: spawn (/bin/echo %a from %h attempted to access %d >> \
	  /var/log/connections.log) \
	: deny
.Ed
.Pp
This will deny all connection attempts from
.Ql *.example.com
and log the hostname, IP address, and the daemon to which access was attempted to
.Pa /var/log/connections.log
.
This example uses the substitution characters
.Ql %a
and
.Ql %h
.
Refer to
.Xr hosts_access 5 for the complete list.
.Pp
To match every instance of a daemon, domain, or IP address, use
.Ql ALL
.
Another wildcard is
.Ql PARANOID
which may be used to match any host which provides an IP address that may be forged because the IP address differs from its resolved hostname.
In this example, all connection requests to Sendmail which have an IP address that varies from its hostname will be denied:
.Bd -literal -offset indent
# Block possibly spoofed requests to sendmail:
sendmail : PARANOID : deny
.Ed
.Pp
Using the
.Ql PARANOID
wildcard will result in denied connections if the client or server has a broken DNS setup.
.Pp
To learn more about wildcards and their associated functionality, refer to
.Xr hosts_access 5 .
.Pp
When adding new configuration lines, make sure that any unneeded entries for
that daemon are commented out in
.Pa hosts.allow
.
.Pp
Kerberos is a network authentication protocol which was originally created by the
Massachusetts Institute of Technology (MIT) as a way to securely provide authentication across a potentially hostile
network.
The Kerberos protocol uses strong cryptography so that both a client and server can prove
their identity without sending any unencrypted secrets over the network.
 Kerberos can be described as an identity-verifying proxy system and as a trusted
third-party authentication system.
After a user authenticates with Kerberos, their communications can be encrypted to assure privacy and data integrity.
.Pp
The only function of Kerberos is to provide the secure authentication of users and servers on the network.
It does not provide authorization or auditing functions.
It is recommended that Kerberos be used with other security methods which provide authorization and audit
services.
.Pp
The current version of the protocol is version 5, described in RFC4120.
Several free implementations of this protocol are available, covering a wide
range of operating systems.
 MIT continues to develop their Kerberos package.
It is commonly used in the US as a cryptography product, and has historically been subject to US export regulations.
In FreeBSD, MIT  Kerberos is available as the
.Ql security/krb5
package or port.
The Heimdal Kerberos implementation was explicitly developed outside of the US to avoid export regulations.
The Heimdal Kerberos distribution is included in the base FreeBSD installation, and another
distribution with more configurable options is available as
.Ql security/heimdal
in the Ports Collection.
.Pp
In Kerberos users and services are identified as
.Do
principals
.Dc
which are contained within an administrative grouping, called a
.Do
realm
.Dc
.
A typical user principal would be of the form
.Ql user@REALM
(realms are traditionally uppercase).
.Pp
This section provides a guide on how to set up Kerberos using the Heimdal distribution included in FreeBSD.
.Pp
For purposes of demonstrating a Kerberos installation, the name spaces will be as follows:
.Bl -bullet -offset -compact
.It
The DNS domain (zone) will be
.Ql example.org
.
.It
The Kerberos realm will be
.Ql EXAMPLE.ORG
.
.El
.Pp
Use real domain names when setting up Kerberos, even if it will run internally.
This avoids DNS problems and assures inter-operation with other Kerberos realms.
.Ss SETTING UP A HEIMDAL KDC
.Pp
The Key Distribution Center (KDC) is the centralized authentication service that Kerberos provides, the
.Do
trusted third party
.Dc
of the system.
It is the computer that issues Kerberos tickets, which are used for clients to authenticate to servers.
Because the KDC is considered trusted by all other computers in the Kerberos realm, it has heightened security concerns.
Direct access to the KDC should be limited.
.Pp
While running a KDC requires few computing resources, a dedicated machine acting only as a KDC is recommended for security reasons.
.Pp
To begin setting up a KDC, add these lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
kdc_enable="YES"
kadmind_enable="YES"
.Ed
.Pp
Next, edit
.Pa /etc/krb5.conf
as follows:
.Bd -literal -offset indent
[libdefaults]
    default_realm = EXAMPLE.ORG
[realms]
    EXAMPLE.ORG = {
	kdc = kerberos.example.org
	admin_server = kerberos.example.org
    }
[domain_realm]
    .example.org = EXAMPLE.ORG
.Ed
.Pp
In this example, the KDC will use the fully-qualified hostname
.Ql kerberos.example.org
.
The hostname of the KDC must be resolvable in the DNS.
.Pp
Kerberos can also use the DNS to locate KDCs, instead of a
.Ql [realms]
section in
.Pa /etc/krb5.conf
.
For large organizations that have their own DNS servers, the above example could be trimmed to:
.Bd -literal -offset indent
[libdefaults]
      default_realm = EXAMPLE.ORG
[domain_realm]
    .example.org = EXAMPLE.ORG
.Ed
.Pp
With the following lines being included in the
.Ql example.org
zone file:
.Bd -literal -offset indent
_kerberos._udp      IN  SRV     01 00 88 kerberos.example.org.
_kerberos._tcp      IN  SRV     01 00 88 kerberos.example.org.
_kpasswd._udp       IN  SRV     01 00 464 kerberos.example.org.
_kerberos-adm._tcp  IN  SRV     01 00 749 kerberos.example.org.
_kerberos           IN  TXT     EXAMPLE.ORG
.Ed
.Pp
In order for clients to be able to find the Kerberos services, they must have either a fully configured
.Pa /etc/krb5.conf
or a minimally configured
.Pa /etc/krb5.conf
and a properly configured DNS server.
.Pp
Next, create the Kerberos database which contains the keys of all principals (users and hosts) encrypted
with a master password.
It is not required to remember this password as it will be stored in
.Pa /var/heimdal/m-key
; it would be reasonable to use a 45-character random password for this
purpose.
To create the master key, run
.Cm kstash
and enter a password:
.Bd -literal -offset indent
# kstash
Master key: xxxxxxxxxxxxxxxxxxxxxxx
Verifying password - Master key: xxxxxxxxxxxxxxxxxxxxxxx
.Ed
.Pp
Once the master key has been created, the database should be initialized.
The Kerberos administrative tool
.Xr kadmin 8 can be used on the KDC in a mode that operates directly on the database,
without using the
.Xr kadmind 8 network service, as
.Cm kadmin -l
.
This resolves the chicken-and-egg problem of trying to connect to the database
before it is created.
At the
.Cm kadmin
prompt, use
.Cm init
to create the realm's initial database:
.Bd -literal -offset indent
# kadmin -l
kadmin> init EXAMPLE.ORG
Realm max ticket life [unlimited]:
.Ed
.Pp
Lastly, while still in
.Cm kadmin
, create the first principal using
.Cm add
.
Stick to the default options for the principal for now, as these can be changed
later with
.Cm modify
.
Type
.Ql ?
at the prompt to see the available options.
.Bd -literal -offset indent
kadmin> add tillman
Max ticket life [unlimited]:
Max renewable life [unlimited]:
Attributes []:
Password: xxxxxxxx
Verifying password - Password: xxxxxxxx
.Ed
.Pp
Next, start the KDC services by running
.Cm service kdc start
and
.Cm service kadmind start
.
While there will not be any kerberized daemons running at this point, it is
possible to confirm that the KDC is functioning by obtaining a ticket for the principal that was just created:
.Bd -literal -offset indent
% kinit tillman
tillman@EXAMPLE.ORG's Password:
.Ed
.Pp
Confirm that a ticket was successfully obtained using
.Cm klist
:
.Bd -literal -offset indent
% klist
Credentials cache: FILE:/tmp/krb5cc_1001
	Principal: tillman@EXAMPLE.ORG

  Issued                Expires               Principal
Aug 27 15:37:58 2013  Aug 28 01:37:58 2013  krbtgt/EXAMPLE.ORG@EXAMPLE.ORG
.Ed
.Pp
The temporary ticket can be destroyed when the test is finished:
.Bd -literal -offset indent
% kdestroy
.Ed
.Ss CONFIGURING A SERVER TO USE KERBEROS
.Pp
The first step in configuring a server to use Kerberos authentication is to ensure that it has the correct configuration in
.Pa /etc/krb5.conf
.
The version from the KDC can be used as-is, or it can be regenerated on the new system.
.Pp
Next, create
.Pa /etc/krb5.keytab
on the server.
This is the main part of
.Do
Kerberizing
.Dc
a service — it corresponds to generating a secret shared between the service
and the KDC.
The secret is a cryptographic key, stored in a
.Do
keytab
.Dc
.
The keytab contains the server's host key, which allows it and the KDC to verify each others' identity.
It must be transmitted to the server in a secure fashion, as the security of
the server can be broken if the key is made public.
Typically, the
.Pa keytab
is generated on an administrator's trusted machine using
.Cm kadmin
, then securely transferred to the server, e.g., with
.Xr scp 1 ; it can also be created directly on the server if that is consistent with the
desired security policy.
It is very important that the keytab is transmitted to the server in a secure
fashion: if the key is known by some other party, that party can impersonate
any user to the server!
Using
.Cm kadmin
on the server directly is convenient, because the entry for the host principal
in the KDC database is also created using
.Cm kadmin
.
.Pp
Of course,
.Cm kadmin
is a kerberized service; a Kerberos ticket is needed to authenticate to the network service, but to ensure that the
user running
.Cm kadmin
is actually present (and their session has not been hijacked),
.Cm kadmin
will prompt for the password to get a fresh ticket.
The principal authenticating to the kadmin service must be permitted to use the
.Cm kadmin
interface, as specified in
.Pa kadmind.acl
.
See the section titled
.Do
Remote administration
.Dc
in
.Cm info heimdal
for details on designing access control lists.
Instead of enabling remote
.Cm kadmin
access, the administrator could securely connect to the KDC via the local console or
.Xr ssh 1 , and perform administration locally using
.Cm kadmin -l
.
.Pp
After installing
.Pa /etc/krb5.conf
, use
.Cm add --random-key
in
.Cm kadmin
.
This adds the server's host principal to the database, but does not extract a
copy of the host principal key to a keytab.
To generate the keytab, use
.Cm ext
to extract the server's host principal key to its own keytab:
.Bd -literal -offset indent
# kadmin
kadmin> add --random-key host/myserver.example.org
Max ticket life [unlimited]:
Max renewable life [unlimited]:
Principal expiration time [never]:
Password expiration time [never]:
Attributes []:
kadmin> ext_keytab host/myserver.example.org
kadmin> exit
.Ed
.Pp
Note that
.Cm ext_keytab
stores the extracted key in
.Pa /etc/krb5.keytab
by default.
This is good when being run on the server being kerberized, but the
.Cm --keytab path/to/file
argument should be used when the keytab is being extracted elsewhere:
.Bd -literal -offset indent
# kadmin
kadmin> ext_keytab --keytab=/tmp/example.keytab host/myserver.example.org
kadmin> exit
.Ed
.Pp
The keytab can then be securely copied to the server using
.Xr scp 1 or a removable media.
Be sure to specify a non-default keytab name to avoid inserting unneeded keys
into the system's keytab.
.Pp
At this point, the server can read encrypted messages from the KDC using its shared key, stored in
.Pa krb5.keytab
.
It is now ready for the Kerberos-using services to be enabled.
One of the most common such services is
.Xr sshd 8 , which supports Kerberos via the GSS-API.
In
.Pa /etc/ssh/sshd_config
, add the line:
.Bd -literal -offset indent
GSSAPIAuthentication yes
.Ed
.Pp
After making this change,
.Xr sshd 8 must be restarted for the new configuration to take effect:
.Cm service sshd restart
.
.Ss CONFIGURING A CLIENT TO USE KERBEROS
.Pp
As it was for the server, the client requires configuration in
.Pa /etc/krb5.conf
.
Copy the file in place (securely) or re-enter it as needed.
.Pp
Test the client by using
.Cm kinit
,
.Cm klist
, and
.Cm kdestroy
from the client to obtain, show, and then delete a ticket for an existing
principal.
 Kerberos applications should also be able to connect to Kerberos enabled servers.
If that does not work but obtaining a ticket does, the problem is likely with
the server and not with the client or the KDC.
In the case of kerberized
.Xr ssh 1 , GSS-API is disabled by default, so test using
.Cm ssh -o GSSAPIAuthentication=yes hostname
.
.Pp
When testing a Kerberized application, try using a packet sniffer such as
.Cm tcpdump
to confirm that no sensitive information is sent in the clear.
.Pp
Various Kerberos client applications are available.
With the advent of a bridge so that applications using SASL for authentication can use GSS-API mechanisms as well, large classes of client applications can use Kerberos for authentication, from Jabber clients to IMAP clients.
.Pp
Users within a realm typically have their Kerberos principal mapped to a local user account.
Occasionally, one needs to grant access to a local user account to someone who
does not have a matching Kerberos principal.
For example,
.Ql tillman@EXAMPLE.ORG
may need access to the local user account
.Ql webdevelopers
.
Other principals may also need access to that local account.
.Pp
The
.Pa .k5login
and
.Pa .k5users
files, placed in a user's home directory, can be used to solve this problem.
For example, if the following
.Pa .k5login
is placed in the home directory of
.Ql webdevelopers
, both principals listed will have access to that account without requiring a
shared password:
.Bd -literal -offset indent
tillman@example.org
jdoe@example.org
.Ed
.Pp
Refer to
.Xr ksu 1 for more information about
.Pa .k5users
.
.Ss MIT DIFFERENCES
.Pp
The major difference between the MIT and Heimdal implementations is that
.Cm kadmin
has a different, but equivalent, set of commands and uses a different protocol.
If the KDC is MIT, the Heimdal version of
.Cm kadmin
cannot be used to administer the KDC remotely, and vice versa.
.Pp
Client applications may also use slightly different command line options to
accomplish the same tasks.
Following the instructions at http://web.mit.edu/Kerberos/www/ is recommended.
Be careful of path issues: the MIT port installs into
.Pa /usr/local/
by default, and the FreeBSD system applications run instead of the MIT versions if
.Ev PATH
lists the system directories first.
.Pp
When using MIT Kerberos as a KDC on FreeBSD, the following edits should also be made to
.Pa rc.conf
:
.Bd -literal -offset indent
kerberos5_server="/usr/local/sbin/krb5kdc"
kadmind5_server="/usr/local/sbin/kadmind"
kerberos5_server_flags=""
kerberos5_server_enable="YES"
kadmind5_server_enable="YES"
.Ed
.Ss KERBEROS TIPS, TRICKS, AND TROUBLESHOOTING
.Pp
When configuring and troubleshooting Kerberos, keep the following points in mind:
.Bl -bullet -offset -compact
.It
When using either Heimdal or MIT  Kerberos from ports, ensure that the
.Ev PATH
lists the port's versions of the client applications before the system
versions.
.It
If all the computers in the realm do not have synchronized time settings,
authentication may fail.
 describes how to synchronize clocks using NTP.
.It
If the hostname is changed, the
.Ql host/
principal must be changed and the keytab updated.
This also applies to special keytab entries like the
.Ql HTTP/
principal used for Apache's
.Ql www/mod_auth_kerb
.
.It
All hosts in the realm must be both forward and reverse resolvable in DNS or, at a minimum, exist in
.Pa /etc/hosts
.
CNAMEs will work, but the A and PTR records must be correct and in place.
The error message for unresolvable hosts is not intuitive:
.Er Kerberos5 refuses authentication because Read req failed: Key table entry not
found
.
.It
Some operating systems that act as clients to the KDC do not set the permissions for
.Cm ksu
to be setuid
.Ql root
.
This means that
.Cm ksu
does not work.
This is a permissions problem, not a KDC error.
.It
With MIT  Kerberos, to allow a principal to have a ticket life longer than the default lifetime
of ten hours, use
.Cm modify_principal
at the
.Xr kadmin 8 prompt to change the
.Ql maxlife
of both the principal in question and the
.Ql krbtgt
principal.
The principal can then use
.Cm kinit -l
to request a ticket with a longer lifetime.
.It
When running a packet sniffer on the KDC to aid in troubleshooting while running
.Cm kinit
from a workstation, the Ticket Granting Ticket (TGT) is sent immediately, even before the password is typed.
This is because the Kerberos server freely transmits a TGT to any unauthorized request.
However, every TGT is encrypted in a key derived from the user's password.
When a user types their password, it is not sent to the KDC, it is instead used to decrypt the TGT that
.Cm kinit
already obtained.
If the decryption process results in a valid ticket with a valid time stamp,
the user has valid Kerberos credentials.
These credentials include a session key for establishing secure communications
with the Kerberos server in the future, as well as the actual TGT, which is encrypted with the Kerberos server's own key.
This second layer of encryption allows the Kerberos server to verify the authenticity of each TGT.
.It
Host principals can have a longer ticket lifetime.
If the user principal has a lifetime of a week but the host being connected to
has a lifetime of nine hours, the user cache will have an expired host
principal and the ticket cache will not work as expected.
.It
When setting up
.Pa krb5.dict
to prevent specific bad passwords from being used as described in
.Xr kadmind 8 , remember that it only applies to principals that have a password policy
assigned to them.
The format used in
.Pa krb5.dict
is one string per line.
Creating a symbolic link to
.Pa /usr/share/dict/words
might be useful.
.El
.Ss MITIGATING KERBEROS LIMITATIONS
.Pp
Since Kerberos is an all or nothing approach, every service enabled on the network must either
be modified to work with Kerberos or be otherwise secured against network attacks.
This is to prevent user credentials from being stolen and re-used.
An example is when Kerberos is enabled on all remote shells but the non-Kerberized POP3 mail server sends passwords in plain text.
.Pp
The KDC is a single point of failure.
By design, the KDC must be as secure as its master password database.
The KDC should have absolutely no other services running on it and should be physically
secure.
The danger is high because Kerberos stores all passwords encrypted with the same master key which is stored as a
file on the KDC.
.Pp
A compromised master key is not quite as bad as one might fear.
The master key is only used to encrypt the Kerberos database and as a seed for the random number generator.
As long as access to the KDC is secure, an attacker cannot do much with the master key.
.Pp
If the KDC is unavailable, network services are unusable as authentication cannot be
performed.
This can be alleviated with a single master KDC and one or more slaves, and with careful implementation of secondary or
fall-back authentication using PAM.
.Pp
Kerberos allows users, hosts and services to authenticate between themselves.
It does not have a mechanism to authenticate the KDC to the users, hosts, or services.
This means that a trojanned
.Cm kinit
could record all user names and passwords.
File system integrity checking tools like
.Ql security/tripwire
can alleviate this.
.Ss RESOURCES AND FURTHER INFORMATION
.Bl -bullet -offset -compact
.It
The Kerberos FAQ
.It
Designing an Authentication System: a Dialog in Four Scenes
.It
RFC 4120, The Kerberos Network Authentication Service (V5)
.It
MIT  Kerberos home page
.It
Heimdal Kerberos home page
.El
.Pp
OpenSSL is an open source implementation of the SSL and TLS protocols.
It provides an encryption transport layer on top of the normal communications
layer, allowing it to be intertwined with many network applications and
services.
.Pp
The version of OpenSSL included in FreeBSD supports the Secure Sockets Layer v2/v3 (SSLv2/SSLv3) and
Transport Layer Security v1 (TLSv1) network security protocols and can be used
as a general cryptographic library.
.Pp
OpenSSL is often used to encrypt authentication of mail clients and to secure web based
transactions such as credit card payments.
Some ports, such as
.Ql www/apache24
and
.Ql databases/postgresql91-server
, include a compile option for building with OpenSSL.
.Pp
FreeBSD provides two versions of OpenSSL: one in the base system and one in the Ports Collection.
Users can choose which version to use by default for other ports using the
following knobs:
.Bl -bullet -offset -compact
.It
WITH_OPENSSL_PORT: when set, the port will use OpenSSL from the
.Ql security/openssl
port, even if the version in the base system is up to date or newer.
.It
WITH_OPENSSL_BASE: when set, the port will compile against OpenSSL provided by the base system.
.El
.Pp
Another common use of OpenSSL is to provide certificates for use with software applications.
Certificates can be used to verify the credentials of a company or individual.
If a certificate has not been signed by an external
.Ql Certificate Authority
(CA), such as http://www.verisign.com, the application that uses the certificate will produce a warning.
There is a cost associated with obtaining a signed certificate and using a
signed certificate is not mandatory as certificates can be self-signed.
However, using an external authority will prevent warnings and can put users at
ease.
.Pp
This section demonstrates how to create and use certificates on a FreeBSD
system.
Refer to for an example of how to create a CA for signing one's own certificates.
.Pp
For more information about SSL, read the free OpenSSL Cookbook.
.Ss GENERATING CERTIFICATES
.Pp
To generate a certificate that will be signed by an external CA, issue the following command and input the information requested at the
prompts.
This input information will be written to the certificate.
At the
.Ql Common Name
prompt, input the fully qualified name for the system that will use the
certificate.
If this name does not match the server, the application verifying the
certificate will issue a warning to the user, rendering the verification
provided by the certificate as useless.
.Bd -literal -offset indent
# openssl req -new -nodes -out req.pem -keyout cert.key -sha256 -newkey rsa:2048
Generating a 2048 bit RSA private key
..................+++
.............................................................+++
writing new private key to 'cert.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:PA
Locality Name (eg, city) []:Pittsburgh
Organization Name (eg, company) [Internet Widgits Pty Ltd]:My Company
Organizational Unit Name (eg, section) []:Systems Administrator
Common Name (eg, YOUR name) []:localhost.example.org
Email Address []:trhodes@FreeBSD.org

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:Another Name
.Ed
.Pp
Other options, such as the expire time and alternate encryption algorithms, are
available when creating a certificate.
A complete list of options is described in
.Xr openssl 1 .
.Pp
This command will create two files in the current directory.
The certificate request,
.Pa req.pem
, can be sent to a CA who will validate the entered credentials, sign the request, and return the
signed certificate.
The second file,
.Pa cert.key
, is the private key for the certificate and should be stored in a secure
location.
If this falls in the hands of others, it can be used to impersonate the user or
the server.
.Pp
Alternately, if a signature from a CA is not required, a self-signed certificate can be created.
First, generate the RSA key:
.Bd -literal -offset indent
# openssl genrsa -rand -genkey -out cert.key 2048
0 semi-random bytes loaded
Generating RSA private key, 2048 bit long modulus
.............................................+++
.................................................................................................................+++
e is 65537 (0x10001)
.Ed
.Pp
Use this key to create a self-signed certificate.
Follow the usual prompts for creating a certificate:
.Bd -literal -offset indent
# openssl req -new -x509 -days 365 -key cert.key -out cert.crt -sha256
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:PA
Locality Name (eg, city) []:Pittsburgh
Organization Name (eg, company) [Internet Widgits Pty Ltd]:My Company
Organizational Unit Name (eg, section) []:Systems Administrator
Common Name (e.g. server FQDN or YOUR name) []:localhost.example.org
Email Address []:trhodes@FreeBSD.org
.Ed
.Pp
This will create two new files in the current directory: a private key file
.Pa cert.key
, and the certificate itself,
.Pa cert.crt
.
These should be placed in a directory, preferably under
.Pa /etc/ssl/
, which is readable only by
.Ql root
.
Permissions of
.Ql 0700
are appropriate for these files and can be set using
.Cm chmod
.
.Ss USING CERTIFICATES
.Pp
One use for a certificate is to encrypt connections to the Sendmail mail server in order to prevent the use of clear text authentication.
.Pp
Some mail clients will display an error if the user has not installed a local
copy of the certificate.
Refer to the documentation included with the software for more information on
certificate installation.
.Pp
In FreeBSD 10.0-RELEASE and above, it is possible to create a self-signed
certificate for Sendmail automatically.
To enable this, add the following lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
sendmail_enable="YES"
sendmail_cert_create="YES"
sendmail_cert_cn="localhost.example.org"
.Ed
.Pp
This will automatically create a self-signed certificate,
.Pa /etc/mail/certs/host.cert
, a signing key,
.Pa /etc/mail/certs/host.key
, and a CA certificate,
.Pa /etc/mail/certs/cacert.pem
.
The certificate will use the
.Ql Common Name
specified in
.Ar sendmail_cert_cn
.
After saving the edits, restart Sendmail:
.Bd -literal -offset indent
# service sendmail restart
.Ed
.Pp
If all went well, there will be no error messages in
.Pa /var/log/maillog
.
For a simple test, connect to the mail server's listening port using
.Cm telnet
:
.Bd -literal -offset indent
# telnet example.com 25
Trying 192.0.34.166...
Connected to example.com.
Escape character is '^]'.
220 example.com ESMTP Sendmail 8.14.7/8.14.7; Fri, 18 Apr 2014 11:50:32 -0400 (EDT)
ehlo example.com
250-example.com Hello example.com [192.0.34.166], pleased to meet you
250-ENHANCEDSTATUSCODES
250-PIPELINING
250-8BITMIME
250-SIZE
250-DSN
250-ETRN
250-AUTH LOGIN PLAIN
250-STARTTLS
250-DELIVERBY
250 HELP
quit
221 2.0.0 example.com closing connection
Connection closed by foreign host.
.Ed
.Pp
If the
.Ql STARTTLS
line appears in the output, everything is working correctly.
.Pp
Internet Protocol Security (IPsec) is a set of protocols which sit on top of the Internet Protocol (IP) layer.
It allows two or more hosts to communicate in a secure manner by authenticating
and encrypting each IP packet of a communication session.
The FreeBSD IPsec network stack is based on the http://www.kame.net/ implementation and supports both IPv4 and IPv6 sessions.
.Pp
IPsec is comprised of the following sub-protocols:
.Bl -bullet -offset -compact
.It
Encapsulated Security Payload (ESP): this protocol protects the IP packet data from third party interference by encrypting the contents using
symmetric cryptography algorithms such as Blowfish and 3DES.
.It
Authentication Header (AH): this protocol protects the IP packet header from third party interference and spoofing by computing a
cryptographic checksum and hashing the IP packet header fields with a secure hashing function.
This is then followed by an additional header that contains the hash, to allow
the information in the packet to be authenticated.
.It
IP Payload Compression Protocol (IPComp): this protocol tries to increase communication performance by compressing the IP payload in order to reduce the amount of data sent.
.El
.Pp
These protocols can either be used together or separately, depending on the
environment.
.Pp
IPsec supports two modes of operation.
The first mode,
.Ql Transport Mode
, protects communications between two hosts.
The second mode,
.Ql Tunnel Mode
, is used to build virtual tunnels, commonly known as Virtual Private Networks
(VPNs).
Consult
.Xr ipsec 4 for detailed information on the IPsec subsystem in FreeBSD.
.Pp
IPsec support is enabled by default on FreeBSD 11 and later.
For previous versions of FreeBSD, add these options to a custom kernel
configuration file and rebuild the kernel using the instructions in :
.Bd -literal -offset indent
options   IPSEC        #IP security
device    crypto
.Ed
.Pp
If IPsec debugging support is desired, the following kernel option should also be added:
.Bd -literal -offset indent
options   IPSEC_DEBUG  #debug for IP security
.Ed
.Pp
This rest of this chapter demonstrates the process of setting up an IPsec  VPN between a home network and a corporate network.
In the example scenario:
.Bl -bullet -offset -compact
.It
Both sites are connected to the Internet through a gateway that is running
FreeBSD.
.It
The gateway on each network has at least one external IP address.
In this example, the corporate LAN's external IP address is
.Ql 172.16.5.4
and the home LAN's external IP address is
.Ql 192.168.1.12
.
.It
The internal addresses of the two networks can be either public or private IP addresses.
However, the address space must not collide.
For example, both networks cannot use
.Ql 192.168.1.x
.
In this example, the corporate LAN's internal IP address is
.Ql 10.246.38.1
and the home LAN's internal IP address is
.Ql 10.0.0.5
.
.El
.Pp
To begin,
.Ql security/ipsec-tools
must be installed from the Ports Collection.
This software provides a number of applications which support the
configuration.
.Pp
The next requirement is to create two
.Xr gif 4 pseudo-devices which will be used to tunnel packets and allow both networks to
communicate properly.
As
.Ql root
, run the following commands, replacing internal and external with the real IP addresses of the internal and external interfaces of the two
gateways:
.Bd -literal -offset indent
# ifconfig gif0 create
# ifconfig gif0 internal1 internal2
# ifconfig gif0 tunnel external1 external2
.Ed
.Pp
Verify the setup on each gateway, using
.Cm ifconfig
.
Here is the output from Gateway 1:
.Bd -literal -offset indent
gif0: flags=8051 mtu 1280
tunnel inet 172.16.5.4 --> 192.168.1.12
inet6 fe80::2e0:81ff:fe02:5881%gif0 prefixlen 64 scopeid 0x6
inet 10.246.38.1 --> 10.0.0.5 netmask 0xffffff00
.Ed
.Pp
Here is the output from Gateway 2:
.Bd -literal -offset indent
gif0: flags=8051 mtu 1280
tunnel inet 192.168.1.12 --> 172.16.5.4
inet 10.0.0.5 --> 10.246.38.1 netmask 0xffffff00
inet6 fe80::250:bfff:fe3a:c1f%gif0 prefixlen 64 scopeid 0x4
.Ed
.Pp
Once complete, both internal IP addresses should be reachable using
.Xr ping 8 :
.Bd -literal -offset indent
priv-net# ping 10.0.0.5
PING 10.0.0.5 (10.0.0.5): 56 data bytes
64 bytes from 10.0.0.5: icmp_seq=0 ttl=64 time=42.786 ms
64 bytes from 10.0.0.5: icmp_seq=1 ttl=64 time=19.255 ms
64 bytes from 10.0.0.5: icmp_seq=2 ttl=64 time=20.440 ms
64 bytes from 10.0.0.5: icmp_seq=3 ttl=64 time=21.036 ms
--- 10.0.0.5 ping statistics ---
4 packets transmitted, 4 packets received, 0% packet loss
round-trip min/avg/max/stddev = 19.255/25.879/42.786/9.782 ms

corp-net# ping 10.246.38.1
PING 10.246.38.1 (10.246.38.1): 56 data bytes
64 bytes from 10.246.38.1: icmp_seq=0 ttl=64 time=28.106 ms
64 bytes from 10.246.38.1: icmp_seq=1 ttl=64 time=42.917 ms
64 bytes from 10.246.38.1: icmp_seq=2 ttl=64 time=127.525 ms
64 bytes from 10.246.38.1: icmp_seq=3 ttl=64 time=119.896 ms
64 bytes from 10.246.38.1: icmp_seq=4 ttl=64 time=154.524 ms
--- 10.246.38.1 ping statistics ---
5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max/stddev = 28.106/94.594/154.524/49.814 ms
.Ed
.Pp
As expected, both sides have the ability to send and receive ICMP packets from the privately configured addresses.
Next, both gateways must be told how to route packets in order to correctly
send traffic from either network.
The following commands will achieve this goal:
.Bd -literal -offset indent
corp-net# route add 10.0.0.0 10.0.0.5 255.255.255.0
corp-net# route add net 10.0.0.0: gateway 10.0.0.5
priv-net# route add 10.246.38.0 10.246.38.1 255.255.255.0
priv-net# route add host 10.246.38.0: gateway 10.246.38.1
.Ed
.Pp
At this point, internal machines should be reachable from each gateway as well
as from machines behind the gateways.
Again, use
.Xr ping 8 to confirm:
.Bd -literal -offset indent
corp-net# ping 10.0.0.8
PING 10.0.0.8 (10.0.0.8): 56 data bytes
64 bytes from 10.0.0.8: icmp_seq=0 ttl=63 time=92.391 ms
64 bytes from 10.0.0.8: icmp_seq=1 ttl=63 time=21.870 ms
64 bytes from 10.0.0.8: icmp_seq=2 ttl=63 time=198.022 ms
64 bytes from 10.0.0.8: icmp_seq=3 ttl=63 time=22.241 ms
64 bytes from 10.0.0.8: icmp_seq=4 ttl=63 time=174.705 ms
--- 10.0.0.8 ping statistics ---
5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max/stddev = 21.870/101.846/198.022/74.001 ms

priv-net# ping 10.246.38.107
PING 10.246.38.1 (10.246.38.107): 56 data bytes
64 bytes from 10.246.38.107: icmp_seq=0 ttl=64 time=53.491 ms
64 bytes from 10.246.38.107: icmp_seq=1 ttl=64 time=23.395 ms
64 bytes from 10.246.38.107: icmp_seq=2 ttl=64 time=23.865 ms
64 bytes from 10.246.38.107: icmp_seq=3 ttl=64 time=21.145 ms
64 bytes from 10.246.38.107: icmp_seq=4 ttl=64 time=36.708 ms
--- 10.246.38.107 ping statistics ---
5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max/stddev = 21.145/31.721/53.491/12.179 ms
.Ed
.Pp
Setting up the tunnels is the easy part.
Configuring a secure link is a more in depth process.
The following configuration uses pre-shared (PSK) RSA keys.
Other than the IP addresses, the
.Pa /usr/local/etc/racoon/racoon.conf
on both gateways will be identical and look similar to:
.Bd -literal -offset indent
path    pre_shared_key  "/usr/local/etc/racoon/psk.txt"; #location of pre-shared key file
log     debug;	#log verbosity setting: set to 'notify' when testing and debugging is complete

padding	# options are not to be changed
{
        maximum_length  20;
        randomize       off;
        strict_check    off;
        exclusive_tail  off;
}

timer	# timing options. change as needed
{
        counter         5;
        interval        20 sec;
        persend         1;
#       natt_keepalive  15 sec;
        phase1          30 sec;
        phase2          15 sec;
}

listen	# address [port] that racoon will listen on
{
        isakmp          172.16.5.4 [500];
        isakmp_natt     172.16.5.4 [4500];
}

remote  192.168.1.12 [500]
{
        exchange_mode   main,aggressive;
        doi             ipsec_doi;
        situation       identity_only;
        my_identifier   address 172.16.5.4;
        peers_identifier        address 192.168.1.12;
        lifetime        time 8 hour;
        passive         off;
        proposal_check  obey;
#       nat_traversal   off;
        generate_policy off;

                        proposal {
                                encryption_algorithm    blowfish;
                                hash_algorithm          md5;
                                authentication_method   pre_shared_key;
                                lifetime time           30 sec;
                                dh_group                1;
                        }
}

sainfo  (address 10.246.38.0/24 any address 10.0.0.0/24 any)	# address $network/$netmask $type address $network/$netmask $type ( $type being any or esp)
{								# $network must be the two internal networks you are joining.
        pfs_group       1;
        lifetime        time    36000 sec;
        encryption_algorithm    blowfish,3des;
        authentication_algorithm        hmac_md5,hmac_sha1;
        compression_algorithm   deflate;
}
.Ed
.Pp
For descriptions of each available option, refer to the manual page for
.Pa racoon.conf
.
.Pp
The Security Policy Database (SPD) needs to be configured so that FreeBSD and racoon are able to encrypt and decrypt network traffic between the hosts.
.Pp
This can be achieved with a shell script, similar to the following, on the
corporate gateway.
This file will be used during system initialization and should be saved as
.Pa /usr/local/etc/racoon/setkey.conf
.
.Bd -literal -offset indent
flush;
spdflush;
# To the home network
spdadd 10.246.38.0/24 10.0.0.0/24 any -P out ipsec esp/tunnel/172.16.5.4-192.168.1.12/use;
spdadd 10.0.0.0/24 10.246.38.0/24 any -P in ipsec esp/tunnel/192.168.1.12-172.16.5.4/use;
.Ed
.Pp
Once in place, racoon may be started on both gateways using the following command:
.Bd -literal -offset indent
# /usr/local/sbin/racoon -F -f /usr/local/etc/racoon/racoon.conf -l
/var/log/racoon.log
.Ed
.Pp
The output should be similar to the following:
.Bd -literal -offset indent
corp-net# /usr/local/sbin/racoon -F -f /usr/local/etc/racoon/racoon.conf
Foreground mode.
2006-01-30 01:35:47: INFO: begin Identity Protection mode.
2006-01-30 01:35:48: INFO: received Vendor ID: KAME/racoon
2006-01-30 01:35:55: INFO: received Vendor ID: KAME/racoon
2006-01-30 01:36:04: INFO: ISAKMP-SA established 172.16.5.4[500]-192.168.1.12[500] spi:623b9b3bd2492452:7deab82d54ff704a
2006-01-30 01:36:05: INFO: initiate new phase 2 negotiation: 172.16.5.4[0]192.168.1.12[0]
2006-01-30 01:36:09: INFO: IPsec-SA established: ESP/Tunnel 192.168.1.12[0]->172.16.5.4[0] spi=28496098(0x1b2d0e2)
2006-01-30 01:36:09: INFO: IPsec-SA established: ESP/Tunnel 172.16.5.4[0]->192.168.1.12[0] spi=47784998(0x2d92426)
2006-01-30 01:36:13: INFO: respond new phase 2 negotiation: 172.16.5.4[0]192.168.1.12[0]
2006-01-30 01:36:18: INFO: IPsec-SA established: ESP/Tunnel 192.168.1.12[0]->172.16.5.4[0] spi=124397467(0x76a279b)
2006-01-30 01:36:18: INFO: IPsec-SA established: ESP/Tunnel 172.16.5.4[0]->192.168.1.12[0] spi=175852902(0xa7b4d66)
.Ed
.Pp
To ensure the tunnel is working properly, switch to another console and use
.Xr tcpdump 1 to view network traffic using the following command.
Replace
.Ql em0
with the network interface card as required:
.Bd -literal -offset indent
# tcpdump -i em0 host 172.16.5.4 and dst 192.168.1.12
.Ed
.Pp
Data similar to the following should appear on the console.
If not, there is an issue and debugging the returned data will be required.
.Bd -literal -offset indent
01:47:32.021683 IP corporatenetwork.com > 192.168.1.12.privatenetwork.com: ESP(spi=0x02acbf9f,seq=0xa)
01:47:33.022442 IP corporatenetwork.com > 192.168.1.12.privatenetwork.com: ESP(spi=0x02acbf9f,seq=0xb)
01:47:34.024218 IP corporatenetwork.com > 192.168.1.12.privatenetwork.com: ESP(spi=0x02acbf9f,seq=0xc)
.Ed
.Pp
At this point, both networks should be available and seem to be part of the
same network.
Most likely both networks are protected by a firewall.
To allow traffic to flow between them, rules need to be added to pass packets.
For the
.Xr ipfw 8 firewall, add the following lines to the firewall configuration file:
.Bd -literal -offset indent
ipfw add 00201 allow log esp from any to any
ipfw add 00202 allow log ah from any to any
ipfw add 00203 allow log ipencap from any to any
ipfw add 00204 allow log udp from any 500 to any
.Ed
.Pp
The rule numbers may need to be altered depending on the current host
configuration.
.Pp
For users of
.Xr pf 4 or
.Xr ipf 8 , the following rules should do the trick:
.Bd -literal -offset indent
pass in quick proto esp from any to any
pass in quick proto ah from any to any
pass in quick proto ipencap from any to any
pass in quick proto udp from any port = 500 to any port = 500
pass in quick on gif0 from any to any
pass out quick proto esp from any to any
pass out quick proto ah from any to any
pass out quick proto ipencap from any to any
pass out quick proto udp from any port = 500 to any port = 500
pass out quick on gif0 from any to any
.Ed
.Pp
Finally, to allow the machine to start support for the VPN during system initialization, add the following lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
ipsec_enable="YES"
ipsec_program="/usr/local/sbin/setkey"
ipsec_file="/usr/local/etc/racoon/setkey.conf" # allows setting up spd policies on boot
racoon_enable="yes"
.Ed
.Pp
OpenSSH is a set of network connectivity tools used to provide secure access to remote
machines.
Additionally, TCP/IP connections can be tunneled or forwarded securely through SSH connections.
 OpenSSH encrypts all traffic to effectively eliminate eavesdropping, connection
hijacking, and other network-level attacks.
.Pp
OpenSSH is maintained by the OpenBSD project and is installed by default in FreeBSD.
It is compatible with both SSH version 1 and 2 protocols.
.Pp
When data is sent over the network in an unencrypted form, network sniffers
anywhere in between the client and server can steal user/password information
or data transferred during the session.
 OpenSSH offers a variety of authentication and encryption methods to prevent this from
happening.
More information about OpenSSH is available from http://www.openssh.com/.
.Pp
This section provides an overview of the built-in client utilities to securely
access other systems and securely transfer files from a FreeBSD system.
It then describes how to configure a SSH server on a FreeBSD system.
More information is available in the man pages mentioned in this chapter.
.Ss USING THE SSH CLIENT UTILITIES
.Pp
To log into a SSH server, use
.Cm ssh
and specify a username that exists on that server and the IP address or hostname of the server.
If this is the first time a connection has been made to the specified server,
the user will be prompted to first verify the server's fingerprint:
.Bd -literal -offset indent
# ssh user@example.com
The authenticity of host 'example.com (10.0.0.1)' can't be established.
ECDSA key fingerprint is 25:cc:73:b5:b3:96:75:3d:56:19:49:d2:5c:1f:91:3b.
Are you sure you want to continue connecting (yes/no)? yes
Permanently added 'example.com' (ECDSA) to the list of known hosts.
Password for user@example.com: user_password
.Ed
.Pp
SSH utilizes a key fingerprint system to verify the authenticity of the server when
the client connects.
When the user accepts the key's fingerprint by typing
.Ql yes
when connecting for the first time, a copy of the key is saved to
.Pa .ssh/known_hosts
in the user's home directory.
Future attempts to login are verified against the saved key and
.Cm ssh
will display an alert if the server's key does not match the saved key.
If this occurs, the user should first verify why the key has changed before
continuing with the connection.
.Pp
By default, recent versions of OpenSSH only accept SSHv2 connections.
By default, the client will use version 2 if possible and will fall back to
version 1 if the server does not support version 2.
To force
.Cm ssh
to only use the specified protocol, include
.Ar -1
or
.Ar -2
.
Additional options are described in
.Xr ssh 1 .
.Pp
Use
.Xr scp 1 to securely copy a file to or from a remote machine.
This example copies
.Pa COPYRIGHT
on the remote system to a file of the same name in the current directory of the
local system:
.Bd -literal -offset indent
# scp user@example.com:/COPYRIGHT COPYRIGHT
Password for user@example.com: *******
COPYRIGHT            100% |*****************************|  4735
00:00
#
.Ed
.Pp
Since the fingerprint was already verified for this host, the server's key is
automatically checked before prompting for the user's password.
.Pp
The arguments passed to
.Cm scp
are similar to
.Cm cp
.
The file or files to copy is the first argument and the destination to copy to
is the second.
Since the file is fetched over the network, one or more of the file arguments
takes the form
.Ar user@host:<path_to_remote_file>
.
Be aware when copying directories recursively that
.Cm scp
uses
.Ar -r
, whereas
.Cm cp
uses
.Ar -R
.
.Pp
To open an interactive session for copying files, use
.Cm sftp
.
Refer to
.Xr sftp 1 for a list of available commands while in an
.Cm sftp
session.
.Ss KEY-BASED AUTHENTICATION
.Pp
Instead of using passwords, a client can be configured to connect to the remote
machine using keys.
To generate RSA authentication keys, use
.Cm ssh-keygen
.
To generate a public and private key pair, specify the type of key and follow
the prompts.
It is recommended to protect the keys with a memorable, but hard to guess
passphrase.
.Bd -literal -offset indent
% ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/user/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):  
Enter same passphrase again:                 
Your identification has been saved in /home/user/.ssh/id_rsa.
Your public key has been saved in /home/user/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:54Xm9Uvtv6H4NOo6yjP/YCfODryvUU7yWHzMqeXwhq8 user@host.example.com
The key's randomart image is:
+---[RSA 2048]----+
|                 |
|                 |
|                 |
|        . o..    |
|       .S*+*o    |
|      . O=Oo . . |
|       = Oo= oo..|
|      .oB.* +.oo.|
|       =OE**.o..=|
+----[SHA256]-----+
.Ed
.Pp
Type a passphrase here.
It can contain spaces and symbols.
.Pp
Retype the passphrase to verify it.
.Pp
The private key is stored in
.Pa ~/.ssh/id_rsa
and the public key is stored in
.Pa ~/.ssh/id_rsa.pub
.
The public key must be copied to
.Pa ~/.ssh/authorized_keys
on the remote machine for key-based authentication to work.
.Pp
Many users believe that keys are secure by design and will use a key without a
passphrase.
This is dangerous behavior.
An administrator can verify that a key pair is protected by a passphrase by
viewing the private key manually.
If the private key file contains the word
.Ql ENCRYPTED
, the key owner is using a passphrase.
In addition, to better secure end users,
.Ql from
may be placed in the public key file.
For example, adding
.Ql from="192.168.10.5"
in front of the
.Ql ssh-rsa
prefix will only allow that specific user to log in from that IP address.
.Pp
The options and files vary with different versions of OpenSSH.
To avoid problems, consult
.Xr ssh-keygen 1 .
.Pp
If a passphrase is used, the user is prompted for the passphrase each time a
connection is made to the server.
To load SSH keys into memory and remove the need to type the passphrase each time, use
.Xr ssh-agent 1 and
.Xr ssh-add 1 .
.Pp
Authentication is handled by
.Cm ssh-agent
, using the private keys that are loaded into it.
.Cm ssh-agent
can be used to launch another application like a shell or a window manager.
.Pp
To use
.Cm ssh-agent
in a shell, start it with a shell as an argument.
Add the identity by running
.Cm ssh-add
and entering the passphrase for the private key.
The user will then be able to
.Cm ssh
to any host that has the corresponding public key installed.
For example:
.Bd -literal -offset indent
% ssh-agent csh
% ssh-add
Enter passphrase for key '/usr/home/user/.ssh/id_rsa':  
Identity added: /usr/home/user/.ssh/id_rsa (/usr/home/user/.ssh/id_rsa)
%
.Ed
.Pp
Enter the passphrase for the key.
.Pp
To use
.Cm ssh-agent
in Xorg, add an entry for it in
.Pa ~/.xinitrc
.
This provides the
.Cm ssh-agent
services to all programs launched in Xorg.
An example
.Pa ~/.xinitrc
might look like this:
.Bd -literal -offset indent
exec ssh-agent startxfce4
.Ed
.Pp
This launches
.Cm ssh-agent
, which in turn launches XFCE, every time Xorg starts.
Once Xorg has been restarted so that the changes can take effect, run
.Cm ssh-add
to load all of the SSH keys.
.Ss SSH TUNNELING
.Pp
OpenSSH has the ability to create a tunnel to encapsulate another protocol in an
encrypted session.
.Pp
The following command tells
.Cm ssh
to create a tunnel for telnet:
.Bd -literal -offset indent
% ssh -2 -N -f -L 5023:localhost:23 user@foo.example.com
%
.Ed
.Pp
This example uses the following options:
.Bl -tag -offset -compact
.It
.Ar -2
Forces
.Cm ssh
to use version 2 to connect to the server.
.It
.Ar -N
Indicates no command, or tunnel only.
If omitted,
.Cm ssh
initiates a normal session.
.It
.Ar -f
Forces
.Cm ssh
to run in the background.
.It
.Ar -L
Indicates a local tunnel in localport:remotehost:remoteport format.
.It
.Ar user@foo.example.com
The login name to use on the specified remote SSH server.
.El
.Pp
An SSH tunnel works by creating a listen socket on
.Ql localhost
on the specified
.Ql localport
.
It then forwards any connections received on
.Ql localport
via the SSH connection to the specified
.Ql remotehost:remoteport
.
In the example, port
.Ql 5023
on the client is forwarded to port
.Ql 23
on the remote machine.
Since port 23 is used by telnet, this creates an encrypted telnet session through an SSH tunnel.
.Pp
This method can be used to wrap any number of insecure TCP protocols such as SMTP, POP3, and FTP, as seen in the following examples.
.Bd -literal -offset indent
% ssh -2 -N -f -L 5025:localhost:25 user@mailserver.example.com
user@mailserver.example.com's password: *****
% telnet localhost 5025
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mailserver.example.com ESMTP
.Ed
.Pp
This can be used in conjunction with
.Cm ssh-keygen
and additional user accounts to create a more seamless SSH tunneling environment.
Keys can be used in place of typing a password, and the tunnels can be run as a
separate user.
.Pp
In this example, there is an SSH server that accepts connections from the outside.
On the same network resides a mail server running a POP3 server.
To check email in a secure manner, create an SSH connection to the SSH server and tunnel through to the mail server:
.Bd -literal -offset indent
% ssh -2 -N -f -L 2110:mail.example.com:110 user@ssh-server.example.com
user@ssh-server.example.com's password: ******
.Ed
.Pp
Once the tunnel is up and running, point the email client to send POP3 requests to
.Ql localhost
on port 2110.
This connection will be forwarded securely across the tunnel to
.Ql mail.example.com
.
.Pp
Some firewalls filter both incoming and outgoing connections.
For example, a firewall might limit access from remote machines to ports 22 and
80 to only allow SSH and web surfing.
This prevents access to any other service which uses a port other than 22 or
80.
.Pp
The solution is to create an SSH connection to a machine outside of the network's firewall and use it to tunnel
to the desired service:
.Bd -literal -offset indent
% ssh -2 -N -f -L 8888:music.example.com:8000 user@unfirewalled-system.example.org
user@unfirewalled-system.example.org's password: *******
.Ed
.Pp
In this example, a streaming Ogg Vorbis client can now be pointed to
.Ql localhost
port 8888, which will be forwarded over to
.Ql music.example.com
on port 8000, successfully bypassing the firewall.
.Ss ENABLING THE SSH SERVER
.Pp
In addition to providing built-in SSH client utilities, a FreeBSD system can be configured as an SSH server, accepting connections from other SSH clients.
.Pp
To see if sshd is operating, use the
.Xr service 8 command:
.Bd -literal -offset indent
# service sshd status
.Ed
.Pp
If the service is not running, add the following line to
.Pa /etc/rc.conf
.
.Bd -literal -offset indent
sshd_enable="YES"
.Ed
.Pp
This will start sshd, the daemon program for OpenSSH, the next time the system boots.
To start it now:
.Bd -literal -offset indent
# service sshd start
.Ed
.Pp
The first time sshd starts on a FreeBSD system, the system's host keys will be automatically
created and the fingerprint will be displayed on the console.
Provide users with the fingerprint so that they can verify it the first time
they connect to the server.
.Pp
Refer to
.Xr sshd 8 for the list of available options when starting sshd and a more complete discussion about authentication, the login process, and the
various configuration files.
.Pp
At this point, the sshd should be available to all users with a username and password on the system.
.Ss SSH SERVER SECURITY
.Pp
While sshd is the most widely used remote administration facility for FreeBSD, brute force
and drive by attacks are common to any system exposed to public networks.
Several additional parameters are available to prevent the success of these
attacks and will be described in this section.
.Pp
It is a good idea to limit which users can log into the SSH server and from where using the
.Ql AllowUsers
keyword in the OpenSSH server configuration file.
For example, to only allow
.Ql root
to log in from
.Ql 192.168.1.32
, add this line to
.Pa /etc/ssh/sshd_config
:
.Bd -literal -offset indent
AllowUsers root@192.168.1.32
.Ed
.Pp
To allow
.Ql admin
to log in from anywhere, list that user without specifying an IP address:
.Bd -literal -offset indent
AllowUsers admin
.Ed
.Pp
Multiple users should be listed on the same line, like so:
.Bd -literal -offset indent
AllowUsers root@192.168.1.32 admin
.Ed
.Pp
After making changes to
.Pa /etc/ssh/sshd_config
, tell sshd to reload its configuration file by running:
.Bd -literal -offset indent
# service sshd reload
.Ed
.Pp
When this keyword is used, it is important to list each user that needs to log
into this machine.
Any user that is not specified in that line will be locked out.
Also, the keywords used in the OpenSSH server configuration file are case-sensitive.
If the keyword is not spelled correctly, including its case, it will be
ignored.
Always test changes to this file to make sure that the edits are working as
expected.
Refer to
.Xr sshd_config 5 to verify the spelling and use of the available keywords.
.Pp
In addition, users may be forced to use two factor authentication via the use
of a public and private key.
When required, the user may generate a key pair through the use of
.Xr ssh-keygen 1 and send the administrator the public key.
This key file will be placed in the
.Pa authorized_keys
as described above in the client section.
To force the users to use keys only, the following option may be configured:
.Bd -literal -offset indent
AuthenticationMethods publickey
.Ed
.Pp
Do not confuse
.Pa /etc/ssh/sshd_config
with
.Pa /etc/ssh/ssh_config
(note the extra
.Ql d
in the first filename).
The first file configures the server and the second file configures the client.
Refer to
.Xr ssh_config 5 for a listing of the available client settings.
.Pp
Access Control Lists (ACLs) extend the standard UNIX permission model in a POSIX.1e compatible way.
This permits an administrator to take advantage of a more fine-grained
permissions model.
.Pp
The FreeBSD
.Pa GENERIC
kernel provides ACL support for UFS file systems.
Users who prefer to compile a custom kernel must include the following option
in their custom kernel configuration file:
.Bd -literal -offset indent
options UFS_ACL
.Ed
.Pp
If this option is not compiled in, a warning message will be displayed when
attempting to mount a file system with ACL support.
 ACLs rely on extended attributes which are natively supported in UFS2.
.Pp
This chapter describes how to enable ACL support and provides some usage examples.
.Ss ENABLING ACL SUPPORT
.Pp
ACLs are enabled by the mount-time administrative flag,
.Ar acls
, which may be added to
.Pa /etc/fstab
.
The mount-time flag can also be automatically set in a persistent manner using
.Xr tunefs 8 to modify a superblock ACLs flag in the file system header.
In general, it is preferred to use the superblock flag for several reasons:
.Bl -bullet -offset -compact
.It
The superblock flag cannot be changed by a remount using
.Ar mount -u
as it requires a complete
.Cm umount
and fresh
.Cm mount
.
This means that ACLs cannot be enabled on the root file system after boot.
It also means that ACL support on a file system cannot be changed while the system is in use.
.It
Setting the superblock flag causes the file system to always be mounted with ACLs enabled, even if there is not an
.Pa fstab
entry or if the devices re-order.
This prevents accidental mounting of the file system without ACL support.
.El
.Pp
It is desirable to discourage accidental mounting without ACLs enabled because nasty things can happen if ACLs are enabled, then disabled, then re-enabled without flushing the extended
attributes.
In general, once ACLs are enabled on a file system, they should not be disabled, as the resulting
file protections may not be compatible with those intended by the users of the
system, and re-enabling ACLs may re-attach the previous ACLs to files that have since had their permissions changed, resulting in
unpredictable behavior.
.Pp
File systems with ACLs enabled will show a plus (
.Ql +
) sign in their permission settings:
.Bd -literal -offset indent
drwx------  2 robert  robert  512 Dec 27 11:54 private
drwxrwx---+ 2 robert  robert  512 Dec 23 10:57 directory1
drwxrwx---+ 2 robert  robert  512 Dec 22 10:20 directory2
drwxrwx---+ 2 robert  robert  512 Dec 27 11:57 directory3
drwxr-xr-x  2 robert  robert  512 Nov 10 11:54 public_html
.Ed
.Pp
In this example,
.Pa directory1
,
.Pa directory2
, and
.Pa directory3
are all taking advantage of ACLs, whereas
.Pa public_html
is not.
.Ss USING ACLS
.Pp
File system ACLs can be viewed using
.Cm getfacl
.
For instance, to view the ACL settings on
.Pa test
:
.Bd -literal -offset indent
% getfacl test
	#file:test
	#owner:1001
	#group:1001
	user::rw-
	group::r--
	other::r--
.Ed
.Pp
To change the ACL settings on this file, use
.Cm setfacl
.
To remove all of the currently defined ACLs from a file or file system, include
.Ar -k
.
However, the preferred method is to use
.Ar -b
as it leaves the basic fields required for ACLs to work.
.Bd -literal -offset indent
% setfacl -k test
.Ed
.Pp
To modify the default ACL entries, use
.Ar -m
:
.Bd -literal -offset indent
% setfacl -m u:trhodes:rwx,group:web:r--,o::--- test
.Ed
.Pp
In this example, there were no pre-defined entries, as they were removed by the
previous command.
This command restores the default options and assigns the options listed.
If a user or group is added which does not exist on the system, an
.Er Invalid argument
error will be displayed.
.Pp
Refer to
.Xr getfacl 1 and
.Xr setfacl 1 for more information about the options available for these commands.
.Pp
In recent years, the security world has made many improvements to how
vulnerability assessment is handled.
The threat of system intrusion increases as third party utilities are installed
and configured for virtually any operating system available today.
.Pp
Vulnerability assessment is a key factor in security.
While FreeBSD releases advisories for the base system, doing so for every third
party utility is beyond the FreeBSD Project's capability.
There is a way to mitigate third party vulnerabilities and warn administrators
of known security issues.
A FreeBSD add on utility known as pkg includes options explicitly for this purpose.
.Pp
pkg polls a database for security issues.
The database is updated and maintained by the FreeBSD Security Team and ports
developers.
.Pp
Please refer to instructions for installing pkg.
.Pp
Installation provides
.Xr periodic 8 configuration files for maintaining the pkg audit database, and provides a programmatic method of keeping it updated.
This functionality is enabled if
.Ql daily_status_security_pkgaudit_enable
is set to
.Ql YES
in
.Xr periodic.conf 5 .
Ensure that daily security run emails, which are sent to
.Ql root
's email account, are being read.
.Pp
After installation, and to audit third party utilities as part of the Ports
Collection at any time, an administrator may choose to update the database and
view known vulnerabilities of installed packages by invoking:
.Bd -literal -offset indent
# pkg audit -F
.Ed
.Pp
pkg displays messages any published vulnerabilities in installed packages:
.Bd -literal -offset indent
Affected package: cups-base-1.1.22.0_1
Type of problem: cups-base -- HPGL buffer overflow vulnerability.
Reference: <https://www.FreeBSD.org/ports/portaudit/40a3bca2-6809-11d9-a9e7-0001020eed82.html>

1 problem(s) in your installed packages found.

You are advised to update or deinstall the affected package(s) immediately.
.Ed
.Pp
By pointing a web browser to the displayed URL, an administrator may obtain more information about the vulnerability.
This will include the versions affected, by FreeBSD port version, along with
other web sites which may contain security advisories.
.Pp
pkg is a powerful utility and is extremely useful when coupled with
.Ql ports-mgmt/portmaster
.
.Pp
Like many producers of quality operating systems, the FreeBSD Project has a
security team which is responsible for determining the End-of-Life (EoL) date for each FreeBSD release and to provide security updates for supported
releases which have not yet reached their EoL.
More information about the FreeBSD security team and the supported releases is
available on the FreeBSD security page.
.Pp
One task of the security team is to respond to reported security
vulnerabilities in the FreeBSD operating system.
Once a vulnerability is confirmed, the security team verifies the steps
necessary to fix the vulnerability and updates the source code with the fix.
It then publishes the details as a
.Do
Security Advisory
.Dc
.
Security advisories are published on the FreeBSD website and mailed to the freebsd-security-notifications, freebsd-security, and freebsd-announce mailing lists.
.Pp
This section describes the format of a FreeBSD security advisory.
.Ss FORMAT OF A SECURITY ADVISORY
.Pp
Here is an example of a FreeBSD security advisory:
.Bd -literal -offset indent
=============================================================================
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

=============================================================================
FreeBSD-SA-14:04.bind                                       Security Advisory
                                                          The FreeBSD Project

Topic:          BIND remote denial of service vulnerability

Category:       contrib
Module:         bind
Announced:      2014-01-14
Credits:        ISC
Affects:        FreeBSD 8.x and FreeBSD 9.x
Corrected:      2014-01-14 19:38:37 UTC (stable/9, 9.2-STABLE)
                2014-01-14 19:42:28 UTC (releng/9.2, 9.2-RELEASE-p3)
                2014-01-14 19:42:28 UTC (releng/9.1, 9.1-RELEASE-p10)
                2014-01-14 19:38:37 UTC (stable/8, 8.4-STABLE)
                2014-01-14 19:42:28 UTC (releng/8.4, 8.4-RELEASE-p7)
                2014-01-14 19:42:28 UTC (releng/8.3, 8.3-RELEASE-p14)
CVE Name:       CVE-2014-0591

For general information regarding FreeBSD Security Advisories,
including descriptions of the fields above, security branches, and the
following sections, please visit <URL:http://security.FreeBSD.org/>.

I.   Background

BIND 9 is an implementation of the Domain Name System (DNS) protocols.
The named(8) daemon is an Internet Domain Name Server.

II.  Problem Description

Because of a defect in handling queries for NSEC3-signed zones, BIND can
crash with an "INSIST" failure in name.c when processing queries possessing
certain properties.  This issue only affects authoritative nameservers with
at least one NSEC3-signed zone.  Recursive-only servers are not at risk.

III. Impact

An attacker who can send a specially crafted query could cause named(8)
to crash, resulting in a denial of service.

IV.  Workaround

No workaround is available, but systems not running authoritative DNS service
with at least one NSEC3-signed zone using named(8) are not vulnerable.

V.   Solution

Perform one of the following:

1) Upgrade your vulnerable system to a supported FreeBSD stable or
release / security branch (releng) dated after the correction date.

2) To update your vulnerable system via a source code patch:

The following patches have been verified to apply to the applicable
FreeBSD release branches.

a) Download the relevant patch from the location below, and verify the
detached PGP signature using your PGP utility.

[FreeBSD 8.3, 8.4, 9.1, 9.2-RELEASE and 8.4-STABLE]
# fetch http://security.FreeBSD.org/patches/SA-14:04/bind-release.patch
# fetch http://security.FreeBSD.org/patches/SA-14:04/bind-release.patch.asc
# gpg --verify bind-release.patch.asc

[FreeBSD 9.2-STABLE]
# fetch http://security.FreeBSD.org/patches/SA-14:04/bind-stable-9.patch
# fetch http://security.FreeBSD.org/patches/SA-14:04/bind-stable-9.patch.asc
# gpg --verify bind-stable-9.patch.asc

b) Execute the following commands as root:

# cd /usr/src
# patch < /path/to/patch

Recompile the operating system using buildworld and installworld as
described in <URL:https://www.FreeBSD.org/handbook/makeworld.html>.

Restart the applicable daemons, or reboot the system.

3) To update your vulnerable system via a binary patch:

Systems running a RELEASE version of FreeBSD on the i386 or amd64
platforms can be updated via the freebsd-update(8) utility:

# freebsd-update fetch
# freebsd-update install

VI.  Correction details

The following list contains the correction revision numbers for each
affected branch.

Branch/path                                                      Revision
- -------------------------------------------------------------------------
stable/8/                                                         r260646
releng/8.3/                                                       r260647
releng/8.4/                                                       r260647
stable/9/                                                         r260646
releng/9.1/                                                       r260647
releng/9.2/                                                       r260647
- -------------------------------------------------------------------------

To see which files were modified by a particular revision, run the
following command, replacing NNNNNN with the revision number, on a
machine with Subversion installed:

# svn diff -cNNNNNN --summarize svn://svn.freebsd.org/base

Or visit the following URL, replacing NNNNNN with the revision number:

<URL:https://svnweb.freebsd.org/base?view=revision&revision=NNNNNN>

VII. References

<URL:https://kb.isc.org/article/AA-01078>

<URL:http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0591>

The latest revision of this advisory is available at
<URL:http://security.FreeBSD.org/advisories/FreeBSD-SA-14:04.bind.asc>
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJS1ZTYAAoJEO1n7NZdz2rnOvQP/2/68/s9Cu35PmqNtSZVVxVG
ZSQP5EGWx/lramNf9566iKxOrLRMq/h3XWcC4goVd+gZFrvITJSVOWSa7ntDQ7TO
XcinfRZ/iyiJbs/Rg2wLHc/t5oVSyeouyccqODYFbOwOlk35JjOTMUG1YcX+Zasg
ax8RV+7Zt1QSBkMlOz/myBLXUjlTZ3Xg2FXVsfFQW5/g2CjuHpRSFx1bVNX6ysoG
9DT58EQcYxIS8WfkHRbbXKh9I1nSfZ7/Hky/kTafRdRMrjAgbqFgHkYTYsBZeav5
fYWKGQRJulYfeZQ90yMTvlpF42DjCC3uJYamJnwDIu8OhS1WRBI8fQfr9DRzmRua
OK3BK9hUiScDZOJB6OqeVzUTfe7MAA4/UwrDtTYQ+PqAenv1PK8DZqwXyxA9ThHb
zKO3OwuKOVHJnKvpOcr+eNwo7jbnHlis0oBksj/mrq2P9m2ueF9gzCiq5Ri5Syag
Wssb1HUoMGwqU0roS8+pRpNC8YgsWpsttvUWSZ8u6Vj/FLeHpiV3mYXPVMaKRhVm
067BA2uj4Th1JKtGleox+Em0R7OFbCc/9aWC67wiqI6KRyit9pYiF3npph+7D5Eq
7zPsUdDd+qc+UTiLp3liCRp5w6484wWdhZO6wRtmUgxGjNkxFoNnX8CitzF8AaqO
UWWemqWuz3lAZuORQ9KX
=OQzQ
-----END PGP SIGNATURE-----
.Ed
.Pp
Every security advisory uses the following format:
.Bl -bullet -offset -compact
.It
Each security advisory is signed by the PGP key of the Security Officer.
The public key for the Security Officer can be verified at .
.It
The name of the security advisory always begins with
.Ql FreeBSD-SA-
(for FreeBSD Security Advisory), followed by the year in two digit format (
.Ql 14:
), followed by the advisory number for that year (
.Ql 04.
), followed by the name of the affected application or subsystem (
.Ql bind
).
The advisory shown here is the fourth advisory for 2014 and it affects BIND.
.It
The
.Ql Topic
field summarizes the vulnerability.
.It
The
.Ql Category
refers to the affected part of the system which may be one of
.Ql core
,
.Ql contrib
, or
.Ql ports
.
The
.Ql core
category means that the vulnerability affects a core component of the FreeBSD
operating system.
The
.Ql contrib
category means that the vulnerability affects software included with FreeBSD,
such as BIND.
The
.Ql ports
category indicates that the vulnerability affects software available through
the Ports Collection.
.It
The
.Ql Module
field refers to the component location.
In this example, the
.Ql bind
module is affected; therefore, this vulnerability affects an application
installed with the operating system.
.It
The
.Ql Announced
field reflects the date the security advisory was published.
This means that the security team has verified that the problem exists and that
a patch has been committed to the FreeBSD source code repository.
.It
The
.Ql Credits
field gives credit to the individual or organization who noticed the
vulnerability and reported it.
.It
The
.Ql Affects
field explains which releases of FreeBSD are affected by this vulnerability.
.It
The
.Ql Corrected
field indicates the date, time, time offset, and releases that were corrected.
The section in parentheses shows each branch for which the fix has been merged,
and the version number of the corresponding release from that branch.
The release identifier itself includes the version number and, if appropriate,
the patch level.
The patch level is the letter
.Ql p
followed by a number, indicating the sequence number of the patch, allowing
users to track which patches have already been applied to the system.
.It
The
.Ql CVE Name
field lists the advisory number, if one exists, in the public cve.mitre.org security vulnerabilities database.
.It
The
.Ql Background
field provides a description of the affected module.
.It
The
.Ql Problem Description
field explains the vulnerability.
This can include information about the flawed code and how the utility could be
maliciously used.
.It
The
.Ql Impact
field describes what type of impact the problem could have on a system.
.It
The
.Ql Workaround
field indicates if a workaround is available to system administrators who
cannot immediately patch the system .
.It
The
.Ql Solution
field provides the instructions for patching the affected system.
This is a step by step tested and verified method for getting a system patched
and working securely.
.It
The
.Ql Correction Details
field displays each affected Subversion branch with the revision number that
contains the corrected code.
.It
The
.Ql References
field offers sources of additional information regarding the vulnerability.
.El
.Pp
Process accounting is a security method in which an administrator may keep
track of system resources used and their allocation among users, provide for
system monitoring, and minimally track a user's commands.
.Pp
Process accounting has both positive and negative points.
One of the positives is that an intrusion may be narrowed down to the point of
entry.
A negative is the amount of logs generated by process accounting, and the disk
space they may require.
This section walks an administrator through the basics of process accounting.
.Pp
If more fine-grained accounting is needed, refer to .
.Ss ENABLING AND UTILIZING PROCESS ACCOUNTING
.Pp
Before using process accounting, it must be enabled using the following
commands:
.Bd -literal -offset indent
# touch /var/account/acct
# chmod 600 /var/account/acct
# accton /var/account/acct
# echo 'accounting_enable="YES"' >> /etc/rc.conf
.Ed
.Pp
Once enabled, accounting will begin to track information such as CPU statistics and executed commands.
All accounting logs are in a non-human readable format which can be viewed
using
.Cm sa
.
If issued without any options,
.Cm sa
prints information relating to the number of per-user calls, the total elapsed
time in minutes, total CPU and user time in minutes, and the average number of I/O operations.
Refer to
.Xr sa 8 for the list of available options which control the output.
.Pp
To display the commands issued by users, use
.Cm lastcomm
.
For example, this command prints out all usage of
.Cm ls
by
.Ql trhodes
on the
.Ql ttyp1
terminal:
.Bd -literal -offset indent
# lastcomm ls trhodes ttyp1
.Ed
.Pp
Many other useful options exist and are explained in
.Xr lastcomm 1 ,
.Xr acct 5 , and
.Xr sa 8 .
.Pp
FreeBSD provides several methods for an administrator to limit the amount of
system resources an individual may use.
Disk quotas limit the amount of disk space available to users.
Quotas are discussed in .
.Pp
Limits to other resources, such as CPU and memory, can be set using either a flat file or a command to configure a
resource limits database.
The traditional method defines login classes by editing
.Pa /etc/login.conf
.
While this method is still supported, any changes require a multi-step process
of editing this file, rebuilding the resource database, making necessary
changes to
.Pa /etc/master.passwd
, and rebuilding the password database.
This can become time consuming, depending upon the number of users to
configure.
.Pp
.Cm rctl
can be used to provide a more fine-grained method for controlling resource
limits.
This command supports more than user limits as it can also be used to set
resource constraints on processes and jails.
.Pp
This section demonstrates both methods for controlling resources, beginning
with the traditional method.
.Ss CONFIGURING LOGIN CLASSES
.Pp
In the traditional method, login classes and the resource limits to apply to a
login class are defined in
.Pa /etc/login.conf
.
Each user account can be assigned to a login class, where
.Ql default
is the default login class.
Each login class has a set of login capabilities associated with it.
A login capability is a
.Ql name=value
pair, where name is a well-known identifier and value is an arbitrary string which is processed accordingly depending on the name.
.Pp
Whenever
.Pa /etc/login.conf
is edited, the
.Pa /etc/login.conf.db
must be updated by executing the following command:
.Bd -literal -offset indent
# cap_mkdb /etc/login.conf
.Ed
.Pp
Resource limits differ from the default login capabilities in two ways.
First, for every limit, there is a
.Ql soft
and
.Ql hard
limit.
A soft limit may be adjusted by the user or application, but may not be set
higher than the hard limit.
The hard limit may be lowered by the user, but can only be raised by the
superuser.
Second, most resource limits apply per process to a specific user.
.Pp
lists the most commonly used resource limits.
All of the available resource limits and capabilities are described in detail
in
.Xr login.conf 5 .
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Resource Limit
.Ta
Description
.It
.Ta
coredumpsize
.Ta
The limit on the size of a core file generated by a program is subordinate to
other limits on disk usage, such as
.Ql filesize
or disk quotas.
This limit is often used as a less severe method of controlling disk space
consumption.
Since users do not generate core files and often do not delete them, this
setting may save them from running out of disk space should a large program
crash.
.It
.Ta
cputime
.Ta
The maximum amount of CPU time a user's process may consume.
Offending processes will be killed by the kernel.
This is a limit on CPU  time consumed, not the percentage of the CPU as displayed in some of the fields generated by
.Cm top
and
.Cm ps
.
.It
.Ta
filesize
.Ta
The maximum size of a file the user may own.
Unlike disk quotas (), this limit is enforced on individual files, not the set of all files a user
owns.
.It
.Ta
maxproc
.Ta
The maximum number of foreground and background processes a user can run.
This limit may not be larger than the system limit specified by
.Ev kern.maxproc
.
Setting this limit too small may hinder a user's productivity as some tasks,
such as compiling a large program, start lots of processes.
.It
.Ta
memorylocked
.Ta
The maximum amount of memory a process may request to be locked into main
memory using
.Xr mlock 2 .
Some system-critical programs, such as
.Xr amd 8 , lock into main memory so that if the system begins to swap, they do not
contribute to disk thrashing.
.It
.Ta
memoryuse
.Ta
The maximum amount of memory a process may consume at any given time.
It includes both core memory and swap usage.
This is not a catch-all limit for restricting memory consumption, but is a good
start.
.It
.Ta
openfiles
.Ta
The maximum number of files a process may have open.
In FreeBSD, files are used to represent sockets and IPC channels, so be careful not to set this too low.
The system-wide limit for this is defined by
.Ev kern.maxfiles
.
.It
.Ta
sbsize
.Ta
The limit on the amount of network memory a user may consume.
This can be generally used to limit network communications.
.It
.Ta
stacksize
.Ta
The maximum size of a process stack.
This alone is not sufficient to limit the amount of memory a program may use,
so it should be used in conjunction with other limits.
.El
.Pp
There are a few other things to remember when setting resource limits:
.Bl -bullet -offset -compact
.It
Processes started at system startup by
.Pa /etc/rc
are assigned to the
.Ql daemon
login class.
.It
Although the default
.Pa /etc/login.conf
is a good source of reasonable values for most limits, they may not be
appropriate for every system.
Setting a limit too high may open the system up to abuse, while setting it too
low may put a strain on productivity.
.It
Xorg takes a lot of resources and encourages users to run more programs
simultaneously.
.It
Many limits apply to individual processes, not the user as a whole.
For example, setting
.Ev openfiles
to
.Ql 50
means that each process the user runs may open up to
.Ql 50
files.
The total amount of files a user may open is the value of
.Ql openfiles
multiplied by the value of
.Ql maxproc
.
This also applies to memory consumption.
.El
.Pp
For further information on resource limits and login classes and capabilities
in general, refer to
.Xr cap_mkdb 1 ,
.Xr getrlimit 2 , and
.Xr login.conf 5 .
.Ss ENABLING AND CONFIGURING RESOURCE LIMITS
.Pp
The
.Ev kern.racct.enable
tunable must be set to a non-zero value.
Custom kernels require specific configuration:
.Bd -literal -offset indent
options         RACCT
options         RCTL
.Ed
.Pp
Once the system has rebooted into the new kernel,
.Cm rctl
may be used to set rules for the system.
.Pp
Rule syntax is controlled through the use of a subject, subject-id, resource,
and action, as seen in this example rule:
.Bd -literal -offset indent
user:trhodes:maxproc:deny=10/user
.Ed
.Pp
In this rule, the subject is
.Ql user
, the subject-id is
.Ql trhodes
, the resource,
.Ql maxproc
, is the maximum number of processes, and the action is
.Ql deny
, which blocks any new processes from being created.
This means that the user,
.Ql trhodes
, will be constrained to no greater than
.Ql 10
processes.
Other possible actions include logging to the console, passing a notification
to
.Xr devd 8 , or sending a sigterm to the process.
.Pp
Some care must be taken when adding rules.
Since this user is constrained to
.Ql 10
processes, this example will prevent the user from performing other tasks after
logging in and executing a
.Cm screen
session.
Once a resource limit has been hit, an error will be printed, as in this
example:
.Bd -literal -offset indent
% man test
    /usr/bin/man: Cannot fork: Resource temporarily unavailable
eval: Cannot fork: Resource temporarily unavailable
.Ed
.Pp
As another example, a jail can be prevented from exceeding a memory limit.
This rule could be written as:
.Bd -literal -offset indent
# rctl -a jail:httpd:memoryuse:deny=2G/jail
.Ed
.Pp
Rules will persist across reboots if they have been added to
.Pa /etc/rctl.conf
.
The format is a rule, without the preceding command.
For example, the previous rule could be added as:
.Bd -literal -offset indent
# Block jail from using more than 2G memory:
jail:httpd:memoryuse:deny=2G/jail
.Ed
.Pp
To remove a rule, use
.Cm rctl
to remove it from the list:
.Bd -literal -offset indent
# rctl -r user:trhodes:maxproc:deny=10/user
.Ed
.Pp
A method for removing all rules is documented in
.Xr rctl 8 .
However, if removing all rules for a single user is required, this command may
be issued:
.Bd -literal -offset indent
# rctl -r user:trhodes
.Ed
.Pp
Many other resources exist which can be used to exert additional control over
various
.Ql subjects
.
See
.Xr rctl 8 to learn about them.
.Pp
System administrators often need the ability to grant enhanced permissions to
users so they may perform privileged tasks.
The idea that team members are provided access to a FreeBSD system to perform
their specific tasks opens up unique challenges to every administrator.
These team members only need a subset of access beyond normal end user levels;
however, they almost always tell management they are unable to perform their
tasks without superuser access.
Thankfully, there is no reason to provide such access to end users because
tools exist to manage this exact requirement.
.Pp
Up to this point, the security chapter has covered permitting access to
authorized users and attempting to prevent unauthorized access.
Another problem arises once authorized users have access to the system
resources.
In many cases, some users may need access to application startup scripts, or a
team of administrators need to maintain the system.
Traditionally, the standard users and groups, file permissions, and even the
.Xr su 1 command would manage this access.
And as applications required more access, as more users needed to use system
resources, a better solution was required.
The most used application is currently Sudo.
.Pp
Sudo allows administrators to configure more rigid access to system commands and
provide for some advanced logging features.
As a tool, it is available from the Ports Collection as
.Ql security/sudo
or by use of the
.Xr pkg 8 utility.
To use the
.Xr pkg 8 tool:
.Bd -literal -offset indent
# pkg install sudo
.Ed
.Pp
After the installation is complete, the installed
.Cm visudo
will open the configuration file with a text editor.
Using
.Cm visudo
is highly recommended as it comes with a built in syntax checker to verify
there are no errors before the file is saved.
.Pp
The configuration file is made up of several small sections which allow for
extensive configuration.
In the following example, web application maintainer, user1, needs to start,
stop, and restart the web application known as webservice.
To grant this user permission to perform these tasks, add this line to the end
of
.Pa /usr/local/etc/sudoers
:
.Bd -literal -offset indent
user1   ALL=(ALL)       /usr/sbin/service webservice *
.Ed
.Pp
The user may now start webservice using this command:
.Bd -literal -offset indent
% sudo /usr/sbin/service webservice start
.Ed
.Pp
While this configuration allows a single user access to the webservice service; however, in most organizations, there is an entire web team in charge
of managing the service.
A single line can also give access to an entire group.
These steps will create a web group, add a user to this group, and allow all
members of the group to manage the service:
.Bd -literal -offset indent
# pw groupadd -g 6001 -n webteam
.Ed
.Pp
Using the same
.Xr pw 8 command, the user is added to the webteam group:
.Bd -literal -offset indent
# pw groupmod -m user1 -n webteam
.Ed
.Pp
Finally, this line in
.Pa /usr/local/etc/sudoers
allows any member of the webteam group to manage webservice:
.Bd -literal -offset indent
%webteam   ALL=(ALL)       /usr/sbin/service webservice *
.Ed
.Pp
Unlike
.Xr su 1 , Sudo only requires the end user password.
This adds an advantage where users will not need shared passwords, a finding in
most security audits and just bad all the way around.
.Pp
Users permitted to run applications with Sudo only enter their own passwords.
This is more secure and gives better control than
.Xr su 1 , where the
.Ql root
password is entered and the user acquires all
.Ql root
permissions.
.Pp
Most organizations are moving or have moved toward a two factor authentication
model.
In these cases, the user may not have a password to enter.
 Sudo provides for these cases with the
.Ql NOPASSWD
variable.
Adding it to the configuration above will allow all members of the webteam group to manage the service without the password requirement:
.Bd -literal -offset indent
%webteam   ALL=(ALL)       NOPASSWD: /usr/sbin/service webservice *
.Ed
.Ss LOGGING OUTPUT
.Pp
An advantage to implementing Sudo is the ability to enable session logging.
Using the built in log mechanisms and the included sudoreplay command, all commands initiated through Sudo are logged for later verification.
To enable this feature, add a default log directory entry, this example uses a
user variable.
Several other log filename conventions exist, consult the manual page for sudoreplay for additional information.
.Bd -literal -offset indent
Defaults iolog_dir=/var/log/sudo-io/%{user}
.Ed
.Pp
This directory will be created automatically after the logging is configured.
It is best to let the system create directory with default permissions just to
be safe.
In addition, this entry will also log administrators who use the sudoreplay command.
To change this behavior, read and uncomment the logging options inside
.Pa sudoers
.
.Pp
Once this directive has been added to the
.Pa sudoers
file, any user configuration can be updated with the request to log access.
In the example shown, the updated webteam entry would have the following additional changes:
.Bd -literal -offset indent
%webteam ALL=(ALL) NOPASSWD: LOG_INPUT: LOG_OUTPUT: /usr/sbin/service webservice *
.Ed
.Pp
From this point on, all webteam members altering the status of the webservice application will be logged.
The list of previous and current sessions can be displayed with:
.Bd -literal -offset indent
# sudoreplay -l
.Ed
.Pp
In the output, to replay a specific session, search for the
.Ql TSID=
entry, and pass that to sudoreplay with no other options to replay the session at normal speed.
For example:
.Bd -literal -offset indent
# sudoreplay user1/00/00/02
.Ed
.Pp
While sessions are logged, any administrator is able to remove sessions and
leave only a question of why they had done so.
It is worthwhile to add a daily check through an intrusion detection system (IDS) or similar software so that other administrators are alerted to manual
alterations.
.Pp
The
.Cm sudoreplay
is extremely extendable.
Consult the documentation for more information.
.Ss SYNOPSIS
.Pp
Since system administration is a difficult task, many tools have been developed
to make life easier for the administrator.
These tools often enhance the way systems are installed, configured, and
maintained.
One of the tools which can be used to enhance the security of a FreeBSD system
is
.Ql jails
.
Jails have been available since FreeBSD 4.X and continue to be enhanced in
their usefulness, performance, reliability, and security.
.Pp
Jails build upon the
.Xr chroot 2 concept, which is used to change the root directory of a set of processes.
This creates a safe environment, separate from the rest of the system.
Processes created in the chrooted environment can not access files or resources
outside of it.
For that reason, compromising a service running in a chrooted environment
should not allow the attacker to compromise the entire system.
However, a chroot has several limitations.
It is suited to easy tasks which do not require much flexibility or complex,
advanced features.
Over time, many ways have been found to escape from a chrooted environment,
making it a less than ideal solution for securing services.
.Pp
Jails improve on the concept of the traditional chroot environment in several
ways.
In a traditional chroot environment, processes are only limited in the part of
the file system they can access.
The rest of the system resources, system users, running processes, and the
networking subsystem are shared by the chrooted processes and the processes of
the host system.
Jails expand this model by virtualizing access to the file system, the set of
users, and the networking subsystem.
More fine-grained controls are available for tuning the access of a jailed
environment.
Jails can be considered as a type of operating system-level virtualization.
.Pp
A jail is characterized by four elements:
.Bl -bullet -offset -compact
.It
A directory subtree: the starting point from which a jail is entered.
Once inside the jail, a process is not permitted to escape outside of this
subtree.
.It
A hostname: which will be used by the jail.
.It
An IP address: which is assigned to the jail.
The IP address of a jail is often an alias address for an existing network interface.
.It
A command: the path name of an executable to run inside the jail.
The path is relative to the root directory of the jail environment.
.El
.Pp
Jails have their own set of users and their own
.Ql root
account which are limited to the jail environment.
The
.Ql root
account of a jail is not allowed to perform operations to the system outside of
the associated jail environment.
.Pp
This chapter provides an overview of the terminology and commands for managing
FreeBSD jails.
Jails are a powerful tool for both system administrators, and advanced users.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
What a jail is and what purpose it may serve in FreeBSD installations.
.It
How to build, start, and stop a jail.
.It
The basics of jail administration, both from inside and outside the jail.
.El
.Pp
Jails are a powerful tool, but they are not a security panacea.
While it is not possible for a jailed process to break out on its own, there
are several ways in which an unprivileged user outside the jail can cooperate
with a privileged user inside the jail to obtain elevated privileges in the
host environment.
.Pp
Most of these attacks can be mitigated by ensuring that the jail root is not
accessible to unprivileged users in the host environment.
As a general rule, untrusted users with privileged access to a jail should not
be given access to the host environment.
.Ss TERMS RELATED TO JAILS
.Pp
To facilitate better understanding of parts of the FreeBSD system related to
jails, their internals and the way they interact with the rest of FreeBSD, the
following terms are used further in this chapter:
.Bl -tag -offset -compact
.It
.Xr chroot 8 (command)
Utility, which uses
.Xr chroot 2 FreeBSD system call to change the root directory of a process and all its
descendants.
.It
.Xr chroot 2 (environment)
The environment of processes running in a
.Do
chroot
.Dc
.
This includes resources such as the part of the file system which is visible,
user and group IDs which are available, network interfaces and other IPC
mechanisms, etc.
.It
.Xr jail 8 (command)
The system administration utility which allows launching of processes within a
jail environment.
.It host (system, process, user, etc.)
The controlling system of a jail environment.
The host system has access to all the hardware resources available, and can
control processes both outside of and inside a jail environment.
One of the important differences of the host system from a jail is that the
limitations which apply to superuser processes inside a jail are not enforced
for processes of the host system.
.It hosted (system, process, user, etc.)
A process, user or other entity, whose access to resources is restricted by a
FreeBSD jail.
.El
.Ss CREATING AND CONTROLLING JAILS
.Pp
Some administrators divide jails into the following two types:
.Do
complete
.Dc
jails, which resemble a real FreeBSD system, and
.Do
service
.Dc
jails, dedicated to one application or service, possibly running with
privileges.
This is only a conceptual division and the process of building a jail is not
affected by it.
When creating a
.Do
complete
.Dc
jail there are two options for the source of the userland: use prebuilt
binaries (such as those supplied on an install media) or build from source.
.Pp
To install the userland from installation media, first create the root
directory for the jail.
This can be done by setting the
.Ev DESTDIR
variable to the proper location.
.Pp
Start a shell and define
.Ev DESTDIR
:
.Bd -literal -offset indent
# sh
# export DESTDIR=/here/is/the/jail
.Ed
.Pp
Mount the install media as covered in
.Xr mdconfig 8 when using the install ISO:
.Bd -literal -offset indent
# mount -t cd9660 /dev/`mdconfig -f cdimage.iso` /mnt
.Ed
.Pp
Extract the binaries from the tarballs on the install media into the declared
destination.
Minimally, only the base set needs to be extracted, but a complete install can
be performed when preferred.
.Pp
To install just the base system:
.Bd -literal -offset indent
# tar -xf /mnt/usr/freebsd-dist/base.txz -C $DESTDIR
.Ed
.Pp
To install everything except the kernel:
.Bd -literal -offset indent
# for set in base ports; do tar -xf /mnt/usr/freebsd-dist/$set.txz -C $DESTDIR ;
done
.Ed
.Pp
The
.Xr jail 8 manual page explains the procedure for building a jail:
.Bd -literal -offset indent
# setenv D /here/is/the/jail
# mkdir -p $D      
# cd /usr/src
# make buildworld  
# make installworld DESTDIR=$D  
# make distribution DESTDIR=$D  
# mount -t devfs devfs $D/dev
.Ed
.Pp
Selecting a location for a jail is the best starting point.
This is where the jail will physically reside within the file system of the
jail's host.
A good choice can be
.Pa /usr/jail/jailname
, where jailname is the hostname identifying the jail.
Usually,
.Pa /usr/
has enough space for the jail file system, which for
.Do
complete
.Dc
jails is, essentially, a replication of every file present in a default
installation of the FreeBSD base system.
.Pp
If you have already rebuilt your userland using
.Cm make world
or
.Cm make buildworld
, you can skip this step and install your existing userland into the new jail.
.Pp
This command will populate the directory subtree chosen as jail's physical
location on the file system with the necessary binaries, libraries, manual
pages and so on.
.Pp
The
.Ql distribution
target for make installs every needed configuration file.
In simple words, it installs every installable file of
.Pa /usr/src/etc/
to the
.Pa /etc
directory of the jail environment:
.Pa $D/etc/
.
.Pp
Mounting the
.Xr devfs 8 file system inside a jail is not required.
On the other hand, any, or almost any application requires access to at least
one device, depending on the purpose of the given application.
It is very important to control access to devices from inside a jail, as
improper settings could permit an attacker to do nasty things in the jail.
Control over
.Xr devfs 8 is managed through rulesets which are described in the
.Xr devfs 8 and
.Xr devfs.conf 5 manual pages.
.Pp
Once a jail is installed, it can be started by using the
.Xr jail 8 utility.
The
.Xr jail 8 utility takes four mandatory arguments which are described in the .
Other arguments may be specified too, e.g., to run the jailed process with the
credentials of a specific user.
The
.Ar command
argument depends on the type of the jail; for a virtual system,
.Pa /etc/rc
is a good choice, since it will replicate the startup sequence of a real
FreeBSD system.
For a service jail, it depends on the service or application that will run within the jail.
.Pp
Jails are often started at boot time and the FreeBSD
.Pa rc
mechanism provides an easy way to do this.
.Pp
Configure jail parameters in
.Pa jail.conf
:
.Bd -literal -offset indent
www {
    host.hostname = www.example.org;           # Hostname
    ip4.addr = 192.168.0.10;                   # IP address of the jail
    path ="/usr/jail/www";                     # Path to the jail
    devfs_ruleset = "www_ruleset";             # devfs ruleset
    mount.devfs;                               # Mount devfs inside the jail
    exec.start = "/bin/sh /etc/rc";            # Start command
    exec.stop = "/bin/sh /etc/rc.shutdown";    # Stop command
}
.Ed
.Pp
Configure jails to start at boot time in
.Pa rc.conf
:
.Bd -literal -offset indent
jail_enable="YES"   # Set to NO to disable starting of any jails
.Ed
.Pp
The default startup of jails configured in
.Xr jail.conf 5 , will run the
.Pa /etc/rc
script of the jail, which assumes the jail is a complete virtual system.
For service jails, the default startup command of the jail should be changed,
by setting the
.Ev exec.start
option appropriately.
.Pp
For a full list of available options, please see the
.Xr jail.conf 5 manual page.
.Pp
.Xr service 8 can be used to start or stop a jail by hand, if an entry for it exists in
.Pa jail.conf
:
.Bd -literal -offset indent
# service jail start www
# service jail stop www
.Ed
.Pp
Jails can be shut down with
.Xr jexec 8 .
Use
.Xr jls 8 to identify the jail's
.Ev JID
, then use
.Xr jexec 8 to run the shutdown script in that jail.
.Bd -literal -offset indent
# jls
   JID  IP Address      Hostname                      Path
     3  192.168.0.10    www                           /usr/jail/www
# jexec 3 /etc/rc.shutdown
.Ed
.Pp
More information about this can be found in the
.Xr jail 8 manual page.
.Ss FINE TUNING AND ADMINISTRATION
.Pp
There are several options which can be set for any jail, and various ways of
combining a host FreeBSD system with jails, to produce higher level
applications.
This section presents:
.Bl -bullet -offset -compact
.It
Some of the options available for tuning the behavior and security restrictions
implemented by a jail installation.
.It
Some of the high-level applications for jail management, which are available
through the FreeBSD Ports Collection, and can be used to implement overall
jail-based solutions.
.El
.Ss SYSTEM TOOLS FOR JAIL TUNING IN FREEBSD
.Pp
Fine tuning of a jail's configuration is mostly done by setting
.Xr sysctl 8 variables.
A special subtree of sysctl exists as a basis for organizing all the relevant
options: the
.Ev security.jail.*
hierarchy of FreeBSD kernel options.
Here is a list of the main jail-related sysctls, complete with their default
value.
Names should be self-explanatory, but for more information about them, please
refer to the
.Xr jail 8 and
.Xr sysctl 8 manual pages.
.Bl -bullet -offset -compact
.It
.Ev security.jail.set_hostname_allowed: 1
.It
.Ev security.jail.socket_unixiproute_only: 1
.It
.Ev security.jail.sysvipc_allowed: 0
.It
.Ev security.jail.enforce_statfs: 2
.It
.Ev security.jail.allow_raw_sockets: 0
.It
.Ev security.jail.chflags_allowed: 0
.It
.Ev security.jail.jailed: 0
.El
.Pp
These variables can be used by the system administrator of the host system to add or remove some of the limitations imposed by default on the
.Ql root
user.
Note that there are some limitations which cannot be removed.
The
.Ql root
user is not allowed to mount or unmount file systems from within a
.Xr jail 8 .
The
.Ql root
inside a jail may not load or unload
.Xr devfs 8 rulesets, set firewall rules, or do many other administrative tasks which
require modifications of in-kernel data, such as setting the
.Ev securelevel
of the kernel.
.Pp
The base system of FreeBSD contains a basic set of tools for viewing
information about the active jails, and attaching to a jail to run
administrative commands.
The
.Xr jls 8 and
.Xr jexec 8 commands are part of the base FreeBSD system, and can be used to perform the
following simple tasks:
.Bl -bullet -offset -compact
.It
Print a list of active jails and their corresponding jail identifier (JID), IP address, hostname and path.
.It
Attach to a running jail, from its host system, and run a command inside the
jail or perform administrative tasks inside the jail itself.
This is especially useful when the
.Ql root
user wants to cleanly shut down a jail.
The
.Xr jexec 8 utility can also be used to start a shell in a jail to do administration in it;
for example:
.Bd -literal -offset indent
# jexec 1 tcsh
.Ed
.El
.Ss HIGH-LEVEL ADMINISTRATIVE TOOLS IN THE FREEBSD PORTS COLLECTION
.Pp
Among the many third-party utilities for jail administration, one of the most
complete and useful is
.Ql sysutils/ezjail
.
It is a set of scripts that contribute to
.Xr jail 8 management.
Please refer to the handbook section on ezjail for more information.
.Ss KEEPING JAILS PATCHED AND UP TO DATE
.Pp
Jails should be kept up to date from the host operating system as attempting to
patch userland from within the jail may likely fail as the default behavior in
FreeBSD is to disallow the use of
.Xr chflags 1 in a jail which prevents the replacement of some files.
It is possible to change this behavior but it is recommended to use
.Xr freebsd-update 8 to maintain jails instead.
Use
.Ar -b
to specify the path of the jail to be updated.
.Bd -literal -offset indent
# freebsd-update -b /here/is/the/jail fetch
# freebsd-update -b /here/is/the/jail install
.Ed
.Pp
The management of multiple jails can become problematic because every jail has
to be rebuilt from scratch whenever it is upgraded.
This can be time consuming and tedious if a lot of jails are created and
manually updated.
.Pp
This section demonstrates one method to resolve this issue by safely sharing as
much as is possible between jails using read-only
.Xr mount_nullfs 8 mounts, so that updating is simpler.
This makes it more attractive to put single services, such as HTTP, DNS, and SMTP, into individual jails.
Additionally, it provides a simple way to add, remove, and upgrade jails.
.Pp
Simpler solutions exist, such as ezjail, which provides an easier method of administering FreeBSD jails but is less
versatile than this setup.
 ezjail is covered in more detail in .
.Pp
The goals of the setup described in this section are:
.Bl -bullet -offset -compact
.It
Create a simple and easy to understand jail structure that does not require
running a full installworld on each and every jail.
.It
Make it easy to add new jails or remove existing ones.
.It
Make it easy to update or upgrade existing jails.
.It
Make it possible to run a customized FreeBSD branch.
.It
Be paranoid about security, reducing as much as possible the possibility of
compromise.
.It
Save space and inodes, as much as possible.
.El
.Pp
This design relies on a single, read-only master template which is mounted into
each jail and one read-write device per jail.
A device can be a separate physical disc, a partition, or a vnode backed memory
device.
This example uses read-write nullfs mounts.
.Pp
The file system layout is as follows:
.Bl -bullet -offset -compact
.It
The jails are based under the
.Pa /home
partition.
.It
Each jail will be mounted under the
.Pa /home/j
directory.
.It
The template for each jail and the read-only partition for all of the jails is
.Pa /home/j/mroot
.
.It
A blank directory will be created for each jail under the
.Pa /home/j
directory.
.It
Each jail will have a
.Pa /s
directory that will be linked to the read-write portion of the system.
.It
Each jail will have its own read-write system that is based upon
.Pa /home/j/skel
.
.It
The read-write portion of each jail will be created in
.Pa /home/js
.
.El
.Ss CREATING THE TEMPLATE
.Pp
This section describes the steps needed to create the master template.
.Pp
It is recommended to first update the host FreeBSD system to the latest
-RELEASE branch using the instructions in .
Additionally, this template uses the
.Ql sysutils/cpdup
package or port and portsnap will be used to download the FreeBSD Ports Collection.
.Pp
First, create a directory structure for the read-only file system which will
contain the FreeBSD binaries for the jails.
Then, change directory to the FreeBSD source tree and install the read-only
file system to the jail template:
.Bd -literal -offset indent
# mkdir /home/j /home/j/mroot
# cd /usr/src
# make installworld DESTDIR=/home/j/mroot
.Ed
.Pp
Next, prepare a FreeBSD Ports Collection for the jails as well as a FreeBSD
source tree, which is required for mergemaster:
.Bd -literal -offset indent
# cd /home/j/mroot
# mkdir usr/ports
# portsnap -p /home/j/mroot/usr/ports fetch extract
# cpdup /usr/src /home/j/mroot/usr/src
.Ed
.Pp
Create a skeleton for the read-write portion of the system:
.Bd -literal -offset indent
# mkdir /home/j/skel /home/j/skel/home /home/j/skel/usr-X11R6
/home/j/skel/distfiles
# mv etc /home/j/skel
# mv usr/local /home/j/skel/usr-local
# mv tmp /home/j/skel
# mv var /home/j/skel
# mv root /home/j/skel
.Ed
.Pp
Use mergemaster to install missing configuration files.
Then, remove the extra directories that mergemaster creates:
.Bd -literal -offset indent
# mergemaster -t /home/j/skel/var/tmp/temproot -D /home/j/skel -i
# cd /home/j/skel
# rm -R bin boot lib libexec mnt proc rescue sbin sys usr dev
.Ed
.Pp
Now, symlink the read-write file system to the read-only file system.
Ensure that the symlinks are created in the correct
.Pa s/
locations as the creation of directories in the wrong locations will cause the
installation to fail.
.Bd -literal -offset indent
# cd /home/j/mroot
# mkdir s
# ln -s s/etc etc
# ln -s s/home home
# ln -s s/root root
# ln -s ../s/usr-local usr/local
# ln -s ../s/usr-X11R6 usr/X11R6
# ln -s ../../s/distfiles usr/ports/distfiles
# ln -s s/tmp tmp
# ln -s s/var var
.Ed
.Pp
As a last step, create a generic
.Pa /home/j/skel/etc/make.conf
containing this line:
.Bd -literal -offset indent
WRKDIRPREFIX?=  /s/portbuild
.Ed
.Pp
This makes it possible to compile FreeBSD ports inside each jail.
Remember that the ports directory is part of the read-only system.
The custom path for
.Ql WRKDIRPREFIX
allows builds to be done in the read-write portion of every jail.
.Ss CREATING JAILS
.Pp
The jail template can now be used to setup and configure the jails in
.Pa /etc/rc.conf
.
This example demonstrates the creation of 3 jails:
.Ql NS
,
.Ql MAIL
and
.Ql WWW
.
.Pp
Add the following lines to
.Pa /etc/fstab
, so that the read-only template for the jails and the read-write space will be
available in the respective jails:
.Bd -literal -offset indent
/home/j/mroot   /home/j/ns     nullfs  ro  0   0
/home/j/mroot   /home/j/mail   nullfs  ro  0   0
/home/j/mroot   /home/j/www    nullfs  ro  0   0
/home/js/ns     /home/j/ns/s   nullfs  rw  0   0
/home/js/mail   /home/j/mail/s nullfs  rw  0   0
/home/js/www    /home/j/www/s  nullfs  rw  0   0
.Ed
.Pp
To prevent fsck from checking nullfs mounts during boot and dump from backing up the read-only nullfs mounts of the jails, the last two columns
are both set to
.Ql 0
.
.Pp
Configure the jails in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
jail_enable="YES"
jail_set_hostname_allow="NO"
jail_list="ns mail www"
jail_ns_hostname="ns.example.org"
jail_ns_ip="192.168.3.17"
jail_ns_rootdir="/usr/home/j/ns"
jail_ns_devfs_enable="YES"
jail_mail_hostname="mail.example.org"
jail_mail_ip="192.168.3.18"
jail_mail_rootdir="/usr/home/j/mail"
jail_mail_devfs_enable="YES"
jail_www_hostname="www.example.org"
jail_www_ip="62.123.43.14"
jail_www_rootdir="/usr/home/j/www"
jail_www_devfs_enable="YES"
.Ed
.Pp
The
.Ev jail_name_rootdir
variable is set to
.Pa /usr/home
instead of
.Pa /home
because the physical path of
.Pa /home
on a default FreeBSD installation is
.Pa /usr/home
.
The
.Ev jail_name_rootdir
variable must not be set to a path which includes a symbolic link, otherwise the jails will
refuse to start.
.Pp
Create the required mount points for the read-only file system of each jail:
.Bd -literal -offset indent
# mkdir /home/j/ns /home/j/mail /home/j/www
.Ed
.Pp
Install the read-write template into each jail using
.Ql sysutils/cpdup
:
.Bd -literal -offset indent
# mkdir /home/js
# cpdup /home/j/skel /home/js/ns
# cpdup /home/j/skel /home/js/mail
# cpdup /home/j/skel /home/js/www
.Ed
.Pp
In this phase, the jails are built and prepared to run.
First, mount the required file systems for each jail, and then start them:
.Bd -literal -offset indent
# mount -a
# service jail start
.Ed
.Pp
The jails should be running now.
To check if they have started correctly, use
.Cm jls
.
Its output should be similar to the following:
.Bd -literal -offset indent
# jls
   JID  IP Address      Hostname                      Path
     3  192.168.3.17    ns.example.org                /home/j/ns
     2  192.168.3.18    mail.example.org              /home/j/mail
     1  62.123.43.14    www.example.org               /home/j/www
.Ed
.Pp
At this point, it should be possible to log onto each jail, add new users, or
configure daemons.
The
.Ql JID
column indicates the jail identification number of each running jail.
Use the following command to perform administrative tasks in the jail whose JID is
.Ql 3
:
.Bd -literal -offset indent
# jexec 3 tcsh
.Ed
.Ss UPGRADING
.Pp
The design of this setup provides an easy way to upgrade existing jails while
minimizing their downtime.
Also, it provides a way to roll back to the older version should a problem
occur.
.Pp
The first step is to upgrade the host system.
Then, create a new temporary read-only template in
.Pa /home/j/mroot2
.
.Bd -literal -offset indent
# mkdir /home/j/mroot2
# cd /usr/src
# make installworld DESTDIR=/home/j/mroot2
# cd /home/j/mroot2
# cpdup /usr/src usr/src
# mkdir s
.Ed
.Pp
The
.Ql installworld
creates a few unnecessary directories, which should be removed:
.Bd -literal -offset indent
# chflags -R 0 var
# rm -R etc var root usr/local tmp
.Ed
.Pp
Recreate the read-write symlinks for the master file system:
.Bd -literal -offset indent
# ln -s s/etc etc
# ln -s s/root root
# ln -s s/home home
# ln -s ../s/usr-local usr/local
# ln -s ../s/usr-X11R6 usr/X11R6
# ln -s s/tmp tmp
# ln -s s/var var
.Ed
.Pp
Next, stop the jails:
.Bd -literal -offset indent
# service jail stop
.Ed
.Pp
Unmount the original file systems as the read-write systems are attached to the
read-only system (
.Pa /s
):
.Bd -literal -offset indent
# umount /home/j/ns/s
# umount /home/j/ns
# umount /home/j/mail/s
# umount /home/j/mail
# umount /home/j/www/s
# umount /home/j/www
.Ed
.Pp
Move the old read-only file system and replace it with the new one.
This will serve as a backup and archive of the old read-only file system should
something go wrong.
The naming convention used here corresponds to when a new read-only file system
has been created.
Move the original FreeBSD Ports Collection over to the new file system to save
some space and inodes:
.Bd -literal -offset indent
# cd /home/j
# mv mroot mroot.20060601
# mv mroot2 mroot
# mv mroot.20060601/usr/ports mroot/usr
.Ed
.Pp
At this point the new read-only template is ready, so the only remaining task
is to remount the file systems and start the jails:
.Bd -literal -offset indent
# mount -a
# service jail start
.Ed
.Pp
Use
.Cm jls
to check if the jails started correctly.
Run
.Cm mergemaster
in each jail to update the configuration files.
.Pp
Creating and managing multiple jails can quickly become tedious and
error-prone.
Dirk Engling's ezjail automates and greatly simplifies many jail tasks.
A basejail is created as a template.
Additional jails use
.Xr mount_nullfs 8 to share many of the basejail directories without using additional disk space.
Each additional jail takes only a few megabytes of disk space before
applications are installed.
Upgrading the copy of the userland in the basejail automatically upgrades all
of the other jails.
.Pp
Additional benefits and features are described in detail on the ezjail web site, https://erdgeist.org/arts/software/ezjail/.
.Ss INSTALLING EZJAIL
.Pp
Installing ezjail consists of adding a loopback interface for use in jails, installing the port
or package, and enabling the service.
.Pp
To keep jail loopback traffic off the host's loopback network interface
.Ql lo0
, a second loopback interface is created by adding an entry to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
cloned_interfaces="lo1"
.Ed
.Pp
The second loopback interface
.Ql lo1
will be created when the system starts.
It can also be created manually without a restart:
.Bd -literal -offset indent
# service netif cloneup
Created clone interfaces: lo1.
.Ed
.Pp
Jails can be allowed to use aliases of this secondary loopback interface
without interfering with the host.
.Pp
Inside a jail, access to the loopback address
.Ql 127.0.0.1
is redirected to the first IP address assigned to the jail.
To make the jail loopback correspond with the new
.Ql lo1
interface, that interface must be specified first in the list of interfaces and IP addresses given when creating a new jail.
.Pp
Give each jail a unique loopback address in the
.Ql 127.0.0.0
.Ql /8
netblock.
.Pp
Install
.Ql sysutils/ezjail
:
.Bd -literal -offset indent
# cd /usr/ports/sysutils/ezjail
# make install clean
.Ed
.Pp
Enable ezjail by adding this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
ezjail_enable="YES"
.Ed
.Pp
The service will automatically start on system boot.
It can be started immediately for the current session:
.Bd -literal -offset indent
# service ezjail start
.Ed
.Ss INITIAL SETUP
.Pp
With ezjail installed, the basejail directory structure can be created and populated.
This step is only needed once on the jail host computer.
.Pp
In both of these examples,
.Ar -p
causes the ports tree to be retrieved with
.Xr portsnap 8 into the basejail.
That single copy of the ports directory will be shared by all the jails.
Using a separate copy of the ports directory for jails isolates them from the
host.
The ezjail  FAQ explains in more detail: http://erdgeist.org/arts/software/ezjail/#FAQ.
.Ss TO POPULATE THE JAIL WITH FREEBSD-RELEASE
.Pp
For a basejail based on the FreeBSD RELEASE matching that of the host computer,
use
.Cm install
.
For example, on a host computer running FreeBSD 10-STABLE, the latest RELEASE
version of FreeBSD -10 will be installed in the jail):
.Bd -literal -offset indent
# ezjail-admin install -p
.Ed
.Ss TO POPULATE THE JAIL WITH INSTALLWORLD
.Pp
The basejail can be installed from binaries created by
.Ql buildworld
on the host with
.Cm ezjail-admin update
.
.Pp
In this example, FreeBSD 10-STABLE has been built from source.
The jail directories are created.
Then
.Ql installworld
is executed, installing the host's
.Pa /usr/obj
into the basejail.
.Bd -literal -offset indent
# ezjail-admin update -i -p
.Ed
.Pp
The host's
.Pa /usr/src
is used by default.
A different source directory on the host can be specified with
.Ar -s
and a path, or set with
.Ev ezjail_sourcetree
in
.Pa /usr/local/etc/ezjail.conf
.
.Pp
The basejail's ports tree is shared by other jails.
However, downloaded distfiles are stored in the jail that downloaded them.
By default, these files are stored in
.Pa /var/ports/distfiles
within each jail.
.Pa /var/ports
inside each jail is also used as a work directory when building ports.
.Pp
The FTP protocol is used by default to download packages for the installation of the
basejail.
Firewall or proxy configurations can prevent or interfere with FTP transfers.
The HTTP protocol works differently and avoids these problems.
It can be chosen by specifying a full URL for a particular download mirror in
.Pa /usr/local/etc/ezjail.conf
:
.Bd -literal -offset indent
ezjail_ftphost=http://ftp.FreeBSD.org
.Ed
.Pp
See for a list of sites.
.Ss CREATING AND STARTING A NEW JAIL
.Pp
New jails are created with
.Cm ezjail-admin create
.
In these examples, the
.Ql lo1
loopback interface is used as described above.
.Ss CREATE AND START A NEW JAIL
.Pp
Create the jail, specifying a name and the loopback and network interfaces to
use, along with their IP addresses.
In this example, the jail is named
.Ql dnsjail
.
.Bd -literal -offset indent
# ezjail-admin create dnsjail 'lo1|127.0.1.1,em0|192.168.1.50'
.Ed
.Pp
Most network services run in jails without problems.
A few network services, most notably
.Xr ping 8 , use raw network sockets.
In jails, raw network sockets are disabled by default for security.
Services that require them will not work.
.Pp
Occasionally, a jail genuinely needs raw sockets.
For example, network monitoring applications often use
.Xr ping 8 to check the availability of other computers.
When raw network sockets are actually needed in a jail, they can be enabled by
editing the ezjail configuration file for the individual jail,
.Pa /usr/local/etc/ezjail/jailname
.
Modify the
.Ql parameters
entry:
.Bd -literal -offset indent
export jail_jailname_parameters="allow.raw_sockets=1"
.Ed
.Pp
Do not enable raw network sockets unless services in the jail actually require
them.
.Pp
Start the jail:
.Bd -literal -offset indent
# ezjail-admin start dnsjail
.Ed
.Pp
Use a console on the jail:
.Bd -literal -offset indent
# ezjail-admin console dnsjail
.Ed
.Pp
The jail is operating and additional configuration can be completed.
Typical settings added at this point include:
.Ss SET THE ROOT PASSWORD
.Pp
Connect to the jail and set the
.Ql root
user's password:
.Bd -literal -offset indent
# ezjail-admin console dnsjail
# passwd
Changing local password for root
New Password:
Retype New Password:
.Ed
.Ss TIME ZONE CONFIGURATION
.Pp
The jail's time zone can be set with
.Xr tzsetup 8 .
To avoid spurious error messages, the
.Xr adjkerntz 8 entry in
.Pa /etc/crontab
can be commented or removed.
This job attempts to update the computer's hardware clock with time zone
changes, but jails are not allowed to access that hardware.
.Ss DNS SERVERS
.Pp
Enter domain name server lines in
.Pa /etc/resolv.conf
so DNS works in the jail.
.Ss EDIT /ETC/HOSTS
.Pp
Change the address and add the jail name to the
.Ql localhost
entries in
.Pa /etc/hosts
.
.Ss CONFIGURE /ETC/RC.CONF
.Pp
Enter configuration settings in
.Pa /etc/rc.conf
.
This is much like configuring a full computer.
The host name and IP address are not set here.
Those values are already provided by the jail configuration.
.Pp
With the jail configured, the applications for which the jail was created can
be installed.
.Pp
Some ports must be built with special options to be used in a jail.
For example, both of the network monitoring plugin packages
.Ql net-mgmt/nagios-plugins
and
.Ql net-mgmt/monitoring-plugins
have a
.Ql JAIL
option which must be enabled for them to work correctly inside a jail.
.Ss UPDATING JAILS
.Ss UPDATING THE OPERATING SYSTEM
.Pp
Because the basejail's copy of the userland is shared by the other jails,
updating the basejail automatically updates all of the other jails.
Either source or binary updates can be used.
.Pp
To build the world from source on the host, then install it in the basejail,
use:
.Bd -literal -offset indent
# ezjail-admin update -b
.Ed
.Pp
If the world has already been compiled on the host, install it in the basejail
with:
.Bd -literal -offset indent
# ezjail-admin update -i
.Ed
.Pp
Binary updates use
.Xr freebsd-update 8 .
These updates have the same limitations as if
.Xr freebsd-update 8 were being run directly.
The most important one is that only -RELEASE versions of FreeBSD are available
with this method.
.Pp
Update the basejail to the latest patched release of the version of FreeBSD on
the host.
For example, updating from RELEASE-p1 to RELEASE-p2.
.Bd -literal -offset indent
# ezjail-admin update -u
.Ed
.Pp
To upgrade the basejail to a new version, first upgrade the host system as
described in .
Once the host has been upgraded and rebooted, the basejail can then be
upgraded.
.Xr freebsd-update 8 has no way of determining which version is currently installed in the basejail,
so the original version must be specified.
Use
.Xr file 1 to determine the original version in the basejail:
.Bd -literal -offset indent
# file /usr/jails/basejail/bin/sh
/usr/jails/basejail/bin/sh: ELF 64-bit LSB executable, x86-64, version 1 (FreeBSD), dynamically linked (uses shared libs), for FreeBSD 9.3, stripped
.Ed
.Pp
Now use this information to perform the upgrade from
.Ql 9.3-RELEASE
to the current version of the host system:
.Bd -literal -offset indent
# ezjail-admin update -U -s 9.3-RELEASE
.Ed
.Pp
After updating the basejail,
.Xr mergemaster 8 must be run to update each jail's configuration files.
.Pp
How to use
.Xr mergemaster 8 depends on the purpose and trustworthiness of a jail.
If a jail's services or users are not trusted, then
.Xr mergemaster 8 should only be run from within that jail:
.Pp
Delete the link from the jail's
.Pa /usr/src
into the basejail and create a new
.Pa /usr/src
in the jail as a mountpoint.
Mount the host computer's
.Pa /usr/src
read-only on the jail's new
.Pa /usr/src
mountpoint:
.Bd -literal -offset indent
# rm /usr/jails/jailname/usr/src
# mkdir /usr/jails/jailname/usr/src
# mount -t nullfs -o ro /usr/src /usr/jails/jailname/usr/src
.Ed
.Pp
Get a console in the jail:
.Bd -literal -offset indent
# ezjail-admin console jailname
.Ed
.Pp
Inside the jail, run
.Cm mergemaster
.
Then exit the jail console:
.Bd -literal -offset indent
# cd /usr/src
# mergemaster -U
# exit
.Ed
.Pp
Finally, unmount the jail's
.Pa /usr/src
:
.Bd -literal -offset indent
# umount /usr/jails/jailname/usr/src
.Ed
.Pp
If the users and services in a jail are trusted,
.Xr mergemaster 8 can be run from the host:
.Bd -literal -offset indent
# mergemaster -U -D /usr/jails/jailname
.Ed
.Ss UPDATING PORTS
.Pp
The ports tree in the basejail is shared by the other jails.
Updating that copy of the ports tree gives the other jails the updated version
also.
.Pp
The basejail ports tree is updated with
.Xr portsnap 8 :
.Bd -literal -offset indent
# ezjail-admin update -P
.Ed
.Ss CONTROLLING JAILS
.Ss STOPPING AND STARTING JAILS
.Pp
ezjail automatically starts jails when the computer is started.
Jails can be manually stopped and restarted with
.Cm stop
and
.Cm start
:
.Bd -literal -offset indent
# ezjail-admin stop sambajail
Stopping jails: sambajail.
.Ed
.Pp
By default, jails are started automatically when the host computer starts.
Autostarting can be disabled with
.Cm config
:
.Bd -literal -offset indent
# ezjail-admin config -r norun seldomjail
.Ed
.Pp
This takes effect the next time the host computer is started.
A jail that is already running will not be stopped.
.Pp
Enabling autostart is very similar:
.Bd -literal -offset indent
# ezjail-admin config -r run oftenjail
.Ed
.Ss ARCHIVING AND RESTORING JAILS
.Pp
Use
.Cm archive
to create a
.Pa .tar.gz
archive of a jail.
The file name is composed from the name of the jail and the current date.
Archive files are written to the archive directory,
.Pa /usr/jails/ezjail_archives
.
A different archive directory can be chosen by setting
.Ev ezjail_archivedir
in the configuration file.
.Pp
The archive file can be copied elsewhere as a backup, or an existing jail can
be restored from it with
.Cm restore
.
A new jail can be created from the archive, providing a convenient way to clone
existing jails.
.Pp
Stop and archive a jail named
.Ql wwwserver
:
.Bd -literal -offset indent
# ezjail-admin stop wwwserver
Stopping jails: wwwserver.
# ezjail-admin archive wwwserver
# ls /usr/jails/ezjail-archives/
wwwserver-201407271153.13.tar.gz
.Ed
.Pp
Create a new jail named
.Ql wwwserver-clone
from the archive created in the previous step.
Use the
.Pa em1
interface and assign a new IP address to avoid conflict with the original:
.Bd -literal -offset indent
# ezjail-admin create -a
/usr/jails/ezjail_archives/wwwserver-201407271153.13.tar.gz wwwserver-clone 'lo1|127.0.3.1,em1|192.168.1.51'
.Ed
.Ss FULL EXAMPLE: BIND IN A JAIL
.Pp
Putting the BIND  DNS server in a jail improves security by isolating it.
This example creates a simple caching-only name server.
.Bl -bullet -offset -compact
.It
The jail will be called
.Ql dns1
.
.It
The jail will use IP address
.Ql 192.168.1.240
on the host's
.Ql re0
interface.
.It
The upstream ISP's DNS servers are at
.Ql 10.0.0.62
and
.Ql 10.0.0.61
.
.It
The basejail has already been created and a ports tree installed as shown in .
.El
.Pp
Create a cloned loopback interface by adding a line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
cloned_interfaces="lo1"
.Ed
.Pp
Immediately create the new loopback interface:
.Bd -literal -offset indent
# service netif cloneup
Created clone interfaces: lo1.
.Ed
.Pp
Create the jail:
.Bd -literal -offset indent
# ezjail-admin create dns1 'lo1|127.0.2.1,re0|192.168.1.240'
.Ed
.Pp
Start the jail, connect to a console running on it, and perform some basic
configuration:
.Bd -literal -offset indent
# ezjail-admin start dns1
# ezjail-admin console dns1
# passwd
Changing local password for root
New Password:
Retype New Password:
# tzsetup
# sed -i .bak -e '/adjkerntz/ s/^/#/' /etc/crontab
# sed -i .bak -e 's/127.0.0.1/127.0.2.1/g; s/localhost.my.domain/dns1.my.domain
dns1/' /etc/hosts
.Ed
.Pp
Temporarily set the upstream DNS servers in
.Pa /etc/resolv.conf
so ports can be downloaded:
.Bd -literal -offset indent
nameserver 10.0.0.62
nameserver 10.0.0.61
.Ed
.Pp
Still using the jail console, install
.Ql dns/bind99
.
.Bd -literal -offset indent
# make -C /usr/ports/dns/bind99 install clean
.Ed
.Pp
Configure the name server by editing
.Pa /usr/local/etc/namedb/named.conf
.
.Pp
Create an Access Control List (ACL) of addresses and networks that are permitted to send DNS queries to this name server.
This section is added just before the
.Ql options
section already in the file:
.Bd -literal -offset indent
...
// or cause huge amounts of useless Internet traffic.

acl "trusted" {
	192.168.1.0/24;
	localhost;
	localnets;
};

options {
...
.Ed
.Pp
Use the jail IP address in the
.Ql listen-on
setting to accept DNS queries from other computers on the network:
.Bd -literal -offset indent
	listen-on	{ 192.168.1.240; };
.Ed
.Pp
A simple caching-only DNS name server is created by changing the
.Ql forwarders
section.
The original file contains:
.Bd -literal -offset indent
/*
	forwarders {
		127.0.0.1;
	};
*/
.Ed
.Pp
Uncomment the section by removing the
.Ql /*
and
.Ql */
lines.
Enter the IP addresses of the upstream DNS servers.
Immediately after the
.Ql forwarders
section, add references to the
.Ql trusted
ACL defined earlier:
.Bd -literal -offset indent
	forwarders {
		10.0.0.62;
		10.0.0.61;
	};

	allow-query       { any; };
	allow-recursion   { trusted; };
	allow-query-cache { trusted; };
.Ed
.Pp
Enable the service in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
named_enable="YES"
.Ed
.Pp
Start and test the name server:
.Bd -literal -offset indent
# service named start
wrote key file "/usr/local/etc/namedb/rndc.key"
Starting named.
# /usr/local/bin/dig @192.168.1.240 freebsd.org
.Ed
.Pp
A response that includes
.Bd -literal -offset indent
;; Got answer;
.Ed
.Pp
shows that the new DNS server is working.
A long delay followed by a response including
.Bd -literal -offset indent
;; connection timed out; no servers could be reached
.Ed
.Pp
shows a problem.
Check the configuration settings and make sure any local firewalls allow the
new DNS access to the upstream DNS servers.
.Pp
The new DNS server can use itself for local name resolution, just like other local
computers.
Set the address of the DNS server in the client computer's
.Pa /etc/resolv.conf
:
.Bd -literal -offset indent
nameserver 192.168.1.240
.Ed
.Pp
A local DHCP server can be configured to provide this address for a local DNS server, providing automatic configuration on DHCP clients.
.Ss SYNOPSIS
.Pp
FreeBSD supports security extensions based on the POSIX.1e draft.
These security mechanisms include file system Access Control Lists () and Mandatory Access Control (MAC).
 MAC allows access control modules to be loaded in order to implement security
policies.
Some modules provide protections for a narrow subset of the system, hardening a
particular service.
Others provide comprehensive labeled security across all subjects and objects.
The mandatory part of the definition indicates that enforcement of controls is
performed by administrators and the operating system.
This is in contrast to the default security mechanism of Discretionary Access
Control (DAC) where enforcement is left to the discretion of users.
.Pp
This chapter focuses on the MAC framework and the set of pluggable security policy modules FreeBSD provides for
enabling various security mechanisms.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
The terminology associated with the MAC framework.
.It
The capabilities of MAC security policy modules as well as the difference between a labeled and
non-labeled policy.
.It
The considerations to take into account before configuring a system to use the MAC framework.
.It
Which MAC security policy modules are included in FreeBSD and how to configure them.
.It
How to implement a more secure environment using the MAC framework.
.It
How to test the MAC configuration to ensure the framework has been properly implemented.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Understand UNIX and FreeBSD basics ().
.It
Have some familiarity with security and how it pertains to FreeBSD ().
.El
.Pp
Improper MAC configuration may cause loss of system access, aggravation of users, or
inability to access the features provided by Xorg.
More importantly, MAC should not be relied upon to completely secure a system.
The MAC framework only augments an existing security policy.
Without sound security practices and regular security checks, the system will
never be completely secure.
.Pp
The examples contained within this chapter are for demonstration purposes and
the example settings should not be implemented on a production system.
Implementing any security policy takes a good deal of understanding, proper
design, and thorough testing.
.Pp
While this chapter covers a broad range of security issues relating to the MAC framework, the development of new MAC security policy modules will not be covered.
A number of security policy modules included with the MAC framework have specific characteristics which are provided for both testing and
new module development.
Refer to
.Xr mac_test 4 ,
.Xr mac_stub 4 and
.Xr mac_none 4 for more information on these security policy modules and the various
mechanisms they provide.
.Ss KEY TERMS
.Pp
The following key terms are used when referring to the MAC framework:
.Bl -bullet -offset -compact
.It
compartment: a set of programs and data to be partitioned or separated, where users are
given explicit access to specific component of a system.
A compartment represents a grouping, such as a work group, department, project,
or topic.
Compartments make it possible to implement a need-to-know-basis security
policy.
.It
integrity: the level of trust which can be placed on data.
As the integrity of the data is elevated, so does the ability to trust that
data.
.It
level: the increased or decreased setting of a security attribute.
As the level increases, its security is considered to elevate as well.
.It
label: a security attribute which can be applied to files, directories, or other
items in the system.
It could be considered a confidentiality stamp.
When a label is placed on a file, it describes the security properties of that
file and will only permit access by files, users, and resources with a similar
security setting.
The meaning and interpretation of label values depends on the policy
configuration.
Some policies treat a label as representing the integrity or secrecy of an
object while other policies might use labels to hold rules for access.
.It
multilabel: this property is a file system option which can be set in single-user mode
using
.Xr tunefs 8 , during boot using
.Xr fstab 5 , or during the creation of a new file system.
This option permits an administrator to apply different MAC labels on different objects.
This option only applies to security policy modules which support labeling.
.It
single label: a policy where the entire file system uses one label to enforce access
control over the flow of data.
Whenever
.Ar multilabel
is not set, all files will conform to the same label setting.
.It
object: an entity through which information flows under the direction of a subject.
This includes directories, files, fields, screens, keyboards, memory, magnetic
storage, printers or any other data storage or moving device.
An object is a data container or a system resource.
Access to an object effectively means access to its data.
.It
subject: any active entity that causes information to flow between objects such as a user, user process, or system process.
On FreeBSD, this is almost always a thread acting in a process on behalf of a
user.
.It
policy: a collection of rules which defines how objectives are to be achieved.
A policy usually documents how certain items are to be handled.
This chapter considers a policy to be a collection of rules which controls the
flow of data and information and defines who has access to that data and
information.
.It
high-watermark: this type of policy permits the raising of security levels for the purpose of
accessing higher level information.
In most cases, the original level is restored after the process is complete.
Currently, the FreeBSD MAC framework does not include this type of policy.
.It
low-watermark: this type of policy permits lowering security levels for the purpose of
accessing information which is less secure.
In most cases, the original security level of the user is restored after the
process is complete.
The only security policy module in FreeBSD to use this is
.Xr mac_lomac 4 .
.It
sensitivity: usually used when discussing Multilevel Security (MLS).
A sensitivity level describes how important or secret the data should be.
As the sensitivity level increases, so does the importance of the secrecy, or
confidentiality, of the data.
.El
.Ss UNDERSTANDING MAC LABELS
.Pp
A MAC label is a security attribute which may be applied to subjects and objects
throughout the system.
When setting a label, the administrator must understand its implications in
order to prevent unexpected or undesired behavior of the system.
The attributes available on an object depend on the loaded policy module, as
policy modules interpret their attributes in different ways.
.Pp
The security label on an object is used as a part of a security access control
decision by a policy.
With some policies, the label contains all of the information necessary to make
a decision.
In other policies, the labels may be processed as part of a larger rule set.
.Pp
There are two types of label policies: single label and multi label.
By default, the system will use single label.
The administrator should be aware of the pros and cons of each in order to
implement policies which meet the requirements of the system's security model.
.Pp
A single label security policy only permits one label to be used for every
subject or object.
Since a single label policy enforces one set of access permissions across the
entire system, it provides lower administration overhead, but decreases the
flexibility of policies which support labeling.
However, in many environments, a single label policy may be all that is
required.
.Pp
A single label policy is somewhat similar to DAC as
.Ql root
configures the policies so that users are placed in the appropriate categories
and access levels.
A notable difference is that many policy modules can also restrict
.Ql root
.
Basic control over objects will then be released to the group, but
.Ql root
may revoke or modify the settings at any time.
.Pp
When appropriate, a multi label policy can be set on a UFS file system by passing
.Ar multilabel
to
.Xr tunefs 8 .
A multi label policy permits each subject or object to have its own independent MAC label.
The decision to use a multi label or single label policy is only required for
policies which implement the labeling feature, such as
.Ql biba
,
.Ql lomac
, and
.Ql mls
.
Some policies, such as
.Ql seeotheruids
,
.Ql portacl
and
.Ql partition
, do not use labels at all.
.Pp
Using a multi label policy on a partition and establishing a multi label
security model can increase administrative overhead as everything in that file
system has a label.
This includes directories, files, and even device nodes.
.Pp
The following command will set
.Ar multilabel
on the specified UFS file system.
This may only be done in single-user mode and is not a requirement for the swap
file system:
.Bd -literal -offset indent
# tunefs -l enable /
.Ed
.Pp
Some users have experienced problems with setting the
.Ar multilabel
flag on the root partition.
If this is the case, please review .
.Pp
Since the multi label policy is set on a per-file system basis, a multi label
policy may not be needed if the file system layout is well designed.
Consider an example security MAC model for a FreeBSD web server.
This machine uses the single label,
.Ql biba/high
, for everything in the default file systems.
If the web server needs to run at
.Ql biba/low
to prevent write up capabilities, it could be installed to a separate UFS
.Pa /usr/local
file system set at
.Ql biba/low
.
.Ss LABEL CONFIGURATION
.Pp
Virtually all aspects of label policy module configuration will be performed
using the base system utilities.
These commands provide a simple interface for object or subject configuration
or the manipulation and verification of the configuration.
.Pp
All configuration may be done using
.Cm setfmac
, which is used to set MAC labels on system objects, and
.Cm setpmac
, which is used to set the labels on system subjects.
For example, to set the
.Ql biba
MAC label to
.Ql high
on
.Pa test
:
.Bd -literal -offset indent
# setfmac biba/high test
.Ed
.Pp
If the configuration is successful, the prompt will be returned without error.
A common error is
.Er Permission denied
which usually occurs when the label is being set or modified on a restricted
object.
Other conditions may produce different failures.
For instance, the file may not be owned by the user attempting to relabel the
object, the object may not exist, or the object may be read-only.
A mandatory policy will not allow the process to relabel the file, maybe
because of a property of the file, a property of the process, or a property of
the proposed new label value.
For example, if a user running at low integrity tries to change the label of a
high integrity file, or a user running at low integrity tries to change the
label of a low integrity file to a high integrity label, these operations will
fail.
.Pp
The system administrator may use
.Cm setpmac
to override the policy module's settings by assigning a different label to the
invoked process:
.Bd -literal -offset indent
# setfmac biba/high test
.Er Permission denied

# setpmac biba/low setfmac biba/high test
# getfmac test
test: biba/high
.Ed
.Pp
For currently running processes, such as sendmail,
.Cm getpmac
is usually used instead.
This command takes a process ID (PID) in place of a command name.
If users attempt to manipulate a file not in their access, subject to the rules
of the loaded policy modules, the
.Er Operation not permitted
error will be displayed.
.Ss PREDEFINED LABELS
.Pp
A few FreeBSD policy modules which support the labeling feature offer three
predefined labels:
.Ql low
,
.Ql equal
, and
.Ql high
, where:
.Bl -bullet -offset -compact
.It
.Ql low
is considered the lowest label setting an object or subject may have.
Setting this on objects or subjects blocks their access to objects or subjects
marked high.
.It
.Ql equal
sets the subject or object to be disabled or unaffected and should only be
placed on objects considered to be exempt from the policy.
.It
.Ql high
grants an object or subject the highest setting available in the Biba and MLS policy modules.
.El
.Pp
Such policy modules include
.Xr mac_biba 4 ,
.Xr mac_mls 4 and
.Xr mac_lomac 4 .
Each of the predefined labels establishes a different information flow
directive.
Refer to the manual page of the module to determine the traits of the generic
label configurations.
.Ss NUMERIC LABELS
.Pp
The Biba and MLS policy modules support a numeric label which may be set to indicate the precise
level of hierarchical control.
This numeric level is used to partition or sort information into different
groups of classification, only permitting access to that group or a higher
group level.
For example:
.Bd -literal -offset indent
biba/10:2+3+6(5:2+3-20:2+3+4+5+6)
.Ed
.Pp
may be interpreted as
.Do
Biba Policy Label/Grade 10:Compartments 2, 3 and 6: (grade 5 ...
.Dc
)
.Pp
In this example, the first grade would be considered the effective grade with
effective compartments, the second grade is the low grade, and the last one is
the high grade.
In most configurations, such fine-grained settings are not needed as they are
considered to be advanced configurations.
.Pp
System objects only have a current grade and compartment.
System subjects reflect the range of available rights in the system, and
network interfaces, where they are used for access control.
.Pp
The grade and compartments in a subject and object pair are used to construct a
relationship known as
.Ql dominance
, in which a subject dominates an object, the object dominates the subject,
neither dominates the other, or both dominate each other.
The
.Do
both dominate
.Dc
case occurs when the two labels are equal.
Due to the information flow nature of Biba, a user has rights to a set of
compartments that might correspond to projects, but objects also have a set of
compartments.
Users may have to subset their rights using
.Cm su
or
.Cm setpmac
in order to access objects in a compartment from which they are not restricted.
.Ss USER LABELS
.Pp
Users are required to have labels so that their files and processes properly
interact with the security policy defined on the system.
This is configured in
.Pa /etc/login.conf
using login classes.
Every policy module that uses labels will implement the user class setting.
.Pp
To set the user class default label which will be enforced by MAC, add a
.Ar label
entry.
An example
.Ar label
entry containing every policy module is displayed below.
Note that in a real configuration, the administrator would never enable every
policy module.
It is recommended that the rest of this chapter be reviewed before any
configuration is implemented.
.Bd -literal -offset indent
default:\
	:copyright=/etc/COPYRIGHT:\
	:welcome=/etc/motd:\
	:setenv=MAIL=/var/mail/$,BLOCKSIZE=K:\
	:path=~/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:\
	:manpath=/usr/share/man /usr/local/man:\
	:nologin=/usr/sbin/nologin:\
	:cputime=1h30m:\
	:datasize=8M:\
	:vmemoryuse=100M:\
	:stacksize=2M:\
	:memorylocked=4M:\
	:memoryuse=8M:\
	:filesize=8M:\
	:coredumpsize=8M:\
	:openfiles=24:\
	:maxproc=32:\
	:priority=0:\
	:requirehome:\
	:passwordtime=91d:\
	:umask=022:\
	:ignoretime@:\
	:label=partition/13,mls/5,biba/10(5-15),lomac/10[2]:
.Ed
.Pp
While users can not modify the default value, they may change their label after
they login, subject to the constraints of the policy.
The example above tells the Biba policy that a process's minimum integrity is
.Ql 5
, its maximum is
.Ql 15
, and the default effective label is
.Ql 10
.
The process will run at
.Ql 10
until it chooses to change label, perhaps due to the user using
.Cm setpmac
, which will be constrained by Biba to the configured range.
.Pp
After any change to
.Pa login.conf
, the login class capability database must be rebuilt using
.Cm cap_mkdb
.
.Pp
Many sites have a large number of users requiring several different user
classes.
In depth planning is required as this can become difficult to manage.
.Ss NETWORK INTERFACE LABELS
.Pp
Labels may be set on network interfaces to help control the flow of data across
the network.
Policies using network interface labels function in the same way that policies
function with respect to objects.
Users at high settings in Biba, for example, will not be permitted to access
network interfaces with a label of
.Ql low
.
.Pp
When setting the MAC label on network interfaces,
.Ar maclabel
may be passed to
.Cm ifconfig
:
.Bd -literal -offset indent
# ifconfig bge0 maclabel biba/equal
.Ed
.Pp
This example will set the MAC label of
.Ql biba/equal
on the
.Ql bge0
interface.
When using a setting similar to
.Ql biba/high(low-high)
, the entire label should be quoted to prevent an error from being returned.
.Pp
Each policy module which supports labeling has a tunable which may be used to
disable the MAC label on network interfaces.
Setting the label to
.Ar equal
will have a similar effect.
Review the output of
.Cm sysctl
, the policy manual pages, and the information in the rest of this chapter for
more information on those tunables.
.Ss PLANNING THE SECURITY CONFIGURATION
.Pp
Before implementing any MAC policies, a planning phase is recommended.
During the planning stages, an administrator should consider the implementation
requirements and goals, such as:
.Bl -bullet -offset -compact
.It
How to classify information and resources available on the target systems.
.It
Which information or resources to restrict access to along with the type of
restrictions that should be applied.
.It
Which MAC modules will be required to achieve this goal.
.El
.Pp
A trial run of the trusted system and its configuration should occur before a MAC implementation is used on production systems.
Since different environments have different needs and requirements,
establishing a complete security profile will decrease the need of changes once
the system goes live.
.Pp
Consider how the MAC framework augments the security of the system as a whole.
The various security policy modules provided by the MAC framework could be used to protect the network and file systems or to block
users from accessing certain ports and sockets.
Perhaps the best use of the policy modules is to load several security policy
modules at a time in order to provide a MLS environment.
This approach differs from a hardening policy, which typically hardens elements
of a system which are used only for specific purposes.
The downside to MLS is increased administrative overhead.
.Pp
The overhead is minimal when compared to the lasting effect of a framework
which provides the ability to pick and choose which policies are required for a
specific configuration and which keeps performance overhead down.
The reduction of support for unneeded policies can increase the overall
performance of the system as well as offer flexibility of choice.
A good implementation would consider the overall security requirements and
effectively implement the various security policy modules offered by the
framework.
.Pp
A system utilizing MAC guarantees that a user will not be permitted to change security attributes at
will.
All user utilities, programs, and scripts must work within the constraints of
the access rules provided by the selected security policy modules and control
of the MAC access rules is in the hands of the system administrator.
.Pp
It is the duty of the system administrator to carefully select the correct
security policy modules.
For an environment that needs to limit access control over the network, the
.Xr mac_portacl 4 ,
.Xr mac_ifoff 4 , and
.Xr mac_biba 4 policy modules make good starting points.
For an environment where strict confidentiality of file system objects is
required, consider the
.Xr mac_bsdextended 4 and
.Xr mac_mls 4 policy modules.
.Pp
Policy decisions could be made based on network configuration.
If only certain users should be permitted access to
.Xr ssh 1 , the
.Xr mac_portacl 4 policy module is a good choice.
In the case of file systems, access to objects might be considered confidential
to some users, but not to others.
As an example, a large development team might be broken off into smaller
projects where developers in project A might not be permitted to access objects
written by developers in project B.
Yet both projects might need to access objects created by developers in project
C.
Using the different security policy modules provided by the MAC framework, users could be divided into these groups and then given access to
the appropriate objects.
.Pp
Each security policy module has a unique way of dealing with the overall
security of a system.
Module selection should be based on a well thought out security policy which
may require revision and reimplementation.
Understanding the different security policy modules offered by the MAC framework will help administrators choose the best policies for their
situations.
.Pp
The rest of this chapter covers the available modules, describes their use and
configuration, and in some cases, provides insight on applicable situations.
.Pp
Implementing MAC is much like implementing a firewall since care must be taken to prevent being
completely locked out of the system.
The ability to revert back to a previous configuration should be considered and
the implementation of MAC over a remote connection should be done with extreme caution.
.Ss AVAILABLE MAC POLICIES
.Pp
The default FreeBSD kernel includes
.Ql options MAC
.
This means that every module included with the MAC framework can be loaded with
.Cm kldload
as a run-time kernel module.
After testing the module, add the module name to
.Pa /boot/loader.conf
so that it will load during boot.
Each module also provides a kernel option for those administrators who choose
to compile their own custom kernel.
.Pp
FreeBSD includes a group of policies that will cover most security
requirements.
Each policy is summarized below.
The last three policies support integer settings in place of the three default
labels.
.Ss THE MAC SEE OTHER UIDS POLICY
.Pp
Module name:
.Pa mac_seeotheruids.ko
.Pp
Kernel configuration line:
.Ql options MAC_SEEOTHERUIDS
.Pp
Boot option:
.Ql mac_seeotheruids_load="YES"
.Pp
The
.Xr mac_seeotheruids 4 module extends the
.Ev security.bsd.see_other_uids
and
.Ev security.bsd.see_other_gids
.Cm sysctl
tunables.
This option does not require any labels to be set before configuration and can
operate transparently with other modules.
.Pp
After loading the module, the following
.Cm sysctl
tunables may be used to control its features:
.Bl -bullet -offset -compact
.It
.Ev security.mac.seeotheruids.enabled
enables the module and implements the default settings which deny users the
ability to view processes and sockets owned by other users.
.It
.Ev security.mac.seeotheruids.specificgid_enabled
allows specified groups to be exempt from this policy.
To exempt specific groups, use the
.Ev security.mac.seeotheruids.specificgid=XXX
.Cm sysctl
tunable, replacing XXX with the numeric group ID to be exempted.
.It
.Ev security.mac.seeotheruids.primarygroup_enabled
is used to exempt specific primary groups from this policy.
When using this tunable,
.Ev security.mac.seeotheruids.specificgid_enabled
may not be set.
.El
.Ss THE MAC BSD EXTENDED POLICY
.Pp
Module name:
.Pa mac_bsdextended.ko
.Pp
Kernel configuration line:
.Ql options MAC_BSDEXTENDED
.Pp
Boot option:
.Ql mac_bsdextended_load="YES"
.Pp
The
.Xr mac_bsdextended 4 module enforces a file system firewall.
It provides an extension to the standard file system permissions model,
permitting an administrator to create a firewall-like ruleset to protect files,
utilities, and directories in the file system hierarchy.
When access to a file system object is attempted, the list of rules is iterated
until either a matching rule is located or the end is reached.
This behavior may be changed using
.Ev security.mac.bsdextended.firstmatch_enabled
.
Similar to other firewall modules in FreeBSD, a file containing the access
control rules can be created and read by the system at boot time using an
.Xr rc.conf 5 variable.
.Pp
The rule list may be entered using
.Xr ugidfw 8 which has a syntax similar to
.Xr ipfw 8 .
More tools can be written by using the functions in the
.Xr libugidfw 3 library.
.Pp
After the
.Xr mac_bsdextended 4 module has been loaded, the following command may be used to list the current
rule configuration:
.Bd -literal -offset indent
# ugidfw list
0 slots, 0 rules
.Ed
.Pp
By default, no rules are defined and everything is completely accessible.
To create a rule which blocks all access by users but leaves
.Ql root
unaffected:
.Bd -literal -offset indent
# ugidfw add subject not uid root new object not uid root mode n
.Ed
.Pp
While this rule is simple to implement, it is a very bad idea as it blocks all
users from issuing any commands.
A more realistic example blocks
.Ql user1
all access, including directory listings, to
.Ql user2
's home directory:
.Bd -literal -offset indent
# ugidfw set 2 subject uid user1 object uid user2 mode n
# ugidfw set 3 subject uid user1 object gid user2 mode n
.Ed
.Pp
Instead of
.Ql user1
,
.Ar not uid user2
could be used in order to enforce the same access restrictions for all users.
However, the
.Ql root
user is unaffected by these rules.
.Pp
Extreme caution should be taken when working with this module as incorrect use
could block access to certain parts of the file system.
.Ss THE MAC INTERFACE SILENCING POLICY
.Pp
Module name:
.Pa mac_ifoff.ko
.Pp
Kernel configuration line:
.Ql options MAC_IFOFF
.Pp
Boot option:
.Ql mac_ifoff_load="YES"
.Pp
The
.Xr mac_ifoff 4 module is used to disable network interfaces on the fly and to keep network
interfaces from being brought up during system boot.
It does not use labels and does not depend on any other MAC modules.
.Pp
Most of this module's control is performed through these
.Cm sysctl
tunables:
.Bl -bullet -offset -compact
.It
.Ev security.mac.ifoff.lo_enabled
enables or disables all traffic on the loopback,
.Xr lo 4 , interface.
.It
.Ev security.mac.ifoff.bpfrecv_enabled
enables or disables all traffic on the Berkeley Packet Filter interface,
.Xr bpf 4 .
.It
.Ev security.mac.ifoff.other_enabled
enables or disables traffic on all other interfaces.
.El
.Pp
One of the most common uses of
.Xr mac_ifoff 4 is network monitoring in an environment where network traffic should not be
permitted during the boot sequence.
Another use would be to write a script which uses an application such as
.Ql security/aide
to automatically block network traffic if it finds new or altered files in
protected directories.
.Ss THE MAC PORT ACCESS CONTROL LIST POLICY
.Pp
Module name:
.Pa mac_portacl.ko
.Pp
Kernel configuration line:
.Ql MAC_PORTACL
.Pp
Boot option:
.Ql mac_portacl_load="YES"
.Pp
The
.Xr mac_portacl 4 module is used to limit binding to local TCP and UDP ports, making it possible to allow non-
.Ql root
users to bind to specified privileged ports below 1024.
.Pp
Once loaded, this module enables the MAC policy on all sockets.
The following tunables are available:
.Bl -bullet -offset -compact
.It
.Ev security.mac.portacl.enabled
enables or disables the policy completely.
.It
.Ev security.mac.portacl.port_high
sets the highest port number that
.Xr mac_portacl 4 protects.
.It
.Ev security.mac.portacl.suser_exempt
, when set to a non-zero value, exempts the
.Ql root
user from this policy.
.It
.Ev security.mac.portacl.rules
specifies the policy as a text string of the form
.Ql rule[,rule,...]
, with as many rules as needed, and where each rule is of the form
.Ql idtype:id:protocol:port
.
The
.Ar idtype
is either
.Ql uid
or
.Ql gid
.
The
.Ar protocol
parameter can be
.Ql tcp
or
.Ql udp
.
The
.Ar port
parameter is the port number to allow the specified user or group to bind to.
Only numeric values can be used for the user ID, group ID, and port parameters.
.El
.Pp
By default, ports below 1024 can only be used by privileged processes which run
as
.Ql root
.
For
.Xr mac_portacl 4 to allow non-privileged processes to bind to ports below 1024, set the
following tunables as follows:
.Bd -literal -offset indent
# sysctl security.mac.portacl.port_high=1023
# sysctl net.inet.ip.portrange.reservedlow=0
# sysctl net.inet.ip.portrange.reservedhigh=0
.Ed
.Pp
To prevent the
.Ql root
user from being affected by this policy, set
.Ev security.mac.portacl.suser_exempt
to a non-zero value.
.Bd -literal -offset indent
# sysctl security.mac.portacl.suser_exempt=1
.Ed
.Pp
To allow the
.Ql www
user with UID 80 to bind to port 80 without ever needing
.Ql root
privilege:
.Bd -literal -offset indent
# sysctl security.mac.portacl.rules=uid:80:tcp:80
.Ed
.Pp
This next example permits the user with the UID of 1001 to bind to TCP ports 110 (POP3) and 995 (POP3s):
.Bd -literal -offset indent
# sysctl security.mac.portacl.rules=uid:1001:tcp:110,uid:1001:tcp:995
.Ed
.Ss THE MAC PARTITION POLICY
.Pp
Module name:
.Pa mac_partition.ko
.Pp
Kernel configuration line:
.Ql options MAC_PARTITION
.Pp
Boot option:
.Ql mac_partition_load="YES"
.Pp
The
.Xr mac_partition 4 policy drops processes into specific
.Do
partitions
.Dc
based on their MAC label.
Most configuration for this policy is done using
.Xr setpmac 8 .
One
.Cm sysctl
tunable is available for this policy:
.Bl -bullet -offset -compact
.It
.Ev security.mac.partition.enabled
enables the enforcement of MAC process partitions.
.El
.Pp
When this policy is enabled, users will only be permitted to see their
processes, and any others within their partition, but will not be permitted to
work with utilities outside the scope of this partition.
For instance, a user in the
.Ql insecure
class will not be permitted to access
.Cm top
as well as many other commands that must spawn a process.
.Pp
This example adds
.Cm top
to the label set on users in the
.Ql insecure
class.
All processes spawned by users in the
.Ql insecure
class will stay in the
.Ql partition/13
label.
.Bd -literal -offset indent
# setpmac partition/13 top
.Ed
.Pp
This command displays the partition label and the process list:
.Bd -literal -offset indent
# ps Zax
.Ed
.Pp
This command displays another user's process partition label and that user's
currently running processes:
.Bd -literal -offset indent
# ps -ZU trhodes
.Ed
.Pp
Users can see processes in
.Ql root
's label unless the
.Xr mac_seeotheruids 4 policy is loaded.
.Ss THE MAC MULTI-LEVEL SECURITY MODULE
.Pp
Module name:
.Pa mac_mls.ko
.Pp
Kernel configuration line:
.Ql options MAC_MLS
.Pp
Boot option:
.Ql mac_mls_load="YES"
.Pp
The
.Xr mac_mls 4 policy controls access between subjects and objects in the system by enforcing
a strict information flow policy.
.Pp
In MLS environments, a
.Do
clearance
.Dc
level is set in the label of each subject or object, along with compartments.
Since these clearance levels can reach numbers greater than several thousand,
it would be a daunting task to thoroughly configure every subject or object.
To ease this administrative overhead, three labels are included in this policy:
.Ql mls/low
,
.Ql mls/equal
, and
.Ql mls/high
, where:
.Bl -bullet -offset -compact
.It
Anything labeled with
.Ql mls/low
will have a low clearance level and not be permitted to access information of a
higher level.
This label also prevents objects of a higher clearance level from writing or
passing information to a lower level.
.It
.Ql mls/equal
should be placed on objects which should be exempt from the policy.
.It
.Ql mls/high
is the highest level of clearance possible.
Objects assigned this label will hold dominance over all other objects in the
system; however, they will not permit the leaking of information to objects of
a lower class.
.El
.Pp
MLS provides:
.Bl -bullet -offset -compact
.It
A hierarchical security level with a set of non-hierarchical categories.
.It
Fixed rules of
.Ql no read up, no write down
.
This means that a subject can have read access to objects on its own level or
below, but not above.
Similarly, a subject can have write access to objects on its own level or
above, but not beneath.
.It
Secrecy, or the prevention of inappropriate disclosure of data.
.It
A basis for the design of systems that concurrently handle data at multiple
sensitivity levels without leaking information between secret and confidential.
.El
.Pp
The following
.Cm sysctl
tunables are available:
.Bl -bullet -offset -compact
.It
.Ev security.mac.mls.enabled
is used to enable or disable the MLS policy.
.It
.Ev security.mac.mls.ptys_equal
labels all
.Xr pty 4 devices as
.Ql mls/equal
during creation.
.It
.Ev security.mac.mls.revocation_enabled
revokes access to objects after their label changes to a label of a lower
grade.
.It
.Ev security.mac.mls.max_compartments
sets the maximum number of compartment levels allowed on a system.
.El
.Pp
To manipulate MLS labels, use
.Xr setfmac 8 .
To assign a label to an object:
.Bd -literal -offset indent
# setfmac mls/5 test
.Ed
.Pp
To get the MLS label for the file
.Pa test
:
.Bd -literal -offset indent
# getfmac test
.Ed
.Pp
Another approach is to create a master policy file in
.Pa /etc/
which specifies the MLS policy information and to feed that file to
.Cm setfmac
.
.Pp
When using the MLS policy module, an administrator plans to control the flow of sensitive
information.
The default
.Ql block read up block write down
sets everything to a low state.
Everything is accessible and an administrator slowly augments the
confidentiality of the information.
.Pp
Beyond the three basic label options, an administrator may group users and
groups as required to block the information flow between them.
It might be easier to look at the information in clearance levels using
descriptive words, such as classifications of
.Ql Confidential
,
.Ql Secret
, and
.Ql Top Secret
.
Some administrators instead create different groups based on project levels.
Regardless of the classification method, a well thought out plan must exist
before implementing a restrictive policy.
.Pp
Some example situations for the MLS policy module include an e-commerce web server, a file server holding critical
company information, and financial institution environments.
.Ss THE MAC BIBA MODULE
.Pp
Module name:
.Pa mac_biba.ko
.Pp
Kernel configuration line:
.Ql options MAC_BIBA
.Pp
Boot option:
.Ql mac_biba_load="YES"
.Pp
The
.Xr mac_biba 4 module loads the MAC Biba policy.
This policy is similar to the MLS policy with the exception that the rules for information flow are slightly
reversed.
This is to prevent the downward flow of sensitive information whereas the MLS policy prevents the upward flow of sensitive information.
.Pp
In Biba environments, an
.Do
integrity
.Dc
label is set on each subject or object.
These labels are made up of hierarchical grades and non-hierarchical
components.
As a grade ascends, so does its integrity.
.Pp
Supported labels are
.Ql biba/low
,
.Ql biba/equal
, and
.Ql biba/high
, where:
.Bl -bullet -offset -compact
.It
.Ql biba/low
is considered the lowest integrity an object or subject may have.
Setting this on objects or subjects blocks their write access to objects or
subjects marked as
.Ql biba/high
, but will not prevent read access.
.It
.Ql biba/equal
should only be placed on objects considered to be exempt from the policy.
.It
.Ql biba/high
permits writing to objects set at a lower label, but does not permit reading
that object.
It is recommended that this label be placed on objects that affect the
integrity of the entire system.
.El
.Pp
Biba provides:
.Bl -bullet -offset -compact
.It
Hierarchical integrity levels with a set of non-hierarchical integrity
categories.
.It
Fixed rules are
.Ql no write up, no read down
, the opposite of MLS.
A subject can have write access to objects on its own level or below, but not
above.
Similarly, a subject can have read access to objects on its own level or above,
but not below.
.It
Integrity by preventing inappropriate modification of data.
.It
Integrity levels instead of MLS sensitivity levels.
.El
.Pp
The following tunables can be used to manipulate the Biba policy:
.Bl -bullet -offset -compact
.It
.Ev security.mac.biba.enabled
is used to enable or disable enforcement of the Biba policy on the target
machine.
.It
.Ev security.mac.biba.ptys_equal
is used to disable the Biba policy on
.Xr pty 4 devices.
.It
.Ev security.mac.biba.revocation_enabled
forces the revocation of access to objects if the label is changed to dominate
the subject.
.El
.Pp
To access the Biba policy setting on system objects, use
.Cm setfmac
and
.Cm getfmac
:
.Bd -literal -offset indent
# setfmac biba/low test
# getfmac test
test: biba/low
.Ed
.Pp
Integrity, which is different from sensitivity, is used to guarantee that
information is not manipulated by untrusted parties.
This includes information passed between subjects and objects.
It ensures that users will only be able to modify or access information they
have been given explicit access to.
The
.Xr mac_biba 4 security policy module permits an administrator to configure which files and
programs a user may see and invoke while assuring that the programs and files
are trusted by the system for that user.
.Pp
During the initial planning phase, an administrator must be prepared to
partition users into grades, levels, and areas.
The system will default to a high label once this policy module is enabled, and
it is up to the administrator to configure the different grades and levels for
users.
Instead of using clearance levels, a good planning method could include topics.
For instance, only allow developers modification access to the source code
repository, source code compiler, and other development utilities.
Other users would be grouped into other categories such as testers, designers,
or end users and would only be permitted read access.
.Pp
A lower integrity subject is unable to write to a higher integrity subject and
a higher integrity subject cannot list or read a lower integrity object.
Setting a label at the lowest possible grade could make it inaccessible to
subjects.
Some prospective environments for this security policy module would include a
constrained web server, a development and test machine, and a source code
repository.
A less useful implementation would be a personal workstation, a machine used as
a router, or a network firewall.
.Ss THE MAC LOW-WATERMARK MODULE
.Pp
Module name:
.Pa mac_lomac.ko
.Pp
Kernel configuration line:
.Ql options MAC_LOMAC
.Pp
Boot option:
.Ql mac_lomac_load="YES"
.Pp
Unlike the MAC Biba policy, the
.Xr mac_lomac 4 policy permits access to lower integrity objects only after decreasing the
integrity level to not disrupt any integrity rules.
.Pp
The Low-watermark integrity policy works almost identically to Biba, with the
exception of using floating labels to support subject demotion via an auxiliary
grade compartment.
This secondary compartment takes the form
.Ql [auxgrade]
.
When assigning a policy with an auxiliary grade, use the syntax
.Ql lomac/10[2]
, where
.Ql 2
is the auxiliary grade.
.Pp
This policy relies on the ubiquitous labeling of all system objects with
integrity labels, permitting subjects to read from low integrity objects and
then downgrading the label on the subject to prevent future writes to high
integrity objects using
.Ql [auxgrade]
.
The policy may provide greater compatibility and require less initial
configuration than Biba.
.Pp
Like the Biba and MLS policies,
.Cm setfmac
and
.Cm setpmac
are used to place labels on system objects:
.Bd -literal -offset indent
# setfmac /usr/home/trhodes lomac/high[low]
# getfmac /usr/home/trhodes lomac/high[low]
.Ed
.Pp
The auxiliary grade
.Ql low
is a feature provided only by the MAC  LOMAC policy.
.Ss USER LOCK DOWN
.Pp
This example considers a relatively small storage system with fewer than fifty
users.
Users will have login capabilities and are permitted to store data and access
resources.
.Pp
For this scenario, the
.Xr mac_bsdextended 4 and
.Xr mac_seeotheruids 4 policy modules could co-exist and block access to system objects while hiding
user processes.
.Pp
Begin by adding the following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
mac_seeotheruids_load="YES"
.Ed
.Pp
The
.Xr mac_bsdextended 4 security policy module may be activated by adding this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
ugidfw_enable="YES"
.Ed
.Pp
Default rules stored in
.Pa /etc/rc.bsdextended
will be loaded at system initialization.
However, the default entries may need modification.
Since this machine is expected only to service users, everything may be left
commented out except the last two lines in order to force the loading of user
owned system objects by default.
.Pp
Add the required users to this machine and reboot.
For testing purposes, try logging in as a different user across two consoles.
Run
.Cm ps aux
to see if processes of other users are visible.
Verify that running
.Xr ls 1 on another user's home directory fails.
.Pp
Do not try to test with the
.Ql root
user unless the specific
.Cm sysctl
s have been modified to block super user access.
.Pp
When a new user is added, their
.Xr mac_bsdextended 4 rule will not be in the ruleset list.
To update the ruleset quickly, unload the security policy module and reload it
again using
.Xr kldunload 8 and
.Xr kldload 8 .
.Ss NAGIOS IN A MAC JAIL
.Pp
This section demonstrates the steps that are needed to implement the Nagios network monitoring system in a MAC environment.
This is meant as an example which still requires the administrator to test that
the implemented policy meets the security requirements of the network before
using in a production environment.
.Pp
This example requires
.Ar multilabel
to be set on each file system.
It also assumes that
.Ql net-mgmt/nagios-plugins
,
.Ql net-mgmt/nagios
, and
.Ql www/apache22
are all installed, configured, and working correctly before attempting the
integration into the MAC framework.
.Ss CREATE AN INSECURE USER CLASS
.Pp
Begin the procedure by adding the following user class to
.Pa /etc/login.conf
:
.Bd -literal -offset indent
insecure:\
:copyright=/etc/COPYRIGHT:\
:welcome=/etc/motd:\
:setenv=MAIL=/var/mail/$,BLOCKSIZE=K:\
:path=~/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
:manpath=/usr/share/man /usr/local/man:\
:nologin=/usr/sbin/nologin:\
:cputime=1h30m:\
:datasize=8M:\
:vmemoryuse=100M:\
:stacksize=2M:\
:memorylocked=4M:\
:memoryuse=8M:\
:filesize=8M:\
:coredumpsize=8M:\
:openfiles=24:\
:maxproc=32:\
:priority=0:\
:requirehome:\
:passwordtime=91d:\
:umask=022:\
:ignoretime@:\
:label=biba/10(10-10):
.Ed
.Pp
Then, add the following line to the default user class section:
.Bd -literal -offset indent
:label=biba/high:
.Ed
.Pp
Save the edits and issue the following command to rebuild the database:
.Bd -literal -offset indent
# cap_mkdb /etc/login.conf
.Ed
.Ss CONFIGURE USERS
.Pp
Set the
.Ql root
user to the default class using:
.Bd -literal -offset indent
# pw usermod root -L default
.Ed
.Pp
All user accounts that are not
.Ql root
will now require a login class.
The login class is required, otherwise users will be refused access to common
commands.
The following
.Cm sh
script should do the trick:
.Bd -literal -offset indent
# for x in `awk -F: '($3 >= 1001) && ($3 != 65534) { print $1 }' \
	/etc/passwd`; do pw usermod $x -L default; done;
.Ed
.Pp
Next, drop the
.Ql nagios
and
.Ql www
accounts into the insecure class:
.Bd -literal -offset indent
# pw usermod nagios -L insecure
# pw usermod www -L insecure
.Ed
.Ss CREATE THE CONTEXTS FILE
.Pp
A contexts file should now be created as
.Pa /etc/policy.contexts
:
.Bd -literal -offset indent
# This is the default BIBA policy for this system.

# System:
/var/run(/.*)?			biba/equal

/dev/(/.*)?			biba/equal

/var				biba/equal
/var/spool(/.*)?		biba/equal

/var/log(/.*)?			biba/equal

/tmp(/.*)?			biba/equal
/var/tmp(/.*)?			biba/equal

/var/spool/mqueue		biba/equal
/var/spool/clientmqueue		biba/equal

# For Nagios:
/usr/local/etc/nagios(/.*)?	biba/10

/var/spool/nagios(/.*)?		biba/10

# For apache
/usr/local/etc/apache(/.*)?	biba/10
.Ed
.Pp
This policy enforces security by setting restrictions on the flow of
information.
In this specific configuration, users, including
.Ql root
, should never be allowed to access Nagios.
Configuration files and processes that are a part of Nagios will be completely self contained or jailed.
.Pp
This file will be read after running
.Cm setfsmac
on every file system.
This example sets the policy on the root file system:
.Bd -literal -offset indent
# setfsmac -ef /etc/policy.contexts /
.Ed
.Pp
Next, add these edits to the main section of
.Pa /etc/mac.conf
:
.Bd -literal -offset indent
default_labels file ?biba
default_labels ifnet ?biba
default_labels process ?biba
default_labels socket ?biba
.Ed
.Ss LOADER CONFIGURATION
.Pp
To finish the configuration, add the following lines to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
mac_biba_load="YES"
mac_seeotheruids_load="YES"
security.mac.biba.trust_all_interfaces=1
.Ed
.Pp
And the following line to the network card configuration stored in
.Pa /etc/rc.conf
.
If the primary network configuration is done via DHCP, this may need to be configured manually after every system boot:
.Bd -literal -offset indent
maclabel biba/equal
.Ed
.Ss TESTING THE CONFIGURATION
.Pp
First, ensure that the web server and Nagios will not be started on system initialization and reboot.
Ensure that
.Ql root
cannot access any of the files in the Nagios configuration directory.
If
.Ql root
can list the contents of
.Pa /var/spool/nagios
, something is wrong.
Instead, a
.Do
permission denied
.Dc
error should be returned.
.Pp
If all seems well, Nagios, Apache, and Sendmail can now be started:
.Bd -literal -offset indent
# cd /etc/mail && make stop && \ setpmac biba/equal make start && setpmac
biba/10\(10-10\) apachectl start && \ setpmac biba/10\(10-10\)
/usr/local/etc/rc.d/nagios.sh forcestart
.Ed
.Pp
Double check to ensure that everything is working properly.
If not, check the log files for error messages.
If needed, use
.Xr sysctl 8 to disable the
.Xr mac_biba 4 security policy module and try starting everything again as usual.
.Pp
The
.Ql root
user can still change the security enforcement and edit its configuration
files.
The following command will permit the degradation of the security policy to a
lower grade for a newly spawned shell:
.Bd -literal -offset indent
# setpmac biba/10 csh
.Ed
.Pp
To block this from happening, force the user into a range using
.Xr login.conf 5 .
If
.Xr setpmac 8 attempts to run a command outside of the compartment's range, an error will be
returned and the command will not be executed.
In this case, set root to
.Ql biba/high(high-high)
.
.Ss TROUBLESHOOTING THE MAC FRAMEWORK
.Pp
This section discusses common configuration errors and how to resolve them.
.Bl -tag -offset -compact
.It The
.Ar multilabel
flag does not stay enabled on the root (
.Pa /
) partition:
The following steps may resolve this transient error:Edit
.Pa /etc/fstab
and set the root partition to
.Ar ro
for read-only.
Reboot into single user mode.
Run
.Cm tunefs
.Ar -l enable
on
.Pa /
.
Reboot the system.
Run
.Cm mount
.Ar -urw
.Pa /
and change the
.Ar ro
back to
.Ar rw
in
.Pa /etc/fstab
and reboot the system again.
Double-check the output from
.Cm mount
to ensure that
.Ar multilabel
has been properly set on the root file system.
.It After establishing a secure environment with MAC, Xorg no longer starts:
This could be caused by the MAC
.Ql partition
policy or by a mislabeling in one of the MAC labeling policies.
To debug, try the following:Check the error message.
If the user is in the
.Ql insecure
class, the
.Ql partition
policy may be the culprit.
Try setting the user's class back to the
.Ql default
class and rebuild the database with
.Cm cap_mkdb
.
If this does not alleviate the problem, go to step two.
Double-check that the label policies are set correctly for the user, Xorg, and the
.Pa /dev
entries.
If neither of these resolve the problem, send the error message and a
description of the environment to the FreeBSD general questions mailing list.
.It The
.Er _secure_path: unable to stat .login_conf
error appears:
This error can appear when a user attempts to switch from the
.Ql root
user to another user in the system.
This message usually occurs when the user has a higher label setting than that
of the user they are attempting to become.
For instance, if
.Ql joe
has a default label of
.Ar biba/low
and
.Ql root
has a label of
.Ar biba/high
,
.Ql root
cannot view
.Ql joe
's home directory.
This will happen whether or not
.Ql root
has used
.Cm su
to become
.Ql joe
as the Biba integrity model will not permit
.Ql root
to view objects set at a lower integrity level.
.It The system no longer recognizes
.Ql root
:
When this occurs,
.Cm whoami
returns
.Ql 0
and
.Cm su
returns
.Er who are you?
.
This can happen if a labeling policy has been disabled by
.Xr sysctl 8 or the policy module was unloaded.
If the policy is disabled, the login capabilities database needs to be
reconfigured.
Double check
.Pa /etc/login.conf
to ensure that all
.Ar label
options have been removed and rebuild the database with
.Cm cap_mkdb
.
This may also happen if a policy restricts access to
.Pa master.passwd
.
This is usually caused by an administrator altering the file under a label
which conflicts with the general policy being used by the system.
In these cases, the user information would be read by the system and access
would be blocked as the file has inherited the new label.
Disable the policy using
.Xr sysctl 8 and everything should return to normal.
.El
.Ss SYNOPSIS
.Pp
The FreeBSD operating system includes support for security event auditing.
Event auditing supports reliable, fine-grained, and configurable logging of a
variety of security-relevant system events, including logins, configuration
changes, and file and network access.
These log records can be invaluable for live system monitoring, intrusion
detection, and postmortem analysis.
FreeBSD implements Sun's published Basic Security Module (BSM) Application Programming Interface (API) and file format, and is interoperable with the Solaris and Mac OS X audit implementations.
.Pp
This chapter focuses on the installation and configuration of event auditing.
It explains audit policies and provides an example audit configuration.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
What event auditing is and how it works.
.It
How to configure event auditing on FreeBSD for users and processes.
.It
How to review the audit trail using the audit reduction and review tools.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Understand UNIX and FreeBSD basics ().
.It
Be familiar with the basics of kernel configuration/compilation ().
.It
Have some familiarity with security and how it pertains to FreeBSD ().
.El
.Pp
The audit facility has some known limitations.
Not all security-relevant system events are auditable and some login
mechanisms, such as Xorg-based display managers and third-party daemons, do not properly configure
auditing for user login sessions.
.Pp
The security event auditing facility is able to generate very detailed logs of
system activity.
On a busy system, trail file data can be very large when configured for high
detail, exceeding gigabytes a week in some configurations.
Administrators should take into account the disk space requirements associated
with high volume audit configurations.
For example, it may be desirable to dedicate a file system to
.Pa /var/audit
so that other file systems are not affected if the audit file system becomes
full.
.Ss KEY TERMS
.Pp
The following terms are related to security event auditing:
.Bl -bullet -offset -compact
.It
event: an auditable event is any event that can be logged using the audit subsystem.
Examples of security-relevant events include the creation of a file, the
building of a network connection, or a user logging in.
Events are either
.Do
attributable
.Dc
, meaning that they can be traced to an authenticated user, or
.Do
non-attributable
.Dc
.
Examples of non-attributable events are any events that occur before
authentication in the login process, such as bad password attempts.
.It
class: a named set of related events which are used in selection expressions.
Commonly used classes of events include
.Do
file creation
.Dc
(fc),
.Do
exec
.Dc
(ex), and
.Do
login_logout
.Dc
(lo).
.It
record: an audit log entry describing a security event.
Records contain a record event type, information on the subject (user)
performing the action, date and time information, information on any objects or
arguments, and a success or failure condition.
.It
trail: a log file consisting of a series of audit records describing security
events.
Trails are in roughly chronological order with respect to the time events
completed.
Only authorized processes are allowed to commit records to the audit trail.
.It
selection expression: a string containing a list of prefixes and audit event class names used to
match events.
.It
preselection: the process by which the system identifies which events are of interest to
the administrator.
The preselection configuration uses a series of selection expressions to
identify which classes of events to audit for which users, as well as global
settings that apply to both authenticated and unauthenticated processes.
.It
reduction: the process by which records from existing audit trails are selected for
preservation, printing, or analysis.
Likewise, the process by which undesired audit records are removed from the
audit trail.
Using reduction, administrators can implement policies for the preservation of
audit data.
For example, detailed audit trails might be kept for one month, but after that,
trails might be reduced in order to preserve only login information for
archival purposes.
.El
.Ss AUDIT CONFIGURATION
.Pp
User space support for event auditing is installed as part of the base FreeBSD
operating system.
Kernel support is available in the
.Pa GENERIC
kernel by default, and
.Xr auditd 8 can be enabled by adding the following line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
auditd_enable="YES"
.Ed
.Pp
Then, start the audit daemon:
.Bd -literal -offset indent
# service auditd start
.Ed
.Pp
Users who prefer to compile a custom kernel must include the following line in
their custom kernel configuration file:
.Bd -literal -offset indent
options	AUDIT
.Ed
.Ss EVENT SELECTION EXPRESSIONS
.Pp
Selection expressions are used in a number of places in the audit configuration
to determine which events should be audited.
Expressions contain a list of event classes to match.
Selection expressions are evaluated from left to right, and two expressions are
combined by appending one onto the other.
.Pp
summarizes the default audit event classes:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Class Name
.Ta
Description
.Ta
Action
.It
.Ta
all
.Ta
all
.Ta
Match all event classes.
.It
.Ta
aa
.Ta
authentication and authorization
.Ta
.It
.Ta
ad
.Ta
administrative
.Ta
Administrative actions performed on the system as a whole.
.It
.Ta
ap
.Ta
application
.Ta
Application defined action.
.It
.Ta
cl
.Ta
file close
.Ta
Audit calls to the
.Fn close
system call.
.It
.Ta
ex
.Ta
exec
.Ta
Audit program execution.
Auditing of command line arguments and environmental variables is controlled
via
.Xr audit_control 5 using the
.Ql argv
and
.Ql envv
parameters to the
.Ql policy
setting.
.It
.Ta
fa
.Ta
file attribute access
.Ta
Audit the access of object attributes such as
.Xr stat 1 and
.Xr pathconf 2 .
.It
.Ta
fc
.Ta
file create
.Ta
Audit events where a file is created as a result.
.It
.Ta
fd
.Ta
file delete
.Ta
Audit events where file deletion occurs.
.It
.Ta
fm
.Ta
file attribute modify
.Ta
Audit events where file attribute modification occurs, such as by
.Xr chown 8 ,
.Xr chflags 1 , and
.Xr flock 2 .
.It
.Ta
fr
.Ta
file read
.Ta
Audit events in which data is read or files are opened for reading.
.It
.Ta
fw
.Ta
file write
.Ta
Audit events in which data is written or files are written or modified.
.It
.Ta
io
.Ta
ioctl
.Ta
Audit use of the
.Fn ioctl
system call.
.It
.Ta
ip
.Ta
ipc
.Ta
Audit various forms of Inter-Process Communication, including POSIX pipes and
System V IPC operations.
.It
.Ta
lo
.Ta
login_logout
.Ta
Audit
.Xr login 1 and
.Xr logout 1 events.
.It
.Ta
na
.Ta
non attributable
.Ta
Audit non-attributable events.
.It
.Ta
no
.Ta
invalid class
.Ta
Match no audit events.
.It
.Ta
nt
.Ta
network
.Ta
Audit events related to network actions such as
.Xr connect 2 and
.Xr accept 2 .
.It
.Ta
ot
.Ta
other
.Ta
Audit miscellaneous events.
.It
.Ta
pc
.Ta
process
.Ta
Audit process operations such as
.Xr exec 3 and
.Xr exit 3 .
.El
.Pp
These audit event classes may be customized by modifying the
.Pa audit_class
and
.Pa audit_event
configuration files.
.Pp
Each audit event class may be combined with a prefix indicating whether
successful/failed operations are matched, and whether the entry is adding or
removing matching for the class and type.
 summarizes the available prefixes:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Prefix
.Ta
Action
.It
.Ta
+
.Ta
Audit successful events in this class.
.It
.Ta
-
.Ta
Audit failed events in this class.
.It
.Ta
^
.Ta
Audit neither successful nor failed events in this class.
.It
.Ta
^+
.Ta
Do not audit successful events in this class.
.It
.Ta
^-
.Ta
Do not audit failed events in this class.
.El
.Pp
If no prefix is present, both successful and failed instances of the event will
be audited.
.Pp
The following example selection string selects both successful and failed
login/logout events, but only successful execution events:
.Bd -literal -offset indent
lo,+ex
.Ed
.Ss CONFIGURATION FILES
.Pp
The following configuration files for security event auditing are found in
.Pa /etc/security
:
.Bl -bullet -offset -compact
.It
.Pa audit_class
: contains the definitions of the audit classes.
.It
.Pa audit_control
: controls aspects of the audit subsystem, such as default audit classes,
minimum disk space to leave on the audit log volume, and maximum audit trail
size.
.It
.Pa audit_event
: textual names and descriptions of system audit events and a list of which
classes each event is in.
.It
.Pa audit_user
: user-specific audit requirements to be combined with the global defaults at
login.
.It
.Pa audit_warn
: a customizable shell script used by
.Xr auditd 8 to generate warning messages in exceptional situations, such as when space for
audit records is running low or when the audit trail file has been rotated.
.El
.Pp
Audit configuration files should be edited and maintained carefully, as errors
in configuration may result in improper logging of events.
.Pp
In most cases, administrators will only need to modify
.Pa audit_control
and
.Pa audit_user
.
The first file controls system-wide audit properties and policies and the
second file may be used to fine-tune auditing by user.
.Ss THE AUDIT_CONTROL FILE
.Pp
A number of defaults for the audit subsystem are specified in
.Pa audit_control
:
.Bd -literal -offset indent
dir:/var/audit
dist:off
flags:lo,aa
minfree:5
naflags:lo,aa
policy:cnt,argv
filesz:2M
expire-after:10M
.Ed
.Pp
The
.Ar dir
entry is used to set one or more directories where audit logs will be stored.
If more than one directory entry appears, they will be used in order as they
fill.
It is common to configure audit so that audit logs are stored on a dedicated
file system, in order to prevent interference between the audit subsystem and
other subsystems if the file system fills.
.Pp
If the
.Ar dist
field is set to
.Ql on
or
.Ql yes
, hard links will be created to all trail files in
.Pa /var/audit/dist
.
.Pp
The
.Ar flags
field sets the system-wide default preselection mask for attributable events.
In the example above, successful and failed login/logout events as well as
authentication and authorization are audited for all users.
.Pp
The
.Ar minfree
entry defines the minimum percentage of free space for the file system where
the audit trail is stored.
.Pp
The
.Ar naflags
entry specifies audit classes to be audited for non-attributed events, such as
the login/logout process and authentication and authorization.
.Pp
The
.Ar policy
entry specifies a comma-separated list of policy flags controlling various
aspects of audit behavior.
The
.Ql cnt
indicates that the system should continue running despite an auditing failure
(this flag is highly recommended).
The other flag,
.Ql argv
, causes command line arguments to the
.Xr execve 2 system call to be audited as part of command execution.
.Pp
The
.Ar filesz
entry specifies the maximum size for an audit trail before automatically
terminating and rotating the trail file.
A value of
.Ql 0
disables automatic log rotation.
If the requested file size is below the minimum of 512k, it will be ignored and
a log message will be generated.
.Pp
The
.Ar expire-after
field specifies when audit log files will expire and be removed.
.Ss THE AUDIT_USER FILE
.Pp
The administrator can specify further audit requirements for specific users in
.Pa audit_user
.
Each line configures auditing for a user via two fields: the
.Ql alwaysaudit
field specifies a set of events that should always be audited for the user, and
the
.Ql neveraudit
field specifies a set of events that should never be audited for the user.
.Pp
The following example entries audit login/logout events and successful command
execution for
.Ql root
and file creation and successful command execution for
.Ql www
.
If used with the default
.Pa audit_control
, the
.Ql lo
entry for
.Ql root
is redundant, and login/logout events will also be audited for
.Ql www
.
.Bd -literal -offset indent
root:lo,+ex:no
www:fc,+ex:no
.Ed
.Ss WORKING WITH AUDIT TRAILS
.Pp
Since audit trails are stored in the BSM binary format, several built-in tools are available to modify or convert these
trails to text.
To convert trail files to a simple text format, use
.Cm praudit
.
To reduce the audit trail file for analysis, archiving, or printing purposes,
use
.Cm auditreduce
.
This utility supports a variety of selection parameters, including event type,
event class, user, date or time of the event, and the file path or object acted
on.
.Pp
For example, to dump the entire contents of a specified audit log in plain
text:
.Bd -literal -offset indent
# praudit /var/audit/AUDITFILE
.Ed
.Pp
Where AUDITFILE is the audit log to dump.
.Pp
Audit trails consist of a series of audit records made up of tokens, which
.Cm praudit
prints sequentially, one per line.
Each token is of a specific type, such as
.Ql header
(an audit record header) or
.Ql path
(a file path from a name lookup).
The following is an example of an
.Ql execve
event:
.Bd -literal -offset indent
header,133,10,execve(2),0,Mon Sep 25 15:58:03 2006, + 384 msec
exec arg,finger,doug
path,/usr/bin/finger
attribute,555,root,wheel,90,24918,104944
subject,robert,root,wheel,root,wheel,38439,38032,42086,128.232.9.100
return,success,0
trailer,133
.Ed
.Pp
This audit represents a successful
.Ql execve
call, in which the command
.Ql finger doug
has been run.
The
.Ql exec arg
token contains the processed command line presented by the shell to the kernel.
The
.Ql path
token holds the path to the executable as looked up by the kernel.
The
.Ql attribute
token describes the binary and includes the file mode.
The
.Ql subject
token stores the audit user ID, effective user ID and group ID, real user ID
and group ID, process ID, session ID, port ID, and login address.
Notice that the audit user ID and real user ID differ as the user
.Ql robert
switched to the
.Ql root
account before running this command, but it is audited using the original
authenticated user.
The
.Ql return
token indicates the successful execution and the
.Ql trailer
concludes the record.
.Pp
XML output format is also supported and can be selected by including
.Ar -x
.
.Pp
Since audit logs may be very large, a subset of records can be selected using
.Cm auditreduce
.
This example selects all audit records produced for the user
.Ql trhodes
stored in
.Pa AUDITFILE
:
.Bd -literal -offset indent
# auditreduce -u trhodes /var/audit/AUDITFILE | praudit
.Ed
.Pp
Members of the
.Ql audit
group have permission to read audit trails in
.Pa /var/audit
.
By default, this group is empty, so only the
.Ql root
user can read audit trails.
Users may be added to the
.Ql audit
group in order to delegate audit review rights.
As the ability to track audit log contents provides significant insight into
the behavior of users and processes, it is recommended that the delegation of
audit review rights be performed with caution.
.Ss LIVE MONITORING USING AUDIT PIPES
.Pp
Audit pipes are cloning pseudo-devices which allow applications to tap the live
audit record stream.
This is primarily of interest to authors of intrusion detection and system
monitoring applications.
However, the audit pipe device is a convenient way for the administrator to
allow live monitoring without running into problems with audit trail file
ownership or log rotation interrupting the event stream.
To track the live audit event stream:
.Bd -literal -offset indent
# praudit /dev/auditpipe
.Ed
.Pp
By default, audit pipe device nodes are accessible only to the
.Ql root
user.
To make them accessible to the members of the
.Ql audit
group, add a
.Ql devfs
rule to
.Pa /etc/devfs.rules
:
.Bd -literal -offset indent
add path 'auditpipe*' mode 0440 group audit
.Ed
.Pp
See
.Xr devfs.rules 5 for more information on configuring the devfs file system.
.Pp
It is easy to produce audit event feedback cycles, in which the viewing of each
audit event results in the generation of more audit events.
For example, if all network I/O is audited, and
.Cm praudit
is run from an SSH session, a continuous stream of audit events will be generated at a high rate,
as each event being printed will generate another event.
For this reason, it is advisable to run
.Cm praudit
on an audit pipe device from sessions without fine-grained I/O auditing.
.Ss ROTATING AND COMPRESSING AUDIT TRAIL FILES
.Pp
Audit trails are written to by the kernel and managed by the audit daemon,
.Xr auditd 8 .
Administrators should not attempt to use
.Xr newsyslog.conf 5 or other tools to directly rotate audit logs.
Instead,
.Cm audit
should be used to shut down auditing, reconfigure the audit system, and perform
log rotation.
The following command causes the audit daemon to create a new audit log and
signal the kernel to switch to using the new log.
The old log will be terminated and renamed, at which point it may then be
manipulated by the administrator:
.Bd -literal -offset indent
# audit -n
.Ed
.Pp
If
.Xr auditd 8 is not currently running, this command will fail and an error message will be
produced.
.Pp
Adding the following line to
.Pa /etc/crontab
will schedule this rotation every twelve hours:
.Bd -literal -offset indent
0     */12       *       *       *       root    /usr/sbin/audit -n
.Ed
.Pp
The change will take effect once
.Pa /etc/crontab
is saved.
.Pp
Automatic rotation of the audit trail file based on file size is possible using
.Ar filesz
in
.Pa audit_control
as described in .
.Pp
As audit trail files can become very large, it is often desirable to compress
or otherwise archive trails once they have been closed by the audit daemon.
The
.Pa audit_warn
script can be used to perform customized operations for a variety of
audit-related events, including the clean termination of audit trails when they
are rotated.
For example, the following may be added to
.Pa /etc/security/audit_warn
to compress audit trails on close:
.Bd -literal -offset indent
#
# Compress audit trail files on close.
#
if [ "$1" = closefile ]; then
        gzip -9 $2
fi
.Ed
.Pp
Other archiving activities might include copying trail files to a centralized
server, deleting old trail files, or reducing the audit trail to remove
unneeded records.
This script will be run only when audit trail files are cleanly terminated, so
will not be run on trails left unterminated following an improper shutdown.
.Sh STORAGE
.Ss SYNOPSIS
.Pp
This chapter covers the use of disks and storage media in FreeBSD.
This includes SCSI and IDE disks, CD and DVD media, memory-backed disks, and USB storage devices.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
How to add additional hard disks to a FreeBSD system.
.It
How to grow the size of a disk's partition on FreeBSD.
.It
How to configure FreeBSD to use USB storage devices.
.It
How to use CD and DVD media on a FreeBSD system.
.It
How to use the backup programs available under FreeBSD.
.It
How to set up memory disks.
.It
What file system snapshots are and how to use them efficiently.
.It
How to use quotas to limit disk space usage.
.It
How to encrypt disks and swap to secure them against attackers.
.It
How to configure a highly available storage network.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Know how to configure and install a new FreeBSD kernel.
.El
.Pp
This section describes how to add a new SATA disk to a machine that currently only has a single drive.
First, turn off the computer and install the drive in the computer following
the instructions of the computer, controller, and drive manufacturers.
Reboot the system and become
.Ql root
.
.Pp
Inspect
.Pa /var/run/dmesg.boot
to ensure the new disk was found.
In this example, the newly added SATA drive will appear as
.Pa ada1
.
.Pp
For this example, a single large partition will be created on the new disk.
The GPT partitioning scheme will be used in preference to the older and less versatile MBR scheme.
.Pp
If the disk to be added is not blank, old partition information can be removed
with
.Cm gpart delete
.
See
.Xr gpart 8 for details.
.Pp
The partition scheme is created, and then a single partition is added.
To improve performance on newer disks with larger hardware block sizes, the
partition is aligned to one megabyte boundaries:
.Bd -literal -offset indent
# gpart create -s GPT ada1
# gpart add -t freebsd-ufs -a 1M ada1
.Ed
.Pp
Depending on use, several smaller partitions may be desired.
See
.Xr gpart 8 for options to create partitions smaller than a whole disk.
.Pp
The disk partition information can be viewed with
.Cm gpart show
:
.Bd -literal -offset indent
% gpart show ada1
=>        34  1465146988  ada1  GPT  (699G)
          34        2014        - free -  (1.0M)
        2048  1465143296     1  freebsd-ufs  (699G)
  1465145344        1678        - free -  (839K)
.Ed
.Pp
A file system is created in the new partition on the new disk:
.Bd -literal -offset indent
# newfs -U /dev/ada1p1
.Ed
.Pp
An empty directory is created as a mountpoint, a location for mounting the new disk in the original disk's file system:
.Bd -literal -offset indent
# mkdir /newdisk
.Ed
.Pp
Finally, an entry is added to
.Pa /etc/fstab
so the new disk will be mounted automatically at startup:
.Bd -literal -offset indent
/dev/ada1p1	/newdisk	ufs	rw	2	2
.Ed
.Pp
The new disk can be mounted manually, without restarting the system:
.Bd -literal -offset indent
# mount /newdisk
.Ed
.Pp
A disk's capacity can increase without any changes to the data already present.
This happens commonly with virtual machines, when the virtual disk turns out to
be too small and is enlarged.
Sometimes a disk image is written to a USB memory stick, but does not use the full capacity.
Here we describe how to resize or grow disk contents to take advantage of increased capacity.
.Pp
Determine the device name of the disk to be resized by inspecting
.Pa /var/run/dmesg.boot
.
In this example, there is only one SATA disk in the system, so the drive will appear as
.Pa ada0
.
.Pp
List the partitions on the disk to see the current configuration:
.Bd -literal -offset indent
# gpart show ada0
=>      34  83886013  ada0  GPT  (48G) [CORRUPT]
        34       128     1  freebsd-boot  (64k)
       162  79691648     2  freebsd-ufs  (38G)
  79691810   4194236     3  freebsd-swap  (2G)
  83886046         1        - free -  (512B)
.Ed
.Pp
If the disk was formatted with the GPT partitioning scheme, it may show as
.Do
corrupted
.Dc
because the GPT backup partition table is no longer at the end of the drive.
Fix the backup partition table with
.Cm gpart
:
.Bd -literal -offset indent
# gpart recover ada0
ada0 recovered
.Ed
.Pp
Now the additional space on the disk is available for use by a new partition,
or an existing partition can be expanded:
.Bd -literal -offset indent
# gpart show ada0
=>       34  102399933  ada0  GPT  (48G)
         34        128     1  freebsd-boot  (64k)
        162   79691648     2  freebsd-ufs  (38G)
   79691810    4194236     3  freebsd-swap  (2G)
   83886046   18513921        - free -  (8.8G)
.Ed
.Pp
Partitions can only be resized into contiguous free space.
Here, the last partition on the disk is the swap partition, but the second
partition is the one that needs to be resized.
Swap partitions only contain temporary data, so it can safely be unmounted,
deleted, and then recreate the third partition after resizing the second
partition.
.Pp
Disable the swap partition:
.Bd -literal -offset indent
# swapoff /dev/ada0p3
.Ed
.Pp
Delete the third partition, specified by the
.Ar -i
flag, from the disk ada0.
.Bd -literal -offset indent

# gpart delete -i 3  ada0
ada0p3 deleted
# gpart show ada0
=>       34  102399933  ada0  GPT  (48G)
         34        128     1  freebsd-boot  (64k)
        162   79691648     2  freebsd-ufs  (38G)
   79691810   22708157        - free -  (10G)
.Ed
.Pp
There is risk of data loss when modifying the partition table of a mounted file
system.
It is best to perform the following steps on an unmounted file system while
running from a live CD-ROM or USB device.
However, if absolutely necessary, a mounted file system can be resized after
disabling GEOM safety features:
.Bd -literal -offset indent
# sysctl kern.geom.debugflags=16
.Ed
.Pp
Resize the partition, leaving room to recreate a swap partition of the desired
size.
The partition to resize is specified with
.Ar -i
, and the new desired size with
.Ar -s
.
Optionally, alignment of the partition is controlled with
.Ar -a
.
This only modifies the size of the partition.
The file system in the partition will be expanded in a separate step.
.Bd -literal -offset indent
# gpart resize -i 2 -s 47G -a 4k ada0
ada0p2 resized
# gpart show ada0
=>       34  102399933  ada0  GPT  (48G)
         34        128     1  freebsd-boot  (64k)
        162   98566144     2  freebsd-ufs  (47G)
   98566306    3833661        - free -  (1.8G)
.Ed
.Pp
Recreate the swap partition and activate it.
If no size is specified with
.Ar -s
, all remaining space is used:
.Bd -literal -offset indent
# gpart add -t freebsd-swap -a 4k ada0
ada0p3 added
# gpart show ada0
=>       34  102399933  ada0  GPT  (48G)
         34        128     1  freebsd-boot  (64k)
        162   98566144     2  freebsd-ufs  (47G)
   98566306    3833661     3  freebsd-swap  (1.8G)
# swapon /dev/ada0p3
.Ed
.Pp
Grow the UFS file system to use the new capacity of the resized partition:
.Bd -literal -offset indent
# growfs /dev/ada0p2
Device is mounted read-write; resizing will result in temporary write suspension for /.
It's strongly recommended to make a backup before growing the file system.
OK to grow file system on /dev/ada0p2, mounted on /, from 38GB to 47GB? [Yes/No] Yes
super-block backups (for fsck -b #) at:
 80781312, 82063552, 83345792, 84628032, 85910272, 87192512, 88474752,
 89756992, 91039232, 92321472, 93603712, 94885952, 96168192, 97450432
.Ed
.Pp
If the file system is ZFS, the resize is triggered by running the
.Ar online
subcommand with
.Ar -e
:
.Bd -literal -offset indent
# zpool online -e zroot  /dev/ada0p2
.Ed
.Pp
Both the partition and the file system on it have now been resized to use the
newly-available disk space.
.Pp
Many external storage solutions, such as hard drives, USB thumbdrives, and CD and DVD burners, use the Universal Serial Bus (USB).
FreeBSD provides support for USB 1.x, 2.0, and 3.0 devices.
.Pp
USB 3.0 support is not compatible with some hardware, including Haswell (Lynx
point) chipsets.
If FreeBSD boots with a
.Er failed with error 19
message, disable xHCI/USB3 in the system BIOS.
.Pp
Support for USB storage devices is built into the
.Pa GENERIC
kernel.
For a custom kernel, be sure that the following lines are present in the kernel
configuration file:
.Bd -literal -offset indent
device scbus	# SCSI bus (required for ATA/SCSI)
device da	# Direct Access (disks)
device pass	# Passthrough device (direct ATA/SCSI access)
device uhci	# provides USB 1.x support
device ohci	# provides USB 1.x support
device ehci	# provides USB 2.0 support
device xhci	# provides USB 3.0 support
device usb	# USB Bus (required)
device umass	# Disks/Mass storage - Requires scbus and da
device cd	# needed for CD and DVD burners
.Ed
.Pp
FreeBSD uses the
.Xr umass 4 driver which uses the SCSI subsystem to access USB storage devices.
Since any USB device will be seen as a SCSI device by the system, if the USB device is a CD or DVD burner, do not include
.Ar device atapicam
in a custom kernel configuration file.
.Pp
The rest of this section demonstrates how to verify that a USB storage device is recognized by FreeBSD and how to configure the device so that
it can be used.
.Ss DEVICE CONFIGURATION
.Pp
To test the USB configuration, plug in the USB device.
Use
.Cm dmesg
to confirm that the drive appears in the system message buffer.
It should look something like this:
.Bd -literal -offset indent
umass0: <STECH Simple Drive, class 0/0, rev 2.00/1.04, addr 3> on usbus0
umass0:  SCSI over Bulk-Only; quirks = 0x0100
umass0:4:0:-1: Attached to scbus4
da0 at umass-sim0 bus 0 scbus4 target 0 lun 0
da0: <STECH Simple Drive 1.04> Fixed Direct Access SCSI-4 device
da0: Serial Number WD-WXE508CAN263
da0: 40.000MB/s transfers
da0: 152627MB (312581808 512 byte sectors: 255H 63S/T 19457C)
da0: quirks=0x2<NO_6_BYTE>
.Ed
.Pp
The brand, device node (
.Pa da0
), speed, and size will differ according to the device.
.Pp
Since the USB device is seen as a SCSI one,
.Cm camcontrol
can be used to list the USB storage devices attached to the system:
.Bd -literal -offset indent
# camcontrol devlist
<STECH Simple Drive 1.04>          at scbus4 target 0 lun 0 (pass3,da0)
.Ed
.Pp
Alternately,
.Cm usbconfig
can be used to list the device.
Refer to
.Xr usbconfig 8 for more information about this command.
.Bd -literal -offset indent
# usbconfig
ugen0.3: <Simple Drive STECH> at usbus0, cfg=0 md=HOST spd=HIGH (480Mbps) pwr=ON (2mA)
.Ed
.Pp
If the device has not been formatted, refer to for instructions on how to format and create partitions on the USB drive.
If the drive comes with a file system, it can be mounted by
.Ql root
using the instructions in .
.Pp
Allowing untrusted users to mount arbitrary media, by enabling
.Ev vfs.usermount
as described below, should not be considered safe from a security point of
view.
Most file systems were not built to safeguard against malicious devices.
.Pp
To make the device mountable as a normal user, one solution is to make all
users of the device a member of the
.Ql operator
group using
.Xr pw 8 .
Next, ensure that
.Ql operator
is able to read and write the device by adding these lines to
.Pa /etc/devfs.rules
:
.Bd -literal -offset indent
[localrules=5]
add path 'da*' mode 0660 group operator
.Ed
.Pp
If internal SCSI disks are also installed in the system, change the second line as follows:
.Bd -literal -offset indent
add path 'da[3-9]*' mode 0660 group operator
.Ed
.Pp
This will exclude the first three SCSI disks (
.Pa da0
to
.Pa da2
)from belonging to the
.Ql operator
group.
Replace 3 with the number of internal SCSI disks.
Refer to
.Xr devfs.rules 5 for more information about this file.
.Pp
Next, enable the ruleset in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
devfs_system_ruleset="localrules"
.Ed
.Pp
Then, instruct the system to allow regular users to mount file systems by
adding the following line to
.Pa /etc/sysctl.conf
:
.Bd -literal -offset indent
vfs.usermount=1
.Ed
.Pp
Since this only takes effect after the next reboot, use
.Cm sysctl
to set this variable now:
.Bd -literal -offset indent
# sysctl vfs.usermount=1
vfs.usermount: 0 -> 1
.Ed
.Pp
The final step is to create a directory where the file system is to be mounted.
This directory needs to be owned by the user that is to mount the file system.
One way to do that is for
.Ql root
to create a subdirectory owned by that user as
.Pa /mnt/username
.
In the following example, replace username with the login name of the user and usergroup with the user's primary group:
.Bd -literal -offset indent
# mkdir /mnt/username
# chown username:usergroup /mnt/username
.Ed
.Pp
Suppose a USB thumbdrive is plugged in, and a device
.Pa /dev/da0s1
appears.
If the device is formatted with a FAT file system, the user can mount it using:
.Bd -literal -offset indent
% mount -t msdosfs -o -m=644,-M=755 /dev/da0s1 /mnt/username
.Ed
.Pp
Before the device can be unplugged, it must be unmounted first:
.Bd -literal -offset indent
% umount /mnt/username
.Ed
.Pp
After device removal, the system message buffer will show messages similar to
the following:
.Bd -literal -offset indent
umass0: at uhub3, port 2, addr 3 (disconnected)
da0 at umass-sim0 bus 0 scbus4 target 0 lun 0
da0: <STECH Simple Drive 1.04> s/n WD-WXE508CAN263          detached
(da0:umass-sim0:0:0:0): Periph destroyed
.Ed
.Ss AUTOMOUNTING REMOVABLE MEDIA
.Pp
USB devices can be automatically mounted by uncommenting this line in
.Pa /etc/auto_master
:
.Bd -literal -offset indent
/media		-media		-nosuid
.Ed
.Pp
Then add these lines to
.Pa /etc/devd.conf
:
.Bd -literal -offset indent
notify 100 {
	match "system" "GEOM";
	match "subsystem" "DEV";
	action "/usr/sbin/automount -c";
};
.Ed
.Pp
Reload the configuration if
.Xr autofs 5 and
.Xr devd 8 are already running:
.Bd -literal -offset indent
# service automount restart
# service devd restart
.Ed
.Pp
.Xr autofs 5 can be set to start at boot by adding this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
autofs_enable="YES"
.Ed
.Pp
.Xr autofs 5 requires
.Xr devd 8 to be enabled, as it is by default.
.Pp
Start the services immediately with:
.Bd -literal -offset indent
# service automount start
# service automountd start
# service autounmountd start
# service devd start
.Ed
.Pp
Each file system that can be automatically mounted appears as a directory in
.Pa /media/
.
The directory is named after the file system label.
If the label is missing, the directory is named after the device node.
.Pp
The file system is transparently mounted on the first access, and unmounted
after a period of inactivity.
Automounted drives can also be unmounted manually:
.Bd -literal -offset indent
# automount -fu
.Ed
.Pp
This mechanism is typically used for memory cards and USB memory sticks.
It can be used with any block device, including optical drives or iSCSI  LUNs.
.Pp
Compact Disc (CD) media provide a number of features that differentiate them from conventional
disks.
They are designed so that they can be read continuously without delays to move
the head between tracks.
While CD media do have tracks, these refer to a section of data to be read continuously,
and not a physical property of the disk.
The ISO 9660 file system was designed to deal with these differences.
.Pp
The FreeBSD Ports Collection provides several utilities for burning and
duplicating audio and data CDs.
This chapter demonstrates the use of several command line utilities.
For CD burning software with a graphical utility, consider installing the
.Ql sysutils/xcdroast
or
.Ql sysutils/k3b
packages or ports.
.Pp
The
.Pa GENERIC
kernel provides support for SCSI, USB, and ATAPI  CD readers and burners.
If a custom kernel is used, the options that need to be present in the kernel
configuration file vary by the type of device.
.Pp
For a SCSI burner, make sure these options are present:
.Bd -literal -offset indent
device scbus	# SCSI bus (required for ATA/SCSI)
device da	# Direct Access (disks)
device pass	# Passthrough device (direct ATA/SCSI access)
device cd	# needed for CD and DVD burners
.Ed
.Pp
For a USB burner, make sure these options are present:
.Bd -literal -offset indent
device scbus	# SCSI bus (required for ATA/SCSI)
device da	# Direct Access (disks)
device pass	# Passthrough device (direct ATA/SCSI access)
device cd	# needed for CD and DVD burners
device uhci	# provides USB 1.x support
device ohci	# provides USB 1.x support
device ehci	# provides USB 2.0 support
device xhci	# provides USB 3.0 support
device usb	# USB Bus (required)
device umass	# Disks/Mass storage - Requires scbus and da
.Ed
.Pp
For an ATAPI burner, make sure these options are present:
.Bd -literal -offset indent
device ata	# Legacy ATA/SATA controllers
device scbus	# SCSI bus (required for ATA/SCSI)
device pass	# Passthrough device (direct ATA/SCSI access)
device cd	# needed for CD and DVD burners
.Ed
.Pp
On FreeBSD versions prior to 10.x, this line is also needed in the kernel
configuration file if the burner is an ATAPI device:
.Bd -literal -offset indent
device atapicam
.Ed
.Pp
Alternately, this driver can be loaded at boot time by adding the following
line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
atapicam_load="YES"
.Ed
.Pp
This will require a reboot of the system as this driver can only be loaded at
boot time.
.Pp
To verify that FreeBSD recognizes the device, run
.Cm dmesg
and look for an entry for the device.
On systems prior to 10.x, the device name in the first line of the output will
be
.Pa acd0
instead of
.Pa cd0
.
.Bd -literal -offset indent
% dmesg | grep cd
cd0 at ahcich1 bus 0 scbus1 target 0 lun 0
cd0: <HL-DT-ST DVDRAM GU70N LT20> Removable CD-ROM SCSI-0 device
cd0: Serial Number M3OD3S34152
cd0: 150.000MB/s transfers (SATA 1.x, UDMA6, ATAPI 12bytes, PIO 8192bytes)
cd0: Attempt to query device size failed: NOT READY, Medium not present - tray closed
.Ed
.Ss BURNING A CD
.Pp
In FreeBSD,
.Cm cdrecord
can be used to burn CDs.
This command is installed with the
.Ql sysutils/cdrtools
package or port.
.Pp
While
.Cm cdrecord
has many options, basic usage is simple.
Specify the name of the ISO file to burn and, if the system has multiple burner devices, specify the name
of the device to use:
.Bd -literal -offset indent
# cdrecord dev=device  imagefile.iso
.Ed
.Pp
To determine the device name of the burner, use
.Ar -scanbus
which might produce results like this:
.Bd -literal -offset indent
# cdrecord -scanbus
ProDVD-ProBD-Clone 3.00 (amd64-unknown-freebsd10.0) Copyright (C) 1995-2010 Jörg Schilling
Using libscg version 'schily-0.9'
scsibus0:
        0,0,0     0) 'SEAGATE ' 'ST39236LW       ' '0004' Disk
        0,1,0     1) 'SEAGATE ' 'ST39173W        ' '5958' Disk
        0,2,0     2) *
        0,3,0     3) 'iomega  ' 'jaz 1GB         ' 'J.86' Removable Disk
        0,4,0     4) 'NEC     ' 'CD-ROM DRIVE:466' '1.26' Removable CD-ROM
        0,5,0     5) *
        0,6,0     6) *
        0,7,0     7) *
scsibus1:
        1,0,0   100) *
        1,1,0   101) *
        1,2,0   102) *
        1,3,0   103) *
        1,4,0   104) *
        1,5,0   105) 'YAMAHA  ' 'CRW4260         ' '1.0q' Removable CD-ROM
        1,6,0   106) 'ARTEC   ' 'AM12S           ' '1.06' Scanner
        1,7,0   107) *
.Ed
.Pp
Locate the entry for the CD burner and use the three numbers separated by commas as the value for
.Ar dev
.
In this case, the Yamaha burner device is
.Ql 1,5,0
, so the appropriate input to specify that device is
.Ar dev=1,5,0
.
Refer to the manual page for
.Cm cdrecord
for other ways to specify this value and for information on writing audio
tracks and controlling the write speed.
.Pp
Alternately, run the following command to get the device address of the burner:
.Bd -literal -offset indent
# camcontrol devlist
<MATSHITA CDRW/DVD UJDA740 1.00>   at scbus1 target 0 lun 0 (cd0,pass0)
.Ed
.Pp
Use the numeric values for
.Ql scbus
,
.Ql target
, and
.Ql lun
.
For this example,
.Ql 1,0,0
is the device name to use.
.Ss WRITING DATA TO AN ISO FILE SYSTEM
.Pp
In order to produce a data CD, the data files that are going to make up the tracks on the CD must be prepared before they can be burned to the CD.
In FreeBSD,
.Ql sysutils/cdrtools
installs
.Cm mkisofs
, which can be used to produce an ISO 9660 file system that is an image of a directory tree within a UNIX file system.
The simplest usage is to specify the name of the ISO file to create and the path to the files to place into the ISO 9660 file system:
.Bd -literal -offset indent
# mkisofs -o imagefile.iso  /path/to/tree
.Ed
.Pp
This command maps the file names in the specified path to names that fit the
limitations of the standard ISO 9660 file system, and will exclude files that do not meet the standard for ISO file systems.
.Pp
A number of options are available to overcome the restrictions imposed by the
standard.
In particular,
.Ar -R
enables the Rock Ridge extensions common to UNIX systems and
.Ar -J
enables Joliet extensions used by Microsoft systems.
.Pp
For CDs that are going to be used only on FreeBSD systems,
.Ar -U
can be used to disable all filename restrictions.
When used with
.Ar -R
, it produces a file system image that is identical to the specified FreeBSD
tree, even if it violates the ISO 9660 standard.
.Pp
The last option of general use is
.Ar -b
.
This is used to specify the location of a boot image for use in producing an
.Do
El Torito
.Dc
bootable CD.
This option takes an argument which is the path to a boot image from the top of
the tree being written to the CD.
By default,
.Cm mkisofs
creates an ISO image in
.Do
floppy disk emulation
.Dc
mode, and thus expects the boot image to be exactly 1200, 1440 or 2880 KB in
size.
Some boot loaders, like the one used by the FreeBSD distribution media, do not
use emulation mode.
In this case,
.Ar -no-emul-boot
should be used.
So, if
.Pa /tmp/myboot
holds a bootable FreeBSD system with the boot image in
.Pa /tmp/myboot/boot/cdboot
, this command would produce
.Pa /tmp/bootable.iso
:
.Bd -literal -offset indent
# mkisofs -R -no-emul-boot -b boot/cdboot -o /tmp/bootable.iso /tmp/myboot
.Ed
.Pp
The resulting ISO image can be mounted as a memory disk with:
.Bd -literal -offset indent
# mdconfig -a -t vnode -f /tmp/bootable.iso -u 0
# mount -t cd9660 /dev/md0 /mnt
.Ed
.Pp
One can then verify that
.Pa /mnt
and
.Pa /tmp/myboot
are identical.
.Pp
There are many other options available for
.Cm mkisofs
to fine-tune its behavior.
Refer to
.Xr mkisofs 8 for details.
.Pp
It is possible to copy a data CD to an image file that is functionally equivalent to the image file created with
.Cm mkisofs
.
To do so, use
.Pa dd
with the device name as the input file and the name of the ISO to create as the output file:
.Bd -literal -offset indent
# dd if=/dev/cd0 of=file.iso bs=2048
.Ed
.Pp
The resulting image file can be burned to CD as described in .
.Ss USING DATA CDS
.Pp
Once an ISO has been burned to a CD, it can be mounted by specifying the file system type, the name of the device
containing the CD, and an existing mount point:
.Bd -literal -offset indent
# mount -t cd9660 /dev/cd0  /mnt
.Ed
.Pp
Since
.Cm mount
assumes that a file system is of type
.Ql ufs
, a
.Er Incorrect super block
error will occur if
.Ql -t cd9660
is not included when mounting a data CD.
.Pp
While any data CD can be mounted this way, disks with certain ISO 9660 extensions might behave oddly.
For example, Joliet disks store all filenames in two-byte Unicode characters.
If some non-English characters show up as question marks, specify the local
charset with
.Ar -C
.
For more information, refer to
.Xr mount_cd9660 8 .
.Pp
In order to do this character conversion with the help of
.Ar -C
, the kernel requires the
.Pa cd9660_iconv.ko
module to be loaded.
This can be done either by adding this line to
.Pa loader.conf
:
.Bd -literal -offset indent
cd9660_iconv_load="YES"
.Ed
.Pp
and then rebooting the machine, or by directly loading the module with
.Cm kldload
.
.Pp
Occasionally,
.Er Device not configured
will be displayed when trying to mount a data CD.
This usually means that the CD drive has not detected a disk in the tray, or that the drive is not visible on
the bus.
It can take a couple of seconds for a CD drive to detect media, so be patient.
.Pp
Sometimes, a SCSI  CD drive may be missed because it did not have enough time to answer the bus
reset.
To resolve this, a custom kernel can be created which increases the default SCSI delay.
Add the following option to the custom kernel configuration file and rebuild
the kernel using the instructions in :
.Bd -literal -offset indent
options SCSI_DELAY=15000
.Ed
.Pp
This tells the SCSI bus to pause 15 seconds during boot, to give the CD drive every possible chance to answer the bus reset.
.Pp
It is possible to burn a file directly to CD, without creating an ISO 9660 file system.
This is known as burning a raw data CD and some people do this for backup purposes.
.Pp
This type of disk can not be mounted as a normal data CD.
In order to retrieve the data burned to such a CD, the data must be read from the raw device node.
For example, this command will extract a compressed tar file located on the
second CD device into the current working directory:
.Bd -literal -offset indent
# tar xzvf /dev/cd1
.Ed
.Pp
In order to mount a data CD, the data must be written using
.Cm mkisofs
.
.Ss DUPLICATING AUDIO CDS
.Pp
To duplicate an audio CD, extract the audio data from the CD to a series of files, then write these files to a blank CD.
.Pp
describes how to duplicate and burn an audio CD.
If the FreeBSD version is less than 10.0 and the device is ATAPI, the
.Ar atapicam
module must be first loaded using the instructions in .
.Ss DUPLICATING AN AUDIO CD
.Pp
The
.Ql sysutils/cdrtools
package or port installs
.Cm cdda2wav
.
This command can be used to extract all of the audio tracks, with each track
written to a separate WAV file in the current working directory:
.Bd -literal -offset indent
% cdda2wav -vall -B -Owav
.Ed
.Pp
A device name does not need to be specified if there is only one CD device on the system.
Refer to the
.Cm cdda2wav
manual page for instructions on how to specify a device and to learn more about
the other options available for this command.
.Pp
Use
.Cm cdrecord
to write the
.Pa .wav
files:
.Bd -literal -offset indent
% cdrecord -v dev=2,0 -dao -useinfo *.wav
.Ed
.Pp
Make sure that 2,0 is set appropriately, as described in .
.Pp
Compared to the CD, the DVD is the next generation of optical media storage technology.
The DVD can hold more data than any CD and is the standard for video publishing.
.Pp
Five physical recordable formats can be defined for a recordable DVD:
.Bl -bullet -offset -compact
.It
DVD-R: This was the first DVD recordable format available.
The DVD-R standard is defined by the DVD Forum.
This format is write once.
.It
DVD-RW: This is the rewritable version of the DVD-R standard.
A DVD-RW can be rewritten about 1000 times.
.It
DVD-RAM: This is a rewritable format which can be seen as a removable hard drive.
However, this media is not compatible with most DVD-ROM drives and DVD-Video players as only a few DVD writers support the DVD-RAM format.
Refer to for more information on DVD-RAM use.
.It
DVD+RW: This is a rewritable format defined by the DVD+RW Alliance.
A DVD+RW can be rewritten about 1000 times.
.It
DVD+R: This format is the write once variation of the DVD+RW format.
.El
.Pp
A single layer recordable DVD can hold up to 4,700,000,000 bytes which is actually 4.38 GB or 4485 MB as 1
kilobyte is 1024 bytes.
.Pp
A distinction must be made between the physical media and the application.
For example, a DVD-Video is a specific file layout that can be written on any
recordable DVD physical media such as DVD-R, DVD+R, or DVD-RW.
Before choosing the type of media, ensure that both the burner and the
DVD-Video player are compatible with the media under consideration.
.Ss CONFIGURATION
.Pp
To perform DVD recording, use
.Xr growisofs 1 .
This command is part of the
.Ql sysutils/dvd+rw-tools
utilities which support all DVD media types.
.Pp
These tools use the SCSI subsystem to access the devices, therefore ATAPI/CAM support must be loaded or statically compiled into the kernel.
This support is not needed if the burner uses the USB interface.
Refer to for more details on USB device configuration.
.Pp
DMA access must also be enabled for ATAPI devices, by adding the following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
hw.ata.atapi_dma="1"
.Ed
.Pp
Before attempting to use dvd+rw-tools, consult the Hardware Compatibility Notes.
.Pp
For a graphical user interface, consider using
.Ql sysutils/k3b
which provides a user friendly interface to
.Xr growisofs 1 and many other burning tools.
.Ss BURNING DATA DVDS
.Pp
Since
.Xr growisofs 1 is a front-end to mkisofs, it will invoke
.Xr mkisofs 8 to create the file system layout and perform the write on the DVD.
This means that an image of the data does not need to be created before the
burning process.
.Pp
To burn to a DVD+R or a DVD-R the data in
.Pa /path/to/data
, use the following command:
.Bd -literal -offset indent
# growisofs -dvd-compat -Z /dev/cd0 -J -R /path/to/data
.Ed
.Pp
In this example,
.Ar -J -R
is passed to
.Xr mkisofs 8 to create an ISO 9660 file system with Joliet and Rock Ridge extensions.
Refer to
.Xr mkisofs 8 for more details.
.Pp
For the initial session recording,
.Ar -Z
is used for both single and multiple sessions.
Replace /dev/cd0, with the name of the DVD device.
Using
.Ar -dvd-compat
indicates that the disk will be closed and that the recording will be
unappendable.
This should also provide better media compatibility with DVD-ROM drives.
.Pp
To burn a pre-mastered image, such as imagefile.iso, use:
.Bd -literal -offset indent
# growisofs -dvd-compat -Z /dev/cd0=imagefile.iso
.Ed
.Pp
The write speed should be detected and automatically set according to the media
and the drive being used.
To force the write speed, use
.Ar -speed=
.
Refer to
.Xr growisofs 1 for example usage.
.Pp
In order to support working files larger than 4.38GB, an UDF/ISO-9660 hybrid
file system must be created by passing
.Ar -udf -iso-level 3
to
.Xr mkisofs 8 and all related programs, such as
.Xr growisofs 1 .
This is required only when creating an ISO image file or when writing files
directly to a disk.
Since a disk created this way must be mounted as an UDF file system with
.Xr mount_udf 8 , it will be usable only on an UDF aware operating system.
Otherwise it will look as if it contains corrupted files.
.Pp
To create this type of ISO file:
.Bd -literal -offset indent
% mkisofs -R -J -udf -iso-level 3 -o imagefile.iso  /path/to/data
.Ed
.Pp
To burn files directly to a disk:
.Bd -literal -offset indent
# growisofs -dvd-compat -udf -iso-level 3 -Z /dev/cd0 -J -R /path/to/data
.Ed
.Pp
When an ISO image already contains large files, no additional options are
required for
.Xr growisofs 1 to burn that image on a disk.
.Pp
Be sure to use an up-to-date version of
.Ql sysutils/cdrtools
, which contains
.Xr mkisofs 8 , as an older version may not contain large files support.
If the latest version does not work, install
.Ql sysutils/cdrtools-devel
and read its
.Xr mkisofs 8 .
.Ss BURNING A DVD-VIDEO
.Pp
A DVD-Video is a specific file layout based on the ISO 9660 and micro-UDF
(M-UDF) specifications.
Since DVD-Video presents a specific data structure hierarchy, a particular
program such as
.Ql multimedia/dvdauthor
is needed to author the DVD.
.Pp
If an image of the DVD-Video file system already exists, it can be burned in
the same way as any other image.
If
.Cm dvdauthor
was used to make the DVD and the result is in
.Pa /path/to/video
, the following command should be used to burn the DVD-Video:
.Bd -literal -offset indent
# growisofs -Z /dev/cd0 -dvd-video /path/to/video
.Ed
.Pp
.Ar -dvd-video
is passed to
.Xr mkisofs 8 to instruct it to create a DVD-Video file system layout.
This option implies the
.Ar -dvd-compat
.Xr growisofs 1 option.
.Ss USING A DVD+RW
.Pp
Unlike CD-RW, a virgin DVD+RW needs to be formatted before first use.
It is recommended to let
.Xr growisofs 1 take care of this automatically whenever appropriate.
However, it is possible to use
.Cm dvd+rw-format
to format the DVD+RW:
.Bd -literal -offset indent
# dvd+rw-format /dev/cd0
.Ed
.Pp
Only perform this operation once and keep in mind that only virgin DVD+RW medias need to be formatted.
Once formatted, the DVD+RW can be burned as usual.
.Pp
To burn a totally new file system and not just append some data onto a DVD+RW, the media does not need to be blanked first.
Instead, write over the previous recording like this:
.Bd -literal -offset indent
# growisofs -Z /dev/cd0 -J -R /path/to/newdata
.Ed
.Pp
The DVD+RW format supports appending data to a previous recording.
This operation consists of merging a new session to the existing one as it is
not considered to be multi-session writing.
.Xr growisofs 1 will grow the ISO 9660 file system present on the media.
.Pp
For example, to append data to a DVD+RW, use the following:
.Bd -literal -offset indent
# growisofs -M /dev/cd0 -J -R /path/to/nextdata
.Ed
.Pp
The same
.Xr mkisofs 8 options used to burn the initial session should be used during next writes.
.Pp
Use
.Ar -dvd-compat
for better media compatibility with DVD-ROM drives.
When using DVD+RW, this option will not prevent the addition of data.
.Pp
To blank the media, use:
.Bd -literal -offset indent
# growisofs -Z /dev/cd0=/dev/zero
.Ed
.Ss USING A DVD-RW
.Pp
A DVD-RW accepts two disc formats: incremental sequential and restricted overwrite.
By default, DVD-RW discs are in sequential format.
.Pp
A virgin DVD-RW can be directly written without being formatted.
However, a non-virgin DVD-RW in sequential format needs to be blanked before writing a new initial session.
.Pp
To blank a DVD-RW in sequential mode:
.Bd -literal -offset indent
# dvd+rw-format -blank=full /dev/cd0
.Ed
.Pp
A full blanking using
.Ar -blank=full
will take about one hour on a 1x media.
A fast blanking can be performed using
.Ar -blank
, if the DVD-RW will be recorded in Disk-At-Once (DAO) mode.
To burn the DVD-RW in DAO mode, use the command:
.Bd -literal -offset indent
# growisofs -use-the-force-luke=dao -Z /dev/cd0=imagefile.iso
.Ed
.Pp
Since
.Xr growisofs 1 automatically attempts to detect fast blanked media and engage DAO write,
.Ar -use-the-force-luke=dao
should not be required.
.Pp
One should instead use restricted overwrite mode with any DVD-RW as this format is more flexible than the default of incremental sequential.
.Pp
To write data on a sequential DVD-RW, use the same instructions as for the other DVD formats:
.Bd -literal -offset indent
# growisofs -Z /dev/cd0 -J -R /path/to/data
.Ed
.Pp
To append some data to a previous recording, use
.Ar -M
with
.Xr growisofs 1 .
However, if data is appended on a DVD-RW in incremental sequential mode, a new session will be created on the disc and
the result will be a multi-session disc.
.Pp
A DVD-RW in restricted overwrite format does not need to be blanked before a new initial
session.
Instead, overwrite the disc with
.Ar -Z
.
It is also possible to grow an existing ISO 9660 file system written on the
disc with
.Ar -M
.
The result will be a one-session DVD.
.Pp
To put a DVD-RW in restricted overwrite format, the following command must be used:
.Bd -literal -offset indent
# dvd+rw-format /dev/cd0
.Ed
.Pp
To change back to sequential format, use:
.Bd -literal -offset indent
# dvd+rw-format -blank=full /dev/cd0
.Ed
.Ss MULTI-SESSION
.Pp
Few DVD-ROM drives support multi-session DVDs and most of the time only read the first
session.
DVD+R, DVD-R and DVD-RW in sequential format can accept multiple sessions.
The notion of multiple sessions does not exist for the DVD+RW and the DVD-RW restricted overwrite formats.
.Pp
Using the following command after an initial non-closed session on a DVD+R,
DVD-R, or DVD-RW in sequential format, will add a new session to the disc:
.Bd -literal -offset indent
# growisofs -M /dev/cd0 -J -R /path/to/nextdata
.Ed
.Pp
Using this command with a DVD+RW or a DVD-RW in restricted overwrite mode will append data while merging the new session to
the existing one.
The result will be a single-session disc.
Use this method to add data after an initial write on these types of media.
.Pp
Since some space on the media is used between each session to mark the end and
start of sessions, one should add sessions with a large amount of data to
optimize media space.
The number of sessions is limited to 154 for a DVD+R, about 2000 for a DVD-R,
and 127 for a DVD+R Double Layer.
.Ss FOR MORE INFORMATION
.Pp
To obtain more information about a DVD, use
.Cm dvd+rw-mediainfo /dev/cd0
while the disc in the specified drive.
.Pp
More information about dvd+rw-tools can be found in
.Xr growisofs 1 , on the dvd+rw-tools web site, and in the cdwrite mailing list archives.
.Pp
When creating a problem report related to the use of dvd+rw-tools, always include the output of
.Cm dvd+rw-mediainfo
.
.Ss USING A DVD-RAM
.Pp
DVD-RAM writers can use either a SCSI or ATAPI interface.
For ATAPI devices, DMA access has to be enabled by adding the following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
hw.ata.atapi_dma="1"
.Ed
.Pp
A DVD-RAM can be seen as a removable hard drive.
Like any other hard drive, the DVD-RAM must be formatted before it can be used.
In this example, the whole disk space will be formatted with a standard UFS2
file system:
.Bd -literal -offset indent
# dd if=/dev/zero of=/dev/acd0 bs=2k count=1
# bsdlabel -Bw acd0
# newfs /dev/acd0
.Ed
.Pp
The DVD device,
.Pa acd0
, must be changed according to the configuration.
.Pp
Once the DVD-RAM has been formatted, it can be mounted as a normal hard drive:
.Bd -literal -offset indent
# mount /dev/acd0  /mnt
.Ed
.Pp
Once mounted, the DVD-RAM will be both readable and writeable.
.Ss CREATING AND USING FLOPPY DISKS
.Pp
This section explains how to format a 3.5 inch floppy disk in FreeBSD.
.Ss STEPS TO FORMAT A FLOPPY
.Pp
A floppy disk needs to be low-level formatted before it can be used.
This is usually done by the vendor, but formatting is a good way to check media
integrity.
To low-level format the floppy disk on FreeBSD, use
.Xr fdformat 1 .
When using this utility, make note of any error messages, as these can help
determine if the disk is good or bad.
.Pp
To format the floppy, insert a new 3.5 inch floppy disk into the first floppy
drive and issue:
.Bd -literal -offset indent
# /usr/sbin/fdformat -f 1440 /dev/fd0
.Ed
.Pp
After low-level formatting the disk, create a disk label as it is needed by the
system to determine the size of the disk and its geometry.
The supported geometry values are listed in
.Pa /etc/disktab
.
.Pp
To write the disk label, use
.Xr bsdlabel 8 :
.Bd -literal -offset indent
# /sbin/bsdlabel -B -w /dev/fd0 fd1440
.Ed
.Pp
The floppy is now ready to be high-level formatted with a file system.
The floppy's file system can be either UFS or FAT, where FAT is generally a
better choice for floppies.
.Pp
To format the floppy with FAT, issue:
.Bd -literal -offset indent
# /sbin/newfs_msdos /dev/fd0
.Ed
.Pp
The disk is now ready for use.
To use the floppy, mount it with
.Xr mount_msdosfs 8 .
One can also install and use
.Ql emulators/mtools
from the Ports Collection.
.Ss BACKUP BASICS
.Pp
Implementing a backup plan is essential in order to have the ability to recover
from disk failure, accidental file deletion, random file corruption, or
complete machine destruction, including destruction of on-site backups.
.Pp
The backup type and schedule will vary, depending upon the importance of the
data, the granularity needed for file restores, and the amount of acceptable
downtime.
Some possible backup techniques include:
.Bl -bullet -offset -compact
.It
Archives of the whole system, backed up onto permanent, off-site media.
This provides protection against all of the problems listed above, but is slow
and inconvenient to restore from, especially for non-privileged users.
.It
File system snapshots, which are useful for restoring deleted files or previous
versions of files.
.It
Copies of whole file systems or disks which are synchronized with another
system on the network using a scheduled
.Ql net/rsync
.
.It
Hardware or software RAID, which minimizes or avoids downtime when a disk fails.
.El
.Pp
Typically, a mix of backup techniques is used.
For example, one could create a schedule to automate a weekly, full system
backup that is stored off-site and to supplement this backup with hourly ZFS
snapshots.
In addition, one could make a manual backup of individual directories or files
before making file edits or deletions.
.Pp
This section describes some of the utilities which can be used to create and
manage backups on a FreeBSD system.
.Ss FILE SYSTEM BACKUPS
.Pp
The traditional UNIX programs for backing up a file system are
.Xr dump 8 , which creates the backup, and
.Xr restore 8 , which restores the backup.
These utilities work at the disk block level, below the abstractions of the
files, links, and directories that are created by file systems.
Unlike other backup software,
.Cm dump
backs up an entire file system and is unable to backup only part of a file
system or a directory tree that spans multiple file systems.
Instead of writing files and directories,
.Cm dump
writes the raw data blocks that comprise files and directories.
.Pp
If
.Cm dump
is used on the root directory, it will not back up
.Pa /home
,
.Pa /usr
or many other directories since these are typically mount points for other file
systems or symbolic links into those file systems.
.Pp
When used to restore data,
.Cm restore
stores temporary files in
.Pa /tmp/
by default.
When using a recovery disk with a small
.Pa /tmp
, set
.Ev TMPDIR
to a directory with more free space in order for the restore to succeed.
.Pp
When using
.Cm dump
, be aware that some quirks remain from its early days in Version 6 of AT&T UNIX,circa 1975.
The default parameters assume a backup to a 9-track tape, rather than to
another type of media or to the high-density tapes available today.
These defaults must be overridden on the command line.
.Pp
It is possible to backup a file system across the network to a another system
or to a tape drive attached to another computer.
While the
.Xr rdump 8 and
.Xr rrestore 8 utilities can be used for this purpose, they are not considered to be secure.
.Pp
Instead, one can use
.Cm dump
and
.Cm restore
in a more secure fashion over an SSH connection.
This example creates a full, compressed backup of
.Pa /usr
and sends the backup file to the specified host over a SSH connection.
.Bd -literal -offset indent
# /sbin/dump -0uan -f - /usr | gzip -2 | ssh -c blowfish \
targetuser@targetmachine.example.com dd of=/mybigfiles/dump-usr-l0.gz
.Ed
.Pp
This example sets
.Ev RSH
in order to write the backup to a tape drive on a remote system over a SSH connection:
.Bd -literal -offset indent
# env RSH=/usr/bin/ssh /sbin/dump -0uan -f
targetuser@targetmachine.example.com:/dev/sa0 /usr
.Ed
.Ss DIRECTORY BACKUPS
.Pp
Several built-in utilities are available for backing up and restoring specified
files and directories as needed.
.Pp
A good choice for making a backup of all of the files in a directory is
.Xr tar 1 .
This utility dates back to Version 6 of AT&T UNIX and by default assumes a recursive backup to a local tape device.
Switches can be used to instead specify the name of a backup file.
.Pp
This example creates a compressed backup of the current directory and saves it
to
.Pa /tmp/mybackup.tgz
.
When creating a backup file, make sure that the backup is not saved to the same
directory that is being backed up.
.Bd -literal -offset indent
# tar czvf /tmp/mybackup.tgz .
.Ed
.Pp
To restore the entire backup,
.Cm cd
into the directory to restore into and specify the name of the backup.
Note that this will overwrite any newer versions of files in the restore
directory.
When in doubt, restore to a temporary directory or specify the name of the file
within the backup to restore.
.Bd -literal -offset indent
# tar xzvf /tmp/mybackup.tgz
.Ed
.Pp
There are dozens of available switches which are described in
.Xr tar 1 .
This utility also supports the use of exclude patterns to specify which files
should not be included when backing up the specified directory or restoring
files from a backup.
.Pp
To create a backup using a specified list of files and directories,
.Xr cpio 1 is a good choice.
Unlike
.Cm tar
,
.Cm cpio
does not know how to walk the directory tree and it must be provided the list
of files to backup.
.Pp
For example, a list of files can be created using
.Cm ls
or
.Cm find
.
This example creates a recursive listing of the current directory which is then
piped to
.Cm cpio
in order to create an output backup file named
.Pa /tmp/mybackup.cpio
.
.Bd -literal -offset indent
# ls -R | cpio -ovF /tmp/mybackup.cpio
.Ed
.Pp
A backup utility which tries to bridge the features provided by
.Cm tar
and
.Cm cpio
is
.Xr pax 1 .
Over the years, the various versions of
.Cm tar
and
.Cm cpio
became slightly incompatible.
 POSIX created
.Cm pax
which attempts to read and write many of the various
.Cm cpio
and
.Cm tar
formats, plus new formats of its own.
.Pp
The
.Cm pax
equivalent to the previous examples would be:
.Bd -literal -offset indent
# pax -wf /tmp/mybackup.pax .
.Ed
.Ss USING DATA TAPES FOR BACKUPS
.Pp
While tape technology has continued to evolve, modern backup systems tend to
combine off-site backups with local removable media.
FreeBSD supports any tape drive that uses SCSI, such as LTO or DAT.
There is limited support for SATA and USB tape drives.
.Pp
For SCSI tape devices, FreeBSD uses the
.Xr sa 4 driver and the
.Pa /dev/sa0
,
.Pa /dev/nsa0
, and
.Pa /dev/esa0
devices.
The physical device name is
.Pa /dev/sa0
.
When
.Pa /dev/nsa0
is used, the backup application will not rewind the tape after writing a file,
which allows writing more than one file to a tape.
Using
.Pa /dev/esa0
ejects the tape after the device is closed.
.Pp
In FreeBSD,
.Cm mt
is used to control operations of the tape drive, such as seeking through files
on a tape or writing tape control marks to the tape.
For example, the first three files on a tape can be preserved by skipping past
them before writing a new file:
.Bd -literal -offset indent
# mt -f /dev/nsa0 fsf 3
.Ed
.Pp
This utility supports many operations.
Refer to
.Xr mt 1 for details.
.Pp
To write a single file to tape using
.Cm tar
, specify the name of the tape device and the file to backup:
.Bd -literal -offset indent
# tar cvf /dev/sa0 file
.Ed
.Pp
To recover files from a
.Cm tar
archive on tape into the current directory:
.Bd -literal -offset indent
# tar xvf /dev/sa0
.Ed
.Pp
To backup a UFS file system, use
.Cm dump
.
This examples backs up
.Pa /usr
without rewinding the tape when finished:
.Bd -literal -offset indent
# dump -0aL -b64 -f /dev/nsa0 /usr
.Ed
.Pp
To interactively restore files from a
.Cm dump
file on tape into the current directory:
.Bd -literal -offset indent
# restore -i -f /dev/nsa0
.Ed
.Ss THIRD-PARTY BACKUP UTILITIES
.Pp
The FreeBSD Ports Collection provides many third-party utilities which can be
used to schedule the creation of backups, simplify tape backup, and make
backups easier and more convenient.
Many of these applications are client/server based and can be used to automate
the backups of a single system or all of the computers in a network.
.Pp
Popular utilities include Amanda, Bacula, rsync, and duplicity.
.Ss EMERGENCY RECOVERY
.Pp
In addition to regular backups, it is recommended to perform the following
steps as part of an emergency preparedness plan.
.Pp
Create a print copy of the output of the following commands:
.Bl -bullet -offset -compact
.It
.Cm gpart show
.It
.Cm more /etc/fstab
.It
.Cm dmesg
.El
.Pp
Store this printout and a copy of the installation media in a secure location.
Should an emergency restore be needed, boot into the installation media and
select
.Ql Live CD
to access a rescue shell.
This rescue mode can be used to view the current state of the system, and if
needed, to reformat disks and restore data from backups.
.Pp
The installation media for FreeBSD/i386 10.4-RELEASE does not include a rescue
shell.
For this version, instead download and burn a Livefs CD image from
.Lk
ftp://ftp.FreeBSD.org/pub/FreeBSD/releases/i386/ISO-IMAGES/10.4/FreeBSD-10.4-RELEASE-i386-livefs.iso
.
.Pp
Next, test the rescue shell and the backups.
Make notes of the procedure.
Store these notes with the media, the printouts, and the backups.
These notes may prevent the inadvertent destruction of the backups while under
the stress of performing an emergency recovery.
.Pp
For an added measure of security, store the latest backup at a remote location
which is physically separated from the computers and disk drives by a
significant distance.
.Pp
In addition to physical disks, FreeBSD also supports the creation and use of
memory disks.
One possible use for a memory disk is to access the contents of an ISO file system without the overhead of first burning it to a CD or DVD, then mounting the CD/DVD media.
.Pp
In FreeBSD, the
.Xr md 4 driver is used to provide support for memory disks.
The
.Pa GENERIC
kernel includes this driver.
When using a custom kernel configuration file, ensure it includes this line:
.Bd -literal -offset indent
device md
.Ed
.Ss ATTACHING AND DETACHING EXISTING IMAGES
.Pp
To mount an existing file system image, use
.Cm mdconfig
to specify the name of the ISO file and a free unit number.
Then, refer to that unit number to mount it on an existing mount point.
Once mounted, the files in the ISO will appear in the mount point.
This example attaches diskimage.iso to the memory device
.Pa /dev/md0
then mounts that memory device on
.Pa /mnt
:
.Bd -literal -offset indent
# mdconfig -f diskimage.iso -u 0
# mount /dev/md0  /mnt
.Ed
.Pp
If a unit number is not specified with
.Ar -u
,
.Cm mdconfig
will automatically allocate an unused memory device and output the name of the
allocated unit, such as
.Pa md4
.
Refer to
.Xr mdconfig 8 for more details about this command and its options.
.Pp
When a memory disk is no longer in use, its resources should be released back
to the system.
First, unmount the file system, then use
.Cm mdconfig
to detach the disk from the system and release its resources.
To continue this example:
.Bd -literal -offset indent
# umount /mnt
# mdconfig -d -u 0
.Ed
.Pp
To determine if any memory disks are still attached to the system, type
.Cm mdconfig -l
.
.Ss CREATING A FILE- OR MEMORY-BACKED MEMORY DISK
.Pp
FreeBSD also supports memory disks where the storage to use is allocated from
either a hard disk or an area of memory.
The first method is commonly referred to as a file-backed file system and the
second method as a memory-backed file system.
Both types can be created using
.Cm mdconfig
.
.Pp
To create a new memory-backed file system, specify a type of
.Ql swap
and the size of the memory disk to create.
Then, format the memory disk with a file system and mount as usual.
This example creates a 5M memory disk on unit
.Ql 1
.
That memory disk is then formatted with the UFS file system before it is mounted:
.Bd -literal -offset indent
# mdconfig -a -t swap -s 5m -u 1
# newfs -U md1
/dev/md1: 5.0MB (10240 sectors) block size 16384, fragment size 2048
        using 4 cylinder groups of 1.27MB, 81 blks, 192 inodes.
        with soft updates
super-block backups (for fsck -b #) at:
 160, 2752, 5344, 7936
# mount /dev/md1  /mnt
# df /mnt
Filesystem 1K-blocks Used Avail Capacity  Mounted on
/dev/md1        4718    4  4338     0%    /mnt
.Ed
.Pp
To create a new file-backed memory disk, first allocate an area of disk to use.
This example creates an empty 5K file named
.Pa newimage
:
.Bd -literal -offset indent
# dd if=/dev/zero of=newimage bs=1k count=5k
5120+0 records in
5120+0 records out
.Ed
.Pp
Next, attach that file to a memory disk, label the memory disk and format it
with the UFS file system, mount the memory disk, and verify the size of the file-backed
disk:
.Bd -literal -offset indent
# mdconfig -f newimage -u 0
# bsdlabel -w md0 auto
# newfs md0a
/dev/md0a: 5.0MB (10224 sectors) block size 16384, fragment size 2048
        using 4 cylinder groups of 1.25MB, 80 blks, 192 inodes.
super-block backups (for fsck -b #) at:
 160, 2720, 5280, 7840
# mount /dev/md0a /mnt
# df /mnt
Filesystem 1K-blocks Used Avail Capacity  Mounted on
/dev/md0a       4710    4  4330     0%    /mnt
.Ed
.Pp
It takes several commands to create a file- or memory-backed file system using
.Cm mdconfig
.
FreeBSD also comes with
.Cm mdmfs
which automatically configures a memory disk, formats it with the UFS file system, and mounts it.
For example, after creating newimage with
.Cm dd
, this one command is equivalent to running the
.Cm bsdlabel
,
.Cm newfs
, and
.Cm mount
commands shown above:
.Bd -literal -offset indent
# mdmfs -F newimage -s 5m md0  /mnt
.Ed
.Pp
To instead create a new memory-based memory disk with
.Cm mdmfs
, use this one command:
.Bd -literal -offset indent
# mdmfs -s 5m md1  /mnt
.Ed
.Pp
If the unit number is not specified,
.Cm mdmfs
will automatically select an unused memory device.
For more details about
.Cm mdmfs
, refer to
.Xr mdmfs 8 .
.Pp
FreeBSD offers a feature in conjunction with Soft Updates: file system snapshots.
.Pp
UFS snapshots allow a user to create images of specified file systems, and
treat them as a file.
Snapshot files must be created in the file system that the action is performed
on, and a user may create no more than 20 snapshots per file system.
Active snapshots are recorded in the superblock so they are persistent across
unmount and remount operations along with system reboots.
When a snapshot is no longer required, it can be removed using
.Xr rm 1 .
While snapshots may be removed in any order, all the used space may not be
acquired because another snapshot will possibly claim some of the released
blocks.
.Pp
The un-alterable
.Ar snapshot
file flag is set by
.Xr mksnap_ffs 8 after initial creation of a snapshot file.
.Xr unlink 1 makes an exception for snapshot files since it allows them to be removed.
.Pp
Snapshots are created using
.Xr mount 8 .
To place a snapshot of
.Pa /var
in the file
.Pa /var/snapshot/snap
, use the following command:
.Bd -literal -offset indent
# mount -u -o snapshot /var/snapshot/snap /var
.Ed
.Pp
Alternatively, use
.Xr mksnap_ffs 8 to create the snapshot:
.Bd -literal -offset indent
# mksnap_ffs /var /var/snapshot/snap
.Ed
.Pp
One can find snapshot files on a file system, such as
.Pa /var
, using
.Xr find 1 :
.Bd -literal -offset indent
# find /var -flags snapshot
.Ed
.Pp
Once a snapshot has been created, it has several uses:
.Bl -bullet -offset -compact
.It
Some administrators will use a snapshot file for backup purposes, because the
snapshot can be transferred to CDs or tape.
.It
The file system integrity checker,
.Xr fsck 8 , may be run on the snapshot.
Assuming that the file system was clean when it was mounted, this should always
provide a clean and unchanging result.
.It
Running
.Xr dump 8 on the snapshot will produce a dump file that is consistent with the file
system and the timestamp of the snapshot.
.Xr dump 8 can also take a snapshot, create a dump image, and then remove the snapshot in
one command by using
.Ar -L
.
.It
The snapshot can be mounted as a frozen image of the file system.
To
.Xr mount 8 the snapshot
.Pa /var/snapshot/snap
run:
.Bd -literal -offset indent
# mdconfig -a -t vnode -o readonly -f /var/snapshot/snap -u 4
# mount -r /dev/md4 /mnt
.Ed
.El
.Pp
The frozen
.Pa /var
is now available through
.Pa /mnt
.
Everything will initially be in the same state it was during the snapshot
creation time.
The only exception is that any earlier snapshots will appear as zero length
files.
To unmount the snapshot, use:
.Bd -literal -offset indent
# umount /mnt
# mdconfig -d -u 4
.Ed
.Pp
For more information about
.Ar softupdates
and file system snapshots, including technical papers, visit Marshall Kirk
McKusick's website at
.Lk http://www.mckusick.com/
.
.Ss DISK QUOTAS
.Pp
Disk quotas can be used to limit the amount of disk space or the number of
files a user or members of a group may allocate on a per-file system basis.
This prevents one user or group of users from consuming all of the available
disk space.
.Pp
This section describes how to configure disk quotas for the UFS file system.
To configure quotas on the ZFS file system, refer to
.Ss ENABLING DISK QUOTAS
.Pp
To determine if the FreeBSD kernel provides support for disk quotas:
.Bd -literal -offset indent
% sysctl kern.features.ufs_quota
kern.features.ufs_quota: 1
.Ed
.Pp
In this example, the
.Ql 1
indicates quota support.
If the value is instead
.Ql 0
, add the following line to a custom kernel configuration file and rebuild the
kernel using the instructions in :
.Bd -literal -offset indent
options QUOTA
.Ed
.Pp
Next, enable disk quotas in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
quota_enable="YES"
.Ed
.Pp
Normally on bootup, the quota integrity of each file system is checked by
.Xr quotacheck 8 .
This program insures that the data in the quota database properly reflects the
data on the file system.
This is a time consuming process that will significantly affect the time the
system takes to boot.
To skip this step, add this variable to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
check_quotas="NO"
.Ed
.Pp
Finally, edit
.Pa /etc/fstab
to enable disk quotas on a per-file system basis.
To enable per-user quotas on a file system, add
.Ar userquota
to the options field in the
.Pa /etc/fstab
entry for the file system to enable quotas on.
For example:
.Bd -literal -offset indent
/dev/da1s2g   /home    ufs rw,userquota 1 2
.Ed
.Pp
To enable group quotas, use
.Ar groupquota
instead.
To enable both user and group quotas, separate the options with a comma:
.Bd -literal -offset indent
/dev/da1s2g    /home    ufs rw,userquota,groupquota 1 2
.Ed
.Pp
By default, quota files are stored in the root directory of the file system as
.Pa quota.user
and
.Pa quota.group
.
Refer to
.Xr fstab 5 for more information.
Specifying an alternate location for the quota files is not recommended.
.Pp
Once the configuration is complete, reboot the system and
.Pa /etc/rc
will automatically run the appropriate commands to create the initial quota
files for all of the quotas enabled in
.Pa /etc/fstab
.
.Pp
In the normal course of operations, there should be no need to manually run
.Xr quotacheck 8 ,
.Xr quotaon 8 , or
.Xr quotaoff 8 .
However, one should read these manual pages to be familiar with their
operation.
.Ss SETTING QUOTA LIMITS
.Pp
To verify that quotas are enabled, run:
.Bd -literal -offset indent
# quota -v
.Ed
.Pp
There should be a one line summary of disk usage and current quota limits for
each file system that quotas are enabled on.
.Pp
The system is now ready to be assigned quota limits with
.Cm edquota
.
.Pp
Several options are available to enforce limits on the amount of disk space a
user or group may allocate, and how many files they may create.
Allocations can be limited based on disk space (block quotas), number of files
(inode quotas), or a combination of both.
Each limit is further broken down into two categories: hard and soft limits.
.Pp
A hard limit may not be exceeded.
Once a user reaches a hard limit, no further allocations can be made on that
file system by that user.
For example, if the user has a hard limit of 500 kbytes on a file system and is
currently using 490 kbytes, the user can only allocate an additional 10 kbytes.
Attempting to allocate an additional 11 kbytes will fail.
.Pp
Soft limits can be exceeded for a limited amount of time, known as the grace
period, which is one week by default.
If a user stays over their limit longer than the grace period, the soft limit
turns into a hard limit and no further allocations are allowed.
When the user drops back below the soft limit, the grace period is reset.
.Pp
In the following example, the quota for the
.Ql test
account is being edited.
When
.Cm edquota
is invoked, the editor specified by
.Ev EDITOR
is opened in order to edit the quota limits.
The default editor is set to vi.
.Bd -literal -offset indent
# edquota -u test
Quotas for user test:
/usr: kbytes in use: 65, limits (soft = 50, hard = 75)
        inodes in use: 7, limits (soft = 50, hard = 60)
/usr/var: kbytes in use: 0, limits (soft = 50, hard = 75)
        inodes in use: 0, limits (soft = 50, hard = 60)
.Ed
.Pp
There are normally two lines for each file system that has quotas enabled.
One line represents the block limits and the other represents the inode limits.
Change the value to modify the quota limit.
For example, to raise the block limit on
.Pa /usr
to a soft limit of
.Ql 500
and a hard limit of
.Ql 600
, change the values in that line as follows:
.Bd -literal -offset indent
/usr: kbytes in use: 65, limits (soft = 500, hard = 600)
.Ed
.Pp
The new quota limits take effect upon exiting the editor.
.Pp
Sometimes it is desirable to set quota limits on a range of users.
This can be done by first assigning the desired quota limit to a user.
Then, use
.Ar -p
to duplicate that quota to a specified range of user IDs (UIDs).
The following command will duplicate those quota limits for UIDs
.Ql 10,000
through
.Ql 19,999
:
.Bd -literal -offset indent
# edquota -p test 10000-19999
.Ed
.Pp
For more information, refer to
.Xr edquota 8 .
.Ss CHECKING QUOTA LIMITS AND DISK USAGE
.Pp
To check individual user or group quotas and disk usage, use
.Xr quota 1 .
A user may only examine their own quota and the quota of a group they are a
member of.
Only the superuser may view all user and group quotas.
To get a summary of all quotas and disk usage for file systems with quotas
enabled, use
.Xr repquota 8 .
.Pp
Normally, file systems that the user is not using any disk space on will not
show in the output of
.Cm quota
, even if the user has a quota limit assigned for that file system.
Use
.Ar -v
to display those file systems.
The following is sample output from
.Cm quota -v
for a user that has quota limits on two file systems.
.Bd -literal -offset indent
Disk quotas for user test (uid 1002):
     Filesystem  usage    quota   limit   grace   files   quota   limit   grace
           /usr      65*     50      75   5days       7      50      60
       /usr/var       0      50      75               0      50      60
.Ed
.Pp
In this example, the user is currently 15 kbytes over the soft limit of 50
kbytes on
.Pa /usr
and has 5 days of grace period left.
The asterisk
.Ql *
indicates that the user is currently over the quota limit.
.Ss QUOTAS OVER NFS
.Pp
Quotas are enforced by the quota subsystem on the NFS server.
The
.Xr rpc.rquotad 8 daemon makes quota information available to
.Cm quota
on NFS clients, allowing users on those machines to see their quota statistics.
.Pp
On the NFS server, enable
.Cm rpc.rquotad
by removing the
.Ql #
from this line in
.Pa /etc/inetd.conf
:
.Bd -literal -offset indent
rquotad/1      dgram rpc/udp wait root /usr/libexec/rpc.rquotad rpc.rquotad
.Ed
.Pp
Then, restart
.Cm inetd
:
.Bd -literal -offset indent
# service inetd restart
.Ed
.Pp
FreeBSD offers excellent online protections against unauthorized data access.
File permissions and Mandatory Access Control (MAC) help prevent unauthorized users from accessing data while the operating
system is active and the computer is powered up.
However, the permissions enforced by the operating system are irrelevant if an
attacker has physical access to a computer and can move the computer's hard
drive to another system to copy and analyze the data.
.Pp
Regardless of how an attacker may have come into possession of a hard drive or
powered-down computer, the GEOM-based cryptographic subsystems built into FreeBSD are able to protect the data
on the computer's file systems against even highly-motivated attackers with
significant resources.
Unlike encryption methods that encrypt individual files, the built-in
.Cm gbde
and
.Cm geli
utilities can be used to transparently encrypt entire file systems.
No cleartext ever touches the hard drive's platter.
.Pp
This chapter demonstrates how to create an encrypted file system on FreeBSD.
It first demonstrates the process using
.Cm gbde
and then demonstrates the same example using
.Cm geli
.
.Ss DISK ENCRYPTION WITH GBDE
.Pp
The objective of the
.Xr gbde 4 facility is to provide a formidable challenge for an attacker to gain access to
the contents of a cold storage device.
However, if the computer is compromised while up and running and the storage
device is actively attached, or the attacker has access to a valid passphrase,
it offers no protection to the contents of the storage device.
Thus, it is important to provide physical security while the system is running
and to protect the passphrase used by the encryption mechanism.
.Pp
This facility provides several barriers to protect the data stored in each disk
sector.
It encrypts the contents of a disk sector using 128-bit AES in CBC mode.
Each sector on the disk is encrypted with a different AES key.
For more information on the cryptographic design, including how the sector keys
are derived from the user-supplied passphrase, refer to
.Xr gbde 4 .
.Pp
FreeBSD provides a kernel module for gbde which can be loaded with this command:
.Bd -literal -offset indent
# kldload geom_bde
.Ed
.Pp
If using a custom kernel configuration file, ensure it contains this line:
.Pp
.Ql options GEOM_BDE
.Pp
The following example demonstrates adding a new hard drive to a system that
will hold a single encrypted partition that will be mounted as
.Pa /private
.
.Ss ENCRYPTING A PARTITION WITH GBDE
.Ss ADD THE NEW HARD DRIVE
.Pp
Install the new drive to the system as explained in .
For the purposes of this example, a new hard drive partition has been added as
.Pa /dev/ad4s1c
and
.Pa /dev/ad0s1*
represents the existing standard FreeBSD partitions.
.Bd -literal -offset indent
# ls /dev/ad*
/dev/ad0        /dev/ad0s1b     /dev/ad0s1e     /dev/ad4s1
/dev/ad0s1      /dev/ad0s1c     /dev/ad0s1f     /dev/ad4s1c
/dev/ad0s1a     /dev/ad0s1d     /dev/ad4
.Ed
.Ss CREATE A DIRECTORY TO HOLD GBDE LOCK FILES
.Bd -literal -offset indent
# mkdir /etc/gbde
.Ed
.Pp
The gbde lock file contains information that gbde requires to access encrypted partitions.
Without access to the lock file, gbde will not be able to decrypt the data contained in the encrypted partition
without significant manual intervention which is not supported by the software.
Each encrypted partition uses a separate lock file.
.Ss INITIALIZE THE GBDE PARTITION
.Pp
A gbde partition must be initialized before it can be used.
This initialization needs to be performed only once.
This command will open the default editor, in order to set various
configuration options in a template.
For use with the UFS file system, set the sector_size to 2048:
.Bd -literal -offset indent
# gbde init /dev/ad4s1c -i -L /etc/gbde/ad4s1c.lock
# $FreeBSD: src/sbin/gbde/template.txt,v 1.1.36.1 2009/08/03 08:13:06 kensmith
Exp $
#
# Sector size is the smallest unit of data which can be read or written.
# Making it too small decreases performance and decreases available space.
# Making it too large may prevent filesystems from working.  512 is the
# minimum and always safe.  For UFS, use the fragment size
#
sector_size	=	2048
[...]
.Ed
.Pp
Once the edit is saved, the user will be asked twice to type the passphrase
used to secure the data.
The passphrase must be the same both times.
The ability of gbde to protect data depends entirely on the quality of the passphrase.
For tips on how to select a secure passphrase that is easy to remember, see http://world.std.com/~reinhold/diceware.htm.
.Pp
This initialization creates a lock file for the gbde partition.
In this example, it is stored as
.Pa /etc/gbde/ad4s1c.lock
.
Lock files must end in
.Do
.lock
.Dc
in order to be correctly detected by the
.Pa /etc/rc.d/gbde
start up script.
.Pp
Lock files must be backed up together with the contents of any encrypted partitions.
Without the lock file, the legitimate owner will be unable to access the data
on the encrypted partition.
.Ss ATTACH THE ENCRYPTED PARTITION TO THE KERNEL
.Bd -literal -offset indent
# gbde attach /dev/ad4s1c -l /etc/gbde/ad4s1c.lock
.Ed
.Pp
This command will prompt to input the passphrase that was selected during the
initialization of the encrypted partition.
The new encrypted device will appear in
.Pa /dev
as
.Pa /dev/device_name.bde
:
.Bd -literal -offset indent
# ls /dev/ad*
/dev/ad0        /dev/ad0s1b     /dev/ad0s1e     /dev/ad4s1
/dev/ad0s1      /dev/ad0s1c     /dev/ad0s1f     /dev/ad4s1c
/dev/ad0s1a     /dev/ad0s1d     /dev/ad4        /dev/ad4s1c.bde
.Ed
.Ss CREATE A FILE SYSTEM ON THE ENCRYPTED DEVICE
.Pp
Once the encrypted device has been attached to the kernel, a file system can be
created on the device.
This example creates a UFS file system with soft updates enabled.
Be sure to specify the partition which has a
.Pa *.bde
extension:
.Bd -literal -offset indent
# newfs -U /dev/ad4s1c.bde
.Ed
.Ss MOUNT THE ENCRYPTED PARTITION
.Pp
Create a mount point and mount the encrypted file system:
.Bd -literal -offset indent
# mkdir /private
# mount /dev/ad4s1c.bde /private
.Ed
.Ss VERIFY THAT THE ENCRYPTED FILE SYSTEM IS AVAILABLE
.Pp
The encrypted file system should now be visible and available for use:
.Bd -literal -offset indent
% df -H
Filesystem        Size   Used  Avail Capacity  Mounted on
/dev/ad0s1a      1037M    72M   883M     8%    /
/devfs            1.0K   1.0K     0B   100%    /dev
/dev/ad0s1f       8.1G    55K   7.5G     0%    /home
/dev/ad0s1e      1037M   1.1M   953M     0%    /tmp
/dev/ad0s1d       6.1G   1.9G   3.7G    35%    /usr
/dev/ad4s1c.bde   150G   4.1K   138G     0%    /private
.Ed
.Pp
After each boot, any encrypted file systems must be manually re-attached to the
kernel, checked for errors, and mounted, before the file systems can be used.
To configure these steps, add the following lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
gbde_autoattach_all="YES"
gbde_devices="ad4s1c"
gbde_lockdir="/etc/gbde"
.Ed
.Pp
This requires that the passphrase be entered at the console at boot time.
After typing the correct passphrase, the encrypted partition will be mounted
automatically.
Additional gbde boot options are available and listed in
.Xr rc.conf 5 .
.Pp
sysinstall is incompatible with gbde-encrypted devices.
All
.Pa *.bde
devices must be detached from the kernel before starting sysinstall or it will crash during its initial probing for devices.
To detach the encrypted device used in the example, use the following command:
.Bd -literal -offset indent
# gbde detach /dev/ad4s1c
.Ed
.Pp
An alternative cryptographic GEOM class is available using
.Cm geli
.
This control utility adds some features and uses a different scheme for doing
cryptographic work.
It provides the following features:
.Bl -bullet -offset -compact
.It
Utilizes the
.Xr crypto 9 framework and automatically uses cryptographic hardware when it is available.
.It
Supports multiple cryptographic algorithms such as AES, Blowfish, and 3DES.
.It
Allows the root partition to be encrypted.
The passphrase used to access the encrypted root partition will be requested
during system boot.
.It
Allows the use of two independent keys.
.It
It is fast as it performs simple sector-to-sector encryption.
.It
Allows backup and restore of master keys.
If a user destroys their keys, it is still possible to get access to the data
by restoring keys from the backup.
.It
Allows a disk to attach with a random, one-time key which is useful for swap
partitions and temporary file systems.
.El
.Pp
More features and usage examples can be found in
.Xr geli 8 .
.Pp
The following example describes how to generate a key file which will be used
as part of the master key for the encrypted provider mounted under
.Pa /private
.
The key file will provide some random data used to encrypt the master key.
The master key will also be protected by a passphrase.
The provider's sector size will be 4kB.
The example describes how to attach to the
.Cm geli
provider, create a file system on it, mount it, work with it, and finally, how
to detach it.
.Ss ENCRYPTING A PARTITION WITH GELI
.Ss LOAD GELI SUPPORT
.Pp
Support for
.Cm geli
is available as a loadable kernel module.
To configure the system to automatically load the module at boot time, add the
following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
geom_eli_load="YES"
.Ed
.Pp
To load the kernel module now:
.Bd -literal -offset indent
# kldload geom_eli
.Ed
.Pp
For a custom kernel, ensure the kernel configuration file contains these lines:
.Bd -literal -offset indent
options GEOM_ELI
device crypto
.Ed
.Ss GENERATE THE MASTER KEY
.Pp
The following commands generate a master key (
.Pa /root/da2.key
) that is protected with a passphrase.
The data source for the key file is
.Pa /dev/random
and the sector size of the provider (
.Pa /dev/da2.eli
) is 4kB as a bigger sector size provides better performance:
.Bd -literal -offset indent
# dd if=/dev/random of=/root/da2.key bs=64 count=1
# geli init -s 4096 -K /root/da2.key /dev/da2
Enter new passphrase:
Reenter new passphrase:
.Ed
.Pp
It is not mandatory to use both a passphrase and a key file as either method of
securing the master key can be used in isolation.
.Pp
If the key file is given as
.Do
-
.Dc
, standard input will be used.
For example, this command generates three key files:
.Bd -literal -offset indent
# cat keyfile1 keyfile2 keyfile3 | geli init -K - /dev/da2
.Ed
.Ss ATTACH THE PROVIDER WITH THE GENERATED KEY
.Pp
To attach the provider, specify the key file, the name of the disk, and the
passphrase:
.Bd -literal -offset indent
# geli attach -k /root/da2.key /dev/da2
Enter passphrase:
.Ed
.Pp
This creates a new device with an
.Pa .eli
extension:
.Bd -literal -offset indent
# ls /dev/da2*
/dev/da2  /dev/da2.eli
.Ed
.Ss CREATE THE NEW FILE SYSTEM
.Pp
Next, format the device with the UFS file system and mount it on an existing mount point:
.Bd -literal -offset indent
# dd if=/dev/random of=/dev/da2.eli bs=1m
# newfs /dev/da2.eli
# mount /dev/da2.eli /private
.Ed
.Pp
The encrypted file system should now be available for use:
.Bd -literal -offset indent
# df -H
Filesystem     Size   Used  Avail Capacity  Mounted on
/dev/ad0s1a    248M    89M   139M    38%    /
/devfs         1.0K   1.0K     0B   100%    /dev
/dev/ad0s1f    7.7G   2.3G   4.9G    32%    /usr
/dev/ad0s1d    989M   1.5M   909M     0%    /tmp
/dev/ad0s1e    3.9G   1.3G   2.3G    35%    /var
/dev/da2.eli   150G   4.1K   138G     0%    /private
.Ed
.Pp
Once the work on the encrypted partition is done, and the
.Pa /private
partition is no longer needed, it is prudent to put the device into cold
storage by unmounting and detaching the
.Cm geli
encrypted partition from the kernel:
.Bd -literal -offset indent
# umount /private
# geli detach da2.eli
.Ed
.Pp
A
.Pa rc.d
script is provided to simplify the mounting of
.Cm geli
-encrypted devices at boot time.
For this example, add these lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
geli_devices="da2"
geli_da2_flags="-k /root/da2.key"
.Ed
.Pp
This configures
.Pa /dev/da2
as a
.Cm geli
provider with a master key of
.Pa /root/da2.key
.
The system will automatically detach the provider from the kernel before the
system shuts down.
During the startup process, the script will prompt for the passphrase before
attaching the provider.
Other kernel messages might be shown before and after the password prompt.
If the boot process seems to stall, look carefully for the password prompt
among the other messages.
Once the correct passphrase is entered, the provider is attached.
The file system is then mounted, typically by an entry in
.Pa /etc/fstab
.
Refer to for instructions on how to configure a file system to mount at boot time.
.Pp
Like the encryption of disk partitions, encryption of swap space is used to
protect sensitive information.
Consider an application that deals with passwords.
As long as these passwords stay in physical memory, they are not written to
disk and will be cleared after a reboot.
However, if FreeBSD starts swapping out memory pages to free space, the
passwords may be written to the disk unencrypted.
Encrypting swap space can be a solution for this scenario.
.Pp
This section demonstrates how to configure an encrypted swap partition using
.Xr gbde 8 or
.Xr geli 8 encryption.
It assumes that
.Pa /dev/ada0s1b
is the swap partition.
.Ss CONFIGURING ENCRYPTED SWAP
.Pp
Swap partitions are not encrypted by default and should be cleared of any
sensitive data before continuing.
To overwrite the current swap partition with random garbage, execute the
following command:
.Bd -literal -offset indent
# dd if=/dev/random of=/dev/ada0s1b bs=1m
.Ed
.Pp
To encrypt the swap partition using
.Xr gbde 8 , add the
.Ql .bde
suffix to the swap line in
.Pa /etc/fstab
:
.Bd -literal -offset indent
# Device		Mountpoint	FStype	Options		Dump	Pass#
/dev/ada0s1b.bde	none		swap	sw		0	0
.Ed
.Pp
To instead encrypt the swap partition using
.Xr geli 8 , use the
.Ql .eli
suffix:
.Bd -literal -offset indent
# Device		Mountpoint	FStype	Options		Dump	Pass#
/dev/ada0s1b.eli	none		swap	sw		0	0
.Ed
.Pp
By default,
.Xr geli 8 uses the AES algorithm with a key length of 128 bits.
Normally the default settings will suffice.
If desired, these defaults can be altered in the options field in
.Pa /etc/fstab
.
The possible flags are:
.Bl -tag -offset -compact
.It aalgo
Data integrity verification algorithm used to ensure that the encrypted data
has not been tampered with.
See
.Xr geli 8 for a list of supported algorithms.
.It ealgo
Encryption algorithm used to protect the data.
See
.Xr geli 8 for a list of supported algorithms.
.It keylen
The length of the key used for the encryption algorithm.
See
.Xr geli 8 for the key lengths that are supported by each encryption algorithm.
.It sectorsize
The size of the blocks data is broken into before it is encrypted.
Larger sector sizes increase performance at the cost of higher storage
overhead.
The recommended size is 4096 bytes.
.El
.Pp
This example configures an encrypted swap partition using the Blowfish
algorithm with a key length of 128 bits and a sectorsize of 4 kilobytes:
.Bd -literal -offset indent
# Device		Mountpoint	FStype	Options				Dump	Pass#
/dev/ada0s1b.eli	none		swap	sw,ealgo=blowfish,keylen=128,sectorsize=4096	0	0
.Ed
.Ss ENCRYPTED SWAP VERIFICATION
.Pp
Once the system has rebooted, proper operation of the encrypted swap can be
verified using
.Cm swapinfo
.
.Pp
If
.Xr gbde 8 is being used:
.Bd -literal -offset indent
% swapinfo
Device          1K-blocks     Used    Avail Capacity
/dev/ada0s1b.bde   542720        0   542720     0%
.Ed
.Pp
If
.Xr geli 8 is being used:
.Bd -literal -offset indent
% swapinfo
Device          1K-blocks     Used    Avail Capacity
/dev/ada0s1b.eli   542720        0   542720     0%
.Ed
.Pp
High availability is one of the main requirements in serious business
applications and highly-available storage is a key component in such
environments.
In FreeBSD, the Highly Available STorage (HAST) framework allows transparent storage of the same data across several
physically separated machines connected by a TCP/IP network.
 HAST can be understood as a network-based RAID1 (mirror), and is similar to the
DRBD® storage system used in the GNU/Linux platform.
In combination with other high-availability features of FreeBSD like CARP, HAST makes it possible to build a highly-available storage cluster that is resistant
to hardware failures.
.Pp
The following are the main features of HAST:
.Bl -bullet -offset -compact
.It
Can be used to mask I/O errors on local hard drives.
.It
File system agnostic as it works with any file system supported by FreeBSD.
.It
Efficient and quick resynchronization as only the blocks that were modified
during the downtime of a node are synchronized.
.It
Can be used in an already deployed environment to add additional redundancy.
.It
Together with CARP, Heartbeat, or other tools, it can be used to build a robust and durable storage system.
.El
.Pp
After reading this section, you will know:
.Bl -bullet -offset -compact
.It
What HAST is, how it works, and which features it provides.
.It
How to set up and use HAST on FreeBSD.
.It
How to integrate CARP and
.Xr devd 8 to build a robust storage system.
.El
.Pp
Before reading this section, you should:
.Bl -bullet -offset -compact
.It
Understand UNIX and FreeBSD basics ().
.It
Know how to configure network interfaces and other core FreeBSD subsystems ().
.It
Have a good understanding of FreeBSD networking ().
.El
.Pp
The HAST project was sponsored by The FreeBSD Foundation with support from http://www.omc.net/ and http://www.transip.nl/.
.Ss HAST OPERATION
.Pp
HAST provides synchronous block-level replication between two physical machines: the primary, also known as the master node, and the secondary, or slave node.
These two machines together are referred to as a cluster.
.Pp
Since HAST works in a primary-secondary configuration, it allows only one of the cluster
nodes to be active at any given time.
The primary node, also called active, is the one which will handle all the I/O requests to HAST-managed devices.
The secondary node is automatically synchronized from the primary node.
.Pp
The physical components of the HAST system are the local disk on primary node, and the disk on the remote,
secondary node.
.Pp
HAST operates synchronously on a block level, making it transparent to file systems
and applications.
 HAST provides regular GEOM providers in
.Pa /dev/hast/
for use by other tools or applications.
There is no difference between using HAST-provided devices and raw disks or partitions.
.Pp
Each write, delete, or flush operation is sent to both the local disk and to
the remote disk over TCP/IP.
Each read operation is served from the local disk, unless the local disk is not
up-to-date or an I/O error occurs.
In such cases, the read operation is sent to the secondary node.
.Pp
HAST tries to provide fast failure recovery.
For this reason, it is important to reduce synchronization time after a node's
outage.
To provide fast synchronization, HAST manages an on-disk bitmap of dirty extents and only synchronizes those during a
regular synchronization, with an exception of the initial sync.
.Pp
There are many ways to handle synchronization.
 HAST implements several replication modes to handle different synchronization
methods:
.Bl -bullet -offset -compact
.It
memsync: This mode reports a write operation as completed when the local write
operation is finished and when the remote node acknowledges data arrival, but
before actually storing the data.
The data on the remote node will be stored directly after sending the
acknowledgement.
This mode is intended to reduce latency, but still provides good reliability.
This mode is the default.
.It
fullsync: This mode reports a write operation as completed when both the local write
and the remote write complete.
This is the safest and the slowest replication mode.
.It
async: This mode reports a write operation as completed when the local write
completes.
This is the fastest and the most dangerous replication mode.
It should only be used when replicating to a distant node where latency is too
high for other modes.
.El
.Ss HAST CONFIGURATION
.Pp
The HAST framework consists of several components:
.Bl -bullet -offset -compact
.It
The
.Xr hastd 8 daemon which provides data synchronization.
When this daemon is started, it will automatically load
.Ev geom_gate.ko
.
.It
The userland management utility,
.Xr hastctl 8 .
.It
The
.Xr hast.conf 5 configuration file.
This file must exist before starting hastd.
.El
.Pp
Users who prefer to statically build
.Ql GEOM_GATE
support into the kernel should add this line to the custom kernel configuration
file, then rebuild the kernel using the instructions in :
.Bd -literal -offset indent
options	GEOM_GATE
.Ed
.Pp
The following example describes how to configure two nodes in
master-slave/primary-secondary operation using HAST to replicate the data between the two.
The nodes will be called
.Ql hasta
, with an IP address of
.Ql 172.16.0.1
, and
.Ql hastb
, with an IP address of
.Ql 172.16.0.2
.
Both nodes will have a dedicated hard drive
.Pa /dev/ad6
of the same size for HAST operation.
The HAST pool, sometimes referred to as a resource or the GEOM provider in
.Pa /dev/hast/
, will be called
.Ql test
.
.Pp
Configuration of HAST is done using
.Pa /etc/hast.conf
.
This file should be identical on both nodes.
The simplest configuration is:
.Bd -literal -offset indent
resource test {
	on hasta {
		local /dev/ad6
		remote 172.16.0.2
	}
	on hastb {
		local /dev/ad6
		remote 172.16.0.1
	}
}
.Ed
.Pp
For more advanced configuration, refer to
.Xr hast.conf 5 .
.Pp
It is also possible to use host names in the
.Ql remote
statements if the hosts are resolvable and defined either in
.Pa /etc/hosts
or in the local DNS.
.Pp
Once the configuration exists on both nodes, the HAST pool can be created.
Run these commands on both nodes to place the initial metadata onto the local
disk and to start
.Xr hastd 8 :
.Bd -literal -offset indent
# hastctl create test
# service hastd onestart
.Ed
.Pp
It is not possible to use GEOM providers with an existing file system or to convert an existing storage to a HAST-managed pool.
This procedure needs to store some metadata on the provider and there will not
be enough required space available on an existing provider.
.Pp
A HAST node's
.Ql primary
or
.Ql secondary
role is selected by an administrator, or software like Heartbeat, using
.Xr hastctl 8 .
On the primary node,
.Ql hasta
, issue this command:
.Bd -literal -offset indent
# hastctl role primary test
.Ed
.Pp
Run this command on the secondary node,
.Ql hastb
:
.Bd -literal -offset indent
# hastctl role secondary test
.Ed
.Pp
Verify the result by running
.Cm hastctl
on each node:
.Bd -literal -offset indent
# hastctl status test
.Ed
.Pp
Check the
.Ql status
line in the output.
If it says
.Ql degraded
, something is wrong with the configuration file.
It should say
.Ql complete
on each node, meaning that the synchronization between the nodes has started.
The synchronization completes when
.Cm hastctl status
reports 0 bytes of
.Ql dirty
extents.
.Pp
The next step is to create a file system on the GEOM provider and mount it.
This must be done on the
.Ql primary
node.
Creating the file system can take a few minutes, depending on the size of the
hard drive.
This example creates a UFS file system on
.Pa /dev/hast/test
:
.Bd -literal -offset indent
# newfs -U /dev/hast/test
# mkdir /hast/test
# mount /dev/hast/test  /hast/test
.Ed
.Pp
Once the HAST framework is configured properly, the final step is to make sure that HAST is started automatically during system boot.
Add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
hastd_enable="YES"
.Ed
.Ss FAILOVER CONFIGURATION
.Pp
The goal of this example is to build a robust storage system which is resistant
to the failure of any given node.
If the primary node fails, the secondary node is there to take over seamlessly,
check and mount the file system, and continue to work without missing a single
bit of data.
.Pp
To accomplish this task, the Common Address Redundancy Protocol (CARP) is used to provide for automatic failover at the IP layer.
 CARP allows multiple hosts on the same network segment to share an IP address.
Set up CARP on both nodes of the cluster according to the documentation available in .
In this example, each node will have its own management IP address and a shared IP address of 172.16.0.254.
The primary HAST node of the cluster must be the master CARP node.
.Pp
The HAST pool created in the previous section is now ready to be exported to the other
hosts on the network.
This can be accomplished by exporting it through NFS or Samba, using the shared IP address 172.16.0.254.
The only problem which remains unresolved is an automatic failover should the
primary node fail.
.Pp
In the event of CARP interfaces going up or down, the FreeBSD operating system generates a
.Xr devd 8 event, making it possible to watch for state changes on the CARP interfaces.
A state change on the CARP interface is an indication that one of the nodes failed or came back online.
These state change events make it possible to run a script which will
automatically handle the HAST failover.
.Pp
To catch state changes on the CARP interfaces, add this configuration to
.Pa /etc/devd.conf
on each node:
.Bd -literal -offset indent
notify 30 {
	match "system" "IFNET";
	match "subsystem" "carp0";
	match "type" "LINK_UP";
	action "/usr/local/sbin/carp-hast-switch master";
};

notify 30 {
	match "system" "IFNET";
	match "subsystem" "carp0";
	match "type" "LINK_DOWN";
	action "/usr/local/sbin/carp-hast-switch slave";
};
.Ed
.Pp
If the systems are running FreeBSD 10 or higher, replace
.Pa carp0
with the name of the CARP-configured interface.
.Pp
Restart
.Xr devd 8 on both nodes to put the new configuration into effect:
.Bd -literal -offset indent
# service devd restart
.Ed
.Pp
When the specified interface state changes by going up or down , the system
generates a notification, allowing the
.Xr devd 8 subsystem to run the specified automatic failover script,
.Pa /usr/local/sbin/carp-hast-switch
.
For further clarification about this configuration, refer to
.Xr devd.conf 5 .
.Pp
Here is an example of an automated failover script:
.Bd -literal -offset indent
#!/bin/sh

# Original script by Freddie Cash <fjwcash@gmail.com>
# Modified by Michael W. Lucas <mwlucas@BlackHelicopters.org>
# and Viktor Petersson <vpetersson@wireload.net>

# The names of the HAST resources, as listed in /etc/hast.conf
resources="test"

# delay in mounting HAST resource after becoming master
# make your best guess
delay=3

# logging
log="local0.debug"
name="carp-hast"

# end of user configurable stuff

case "$1" in
	master)
		logger -p $log -t $name "Switching to primary provider for ${resources}."
		sleep ${delay}

		# Wait for any "hastd secondary" processes to stop
		for disk in ${resources}; do
			while $( pgrep -lf "hastd: ${disk} \(secondary\)" > /dev/null 2>&1 ); do
				sleep 1
			done

			# Switch role for each disk
			hastctl role primary ${disk}
			if [ $? -ne 0 ]; then
				logger -p $log -t $name "Unable to change role to primary for resource ${disk}."
				exit 1
			fi
		done

		# Wait for the /dev/hast/* devices to appear
		for disk in ${resources}; do
			for I in $( jot 60 ); do
				[ -c "/dev/hast/${disk}" ] && break
				sleep 0.5
			done

			if [ ! -c "/dev/hast/${disk}" ]; then
				logger -p $log -t $name "GEOM provider /dev/hast/${disk} did not appear."
				exit 1
			fi
		done

		logger -p $log -t $name "Role for HAST resources ${resources} switched to primary."


		logger -p $log -t $name "Mounting disks."
		for disk in ${resources}; do
			mkdir -p /hast/${disk}
			fsck -p -y -t ufs /dev/hast/${disk}
			mount /dev/hast/${disk} /hast/${disk}
		done

	;;

	slave)
		logger -p $log -t $name "Switching to secondary provider for ${resources}."

		# Switch roles for the HAST resources
		for disk in ${resources}; do
			if ! mount | grep -q "^/dev/hast/${disk} on "
			then
			else
				umount -f /hast/${disk}
			fi
			sleep $delay
			hastctl role secondary ${disk} 2>&1
			if [ $? -ne 0 ]; then
				logger -p $log -t $name "Unable to switch role to secondary for resource ${disk}."
				exit 1
			fi
			logger -p $log -t $name "Role switched to secondary for resource ${disk}."
		done
	;;
esac
.Ed
.Pp
In a nutshell, the script takes these actions when a node becomes master:
.Bl -bullet -offset -compact
.It
Promotes the HAST pool to primary on the other node.
.It
Checks the file system under the HAST pool.
.It
Mounts the pool.
.El
.Pp
When a node becomes secondary:
.Bl -bullet -offset -compact
.It
Unmounts the HAST pool.
.It
Degrades the HAST pool to secondary.
.El
.Pp
This is just an example script which serves as a proof of concept.
It does not handle all the possible scenarios and can be extended or altered in
any way, for example, to start or stop required services.
.Pp
For this example, a standard UFS file system was used.
To reduce the time needed for recovery, a journal-enabled UFS or ZFS file system can be used instead.
.Pp
More detailed information with additional examples can be found at http://wiki.FreeBSD.org/HAST.
.Ss TROUBLESHOOTING
.Pp
HAST should generally work without issues.
However, as with any other software product, there may be times when it does
not work as supposed.
The sources of the problems may be different, but the rule of thumb is to
ensure that the time is synchronized between the nodes of the cluster.
.Pp
When troubleshooting HAST, the debugging level of
.Xr hastd 8 should be increased by starting
.Cm hastd
with
.Ql -d
.
This argument may be specified multiple times to further increase the debugging
level.
Consider also using
.Ql -F
, which starts
.Cm hastd
in the foreground.
.Ss RECOVERING FROM THE SPLIT-BRAIN CONDITION
.Pp
.Ql Split-brain
occurs when the nodes of the cluster are unable to communicate with each other,
and both are configured as primary.
This is a dangerous condition because it allows both nodes to make incompatible
changes to the data.
This problem must be corrected manually by the system administrator.
.Pp
The administrator must either decide which node has more important changes, or
perform the merge manually.
Then, let HAST perform full synchronization of the node which has the broken data.
To do this, issue these commands on the node which needs to be resynchronized:
.Bd -literal -offset indent
# hastctl role init test
# hastctl create test
# hastctl role secondary test
.Ed
.Ss SYNOPSIS
.Pp
In FreeBSD, the GEOM framework permits access and control to classes, such as Master Boot Records
and BSD labels, through the use of providers, or the disk devices in
.Pa /dev
.
By supporting various software RAID configurations, GEOM transparently provides access to the operating system and operating system
utilities.
.Pp
This chapter covers the use of disks under the GEOM framework in FreeBSD.
This includes the major RAID control utilities which use the framework for configuration.
This chapter is not a definitive guide to RAID configurations and only GEOM-supported RAID classifications are discussed.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
What type of RAID support is available through GEOM.
.It
How to use the base utilities to configure, maintain, and manipulate the
various RAID levels.
.It
How to mirror, stripe, encrypt, and remotely connect disk devices through GEOM.
.It
How to troubleshoot disks attached to the GEOM framework.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Understand how FreeBSD treats disk devices ().
.It
Know how to configure and install a new kernel ().
.El
.Pp
Striping combines several disk drives into a single volume.
Striping can be performed through the use of hardware RAID controllers.
The GEOM disk subsystem provides software support for disk striping, also known as RAID0, without the need for a RAID disk controller.
.Pp
In RAID0, data is split into blocks that are written across all the drives in the
array.
As seen in the following illustration, instead of having to wait on the system
to write 256k to one disk, RAID0 can simultaneously write 64k to each of the four disks in the array, offering
superior I/O performance.
This performance can be enhanced further by using multiple disk controllers.
Disk Striping Illustration
.Pp
Each disk in a RAID0 stripe must be of the same size, since I/O requests are interleaved to read or write to multiple disks in parallel.
.Pp
RAID0 does not provide any redundancy.
This means that if one disk in the array fails, all of the data on the disks is
lost.
If the data is important, implement a backup strategy that regularly saves
backups to a remote system or device.
.Pp
The process for creating a software, GEOM-based RAID0 on a FreeBSD system using commodity disks is as follows.
Once the stripe is created, refer to
.Xr gstripe 8 for more information on how to control an existing stripe.
.Ss CREATING A STRIPE OF UNFORMATTED ATA DISKS
.Pp
Load the
.Pa geom_stripe.ko
module:
.Bd -literal -offset indent
# kldload geom_stripe
.Ed
.Pp
Ensure that a suitable mount point exists.
If this volume will become a root partition, then temporarily use another mount
point such as
.Pa /mnt
.
.Pp
Determine the device names for the disks which will be striped, and create the
new stripe device.
For example, to stripe two unused and unpartitioned ATA disks with device names of
.Pa /dev/ad2
and
.Pa /dev/ad3
:
.Bd -literal -offset indent
# gstripe label -v st0 /dev/ad2 /dev/ad3
Metadata value stored on /dev/ad2.
Metadata value stored on /dev/ad3.
Done.
.Ed
.Pp
Write a standard label, also known as a partition table, on the new volume and
install the default bootstrap code:
.Bd -literal -offset indent
# bsdlabel -wB /dev/stripe/st0
.Ed
.Pp
This process should create two other devices in
.Pa /dev/stripe
in addition to
.Pa st0
.
Those include
.Pa st0a
and
.Pa st0c
.
At this point, a UFS file system can be created on
.Pa st0a
using
.Cm newfs
:
.Bd -literal -offset indent
# newfs -U /dev/stripe/st0a
.Ed
.Pp
Many numbers will glide across the screen, and after a few seconds, the process
will be complete.
The volume has been created and is ready to be mounted.
.Pp
To manually mount the created disk stripe:
.Bd -literal -offset indent
# mount /dev/stripe/st0a /mnt
.Ed
.Pp
To mount this striped file system automatically during the boot process, place
the volume information in
.Pa /etc/fstab
.
In this example, a permanent mount point, named
.Pa stripe
, is created:
.Bd -literal -offset indent
# mkdir /stripe
# echo "/dev/stripe/st0a /stripe ufs rw 2 2" \
>> /etc/fstab
.Ed
.Pp
The
.Pa geom_stripe.ko
module must also be automatically loaded during system initialization, by
adding a line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
# echo 'geom_stripe_load="YES"' >> /boot/loader.conf
.Ed
.Ss RAID1 - MIRRORING
.Pp
RAID1, or mirroring, is the technique of writing the same data to more than one disk drive.
Mirrors are usually used to guard against data loss due to drive failure.
Each drive in a mirror contains an identical copy of the data.
When an individual drive fails, the mirror continues to work, providing data
from the drives that are still functioning.
The computer keeps running, and the administrator has time to replace the
failed drive without user interruption.
.Pp
Two common situations are illustrated in these examples.
The first creates a mirror out of two new drives and uses it as a replacement
for an existing single drive.
The second example creates a mirror on a single new drive, copies the old
drive's data to it, then inserts the old drive into the mirror.
While this procedure is slightly more complicated, it only requires one new
drive.
.Pp
Traditionally, the two drives in a mirror are identical in model and capacity,
but
.Xr gmirror 8 does not require that.
Mirrors created with dissimilar drives will have a capacity equal to that of
the smallest drive in the mirror.
Extra space on larger drives will be unused.
Drives inserted into the mirror later must have at least as much capacity as
the smallest drive already in the mirror.
.Pp
The mirroring procedures shown here are non-destructive, but as with any major
disk operation, make a full backup first.
.Pp
While
.Xr dump 8 is used in these procedures to copy file systems, it does not work on file
systems with soft updates journaling.
See
.Xr tunefs 8 for information on detecting and disabling soft updates journaling.
.Ss METADATA ISSUES
.Pp
Many disk systems store metadata at the end of each disk.
Old metadata should be erased before reusing the disk for a mirror.
Most problems are caused by two particular types of leftover metadata: GPT partition tables and old metadata from a previous mirror.
.Pp
GPT metadata can be erased with
.Xr gpart 8 .
This example erases both primary and backup GPT partition tables from disk
.Pa ada8
:
.Bd -literal -offset indent
# gpart destroy -F ada8
.Ed
.Pp
A disk can be removed from an active mirror and the metadata erased in one step
using
.Xr gmirror 8 .
Here, the example disk
.Pa ada8
is removed from the active mirror
.Pa gm4
:
.Bd -literal -offset indent
# gmirror remove gm4 ada8
.Ed
.Pp
If the mirror is not running, but old mirror metadata is still on the disk, use
.Cm gmirror clear
to remove it:
.Bd -literal -offset indent
# gmirror clear ada8
.Ed
.Pp
.Xr gmirror 8 stores one block of metadata at the end of the disk.
Because GPT partition schemes also store metadata at the end of the disk, mirroring entire GPT disks with
.Xr gmirror 8 is not recommended.
 MBR partitioning is used here because it only stores a partition table at the start
of the disk and does not conflict with the mirror metadata.
.Ss CREATING A MIRROR WITH TWO NEW DISKS
.Pp
In this example, FreeBSD has already been installed on a single disk,
.Pa ada0
.
Two new disks,
.Pa ada1
and
.Pa ada2
, have been connected to the system.
A new mirror will be created on these two disks and used to replace the old
single disk.
.Pp
The
.Pa geom_mirror.ko
kernel module must either be built into the kernel or loaded at boot- or
run-time.
Manually load the kernel module now:
.Bd -literal -offset indent
# gmirror load
.Ed
.Pp
Create the mirror with the two new drives:
.Bd -literal -offset indent
# gmirror label -v gm0 /dev/ada1 /dev/ada2
.Ed
.Pp
.Pa gm0
is a user-chosen device name assigned to the new mirror.
After the mirror has been started, this device name appears in
.Pa /dev/mirror/
.
.Pp
MBR and bsdlabel partition tables can now be created on the mirror with
.Xr gpart 8 .
This example uses a traditional file system layout, with partitions for
.Pa /
, swap,
.Pa /var
,
.Pa /tmp
, and
.Pa /usr
.
A single
.Pa /
and a swap partition will also work.
.Pp
Partitions on the mirror do not have to be the same size as those on the
existing disk, but they must be large enough to hold all the data already
present on
.Pa ada0
.
.Bd -literal -offset indent
# gpart create -s MBR mirror/gm0
# gpart add -t freebsd -a 4k mirror/gm0
# gpart show mirror/gm0
=>       63  156301423  mirror/gm0  MBR  (74G)
         63         63                    - free -  (31k)
        126  156301299                 1  freebsd  (74G)
  156301425         61                    - free -  (30k)
.Ed
.Bd -literal -offset indent
# gpart create -s BSD mirror/gm0s1
# gpart add -t freebsd-ufs -a 4k -s 2g mirror/gm0s1
# gpart add -t freebsd-swap -a 4k -s 4g mirror/gm0s1
# gpart add -t freebsd-ufs -a 4k -s 2g mirror/gm0s1
# gpart add -t freebsd-ufs -a 4k -s 1g mirror/gm0s1
# gpart add -t freebsd-ufs -a 4k mirror/gm0s1
# gpart show mirror/gm0s1
=>        0  156301299  mirror/gm0s1  BSD  (74G)
          0          2                      - free -  (1.0k)
          2    4194304                   1  freebsd-ufs  (2.0G)
    4194306    8388608                   2  freebsd-swap  (4.0G)
   12582914    4194304                   4  freebsd-ufs  (2.0G)
   16777218    2097152                   5  freebsd-ufs  (1.0G)
   18874370  137426928                   6  freebsd-ufs  (65G)
  156301298          1                      - free -  (512B)
.Ed
.Pp
Make the mirror bootable by installing bootcode in the MBR and bsdlabel and setting the active slice:
.Bd -literal -offset indent
# gpart bootcode -b /boot/mbr mirror/gm0
# gpart set -a active -i 1 mirror/gm0
# gpart bootcode -b /boot/boot mirror/gm0s1
.Ed
.Pp
Format the file systems on the new mirror, enabling soft-updates.
.Bd -literal -offset indent
# newfs -U /dev/mirror/gm0s1a
# newfs -U /dev/mirror/gm0s1d
# newfs -U /dev/mirror/gm0s1e
# newfs -U /dev/mirror/gm0s1f
.Ed
.Pp
File systems from the original
.Pa ada0
disk can now be copied onto the mirror with
.Xr dump 8 and
.Xr restore 8 .
.Bd -literal -offset indent
# mount /dev/mirror/gm0s1a /mnt
# dump -C16 -b64 -0aL -f - / | (cd /mnt && restore -rf -)
# mount /dev/mirror/gm0s1d /mnt/var
# mount /dev/mirror/gm0s1e /mnt/tmp
# mount /dev/mirror/gm0s1f /mnt/usr
# dump -C16 -b64 -0aL -f - /var | (cd /mnt/var && restore -rf -)
# dump -C16 -b64 -0aL -f - /tmp | (cd /mnt/tmp && restore -rf -)
# dump -C16 -b64 -0aL -f - /usr | (cd /mnt/usr && restore -rf -)
.Ed
.Pp
Edit
.Pa /mnt/etc/fstab
to point to the new mirror file systems:
.Bd -literal -offset indent
# Device		Mountpoint	FStype	Options	Dump	Pass#
/dev/mirror/gm0s1a	/		ufs	rw	1	1
/dev/mirror/gm0s1b	none		swap	sw	0	0
/dev/mirror/gm0s1d	/var		ufs	rw	2	2
/dev/mirror/gm0s1e	/tmp		ufs	rw	2	2
/dev/mirror/gm0s1f	/usr		ufs	rw	2	2
.Ed
.Pp
If the
.Pa geom_mirror.ko
kernel module has not been built into the kernel,
.Pa /mnt/boot/loader.conf
is edited to load the module at boot:
.Bd -literal -offset indent
geom_mirror_load="YES"
.Ed
.Pp
Reboot the system to test the new mirror and verify that all data has been
copied.
The BIOS will see the mirror as two individual drives rather than a mirror.
Because the drives are identical, it does not matter which is selected to boot.
.Pp
See if there are problems booting.
Powering down and disconnecting the original
.Pa ada0
disk will allow it to be kept as an offline backup.
.Pp
In use, the mirror will behave just like the original single drive.
.Ss CREATING A MIRROR WITH AN EXISTING DRIVE
.Pp
In this example, FreeBSD has already been installed on a single disk,
.Pa ada0
.
A new disk,
.Pa ada1
, has been connected to the system.
A one-disk mirror will be created on the new disk, the existing system copied
onto it, and then the old disk will be inserted into the mirror.
This slightly complex procedure is required because
.Cm gmirror
needs to put a 512-byte block of metadata at the end of each disk, and the
existing
.Pa ada0
has usually had all of its space already allocated.
.Pp
Load the
.Pa geom_mirror.ko
kernel module:
.Bd -literal -offset indent
# gmirror load
.Ed
.Pp
Check the media size of the original disk with
.Cm diskinfo
:
.Bd -literal -offset indent
# diskinfo -v ada0 | head -n3
/dev/ada0
	512             # sectorsize
	1000204821504   # mediasize in bytes (931G)
.Ed
.Pp
Create a mirror on the new disk.
To make certain that the mirror capacity is not any larger than the original
.Pa ada0
drive,
.Xr gnop 8 is used to create a fake drive of the exact same size.
This drive does not store any data, but is used only to limit the size of the
mirror.
When
.Xr gmirror 8 creates the mirror, it will restrict the capacity to the size of
.Pa gzero.nop
, even if the new
.Pa ada1
drive has more space.
Note that the 1000204821504 in the second line is equal to
.Pa ada0
's media size as shown by
.Cm diskinfo
above.
.Bd -literal -offset indent
# geom zero load
# gnop create -s 1000204821504 gzero
# gmirror label -v gm0 gzero.nop ada1
# gmirror forget gm0
.Ed
.Pp
Since
.Pa gzero.nop
does not store any data, the mirror does not see it as connected.
The mirror is told to
.Do
forget
.Dc
unconnected components, removing references to
.Pa gzero.nop
.
The result is a mirror device containing only a single disk,
.Pa ada1
.
.Pp
After creating
.Pa gm0
, view the partition table on
.Pa ada0
.
This output is from a 1 TB drive.
If there is some unallocated space at the end of the drive, the contents may be
copied directly from
.Pa ada0
to the new mirror.
.Pp
However, if the output shows that all of the space on the disk is allocated, as
in the following listing, there is no space available for the 512-byte mirror
metadata at the end of the disk.
.Bd -literal -offset indent
# gpart show ada0
=>        63  1953525105        ada0  MBR  (931G)
          63  1953525105           1  freebsd  [active]  (931G)
.Ed
.Pp
In this case, the partition table must be edited to reduce the capacity by one
sector on
.Pa mirror/gm0
.
The procedure will be explained later.
.Pp
In either case, partition tables on the primary disk should be first copied
using
.Cm gpart backup
and
.Cm gpart restore
.
.Bd -literal -offset indent
# gpart backup ada0 > table.ada0
# gpart backup ada0s1 > table.ada0s1
.Ed
.Pp
These commands create two files,
.Pa table.ada0
and
.Pa table.ada0s1
.
This example is from a 1 TB drive:
.Bd -literal -offset indent
# cat table.ada0
MBR 4
1 freebsd         63 1953525105   [active]
.Ed
.Bd -literal -offset indent
# cat table.ada0s1
BSD 8
1  freebsd-ufs          0    4194304
2 freebsd-swap    4194304   33554432
4  freebsd-ufs   37748736   50331648
5  freebsd-ufs   88080384   41943040
6  freebsd-ufs  130023424  838860800
7  freebsd-ufs  968884224  984640881
.Ed
.Pp
If no free space is shown at the end of the disk, the size of both the slice
and the last partition must be reduced by one sector.
Edit the two files, reducing the size of both the slice and last partition by
one.
These are the last numbers in each listing.
.Bd -literal -offset indent
# cat table.ada0
MBR 4
1 freebsd         63 1953525104   [active]
.Ed
.Bd -literal -offset indent
# cat table.ada0s1
BSD 8
1  freebsd-ufs          0    4194304
2 freebsd-swap    4194304   33554432
4  freebsd-ufs   37748736   50331648
5  freebsd-ufs   88080384   41943040
6  freebsd-ufs  130023424  838860800
7  freebsd-ufs  968884224  984640880
.Ed
.Pp
If at least one sector was unallocated at the end of the disk, these two files
can be used without modification.
.Pp
Now restore the partition table into
.Pa mirror/gm0
:
.Bd -literal -offset indent
# gpart restore mirror/gm0 < table.ada0
# gpart restore mirror/gm0s1 < table.ada0s1
.Ed
.Pp
Check the partition table with
.Cm gpart show
.
This example has
.Pa gm0s1a
for
.Pa /
,
.Pa gm0s1d
for
.Pa /var
,
.Pa gm0s1e
for
.Pa /usr
,
.Pa gm0s1f
for
.Pa /data1
, and
.Pa gm0s1g
for
.Pa /data2
.
.Bd -literal -offset indent
# gpart show mirror/gm0
=>        63  1953525104  mirror/gm0  MBR  (931G)
          63  1953525042           1  freebsd  [active]  (931G)
  1953525105          62              - free -  (31k)

# gpart show mirror/gm0s1
=>         0  1953525042  mirror/gm0s1  BSD  (931G)
           0     2097152             1  freebsd-ufs  (1.0G)
     2097152    16777216             2  freebsd-swap  (8.0G)
    18874368    41943040             4  freebsd-ufs  (20G)
    60817408    20971520             5  freebsd-ufs  (10G)
    81788928   629145600             6  freebsd-ufs  (300G)
   710934528  1242590514             7  freebsd-ufs  (592G)
  1953525042          63                - free -  (31k)
.Ed
.Pp
Both the slice and the last partition must have at least one free block at the
end of the disk.
.Pp
Create file systems on these new partitions.
The number of partitions will vary to match the original disk,
.Pa ada0
.
.Bd -literal -offset indent
# newfs -U /dev/mirror/gm0s1a
# newfs -U /dev/mirror/gm0s1d
# newfs -U /dev/mirror/gm0s1e
# newfs -U /dev/mirror/gm0s1f
# newfs -U /dev/mirror/gm0s1g
.Ed
.Pp
Make the mirror bootable by installing bootcode in the MBR and bsdlabel and setting the active slice:
.Bd -literal -offset indent
# gpart bootcode -b /boot/mbr mirror/gm0
# gpart set -a active -i 1 mirror/gm0
# gpart bootcode -b /boot/boot mirror/gm0s1
.Ed
.Pp
Adjust
.Pa /etc/fstab
to use the new partitions on the mirror.
Back up this file first by copying it to
.Pa /etc/fstab.orig
.
.Bd -literal -offset indent
# cp /etc/fstab /etc/fstab.orig
.Ed
.Pp
Edit
.Pa /etc/fstab
, replacing
.Pa /dev/ada0
with
.Pa mirror/gm0
.
.Bd -literal -offset indent
# Device		Mountpoint	FStype	Options	Dump	Pass#
/dev/mirror/gm0s1a	/		ufs	rw	1	1
/dev/mirror/gm0s1b	none		swap	sw	0	0
/dev/mirror/gm0s1d	/var		ufs	rw	2	2
/dev/mirror/gm0s1e	/usr		ufs	rw	2	2
/dev/mirror/gm0s1f	/data1		ufs	rw	2	2
/dev/mirror/gm0s1g	/data2		ufs	rw	2	2
.Ed
.Pp
If the
.Pa geom_mirror.ko
kernel module has not been built into the kernel, edit
.Pa /boot/loader.conf
to load it at boot:
.Bd -literal -offset indent
geom_mirror_load="YES"
.Ed
.Pp
File systems from the original disk can now be copied onto the mirror with
.Xr dump 8 and
.Xr restore 8 .
Each file system dumped with
.Cm dump -L
will create a snapshot first, which can take some time.
.Bd -literal -offset indent
# mount /dev/mirror/gm0s1a /mnt
# dump -C16 -b64 -0aL -f - / | (cd /mnt && restore -rf -)
# mount /dev/mirror/gm0s1d /mnt/var
# mount /dev/mirror/gm0s1e /mnt/usr
# mount /dev/mirror/gm0s1f /mnt/data1
# mount /dev/mirror/gm0s1g /mnt/data2
# dump -C16 -b64 -0aL -f - /usr | (cd /mnt/usr && restore -rf -)
# dump -C16 -b64 -0aL -f - /var | (cd /mnt/var && restore -rf -)
# dump -C16 -b64 -0aL -f - /data1 | (cd /mnt/data1 && restore -rf -)
# dump -C16 -b64 -0aL -f - /data2 | (cd /mnt/data2 && restore -rf -)
.Ed
.Pp
Restart the system, booting from
.Pa ada1
.
If everything is working, the system will boot from
.Pa mirror/gm0
, which now contains the same data as
.Pa ada0
had previously.
See if there are problems booting.
.Pp
At this point, the mirror still consists of only the single
.Pa ada1
disk.
.Pp
After booting from
.Pa mirror/gm0
successfully, the final step is inserting
.Pa ada0
into the mirror.
.Pp
When
.Pa ada0
is inserted into the mirror, its former contents will be overwritten by data
from the mirror.
Make certain that
.Pa mirror/gm0
has the same contents as
.Pa ada0
before adding
.Pa ada0
to the mirror.
If the contents previously copied by
.Xr dump 8 and
.Xr restore 8 are not identical to what was on
.Pa ada0
, revert
.Pa /etc/fstab
to mount the file systems on
.Pa ada0
, reboot, and start the whole procedure again.
.Bd -literal -offset indent
# gmirror insert gm0 ada0
GEOM_MIRROR: Device gm0: rebuilding provider ada0
.Ed
.Pp
Synchronization between the two disks will start immediately.
Use
.Cm gmirror status
to view the progress.
.Bd -literal -offset indent
# gmirror status
      Name    Status  Components
mirror/gm0  DEGRADED  ada1 (ACTIVE)
                      ada0 (SYNCHRONIZING, 64%)
.Ed
.Pp
After a while, synchronization will finish.
.Bd -literal -offset indent
GEOM_MIRROR: Device gm0: rebuilding provider ada0 finished.
# gmirror status
      Name    Status  Components
mirror/gm0  COMPLETE  ada1 (ACTIVE)
                      ada0 (ACTIVE)
.Ed
.Pp
.Pa mirror/gm0
now consists of the two disks
.Pa ada0
and
.Pa ada1
, and the contents are automatically synchronized with each other.
In use,
.Pa mirror/gm0
will behave just like the original single drive.
.Ss TROUBLESHOOTING
.Pp
If the system no longer boots, BIOS settings may have to be changed to boot from one of the new mirrored drives.
Either mirror drive can be used for booting, as they contain identical data.
.Pp
If the boot stops with this message, something is wrong with the mirror device:
.Bd -literal -offset indent
Mounting from ufs:/dev/mirror/gm0s1a failed with error 19.

Loader variables:
  vfs.root.mountfrom=ufs:/dev/mirror/gm0s1a
  vfs.root.mountfrom.options=rw

Manual root filesystem specification:
  <fstype>:<device> [options]
      Mount <device> using filesystem <fstype>
      and with the specified (optional) option list.

    eg. ufs:/dev/da0s1a
        zfs:tank
        cd9660:/dev/acd0 ro
          (which is equivalent to: mount -t cd9660 -o ro /dev/acd0 /)

  ?               List valid disk boot devices
  .               Yield 1 second (for background tasks)
  <empty line>    Abort manual input

mountroot>
.Ed
.Pp
Forgetting to load the
.Pa geom_mirror.ko
module in
.Pa /boot/loader.conf
can cause this problem.
To fix it, boot from a FreeBSD installation media and choose
.Ql Shell
at the first prompt.
Then load the mirror module and mount the mirror device:
.Bd -literal -offset indent
# gmirror load
# mount /dev/mirror/gm0s1a /mnt
.Ed
.Pp
Edit
.Pa /mnt/boot/loader.conf
, adding a line to load the mirror module:
.Bd -literal -offset indent
geom_mirror_load="YES"
.Ed
.Pp
Save the file and reboot.
.Pp
Other problems that cause
.Er error 19
require more effort to fix.
Although the system should boot from
.Pa ada0
, another prompt to select a shell will appear if
.Pa /etc/fstab
is incorrect.
Enter
.Ql ufs:/dev/ada0s1a
at the boot loader prompt and press Enter.
Undo the edits in
.Pa /etc/fstab
then mount the file systems from the original disk (
.Pa ada0
) instead of the mirror.
Reboot the system and try the procedure again.
.Bd -literal -offset indent
Enter full pathname of shell or RETURN for /bin/sh:
# cp /etc/fstab.orig /etc/fstab
# reboot
.Ed
.Ss RECOVERING FROM DISK FAILURE
.Pp
The benefit of disk mirroring is that an individual disk can fail without
causing the mirror to lose any data.
In the above example, if
.Pa ada0
fails, the mirror will continue to work, providing data from the remaining
working drive,
.Pa ada1
.
.Pp
To replace the failed drive, shut down the system and physically replace the
failed drive with a new drive of equal or greater capacity.
Manufacturers use somewhat arbitrary values when rating drives in gigabytes,
and the only way to really be sure is to compare the total count of sectors
shown by
.Cm diskinfo -v
.
A drive with larger capacity than the mirror will work, although the extra
space on the new drive will not be used.
.Pp
After the computer is powered back up, the mirror will be running in a
.Do
degraded
.Dc
mode with only one drive.
The mirror is told to forget drives that are not currently connected:
.Bd -literal -offset indent
# gmirror forget gm0
.Ed
.Pp
Any old metadata should be cleared from the replacement disk using the
instructions in .
Then the replacement disk,
.Pa ada4
for this example, is inserted into the mirror:
.Bd -literal -offset indent
# gmirror insert gm0 /dev/ada4
.Ed
.Pp
Resynchronization begins when the new drive is inserted into the mirror.
This process of copying mirror data to a new drive can take a while.
Performance of the mirror will be greatly reduced during the copy, so inserting
new drives is best done when there is low demand on the computer.
.Pp
Progress can be monitored with
.Cm gmirror status
, which shows drives that are being synchronized and the percentage of
completion.
During resynchronization, the status will be
.Ql DEGRADED
, changing to
.Ql COMPLETE
when the process is finished.
.Pp
RAID3 is a method used to combine several disk drives into a single volume with a
dedicated parity disk.
In a RAID3 system, data is split up into a number of bytes that are written across all
the drives in the array except for one disk which acts as a dedicated parity
disk.
This means that disk reads from a RAID3 implementation access all disks in the array.
Performance can be enhanced by using multiple disk controllers.
The RAID3 array provides a fault tolerance of 1 drive, while providing a capacity of 1
- 1/n times the total capacity of all drives in the array, where n is the
number of hard drives in the array.
Such a configuration is mostly suitable for storing data of larger sizes such
as multimedia files.
.Pp
At least 3 physical hard drives are required to build a RAID3 array.
Each disk must be of the same size, since I/O requests are interleaved to read or write to multiple disks in parallel.
Also, due to the nature of RAID3, the number of drives must be equal to 3, 5, 9, 17, and so on, or 2^n + 1.
.Pp
This section demonstrates how to create a software RAID3 on a FreeBSD system.
.Pp
While it is theoretically possible to boot from a RAID3 array on FreeBSD, that configuration is uncommon and is not advised.
.Ss CREATING A DEDICATED RAID3 ARRAY
.Pp
In FreeBSD, support for RAID3 is implemented by the
.Xr graid3 8 GEOM class.
Creating a dedicated RAID3 array on FreeBSD requires the following steps.
.Pp
First, load the
.Pa geom_raid3.ko
kernel module by issuing one of the following commands:
.Bd -literal -offset indent
# graid3 load
.Ed
.Pp
or:
.Bd -literal -offset indent
# kldload geom_raid3
.Ed
.Pp
Ensure that a suitable mount point exists.
This command creates a new directory to use as the mount point:
.Bd -literal -offset indent
# mkdir /multimedia
.Ed
.Pp
Determine the device names for the disks which will be added to the array, and
create the new RAID3 device.
The final device listed will act as the dedicated parity disk.
This example uses three unpartitioned ATA drives:
.Pa ada1
and
.Pa ada2
for data, and
.Pa ada3
for parity.
.Bd -literal -offset indent
# graid3 label -v gr0 /dev/ada1 /dev/ada2 /dev/ada3
Metadata value stored on /dev/ada1.
Metadata value stored on /dev/ada2.
Metadata value stored on /dev/ada3.
Done.
.Ed
.Pp
Partition the newly created
.Pa gr0
device and put a UFS file system on it:
.Bd -literal -offset indent
# gpart create -s GPT /dev/raid3/gr0
# gpart add -t freebsd-ufs /dev/raid3/gr0
# newfs -j /dev/raid3/gr0p1
.Ed
.Pp
Many numbers will glide across the screen, and after a bit of time, the process
will be complete.
The volume has been created and is ready to be mounted:
.Bd -literal -offset indent
# mount /dev/raid3/gr0p1 /multimedia/
.Ed
.Pp
The RAID3 array is now ready to use.
.Pp
Additional configuration is needed to retain this setup across system reboots.
.Pp
The
.Pa geom_raid3.ko
module must be loaded before the array can be mounted.
To automatically load the kernel module during system initialization, add the
following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
geom_raid3_load="YES"
.Ed
.Pp
The following volume information must be added to
.Pa /etc/fstab
in order to automatically mount the array's file system during the system boot
process:
.Bd -literal -offset indent
/dev/raid3/gr0p1	/multimedia	ufs	rw	2	2
.Ed
.Pp
Some motherboards and expansion cards add some simple hardware, usually just a ROM, that allows the computer to boot from a RAID array.
After booting, access to the RAID array is handled by software running on the computer's main processor.
This
.Do
hardware-assisted software RAID
.Dc
gives RAID arrays that are not dependent on any particular operating system, and which are
functional even before an operating system is loaded.
.Pp
Several levels of RAID are supported, depending on the hardware in use.
See
.Xr graid 8 for a complete list.
.Pp
.Xr graid 8 requires the
.Pa geom_raid.ko
kernel module, which is included in the
.Pa GENERIC
kernel starting with FreeBSD 9.1.
If needed, it can be loaded manually with
.Cm graid load
.
.Ss CREATING AN ARRAY
.Pp
Software RAID devices often have a menu that can be entered by pressing special keys when the
computer is booting.
The menu can be used to create and delete RAID arrays.
.Xr graid 8 can also create arrays directly from the command line.
.Pp
.Cm graid label
is used to create a new array.
The motherboard used for this example has an Intel software RAID chipset, so the Intel metadata format is specified.
The new array is given a label of
.Pa gm0
, it is a mirror (RAID1), and uses drives
.Pa ada0
and
.Pa ada1
.
.Pp
Some space on the drives will be overwritten when they are made into a new
array.
Back up existing data first!
.Bd -literal -offset indent
# graid label Intel gm0 RAID1 ada0 ada1
GEOM_RAID: Intel-a29ea104: Array Intel-a29ea104 created.
GEOM_RAID: Intel-a29ea104: Disk ada0 state changed from NONE to ACTIVE.
GEOM_RAID: Intel-a29ea104: Subdisk gm0:0-ada0 state changed from NONE to ACTIVE.
GEOM_RAID: Intel-a29ea104: Disk ada1 state changed from NONE to ACTIVE.
GEOM_RAID: Intel-a29ea104: Subdisk gm0:1-ada1 state changed from NONE to ACTIVE.
GEOM_RAID: Intel-a29ea104: Array started.
GEOM_RAID: Intel-a29ea104: Volume gm0 state changed from STARTING to OPTIMAL.
Intel-a29ea104 created
GEOM_RAID: Intel-a29ea104: Provider raid/r0 for volume gm0 created.
.Ed
.Pp
A status check shows the new mirror is ready for use:
.Bd -literal -offset indent
# graid status
   Name   Status  Components
raid/r0  OPTIMAL  ada0 (ACTIVE (ACTIVE))
                  ada1 (ACTIVE (ACTIVE))
.Ed
.Pp
The array device appears in
.Pa /dev/raid/
.
The first array is called
.Pa r0
.
Additional arrays, if present, will be
.Pa r1
,
.Pa r2
, and so on.
.Pp
The BIOS menu on some of these devices can create arrays with special characters in
their names.
To avoid problems with those special characters, arrays are given simple
numbered names like
.Pa r0
.
To show the actual labels, like
.Pa gm0
in the example above, use
.Xr sysctl 8 :
.Bd -literal -offset indent
# sysctl kern.geom.raid.name_format=1
.Ed
.Ss MULTIPLE VOLUMES
.Pp
Some software RAID devices support more than one volume on an array.
Volumes work like partitions, allowing space on the physical drives to be split
and used in different ways.
For example, Intel software RAID devices support two volumes.
This example creates a 40 G mirror for safely storing the operating system,
followed by a 20 G RAID0 (stripe) volume for fast temporary storage:
.Bd -literal -offset indent
# graid label -S 40G Intel gm0 RAID1 ada0 ada1
# graid add -S 20G gm0 RAID0
.Ed
.Pp
Volumes appear as additional
.Pa rX
entries in
.Pa /dev/raid/
.
An array with two volumes will show
.Pa r0
and
.Pa r1
.
.Pp
See
.Xr graid 8 for the number of volumes supported by different software RAID devices.
.Ss CONVERTING A SINGLE DRIVE TO A MIRROR
.Pp
Under certain specific conditions, it is possible to convert an existing single
drive to a
.Xr graid 8 array without reformatting.
To avoid data loss during the conversion, the existing drive must meet these
minimum requirements:
.Bl -bullet -offset -compact
.It
The drive must be partitioned with the MBR partitioning scheme.
 GPT or other partitioning schemes with metadata at the end of the drive will be
overwritten and corrupted by the
.Xr graid 8 metadata.
.It
There must be enough unpartitioned and unused space at the end of the drive to
hold the
.Xr graid 8 metadata.
This metadata varies in size, but the largest occupies 64 M, so at least that
much free space is recommended.
.El
.Pp
If the drive meets these requirements, start by making a full backup.
Then create a single-drive mirror with that drive:
.Bd -literal -offset indent
# graid label Intel gm0 RAID1 ada0 NONE
.Ed
.Pp
.Xr graid 8 metadata was written to the end of the drive in the unused space.
A second drive can now be inserted into the mirror:
.Bd -literal -offset indent
# graid insert raid/r0 ada1
.Ed
.Pp
Data from the original drive will immediately begin to be copied to the second
drive.
The mirror will operate in degraded status until the copy is complete.
.Ss INSERTING NEW DRIVES INTO THE ARRAY
.Pp
Drives can be inserted into an array as replacements for drives that have
failed or are missing.
If there are no failed or missing drives, the new drive becomes a spare.
For example, inserting a new drive into a working two-drive mirror results in a
two-drive mirror with one spare drive, not a three-drive mirror.
.Pp
In the example mirror array, data immediately begins to be copied to the
newly-inserted drive.
Any existing information on the new drive will be overwritten.
.Bd -literal -offset indent
# graid insert raid/r0 ada1
GEOM_RAID: Intel-a29ea104: Disk ada1 state changed from NONE to ACTIVE.
GEOM_RAID: Intel-a29ea104: Subdisk gm0:1-ada1 state changed from NONE to NEW.
GEOM_RAID: Intel-a29ea104: Subdisk gm0:1-ada1 state changed from NEW to REBUILD.
GEOM_RAID: Intel-a29ea104: Subdisk gm0:1-ada1 rebuild start at 0.
.Ed
.Ss REMOVING DRIVES FROM THE ARRAY
.Pp
Individual drives can be permanently removed from a from an array and their
metadata erased:
.Bd -literal -offset indent
# graid remove raid/r0 ada1
GEOM_RAID: Intel-a29ea104: Disk ada1 state changed from ACTIVE to OFFLINE.
GEOM_RAID: Intel-a29ea104: Subdisk gm0:1-[unknown] state changed from ACTIVE to NONE.
GEOM_RAID: Intel-a29ea104: Volume gm0 state changed from OPTIMAL to DEGRADED.
.Ed
.Ss STOPPING THE ARRAY
.Pp
An array can be stopped without removing metadata from the drives.
The array will be restarted when the system is booted.
.Bd -literal -offset indent
# graid stop raid/r0
.Ed
.Ss CHECKING ARRAY STATUS
.Pp
Array status can be checked at any time.
After a drive was added to the mirror in the example above, data is being
copied from the original drive to the new drive:
.Bd -literal -offset indent
# graid status
   Name    Status  Components
raid/r0  DEGRADED  ada0 (ACTIVE (ACTIVE))
                   ada1 (ACTIVE (REBUILD 28%))
.Ed
.Pp
Some types of arrays, like
.Ql RAID0
or
.Ql CONCAT
, may not be shown in the status report if disks have failed.
To see these partially-failed arrays, add
.Ar -ga
:
.Bd -literal -offset indent
# graid status -ga
          Name  Status  Components
Intel-e2d07d9a  BROKEN  ada6 (ACTIVE (ACTIVE))
.Ed
.Ss DELETING ARRAYS
.Pp
Arrays are destroyed by deleting all of the volumes from them.
When the last volume present is deleted, the array is stopped and metadata is
removed from the drives:
.Bd -literal -offset indent
# graid delete raid/r0
.Ed
.Ss DELETING UNEXPECTED ARRAYS
.Pp
Drives may unexpectedly contain
.Xr graid 8 metadata, either from previous use or manufacturer testing.
.Xr graid 8 will detect these drives and create an array, interfering with access to the
individual drive.
To remove the unwanted metadata:
.Pp
Boot the system.
At the boot menu, select
.Ql 2
for the loader prompt.
Enter:
.Bd -literal -offset indent
OK set kern.geom.raid.enable=0
OK boot
.Ed
.Pp
The system will boot with
.Xr graid 8 disabled.
.Pp
Back up all data on the affected drive.
.Pp
As a workaround,
.Xr graid 8 array detection can be disabled by adding
.Bd -literal -offset indent
kern.geom.raid.enable=0
.Ed
.Pp
to
.Pa /boot/loader.conf
.
.Pp
To permanently remove the
.Xr graid 8 metadata from the affected drive, boot a FreeBSD installation CD-ROM or memory stick, and select
.Ql Shell
.
Use
.Cm status
to find the name of the array, typically
.Ql raid/r0
:
.Bd -literal -offset indent
# graid status
   Name   Status  Components
raid/r0  OPTIMAL  ada0 (ACTIVE (ACTIVE))
                  ada1 (ACTIVE (ACTIVE))
.Ed
.Pp
Delete the volume by name:
.Bd -literal -offset indent
# graid delete raid/r0
.Ed
.Pp
If there is more than one volume shown, repeat the process for each volume.
After the last array has been deleted, the volume will be destroyed.
.Pp
Reboot and verify data, restoring from backup if necessary.
After the metadata has been removed, the
.Ql kern.geom.raid.enable=0
entry in
.Pa /boot/loader.conf
can also be removed.
.Ss GEOM GATE NETWORK
.Pp
GEOM provides a simple mechanism for providing remote access to devices such as
disks, CDs, and file systems through the use of the GEOM Gate network daemon, ggated.
The system with the device runs the server daemon which handles requests made
by clients using ggatec.
The devices should not contain any sensitive data as the connection between the
client and the server is not encrypted.
.Pp
Similar to NFS, which is discussed in , ggated is configured using an exports file.
This file specifies which systems are permitted to access the exported
resources and what level of access they are offered.
For example, to give the client
.Ql 192.168.1.5
read and write access to the fourth slice on the first SCSI disk, create
.Pa /etc/gg.exports
with this line:
.Bd -literal -offset indent
192.168.1.5 RW /dev/da0s4d
.Ed
.Pp
Before exporting the device, ensure it is not currently mounted.
Then, start ggated:
.Bd -literal -offset indent
# ggated
.Ed
.Pp
Several options are available for specifying an alternate listening port or
changing the default location of the exports file.
Refer to
.Xr ggated 8 for details.
.Pp
To access the exported device on the client machine, first use
.Cm ggatec
to specify the IP address of the server and the device name of the exported device.
If successful, this command will display a
.Ql ggate
device name to mount.
Mount that specified device name on a free mount point.
This example connects to the
.Pa /dev/da0s4d
partition on
.Ql 192.168.1.1
, then mounts
.Pa /dev/ggate0
on
.Pa /mnt
:
.Bd -literal -offset indent
# ggatec create -o rw 192.168.1.1 /dev/da0s4d
ggate0
# mount /dev/ggate0 /mnt
.Ed
.Pp
The device on the server may now be accessed through
.Pa /mnt
on the client.
For more details about
.Cm ggatec
and a few usage examples, refer to
.Xr ggatec 8 .
.Pp
The mount will fail if the device is currently mounted on either the server or
any other client on the network.
If simultaneous access is needed to network resources, use NFS instead.
.Pp
When the device is no longer needed, unmount it with
.Cm umount
so that the resource is available to other clients.
.Ss LABELING DISK DEVICES
.Pp
During system initialization, the FreeBSD kernel creates device nodes as
devices are found.
This method of probing for devices raises some issues.
For instance, what if a new disk device is added via USB?
It is likely that a flash device may be handed the device name of
.Pa da0
and the original
.Pa da0
shifted to
.Pa da1
.
This will cause issues mounting file systems if they are listed in
.Pa /etc/fstab
which may also prevent the system from booting.
.Pp
One solution is to chain SCSI devices in order so a new device added to the SCSI card will be issued unused device numbers.
But what about USB devices which may replace the primary SCSI disk?
This happens because USB devices are usually probed before the SCSI card.
One solution is to only insert these devices after the system has been booted.
Another method is to use only a single ATA drive and never list the SCSI devices in
.Pa /etc/fstab
.
.Pp
A better solution is to use
.Cm glabel
to label the disk devices and use the labels in
.Pa /etc/fstab
.
Because
.Cm glabel
stores the label in the last sector of a given provider, the label will remain
persistent across reboots.
By using this label as a device, the file system may always be mounted
regardless of what device node it is accessed through.
.Pp
.Cm glabel
can create both transient and permanent labels.
Only permanent labels are consistent across reboots.
Refer to
.Xr glabel 8 for more information on the differences between labels.
.Ss LABEL TYPES AND EXAMPLES
.Pp
Permanent labels can be a generic or a file system label.
Permanent file system labels can be created with
.Xr tunefs 8 or
.Xr newfs 8 .
These types of labels are created in a sub-directory of
.Pa /dev
, and will be named according to the file system type.
For example, UFS2 file system labels will be created in
.Pa /dev/ufs
.
Generic permanent labels can be created with
.Cm glabel label
.
These are not file system specific and will be created in
.Pa /dev/label
.
.Pp
Temporary labels are destroyed at the next reboot.
These labels are created in
.Pa /dev/label
and are suited to experimentation.
A temporary label can be created using
.Cm glabel create
.
.Pp
To create a permanent label for a UFS2 file system without destroying any data, issue the following command:
.Bd -literal -offset indent
# tunefs -L home  /dev/da3
.Ed
.Pp
A label should now exist in
.Pa /dev/ufs
which may be added to
.Pa /etc/fstab
:
.Bd -literal -offset indent
/dev/ufs/home		/home            ufs     rw              2      2
.Ed
.Pp
The file system must not be mounted while attempting to run
.Cm tunefs
.
.Pp
Now the file system may be mounted:
.Bd -literal -offset indent
# mount /home
.Ed
.Pp
From this point on, so long as the
.Pa geom_label.ko
kernel module is loaded at boot with
.Pa /boot/loader.conf
or the
.Ql GEOM_LABEL
kernel option is present, the device node may change without any ill effect on
the system.
.Pp
File systems may also be created with a default label by using the
.Ar -L
flag with
.Cm newfs
.
Refer to
.Xr newfs 8 for more information.
.Pp
The following command can be used to destroy the label:
.Bd -literal -offset indent
# glabel destroy home
.Ed
.Pp
The following example shows how to label the partitions of a boot disk.
.Pp
By permanently labeling the partitions on the boot disk, the system should be
able to continue to boot normally, even if the disk is moved to another
controller or transferred to a different system.
For this example, it is assumed that a single ATA disk is used, which is currently recognized by the system as
.Pa ad0
.
It is also assumed that the standard FreeBSD partition scheme is used, with
.Pa /
,
.Pa /var
,
.Pa /usr
and
.Pa /tmp
, as well as a swap partition.
.Pp
Reboot the system, and at the
.Xr loader 8 prompt, press 4 to boot into single user mode.
Then enter the following commands:
.Bd -literal -offset indent
# glabel label rootfs /dev/ad0s1a
GEOM_LABEL: Label for provider /dev/ad0s1a is label/rootfs
# glabel label var /dev/ad0s1d
GEOM_LABEL: Label for provider /dev/ad0s1d is label/var
# glabel label usr /dev/ad0s1f
GEOM_LABEL: Label for provider /dev/ad0s1f is label/usr
# glabel label tmp /dev/ad0s1e
GEOM_LABEL: Label for provider /dev/ad0s1e is label/tmp
# glabel label swap /dev/ad0s1b
GEOM_LABEL: Label for provider /dev/ad0s1b is label/swap
# exit
.Ed
.Pp
The system will continue with multi-user boot.
After the boot completes, edit
.Pa /etc/fstab
and replace the conventional device names, with their respective labels.
The final
.Pa /etc/fstab
will look like this:
.Bd -literal -offset indent
# Device                Mountpoint      FStype  Options         Dump    Pass#
/dev/label/swap         none            swap    sw              0       0
/dev/label/rootfs       /               ufs     rw              1       1
/dev/label/tmp          /tmp            ufs     rw              2       2
/dev/label/usr          /usr            ufs     rw              2       2
/dev/label/var          /var            ufs     rw              2       2
.Ed
.Pp
The system can now be rebooted.
If everything went well, it will come up normally and
.Cm mount
will show:
.Bd -literal -offset indent
# mount
/dev/label/rootfs on / (ufs, local)
devfs on /dev (devfs, local)
/dev/label/tmp on /tmp (ufs, local, soft-updates)
/dev/label/usr on /usr (ufs, local, soft-updates)
/dev/label/var on /var (ufs, local, soft-updates)
.Ed
.Pp
The
.Xr glabel 8 class supports a label type for UFS file systems, based on the unique file system id,
.Ql ufsid
.
These labels may be found in
.Pa /dev/ufsid
and are created automatically during system startup.
It is possible to use
.Ql ufsid
labels to mount partitions using
.Pa /etc/fstab
.
Use
.Cm glabel status
to receive a list of file systems and their corresponding
.Ql ufsid
labels:
.Bd -literal -offset indent
% glabel status
                  Name  Status  Components
ufsid/486b6fc38d330916     N/A  ad4s1d
ufsid/486b6fc16926168e     N/A  ad4s1f
.Ed
.Pp
In the above example,
.Pa ad4s1d
represents
.Pa /var
, while
.Pa ad4s1f
represents
.Pa /usr
.
Using the
.Ql ufsid
values shown, these partitions may now be mounted with the following entries in
.Pa /etc/fstab
:
.Bd -literal -offset indent
/dev/ufsid/486b6fc38d330916        /var        ufs        rw        2      2
/dev/ufsid/486b6fc16926168e        /usr        ufs        rw        2      2
.Ed
.Pp
Any partitions with
.Ql ufsid
labels can be mounted in this way, eliminating the need to manually create
permanent labels, while still enjoying the benefits of device name independent
mounting.
.Ss UFS JOURNALING THROUGH GEOM
.Pp
Support for journals on UFS file systems is available on FreeBSD.
The implementation is provided through the GEOM subsystem and is configured using
.Cm gjournal
.
Unlike other file system journaling implementations, the
.Cm gjournal
method is block based and not implemented as part of the file system.
It is a GEOM extension.
.Pp
Journaling stores a log of file system transactions, such as changes that make
up a complete disk write operation, before meta-data and file writes are
committed to the disk.
This transaction log can later be replayed to redo file system transactions,
preventing file system inconsistencies.
.Pp
This method provides another mechanism to protect against data loss and
inconsistencies of the file system.
Unlike Soft Updates, which tracks and enforces meta-data updates, and
snapshots, which create an image of the file system, a log is stored in disk
space specifically for this task.
For better performance, the journal may be stored on another disk.
In this configuration, the journal provider or storage device should be listed
after the device to enable journaling on.
.Pp
The
.Pa GENERIC
kernel provides support for
.Cm gjournal
.
To automatically load the
.Pa geom_journal.ko
kernel module at boot time, add the following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
geom_journal_load="YES"
.Ed
.Pp
If a custom kernel is used, ensure the following line is in the kernel
configuration file:
.Bd -literal -offset indent
options	GEOM_JOURNAL
.Ed
.Pp
Once the module is loaded, a journal can be created on a new file system using
the following steps.
In this example,
.Pa da4
is a new SCSI disk:
.Bd -literal -offset indent
# gjournal load
# gjournal label /dev/da4
.Ed
.Pp
This will load the module and create a
.Pa /dev/da4.journal
device node on
.Pa /dev/da4
.
.Pp
A UFS file system may now be created on the journaled device, then mounted on an
existing mount point:
.Bd -literal -offset indent
# newfs -O 2 -J /dev/da4.journal
# mount /dev/da4.journal /mnt
.Ed
.Pp
In the case of several slices, a journal will be created for each individual
slice.
For instance, if
.Pa ad4s1
and
.Pa ad4s2
are both slices, then
.Cm gjournal
will create
.Pa ad4s1.journal
and
.Pa ad4s2.journal
.
.Pp
Journaling may also be enabled on current file systems by using
.Cm tunefs
.
However, always make a backup before attempting to alter an existing file system.
In most cases,
.Cm gjournal
will fail if it is unable to create the journal, but this does not protect
against data loss incurred as a result of misusing
.Cm tunefs
.
Refer to
.Xr gjournal 8 and
.Xr tunefs 8 for more information about these commands.
.Pp
It is possible to journal the boot disk of a FreeBSD system.
Refer to the article Implementing UFS Journaling on a Desktop PC for detailed instructions.
.Pp
The Z File System, or ZFS, is an advanced file system designed to overcome many of the major problems
found in previous designs.
.Pp
Originally developed at Sun, ongoing open source ZFS development has moved to the OpenZFS Project.
.Pp
ZFS has three major design goals:
.Bl -bullet -offset -compact
.It
Data integrity: All data includes a checksum of the data.
When data is written, the checksum is calculated and written along with it.
When that data is later read back, the checksum is calculated again.
If the checksums do not match, a data error has been detected.
 ZFS will attempt to automatically correct errors when data redundancy is available.
.It
Pooled storage: physical storage devices are added to a pool, and storage space
is allocated from that shared pool.
Space is available to all file systems, and can be increased by adding new
storage devices to the pool.
.It
Performance: multiple caching mechanisms provide increased performance.
 ARC is an advanced memory-based read cache.
A second level of disk-based read cache can be added with L2ARC, and disk-based synchronous write cache is available with ZIL.
.El
.Pp
A complete list of features and terminology is shown in .
.Ss WHAT MAKES ZFS DIFFERENT
.Pp
ZFS is significantly different from any previous file system because it is more
than just a file system.
Combining the traditionally separate roles of volume manager and file system
provides ZFS with unique advantages.
The file system is now aware of the underlying structure of the disks.
Traditional file systems could only be created on a single disk at a time.
If there were two disks then two separate file systems would have to be
created.
In a traditional hardware RAID configuration, this problem was avoided by presenting the operating system with
a single logical disk made up of the space provided by a number of physical
disks, on top of which the operating system placed a file system.
Even in the case of software RAID solutions like those provided by GEOM, the UFS file system living on top of the RAID transform believed that it was dealing with a single device.
 ZFS's combination of the volume manager and the file system solves this and allows
the creation of many file systems all sharing a pool of available storage.
One of the biggest advantages to ZFS's awareness of the physical layout of the disks is that existing file systems
can be grown automatically when additional disks are added to the pool.
This new space is then made available to all of the file systems.
 ZFS also has a number of different properties that can be applied to each file
system, giving many advantages to creating a number of different file systems
and datasets rather than a single monolithic file system.
.Ss QUICK START GUIDE
.Pp
There is a startup mechanism that allows FreeBSD to mount ZFS pools during system initialization.
To enable it, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
zfs_enable="YES"
.Ed
.Pp
Then start the service:
.Bd -literal -offset indent
# service zfs start
.Ed
.Pp
The examples in this section assume three SCSI disks with the device names
.Pa da0
,
.Pa da1
, and
.Pa da2
.
Users of SATA hardware should instead use
.Pa ada
device names.
.Ss SINGLE DISK POOL
.Pp
To create a simple, non-redundant pool using a single disk device:
.Bd -literal -offset indent
# zpool create example  /dev/da0
.Ed
.Pp
To view the new pool, review the output of
.Cm df
:
.Bd -literal -offset indent
# df
Filesystem  1K-blocks    Used    Avail Capacity  Mounted on
/dev/ad0s1a   2026030  235230  1628718    13%    /
devfs               1       1        0   100%    /dev
/dev/ad0s1d  54098308 1032846 48737598     2%    /usr
example      17547136       0 17547136     0%    /example
.Ed
.Pp
This output shows that the
.Ql example
pool has been created and mounted.
It is now accessible as a file system.
Files can be created on it and users can browse it:
.Bd -literal -offset indent
# cd /example
# ls
# touch testfile
# ls -al
total 4
drwxr-xr-x   2 root  wheel    3 Aug 29 23:15 .
drwxr-xr-x  21 root  wheel  512 Aug 29 23:12 ..
-rw-r--r--   1 root  wheel    0 Aug 29 23:15 testfile
.Ed
.Pp
However, this pool is not taking advantage of any ZFS features.
To create a dataset on this pool with compression enabled:
.Bd -literal -offset indent
# zfs create example/compressed
# zfs set compression=gzip example/compressed
.Ed
.Pp
The
.Ql example/compressed
dataset is now a ZFS compressed file system.
Try copying some large files to
.Pa /example/compressed
.
.Pp
Compression can be disabled with:
.Bd -literal -offset indent
# zfs set compression=off example/compressed
.Ed
.Pp
To unmount a file system, use
.Cm zfs umount
and then verify with
.Cm df
:
.Bd -literal -offset indent
# zfs umount example/compressed
# df
Filesystem  1K-blocks    Used    Avail Capacity  Mounted on
/dev/ad0s1a   2026030  235232  1628716    13%    /
devfs               1       1        0   100%    /dev
/dev/ad0s1d  54098308 1032864 48737580     2%    /usr
example      17547008       0 17547008     0%    /example
.Ed
.Pp
To re-mount the file system to make it accessible again, use
.Cm zfs mount
and verify with
.Cm df
:
.Bd -literal -offset indent
# zfs mount example/compressed
# df
Filesystem         1K-blocks    Used    Avail Capacity  Mounted on
/dev/ad0s1a          2026030  235234  1628714    13%    /
devfs                      1       1        0   100%    /dev
/dev/ad0s1d         54098308 1032864 48737580     2%    /usr
example             17547008       0 17547008     0%    /example
example/compressed  17547008       0 17547008     0%    /example/compressed
.Ed
.Pp
The pool and file system may also be observed by viewing the output from
.Cm mount
:
.Bd -literal -offset indent
# mount
/dev/ad0s1a on / (ufs, local)
devfs on /dev (devfs, local)
/dev/ad0s1d on /usr (ufs, local, soft-updates)
example on /example (zfs, local)
example/compressed on /example/compressed (zfs, local)
.Ed
.Pp
After creation, ZFS datasets can be used like any file systems.
However, many other features are available which can be set on a per-dataset
basis.
In the example below, a new file system called
.Ql data
is created.
Important files will be stored here, so it is configured to keep two copies of
each data block:
.Bd -literal -offset indent
# zfs create example/data
# zfs set copies=2 example/data
.Ed
.Pp
It is now possible to see the data and space utilization by issuing
.Cm df
:
.Bd -literal -offset indent
# df
Filesystem         1K-blocks    Used    Avail Capacity  Mounted on
/dev/ad0s1a          2026030  235234  1628714    13%    /
devfs                      1       1        0   100%    /dev
/dev/ad0s1d         54098308 1032864 48737580     2%    /usr
example             17547008       0 17547008     0%    /example
example/compressed  17547008       0 17547008     0%    /example/compressed
example/data        17547008       0 17547008     0%    /example/data
.Ed
.Pp
Notice that each file system on the pool has the same amount of available
space.
This is the reason for using
.Cm df
in these examples, to show that the file systems use only the amount of space
they need and all draw from the same pool.
 ZFS eliminates concepts such as volumes and partitions, and allows multiple file
systems to occupy the same pool.
.Pp
To destroy the file systems and then destroy the pool as it is no longer
needed:
.Bd -literal -offset indent
# zfs destroy example/compressed
# zfs destroy example/data
# zpool destroy example
.Ed
.Ss RAID-Z
.Pp
Disks fail.
One method of avoiding data loss from disk failure is to implement RAID.
 ZFS supports this feature in its pool design.
 RAID-Z pools require three or more disks but provide more usable space than mirrored
pools.
.Pp
This example creates a RAID-Z pool, specifying the disks to add to the pool:
.Bd -literal -offset indent
# zpool create storage raidz da0 da1 da2
.Ed
.Pp
Sun recommends that the number of devices used in a RAID-Z configuration be between three and nine.
For environments requiring a single pool consisting of 10 disks or more,
consider breaking it up into smaller RAID-Z groups.
If only two disks are available and redundancy is a requirement, consider using
a ZFS mirror.
Refer to
.Xr zpool 8 for more details.
.Pp
The previous example created the
.Ql storage
zpool.
This example makes a new file system called
.Ql home
in that pool:
.Bd -literal -offset indent
# zfs create storage/home
.Ed
.Pp
Compression and keeping extra copies of directories and files can be enabled:
.Bd -literal -offset indent
# zfs set copies=2 storage/home
# zfs set compression=gzip storage/home
.Ed
.Pp
To make this the new home directory for users, copy the user data to this
directory and create the appropriate symbolic links:
.Bd -literal -offset indent
# cp -rp /home/* /storage/home
# rm -rf /home /usr/home
# ln -s /storage/home /home
# ln -s /storage/home /usr/home
.Ed
.Pp
Users data is now stored on the freshly-created
.Pa /storage/home
.
Test by adding a new user and logging in as that user.
.Pp
Try creating a file system snapshot which can be rolled back later:
.Bd -literal -offset indent
# zfs snapshot storage/home@08-30-08
.Ed
.Pp
Snapshots can only be made of a full file system, not a single directory or
file.
.Pp
The
.Ql @
character is a delimiter between the file system name or the volume name.
If an important directory has been accidentally deleted, the file system can be
backed up, then rolled back to an earlier snapshot when the directory still
existed:
.Bd -literal -offset indent
# zfs rollback storage/home@08-30-08
.Ed
.Pp
To list all available snapshots, run
.Cm ls
in the file system's
.Pa .zfs/snapshot
directory.
For example, to see the previously taken snapshot:
.Bd -literal -offset indent
# ls /storage/home/.zfs/snapshot
.Ed
.Pp
It is possible to write a script to perform regular snapshots on user data.
However, over time, snapshots can consume a great deal of disk space.
The previous snapshot can be removed using the command:
.Bd -literal -offset indent
# zfs destroy storage/home@08-30-08
.Ed
.Pp
After testing,
.Pa /storage/home
can be made the real
.Pa /home
using this command:
.Bd -literal -offset indent
# zfs set mountpoint=/home storage/home
.Ed
.Pp
Run
.Cm df
and
.Cm mount
to confirm that the system now treats the file system as the real
.Pa /home
:
.Bd -literal -offset indent
# mount
/dev/ad0s1a on / (ufs, local)
devfs on /dev (devfs, local)
/dev/ad0s1d on /usr (ufs, local, soft-updates)
storage on /storage (zfs, local)
storage/home on /home (zfs, local)
# df
Filesystem   1K-blocks    Used    Avail Capacity  Mounted on
/dev/ad0s1a    2026030  235240  1628708    13%    /
devfs                1       1        0   100%    /dev
/dev/ad0s1d   54098308 1032826 48737618     2%    /usr
storage       26320512       0 26320512     0%    /storage
storage/home  26320512       0 26320512     0%    /home
.Ed
.Pp
This completes the RAID-Z configuration.
Daily status updates about the file systems created can be generated as part of
the nightly
.Xr periodic 8 runs.
Add this line to
.Pa /etc/periodic.conf
:
.Bd -literal -offset indent
daily_status_zfs_enable="YES"
.Ed
.Ss RECOVERING RAID-Z
.Pp
Every software RAID has a method of monitoring its
.Ql state
.
The status of RAID-Z devices may be viewed with this command:
.Bd -literal -offset indent
# zpool status -x
.Ed
.Pp
If all pools are Online and everything is normal, the message shows:
.Bd -literal -offset indent
all pools are healthy
.Ed
.Pp
If there is an issue, perhaps a disk is in the Offline state, the pool state will look similar to:
.Bd -literal -offset indent
  pool: storage
 state: DEGRADED
status: One or more devices has been taken offline by the administrator.
	Sufficient replicas exist for the pool to continue functioning in a
	degraded state.
action: Online the device using 'zpool online' or replace the device with
	'zpool replace'.
 scrub: none requested
config:

	NAME        STATE     READ WRITE CKSUM
	storage     DEGRADED     0     0     0
	  raidz1    DEGRADED     0     0     0
	    da0     ONLINE       0     0     0
	    da1     OFFLINE      0     0     0
	    da2     ONLINE       0     0     0

errors: No known data errors
.Ed
.Pp
This indicates that the device was previously taken offline by the
administrator with this command:
.Bd -literal -offset indent
# zpool offline storage da1
.Ed
.Pp
Now the system can be powered down to replace
.Pa da1
.
When the system is back online, the failed disk can replaced in the pool:
.Bd -literal -offset indent
# zpool replace storage da1
.Ed
.Pp
From here, the status may be checked again, this time without
.Ar -x
so that all pools are shown:
.Bd -literal -offset indent
# zpool status storage
 pool: storage
 state: ONLINE
 scrub: resilver completed with 0 errors on Sat Aug 30 19:44:11 2008
config:

	NAME        STATE     READ WRITE CKSUM
	storage     ONLINE       0     0     0
	  raidz1    ONLINE       0     0     0
	    da0     ONLINE       0     0     0
	    da1     ONLINE       0     0     0
	    da2     ONLINE       0     0     0

errors: No known data errors
.Ed
.Pp
In this example, everything is normal.
.Ss DATA VERIFICATION
.Pp
ZFS uses checksums to verify the integrity of stored data.
These are enabled automatically upon creation of file systems.
.Pp
Checksums can be disabled, but it is not recommended!
Checksums take very little storage space and provide data integrity.
Many ZFS features will not work properly with checksums disabled.
There is no noticeable performance gain from disabling these checksums.
.Pp
Checksum verification is known as scrubbing.
Verify the data integrity of the
.Ql storage
pool with this command:
.Bd -literal -offset indent
# zpool scrub storage
.Ed
.Pp
The duration of a scrub depends on the amount of data stored.
Larger amounts of data will take proportionally longer to verify.
Scrubs are very I/O intensive, and only one scrub is allowed to run at a time.
After the scrub completes, the status can be viewed with
.Cm status
:
.Bd -literal -offset indent
# zpool status storage
 pool: storage
 state: ONLINE
 scrub: scrub completed with 0 errors on Sat Jan 26 19:57:37 2013
config:

	NAME        STATE     READ WRITE CKSUM
	storage     ONLINE       0     0     0
	  raidz1    ONLINE       0     0     0
	    da0     ONLINE       0     0     0
	    da1     ONLINE       0     0     0
	    da2     ONLINE       0     0     0

errors: No known data errors
.Ed
.Pp
The completion date of the last scrub operation is displayed to help track when
another scrub is required.
Routine scrubs help protect data from silent corruption and ensure the
integrity of the pool.
.Pp
Refer to
.Xr zfs 8 and
.Xr zpool 8 for other ZFS options.
.Ss ZPOOL ADMINISTRATION
.Pp
ZFS administration is divided between two main utilities.
The
.Cm zpool
utility controls the operation of the pool and deals with adding, removing,
replacing, and managing disks.
The
.Cm zfs
utility deals with creating, destroying, and managing datasets, both file systems and volumes.
.Ss CREATING AND DESTROYING STORAGE POOLS
.Pp
Creating a ZFS storage pool (zpool) involves making a number of decisions that are relatively permanent because
the structure of the pool cannot be changed after the pool has been created.
The most important decision is what types of vdevs into which to group the
physical disks.
See the list of vdev types for details about the possible options.
After the pool has been created, most vdev types do not allow additional disks
to be added to the vdev.
The exceptions are mirrors, which allow additional disks to be added to the
vdev, and stripes, which can be upgraded to mirrors by attaching an additional
disk to the vdev.
Although additional vdevs can be added to expand a pool, the layout of the pool
cannot be changed after pool creation.
Instead, the data must be backed up and the pool destroyed and recreated.
.Pp
Create a simple mirror pool:
.Bd -literal -offset indent
# zpool create mypool mirror /dev/ada1  /dev/ada2
# zpool status
  pool: mypool
 state: ONLINE
  scan: none requested
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
            ada1    ONLINE       0     0     0
            ada2    ONLINE       0     0     0

errors: No known data errors
.Ed
.Pp
Multiple vdevs can be created at once.
Specify multiple groups of disks separated by the vdev type keyword,
.Ql mirror
in this example:
.Bd -literal -offset indent
# zpool create mypool mirror /dev/ada1  /dev/ada2 mirror /dev/ada3  /dev/ada4
  pool: mypool
 state: ONLINE
  scan: none requested
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
            ada1    ONLINE       0     0     0
            ada2    ONLINE       0     0     0
          mirror-1  ONLINE       0     0     0
            ada3    ONLINE       0     0     0
            ada4    ONLINE       0     0     0

errors: No known data errors
.Ed
.Pp
Pools can also be constructed using partitions rather than whole disks.
Putting ZFS in a separate partition allows the same disk to have other partitions for other
purposes.
In particular, partitions with bootcode and file systems needed for booting can
be added.
This allows booting from disks that are also members of a pool.
There is no performance penalty on FreeBSD when using a partition rather than a
whole disk.
Using partitions also allows the administrator to under-provision the disks, using less than the full capacity.
If a future replacement disk of the same nominal size as the original actually
has a slightly smaller capacity, the smaller partition will still fit, and the
replacement disk can still be used.
.Pp
Create a RAID-Z2 pool using partitions:
.Bd -literal -offset indent
# zpool create mypool raidz2 /dev/ada0p3  /dev/ada1p3  /dev/ada2p3  /dev/ada3p3  /dev/ada4p3  /dev/ada5p3
# zpool status
  pool: mypool
 state: ONLINE
  scan: none requested
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          raidz2-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada1p3  ONLINE       0     0     0
            ada2p3  ONLINE       0     0     0
            ada3p3  ONLINE       0     0     0
            ada4p3  ONLINE       0     0     0
            ada5p3  ONLINE       0     0     0

errors: No known data errors
.Ed
.Pp
A pool that is no longer needed can be destroyed so that the disks can be
reused.
Destroying a pool involves first unmounting all of the datasets in that pool.
If the datasets are in use, the unmount operation will fail and the pool will
not be destroyed.
The destruction of the pool can be forced with
.Ar -f
, but this can cause undefined behavior in applications which had open files on
those datasets.
.Ss ADDING AND REMOVING DEVICES
.Pp
There are two cases for adding disks to a zpool: attaching a disk to an
existing vdev with
.Cm zpool attach
, or adding vdevs to the pool with
.Cm zpool add
.
Only some vdev types allow disks to be added to the vdev after creation.
.Pp
A pool created with a single disk lacks redundancy.
Corruption can be detected but not repaired, because there is no other copy of
the data.
The copies property may be able to recover from a small failure such as a bad sector, but
does not provide the same level of protection as mirroring or RAID-Z.
Starting with a pool consisting of a single disk vdev,
.Cm zpool attach
can be used to add an additional disk to the vdev, creating a mirror.
.Cm zpool attach
can also be used to add additional disks to a mirror group, increasing
redundancy and read performance.
If the disks being used for the pool are partitioned, replicate the layout of
the first disk on to the second,
.Cm gpart backup
and
.Cm gpart restore
can be used to make this process easier.
.Pp
Upgrade the single disk (stripe) vdev ada0p3 to a mirror by attaching ada1p3:
.Bd -literal -offset indent
# zpool status
  pool: mypool
 state: ONLINE
  scan: none requested
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          ada0p3    ONLINE       0     0     0

errors: No known data errors
# zpool attach mypool  ada0p3  ada1p3
Make sure to wait until resilver is done before rebooting.

If you boot from pool 'mypool', you may need to update
boot code on newly attached disk 'ada1p3'.

Assuming you use GPT partitioning and 'da0' is your new boot disk
you may use the following command:

        gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 da0
# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada1
bootcode written to ada1
# zpool status
  pool: mypool
 state: ONLINE
status: One or more devices is currently being resilvered.  The pool will
        continue to function, possibly in a degraded state.
action: Wait for the resilver to complete.
  scan: resilver in progress since Fri May 30 08:19:19 2014
        527M scanned out of 781M at 47.9M/s, 0h0m to go
        527M resilvered, 67.53% done
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada1p3  ONLINE       0     0     0  (resilvering)

errors: No known data errors
# zpool status
  pool: mypool
 state: ONLINE
  scan: resilvered 781M in 0h0m with 0 errors on Fri May 30 08:15:58 2014
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada1p3  ONLINE       0     0     0

errors: No known data errors
.Ed
.Pp
When adding disks to the existing vdev is not an option, as for RAID-Z, an alternative method is to add another vdev to the pool.
Additional vdevs provide higher performance, distributing writes across the
vdevs.
Each vdev is responsible for providing its own redundancy.
It is possible, but discouraged, to mix vdev types, like
.Ql mirror
and
.Ql RAID-Z
.
Adding a non-redundant vdev to a pool containing mirror or RAID-Z vdevs risks the data on the entire pool.
Writes are distributed, so the failure of the non-redundant disk will result in
the loss of a fraction of every block that has been written to the pool.
.Pp
Data is striped across each of the vdevs.
For example, with two mirror vdevs, this is effectively a RAID 10 that stripes writes across two sets of mirrors.
Space is allocated so that each vdev reaches 100% full at the same time.
There is a performance penalty if the vdevs have different amounts of free
space, as a disproportionate amount of the data is written to the less full
vdev.
.Pp
When attaching additional devices to a boot pool, remember to update the
bootcode.
.Pp
Attach a second mirror group (
.Pa ada2p3
and
.Pa ada3p3
) to the existing mirror:
.Bd -literal -offset indent
# zpool status
  pool: mypool
 state: ONLINE
  scan: resilvered 781M in 0h0m with 0 errors on Fri May 30 08:19:35 2014
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada1p3  ONLINE       0     0     0

errors: No known data errors
# zpool add mypool mirror ada2p3  ada3p3
# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada2
bootcode written to ada2
# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada3
bootcode written to ada3
# zpool status
  pool: mypool
 state: ONLINE
  scan: scrub repaired 0 in 0h0m with 0 errors on Fri May 30 08:29:51 2014
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada1p3  ONLINE       0     0     0
          mirror-1  ONLINE       0     0     0
            ada2p3  ONLINE       0     0     0
            ada3p3  ONLINE       0     0     0

errors: No known data errors
.Ed
.Pp
Currently, vdevs cannot be removed from a pool, and disks can only be removed
from a mirror if there is enough remaining redundancy.
If only one disk in a mirror group remains, it ceases to be a mirror and
reverts to being a stripe, risking the entire pool if that remaining disk
fails.
.Pp
Remove a disk from a three-way mirror group:
.Bd -literal -offset indent
# zpool status
  pool: mypool
 state: ONLINE
  scan: scrub repaired 0 in 0h0m with 0 errors on Fri May 30 08:29:51 2014
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada1p3  ONLINE       0     0     0
            ada2p3  ONLINE       0     0     0

errors: No known data errors
# zpool detach mypool  ada2p3
# zpool status
  pool: mypool
 state: ONLINE
  scan: scrub repaired 0 in 0h0m with 0 errors on Fri May 30 08:29:51 2014
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada1p3  ONLINE       0     0     0

errors: No known data errors
.Ed
.Ss CHECKING THE STATUS OF A POOL
.Pp
Pool status is important.
If a drive goes offline or a read, write, or checksum error is detected, the
corresponding error count increases.
The
.Cm status
output shows the configuration and status of each device in the pool and the
status of the entire pool.
Actions that need to be taken and details about the last
.Cm scrub
are also shown.
.Bd -literal -offset indent
# zpool status
  pool: mypool
 state: ONLINE
  scan: scrub repaired 0 in 2h25m with 0 errors on Sat Sep 14 04:25:50 2013
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          raidz2-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada1p3  ONLINE       0     0     0
            ada2p3  ONLINE       0     0     0
            ada3p3  ONLINE       0     0     0
            ada4p3  ONLINE       0     0     0
            ada5p3  ONLINE       0     0     0

errors: No known data errors
.Ed
.Ss CLEARING ERRORS
.Pp
When an error is detected, the read, write, or checksum counts are incremented.
The error message can be cleared and the counts reset with
.Cm zpool clear mypool
.
Clearing the error state can be important for automated scripts that alert the
administrator when the pool encounters an error.
Further errors may not be reported if the old errors are not cleared.
.Ss REPLACING A FUNCTIONING DEVICE
.Pp
There are a number of situations where it may be desirable to replace one disk
with a different disk.
When replacing a working disk, the process keeps the old disk online during the
replacement.
The pool never enters a degraded state, reducing the risk of data loss.
.Cm zpool replace
copies all of the data from the old disk to the new one.
After the operation completes, the old disk is disconnected from the vdev.
If the new disk is larger than the old disk, it may be possible to grow the
zpool, using the new space.
See Growing a Pool.
.Pp
Replace a functioning device in the pool:
.Bd -literal -offset indent
# zpool status
  pool: mypool
 state: ONLINE
  scan: none requested
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada1p3  ONLINE       0     0     0

errors: No known data errors
# zpool replace mypool  ada1p3  ada2p3
Make sure to wait until resilver is done before rebooting.

If you boot from pool 'zroot', you may need to update
boot code on newly attached disk 'ada2p3'.

Assuming you use GPT partitioning and 'da0' is your new boot disk
you may use the following command:

        gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 da0
# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada2
# zpool status
  pool: mypool
 state: ONLINE
status: One or more devices is currently being resilvered.  The pool will
        continue to function, possibly in a degraded state.
action: Wait for the resilver to complete.
  scan: resilver in progress since Mon Jun  2 14:21:35 2014
        604M scanned out of 781M at 46.5M/s, 0h0m to go
        604M resilvered, 77.39% done
config:

        NAME             STATE     READ WRITE CKSUM
        mypool           ONLINE       0     0     0
          mirror-0       ONLINE       0     0     0
            ada0p3       ONLINE       0     0     0
            replacing-1  ONLINE       0     0     0
              ada1p3     ONLINE       0     0     0
              ada2p3     ONLINE       0     0     0  (resilvering)

errors: No known data errors
# zpool status
  pool: mypool
 state: ONLINE
  scan: resilvered 781M in 0h0m with 0 errors on Mon Jun  2 14:21:52 2014
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada2p3  ONLINE       0     0     0

errors: No known data errors
.Ed
.Ss DEALING WITH FAILED DEVICES
.Pp
When a disk in a pool fails, the vdev to which the disk belongs enters the degraded state.
All of the data is still available, but performance may be reduced because
missing data must be calculated from the available redundancy.
To restore the vdev to a fully functional state, the failed physical device
must be replaced.
 ZFS is then instructed to begin the resilver operation.
Data that was on the failed device is recalculated from available redundancy
and written to the replacement device.
After completion, the vdev returns to online status.
.Pp
If the vdev does not have any redundancy, or if multiple devices have failed
and there is not enough redundancy to compensate, the pool enters the faulted state.
If a sufficient number of devices cannot be reconnected to the pool, the pool
becomes inoperative and data must be restored from backups.
.Pp
When replacing a failed disk, the name of the failed disk is replaced with the GUID of the device.
A new device name parameter for
.Cm zpool replace
is not required if the replacement device has the same device name.
.Pp
Replace a failed disk using
.Cm zpool replace
:
.Bd -literal -offset indent
# zpool status
  pool: mypool
 state: DEGRADED
status: One or more devices could not be opened.  Sufficient replicas exist for
        the pool to continue functioning in a degraded state.
action: Attach the missing device and online it using 'zpool online'.
   see: http://illumos.org/msg/ZFS-8000-2Q
  scan: none requested
config:

        NAME                    STATE     READ WRITE CKSUM
        mypool                  DEGRADED     0     0     0
          mirror-0              DEGRADED     0     0     0
            ada0p3              ONLINE       0     0     0
            316502962686821739  UNAVAIL      0     0     0  was /dev/ada1p3

errors: No known data errors
# zpool replace mypool  316502962686821739  ada2p3
# zpool status
  pool: mypool
 state: DEGRADED
status: One or more devices is currently being resilvered.  The pool will
        continue to function, possibly in a degraded state.
action: Wait for the resilver to complete.
  scan: resilver in progress since Mon Jun  2 14:52:21 2014
        641M scanned out of 781M at 49.3M/s, 0h0m to go
        640M resilvered, 82.04% done
config:

        NAME                        STATE     READ WRITE CKSUM
        mypool                      DEGRADED     0     0     0
          mirror-0                  DEGRADED     0     0     0
            ada0p3                  ONLINE       0     0     0
            replacing-1             UNAVAIL      0     0     0
              15732067398082357289  UNAVAIL      0     0     0  was /dev/ada1p3/old
              ada2p3                ONLINE       0     0     0  (resilvering)

errors: No known data errors
# zpool status
  pool: mypool
 state: ONLINE
  scan: resilvered 781M in 0h0m with 0 errors on Mon Jun  2 14:52:38 2014
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada2p3  ONLINE       0     0     0

errors: No known data errors
.Ed
.Ss SCRUBBING A POOL
.Pp
It is recommended that pools be scrubbed regularly, ideally at least once every month.
The
.Cm scrub
operation is very disk-intensive and will reduce performance while running.
Avoid high-demand periods when scheduling
.Cm scrub
or use
.Ev vfs.zfs.scrub_delay
to adjust the relative priority of the
.Cm scrub
to prevent it interfering with other workloads.
.Bd -literal -offset indent
# zpool scrub mypool
# zpool status
  pool: mypool
 state: ONLINE
  scan: scrub in progress since Wed Feb 19 20:52:54 2014
        116G scanned out of 8.60T at 649M/s, 3h48m to go
        0 repaired, 1.32% done
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          raidz2-0  ONLINE       0     0     0
            ada0p3  ONLINE       0     0     0
            ada1p3  ONLINE       0     0     0
            ada2p3  ONLINE       0     0     0
            ada3p3  ONLINE       0     0     0
            ada4p3  ONLINE       0     0     0
            ada5p3  ONLINE       0     0     0

errors: No known data errors
.Ed
.Pp
In the event that a scrub operation needs to be cancelled, issue
.Cm zpool scrub -s mypool
.
.Ss SELF-HEALING
.Pp
The checksums stored with data blocks enable the file system to self-heal.
This feature will automatically repair data whose checksum does not match the
one recorded on another device that is part of the storage pool.
For example, a mirror with two disks where one drive is starting to malfunction
and cannot properly store the data any more.
This is even worse when the data has not been accessed for a long time, as with
long term archive storage.
Traditional file systems need to run algorithms that check and repair the data
like
.Xr fsck 8 .
These commands take time, and in severe cases, an administrator has to manually
decide which repair operation must be performed.
When ZFS detects a data block with a checksum that does not match, it tries to read the
data from the mirror disk.
If that disk can provide the correct data, it will not only give that data to
the application requesting it, but also correct the wrong data on the disk that
had the bad checksum.
This happens without any interaction from a system administrator during normal
pool operation.
.Pp
The next example demonstrates this self-healing behavior.
A mirrored pool of disks
.Pa /dev/ada0
and
.Pa /dev/ada1
is created.
.Bd -literal -offset indent
# zpool create healer mirror /dev/ada0  /dev/ada1
# zpool status healer
  pool: healer
 state: ONLINE
  scan: none requested
config:

    NAME        STATE     READ WRITE CKSUM
    healer      ONLINE       0     0     0
      mirror-0  ONLINE       0     0     0
       ada0     ONLINE       0     0     0
       ada1     ONLINE       0     0     0

errors: No known data errors
# zpool list
NAME     SIZE  ALLOC   FREE    CAP  DEDUP  HEALTH  ALTROOT
healer   960M  92.5K   960M     0%  1.00x  ONLINE  -
.Ed
.Pp
Some important data that to be protected from data errors using the
self-healing feature is copied to the pool.
A checksum of the pool is created for later comparison.
.Bd -literal -offset indent
# cp /some/important/data /healer
# zfs list
NAME     SIZE  ALLOC   FREE    CAP  DEDUP  HEALTH  ALTROOT
healer   960M  67.7M   892M     7%  1.00x  ONLINE  -
# sha1 /healer > checksum.txt
# cat checksum.txt
SHA1 (/healer) = 2753eff56d77d9a536ece6694bf0a82740344d1f
.Ed
.Pp
Data corruption is simulated by writing random data to the beginning of one of
the disks in the mirror.
To prevent ZFS from healing the data as soon as it is detected, the pool is exported before
the corruption and imported again afterwards.
.Pp
This is a dangerous operation that can destroy vital data.
It is shown here for demonstrational purposes only and should not be attempted
during normal operation of a storage pool.
Nor should this intentional corruption example be run on any disk with a
different file system on it.
Do not use any other disk device names other than the ones that are part of the
pool.
Make certain that proper backups of the pool are created before running the
command!
.Bd -literal -offset indent
# zpool export healer
# dd if=/dev/random of=/dev/ada1 bs=1m count=200
200+0 records in
200+0 records out
209715200 bytes transferred in 62.992162 secs (3329227 bytes/sec)
# zpool import healer
.Ed
.Pp
The pool status shows that one device has experienced an error.
Note that applications reading data from the pool did not receive any incorrect
data.
 ZFS provided data from the
.Pa ada0
device with the correct checksums.
The device with the wrong checksum can be found easily as the
.Ql CKSUM
column contains a nonzero value.
.Bd -literal -offset indent
# zpool status healer
    pool: healer
   state: ONLINE
  status: One or more devices has experienced an unrecoverable error.  An
          attempt was made to correct the error.  Applications are unaffected.
  action: Determine if the device needs to be replaced, and clear the errors
          using 'zpool clear' or replace the device with 'zpool replace'.
     see: http://www.sun.com/msg/ZFS-8000-9P
    scan: none requested
  config:

      NAME        STATE     READ WRITE CKSUM
      healer      ONLINE       0     0     0
        mirror-0  ONLINE       0     0     0
         ada0     ONLINE       0     0     0
         ada1     ONLINE       0     0     1

errors: No known data errors
.Ed
.Pp
The error was detected and handled by using the redundancy present in the
unaffected
.Pa ada0
mirror disk.
A checksum comparison with the original one will reveal whether the pool is
consistent again.
.Bd -literal -offset indent
# sha1 /healer >> checksum.txt
# cat checksum.txt
SHA1 (/healer) = 2753eff56d77d9a536ece6694bf0a82740344d1f
SHA1 (/healer) = 2753eff56d77d9a536ece6694bf0a82740344d1f
.Ed
.Pp
The two checksums that were generated before and after the intentional
tampering with the pool data still match.
This shows how ZFS is capable of detecting and correcting any errors automatically when the
checksums differ.
Note that this is only possible when there is enough redundancy present in the
pool.
A pool consisting of a single device has no self-healing capabilities.
That is also the reason why checksums are so important in ZFS and should not be disabled for any reason.
No
.Xr fsck 8 or similar file system consistency check program is required to detect and
correct this and the pool was still available during the time there was a
problem.
A scrub operation is now required to overwrite the corrupted data on
.Pa ada1
.
.Bd -literal -offset indent
# zpool scrub healer
# zpool status healer
  pool: healer
 state: ONLINE
status: One or more devices has experienced an unrecoverable error.  An
            attempt was made to correct the error.  Applications are unaffected.
action: Determine if the device needs to be replaced, and clear the errors
            using 'zpool clear' or replace the device with 'zpool replace'.
   see: http://www.sun.com/msg/ZFS-8000-9P
  scan: scrub in progress since Mon Dec 10 12:23:30 2012
        10.4M scanned out of 67.0M at 267K/s, 0h3m to go
        9.63M repaired, 15.56% done
config:

    NAME        STATE     READ WRITE CKSUM
    healer      ONLINE       0     0     0
      mirror-0  ONLINE       0     0     0
       ada0     ONLINE       0     0     0
       ada1     ONLINE       0     0   627  (repairing)

errors: No known data errors
.Ed
.Pp
The scrub operation reads data from
.Pa ada0
and rewrites any data with an incorrect checksum on
.Pa ada1
.
This is indicated by the
.Ql (repairing)
output from
.Cm zpool status
.
After the operation is complete, the pool status changes to:
.Bd -literal -offset indent
# zpool status healer
  pool: healer
 state: ONLINE
status: One or more devices has experienced an unrecoverable error.  An
        attempt was made to correct the error.  Applications are unaffected.
action: Determine if the device needs to be replaced, and clear the errors
             using 'zpool clear' or replace the device with 'zpool replace'.
   see: http://www.sun.com/msg/ZFS-8000-9P
  scan: scrub repaired 66.5M in 0h2m with 0 errors on Mon Dec 10 12:26:25 2012
config:

    NAME        STATE     READ WRITE CKSUM
    healer      ONLINE       0     0     0
      mirror-0  ONLINE       0     0     0
       ada0     ONLINE       0     0     0
       ada1     ONLINE       0     0 2.72K

errors: No known data errors
.Ed
.Pp
After the scrub operation completes and all the data has been synchronized from
.Pa ada0
to
.Pa ada1
, the error messages can be cleared from the pool status by running
.Cm zpool clear
.
.Bd -literal -offset indent
# zpool clear healer
# zpool status healer
  pool: healer
 state: ONLINE
  scan: scrub repaired 66.5M in 0h2m with 0 errors on Mon Dec 10 12:26:25 2012
config:

    NAME        STATE     READ WRITE CKSUM
    healer      ONLINE       0     0     0
      mirror-0  ONLINE       0     0     0
       ada0     ONLINE       0     0     0
       ada1     ONLINE       0     0     0

errors: No known data errors
.Ed
.Pp
The pool is now back to a fully working state and all the errors have been
cleared.
.Ss GROWING A POOL
.Pp
The usable size of a redundant pool is limited by the capacity of the smallest
device in each vdev.
The smallest device can be replaced with a larger device.
After completing a replace or resilver operation, the pool can grow to use the capacity of the new device.
For example, consider a mirror of a 1 TB drive and a 2 TB drive.
The usable space is 1 TB.
When the 1 TB drive is replaced with another 2 TB drive, the resilvering
process copies the existing data onto the new drive.
Because both of the devices now have 2 TB capacity, the mirror's available
space can be grown to 2 TB.
.Pp
Expansion is triggered by using
.Cm zpool online -e
on each device.
After expansion of all devices, the additional space becomes available to the
pool.
.Ss IMPORTING AND EXPORTING POOLS
.Pp
Pools are exported before moving them to another system.
All datasets are unmounted, and each device is marked as exported but still
locked so it cannot be used by other disk subsystems.
This allows pools to be imported on other machines, other operating systems that support ZFS, and even different hardware architectures (with some caveats, see
.Xr zpool 8 ).
When a dataset has open files,
.Cm zpool export -f
can be used to force the export of a pool.
Use this with caution.
The datasets are forcibly unmounted, potentially resulting in unexpected
behavior by the applications which had open files on those datasets.
.Pp
Export a pool that is not in use:
.Bd -literal -offset indent
# zpool export mypool
.Ed
.Pp
Importing a pool automatically mounts the datasets.
This may not be the desired behavior, and can be prevented with
.Cm zpool import -N
.
.Cm zpool import -o
sets temporary properties for this import only.
.Cm zpool import altroot=
allows importing a pool with a base mount point instead of the root of the file
system.
If the pool was last used on a different system and was not properly exported,
an import might have to be forced with
.Cm zpool import -f
.
.Cm zpool import -a
imports all pools that do not appear to be in use by another system.
.Pp
List all available pools for import:
.Bd -literal -offset indent
# zpool import
   pool: mypool
     id: 9930174748043525076
  state: ONLINE
 action: The pool can be imported using its name or numeric identifier.
 config:

        mypool      ONLINE
          ada2p3    ONLINE
.Ed
.Pp
Import the pool with an alternative root directory:
.Bd -literal -offset indent
# zpool import -o altroot=/mnt  mypool
# zfs list
zfs list
NAME                 USED  AVAIL  REFER  MOUNTPOINT
mypool               110K  47.0G    31K  /mnt/mypool
.Ed
.Ss UPGRADING A STORAGE POOL
.Pp
After upgrading FreeBSD, or if a pool has been imported from a system using an
older version of ZFS, the pool can be manually upgraded to the latest version of ZFS to support newer features.
Consider whether the pool may ever need to be imported on an older system
before upgrading.
Upgrading is a one-way process.
Older pools can be upgraded, but pools with newer features cannot be
downgraded.
.Pp
Upgrade a v28 pool to support
.Ql Feature Flags
:
.Bd -literal -offset indent
# zpool status
  pool: mypool
 state: ONLINE
status: The pool is formatted using a legacy on-disk format.  The pool can
        still be used, but some features are unavailable.
action: Upgrade the pool using 'zpool upgrade'.  Once this is done, the
        pool will no longer be accessible on software that does not support feat
        flags.
  scan: none requested
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
	    ada0    ONLINE       0     0     0
	    ada1    ONLINE       0     0     0

errors: No known data errors
# zpool upgrade
This system supports ZFS pool feature flags.

The following pools are formatted with legacy version numbers and can
be upgraded to use feature flags.  After being upgraded, these pools
will no longer be accessible by software that does not support feature
flags.

VER  POOL
---  ------------
28   mypool

Use 'zpool upgrade -v' for a list of available legacy versions.
Every feature flags pool has all supported features enabled.
# zpool upgrade mypool
This system supports ZFS pool feature flags.

Successfully upgraded 'mypool' from version 28 to feature flags.
Enabled the following features on 'mypool':
  async_destroy
  empty_bpobj
  lz4_compress
  multi_vdev_crash_dump
.Ed
.Pp
The newer features of ZFS will not be available until
.Cm zpool upgrade
has completed.
.Cm zpool upgrade -v
can be used to see what new features will be provided by upgrading, as well as
which features are already supported.
.Pp
Upgrade a pool to support additional feature flags:
.Bd -literal -offset indent
# zpool status
  pool: mypool
 state: ONLINE
status: Some supported features are not enabled on the pool. The pool can
        still be used, but some features are unavailable.
action: Enable all features using 'zpool upgrade'. Once this is done,
        the pool may no longer be accessible by software that does not support
        the features. See zpool-features(7) for details.
  scan: none requested
config:

        NAME        STATE     READ WRITE CKSUM
        mypool      ONLINE       0     0     0
          mirror-0  ONLINE       0     0     0
	    ada0    ONLINE       0     0     0
	    ada1    ONLINE       0     0     0

errors: No known data errors
# zpool upgrade
This system supports ZFS pool feature flags.

All pools are formatted using feature flags.


Some supported features are not enabled on the following pools. Once a
feature is enabled the pool may become incompatible with software
that does not support the feature. See zpool-features(7) for details.

POOL  FEATURE
---------------
zstore
      multi_vdev_crash_dump
      spacemap_histogram
      enabled_txg
      hole_birth
      extensible_dataset
      bookmarks
      filesystem_limits
# zpool upgrade mypool
This system supports ZFS pool feature flags.

Enabled the following features on 'mypool':
  spacemap_histogram
  enabled_txg
  hole_birth
  extensible_dataset
  bookmarks
  filesystem_limits
.Ed
.Pp
The boot code on systems that boot from a pool must be updated to support the
new pool version.
Use
.Cm gpart bootcode
on the partition that contains the boot code.
See
.Xr gpart 8 for more information.
.Ss DISPLAYING RECORDED POOL HISTORY
.Pp
Commands that modify the pool are recorded.
Recorded actions include the creation of datasets, changing properties, or
replacement of a disk.
This history is useful for reviewing how a pool was created and which user
performed a specific action and when.
History is not kept in a log file, but is part of the pool itself.
The command to review this history is aptly named
.Cm zpool history
:
.Bd -literal -offset indent
# zpool history
History for 'tank':
2013-02-26.23:02:35 zpool create tank mirror /dev/ada0 /dev/ada1
2013-02-27.18:50:58 zfs set atime=off tank
2013-02-27.18:51:09 zfs set checksum=fletcher4 tank
2013-02-27.18:51:18 zfs create tank/backup
.Ed
.Pp
The output shows
.Cm zpool
and
.Cm zfs
commands that were executed on the pool along with a timestamp.
Only commands that alter the pool in some way are recorded.
Commands like
.Cm zfs list
are not included.
When no pool name is specified, the history of all pools is displayed.
.Pp
.Cm zpool history
can show even more information when the options
.Ar -i
or
.Ar -l
are provided.
.Ar -i
displays user-initiated events as well as internally logged ZFS events.
.Bd -literal -offset indent
# zpool history -i
History for 'tank':
2013-02-26.23:02:35 [internal pool create txg:5] pool spa 28; zfs spa 28; zpl 5;uts  9.1-RELEASE 901000 amd64
2013-02-27.18:50:53 [internal property set txg:50] atime=0 dataset = 21
2013-02-27.18:50:58 zfs set atime=off tank
2013-02-27.18:51:04 [internal property set txg:53] checksum=7 dataset = 21
2013-02-27.18:51:09 zfs set checksum=fletcher4 tank
2013-02-27.18:51:13 [internal create txg:55] dataset = 39
2013-02-27.18:51:18 zfs create tank/backup
.Ed
.Pp
More details can be shown by adding
.Ar -l
.
History records are shown in a long format, including information like the name
of the user who issued the command and the hostname on which the change was
made.
.Bd -literal -offset indent
# zpool history -l
History for 'tank':
2013-02-26.23:02:35 zpool create tank mirror /dev/ada0 /dev/ada1 [user 0 (root) on :global]
2013-02-27.18:50:58 zfs set atime=off tank [user 0 (root) on myzfsbox:global]
2013-02-27.18:51:09 zfs set checksum=fletcher4 tank [user 0 (root) on myzfsbox:global]
2013-02-27.18:51:18 zfs create tank/backup [user 0 (root) on myzfsbox:global]
.Ed
.Pp
The output shows that the
.Ql root
user created the mirrored pool with disks
.Pa /dev/ada0
and
.Pa /dev/ada1
.
The hostname
.Ql myzfsbox
is also shown in the commands after the pool's creation.
The hostname display becomes important when the pool is exported from one
system and imported on another.
The commands that are issued on the other system can clearly be distinguished
by the hostname that is recorded for each command.
.Pp
Both options to
.Cm zpool history
can be combined to give the most detailed information possible for any given
pool.
Pool history provides valuable information when tracking down the actions that
were performed or when more detailed output is needed for debugging.
.Ss PERFORMANCE MONITORING
.Pp
A built-in monitoring system can display pool I/O statistics in real time.
It shows the amount of free and used space on the pool, how many read and write
operations are being performed per second, and how much I/O bandwidth is currently being utilized.
By default, all pools in the system are monitored and displayed.
A pool name can be provided to limit monitoring to just that pool.
A basic example:
.Bd -literal -offset indent
# zpool iostat
               capacity     operations    bandwidth
pool        alloc   free   read  write   read  write
----------  -----  -----  -----  -----  -----  -----
data         288G  1.53T      2     11  11.3K  57.1K
.Ed
.Pp
To continuously monitor I/O activity, a number can be specified as the last parameter, indicating a
interval in seconds to wait between updates.
The next statistic line is printed after each interval.
Press CtrlC to stop this continuous monitoring.
Alternatively, give a second number on the command line after the interval to
specify the total number of statistics to display.
.Pp
Even more detailed I/O statistics can be displayed with
.Ar -v
.
Each device in the pool is shown with a statistics line.
This is useful in seeing how many read and write operations are being performed
on each device, and can help determine if any individual device is slowing down
the pool.
This example shows a mirrored pool with two devices:
.Bd -literal -offset indent
# zpool iostat -v 
                            capacity     operations    bandwidth
pool                     alloc   free   read  write   read  write
-----------------------  -----  -----  -----  -----  -----  -----
data                      288G  1.53T      2     12  9.23K  61.5K
  mirror                  288G  1.53T      2     12  9.23K  61.5K
    ada1                     -      -      0      4  5.61K  61.7K
    ada2                     -      -      1      4  5.04K  61.7K
-----------------------  -----  -----  -----  -----  -----  -----
.Ed
.Ss SPLITTING A STORAGE POOL
.Pp
A pool consisting of one or more mirror vdevs can be split into two pools.
Unless otherwise specified, the last member of each mirror is detached and used
to create a new pool containing the same data.
The operation should first be attempted with
.Ar -n
.
The details of the proposed operation are displayed without it actually being
performed.
This helps confirm that the operation will do what the user intends.
.Ss ZFS ADMINISTRATION
.Pp
The
.Cm zfs
utility is responsible for creating, destroying, and managing all ZFS datasets that exist within a pool.
The pool is managed using
.Cm zpool
.
.Ss CREATING AND DESTROYING DATASETS
.Pp
Unlike traditional disks and volume managers, space in ZFS is not preallocated.
With traditional file systems, after all of the space is partitioned and
assigned, there is no way to add an additional file system without adding a new
disk.
With ZFS, new file systems can be created at any time.
Each dataset has properties including features like compression, deduplication, caching, and
quotas, as well as other useful properties like readonly, case sensitivity,
network file sharing, and a mount point.
Datasets can be nested inside each other, and child datasets will inherit
properties from their parents.
Each dataset can be administered, delegated, replicated, snapshotted, jailed, and destroyed as a unit.
There are many advantages to creating a separate dataset for each different
type or set of files.
The only drawbacks to having an extremely large number of datasets is that some
commands like
.Cm zfs list
will be slower, and the mounting of hundreds or even thousands of datasets can
slow the FreeBSD boot process.
.Pp
Create a new dataset and enable LZ4 compression on it:
.Bd -literal -offset indent
# zfs list
NAME                  USED  AVAIL  REFER  MOUNTPOINT
mypool                781M  93.2G   144K  none
mypool/ROOT           777M  93.2G   144K  none
mypool/ROOT/default   777M  93.2G   777M  /
mypool/tmp            176K  93.2G   176K  /tmp
mypool/usr            616K  93.2G   144K  /usr
mypool/usr/home       184K  93.2G   184K  /usr/home
mypool/usr/ports      144K  93.2G   144K  /usr/ports
mypool/usr/src        144K  93.2G   144K  /usr/src
mypool/var           1.20M  93.2G   608K  /var
mypool/var/crash      148K  93.2G   148K  /var/crash
mypool/var/log        178K  93.2G   178K  /var/log
mypool/var/mail       144K  93.2G   144K  /var/mail
mypool/var/tmp        152K  93.2G   152K  /var/tmp
# zfs create -o compress=lz4 mypool/usr/mydataset
# zfs list
NAME                   USED  AVAIL  REFER  MOUNTPOINT
mypool                 781M  93.2G   144K  none
mypool/ROOT            777M  93.2G   144K  none
mypool/ROOT/default    777M  93.2G   777M  /
mypool/tmp             176K  93.2G   176K  /tmp
mypool/usr             704K  93.2G   144K  /usr
mypool/usr/home        184K  93.2G   184K  /usr/home
mypool/usr/mydataset  87.5K  93.2G  87.5K  /usr/mydataset
mypool/usr/ports       144K  93.2G   144K  /usr/ports
mypool/usr/src         144K  93.2G   144K  /usr/src
mypool/var            1.20M  93.2G   610K  /var
mypool/var/crash       148K  93.2G   148K  /var/crash
mypool/var/log         178K  93.2G   178K  /var/log
mypool/var/mail        144K  93.2G   144K  /var/mail
mypool/var/tmp         152K  93.2G   152K  /var/tmp
.Ed
.Pp
Destroying a dataset is much quicker than deleting all of the files that reside
on the dataset, as it does not involve scanning all of the files and updating
all of the corresponding metadata.
.Pp
Destroy the previously-created dataset:
.Bd -literal -offset indent
# zfs list
NAME                   USED  AVAIL  REFER  MOUNTPOINT
mypool                 880M  93.1G   144K  none
mypool/ROOT            777M  93.1G   144K  none
mypool/ROOT/default    777M  93.1G   777M  /
mypool/tmp             176K  93.1G   176K  /tmp
mypool/usr             101M  93.1G   144K  /usr
mypool/usr/home        184K  93.1G   184K  /usr/home
mypool/usr/mydataset   100M  93.1G   100M  /usr/mydataset
mypool/usr/ports       144K  93.1G   144K  /usr/ports
mypool/usr/src         144K  93.1G   144K  /usr/src
mypool/var            1.20M  93.1G   610K  /var
mypool/var/crash       148K  93.1G   148K  /var/crash
mypool/var/log         178K  93.1G   178K  /var/log
mypool/var/mail        144K  93.1G   144K  /var/mail
mypool/var/tmp         152K  93.1G   152K  /var/tmp
# zfs destroy mypool/usr/mydataset
# zfs list
NAME                  USED  AVAIL  REFER  MOUNTPOINT
mypool                781M  93.2G   144K  none
mypool/ROOT           777M  93.2G   144K  none
mypool/ROOT/default   777M  93.2G   777M  /
mypool/tmp            176K  93.2G   176K  /tmp
mypool/usr            616K  93.2G   144K  /usr
mypool/usr/home       184K  93.2G   184K  /usr/home
mypool/usr/ports      144K  93.2G   144K  /usr/ports
mypool/usr/src        144K  93.2G   144K  /usr/src
mypool/var           1.21M  93.2G   612K  /var
mypool/var/crash      148K  93.2G   148K  /var/crash
mypool/var/log        178K  93.2G   178K  /var/log
mypool/var/mail       144K  93.2G   144K  /var/mail
mypool/var/tmp        152K  93.2G   152K  /var/tmp
.Ed
.Pp
In modern versions of ZFS,
.Cm zfs destroy
is asynchronous, and the free space might take several minutes to appear in the
pool.
Use
.Cm zpool get freeing poolname
to see the
.Ql freeing
property, indicating how many datasets are having their blocks freed in the
background.
If there are child datasets, like snapshots or other datasets, then the parent cannot be destroyed.
To destroy a dataset and all of its children, use
.Ar -r
to recursively destroy the dataset and all of its children.
Use
.Ar -n
.Ar -v
to list datasets and snapshots that would be destroyed by this operation, but
do not actually destroy anything.
Space that would be reclaimed by destruction of snapshots is also shown.
.Ss CREATING AND DESTROYING VOLUMES
.Pp
A volume is a special type of dataset.
Rather than being mounted as a file system, it is exposed as a block device
under
.Pa /dev/zvol/poolname/dataset
.
This allows the volume to be used for other file systems, to back the disks of
a virtual machine, or to be exported using protocols like iSCSI or HAST.
.Pp
A volume can be formatted with any file system, or used without a file system
to store raw data.
To the user, a volume appears to be a regular disk.
Putting ordinary file systems on these zvols provides features that ordinary disks or file systems do not normally have.
For example, using the compression property on a 250 MB volume allows creation
of a compressed FAT file system.
.Bd -literal -offset indent
# zfs create -V 250m -o compression=on tank/fat32
# zfs list tank
NAME USED AVAIL REFER MOUNTPOINT
tank 258M  670M   31K /tank
# newfs_msdos -F32 /dev/zvol/tank/fat32
# mount -t msdosfs /dev/zvol/tank/fat32 /mnt
# df -h /mnt | grep fat32
Filesystem           Size Used Avail Capacity Mounted on
/dev/zvol/tank/fat32 249M  24k  249M     0%   /mnt
# mount | grep fat32
/dev/zvol/tank/fat32 on /mnt (msdosfs, local)
.Ed
.Pp
Destroying a volume is much the same as destroying a regular file system
dataset.
The operation is nearly instantaneous, but it may take several minutes for the
free space to be reclaimed in the background.
.Ss RENAMING A DATASET
.Pp
The name of a dataset can be changed with
.Cm zfs rename
.
The parent of a dataset can also be changed with this command.
Renaming a dataset to be under a different parent dataset will change the value
of those properties that are inherited from the parent dataset.
When a dataset is renamed, it is unmounted and then remounted in the new
location (which is inherited from the new parent dataset).
This behavior can be prevented with
.Ar -u
.
.Pp
Rename a dataset and move it to be under a different parent dataset:
.Bd -literal -offset indent
# zfs list
NAME                   USED  AVAIL  REFER  MOUNTPOINT
mypool                 780M  93.2G   144K  none
mypool/ROOT            777M  93.2G   144K  none
mypool/ROOT/default    777M  93.2G   777M  /
mypool/tmp             176K  93.2G   176K  /tmp
mypool/usr             704K  93.2G   144K  /usr
mypool/usr/home        184K  93.2G   184K  /usr/home
mypool/usr/mydataset  87.5K  93.2G  87.5K  /usr/mydataset
mypool/usr/ports       144K  93.2G   144K  /usr/ports
mypool/usr/src         144K  93.2G   144K  /usr/src
mypool/var            1.21M  93.2G   614K  /var
mypool/var/crash       148K  93.2G   148K  /var/crash
mypool/var/log         178K  93.2G   178K  /var/log
mypool/var/mail        144K  93.2G   144K  /var/mail
mypool/var/tmp         152K  93.2G   152K  /var/tmp
# zfs rename mypool/usr/mydataset  mypool/var/newname
# zfs list
NAME                  USED  AVAIL  REFER  MOUNTPOINT
mypool                780M  93.2G   144K  none
mypool/ROOT           777M  93.2G   144K  none
mypool/ROOT/default   777M  93.2G   777M  /
mypool/tmp            176K  93.2G   176K  /tmp
mypool/usr            616K  93.2G   144K  /usr
mypool/usr/home       184K  93.2G   184K  /usr/home
mypool/usr/ports      144K  93.2G   144K  /usr/ports
mypool/usr/src        144K  93.2G   144K  /usr/src
mypool/var           1.29M  93.2G   614K  /var
mypool/var/crash      148K  93.2G   148K  /var/crash
mypool/var/log        178K  93.2G   178K  /var/log
mypool/var/mail       144K  93.2G   144K  /var/mail
mypool/var/newname   87.5K  93.2G  87.5K  /var/newname
mypool/var/tmp        152K  93.2G   152K  /var/tmp
.Ed
.Pp
Snapshots can also be renamed like this.
Due to the nature of snapshots, they cannot be renamed into a different parent
dataset.
To rename a recursive snapshot, specify
.Ar -r
, and all snapshots with the same name in child datasets with also be renamed.
.Bd -literal -offset indent
# zfs list -t snapshot
NAME                                USED  AVAIL  REFER  MOUNTPOINT
mypool/var/newname@first_snapshot      0      -  87.5K  -
# zfs rename mypool/var/newname@first_snapshot  new_snapshot_name
# zfs list -t snapshot
NAME                                   USED  AVAIL  REFER  MOUNTPOINT
mypool/var/newname@new_snapshot_name      0      -  87.5K  -
.Ed
.Ss SETTING DATASET PROPERTIES
.Pp
Each ZFS dataset has a number of properties that control its behavior.
Most properties are automatically inherited from the parent dataset, but can be
overridden locally.
Set a property on a dataset with
.Cm zfs set property=value  dataset
.
Most properties have a limited set of valid values,
.Cm zfs get
will display each possible property and valid values.
Most properties can be reverted to their inherited values using
.Cm zfs inherit
.
.Pp
User-defined properties can also be set.
They become part of the dataset configuration and can be used to provide
additional information about the dataset or its contents.
To distinguish these custom properties from the ones supplied as part of ZFS, a colon (
.Ql :
) is used to create a custom namespace for the property.
.Bd -literal -offset indent
# zfs set custom:costcenter=1234  tank
# zfs get custom:costcenter  tank
NAME PROPERTY           VALUE SOURCE
tank custom:costcenter  1234  local
.Ed
.Pp
To remove a custom property, use
.Cm zfs inherit
with
.Ar -r
.
If the custom property is not defined in any of the parent datasets, it will be
removed completely (although the changes are still recorded in the pool's
history).
.Bd -literal -offset indent
# zfs inherit -r custom:costcenter  tank
# zfs get custom:costcenter  tank
NAME    PROPERTY           VALUE              SOURCE
tank    custom:costcenter  -                  -
# zfs get all tank | grep custom:costcenter
#
.Ed
.Ss GETTING AND SETTING SHARE PROPERTIES
.Pp
Two commonly used and useful dataset properties are the NFS and SMB share options.
Setting these define if and how ZFS datasets may be shared on the network.
At present, only setting sharing via NFS is supported on FreeBSD.
To get the current status of a share, enter:
.Bd -literal -offset indent
# zfs get sharenfs mypool/usr/home
NAME             PROPERTY  VALUE    SOURCE
mypool/usr/home  sharenfs  on       local
# zfs get sharesmb mypool/usr/home
NAME             PROPERTY  VALUE    SOURCE
mypool/usr/home  sharesmb  off      local
.Ed
.Pp
To enable sharing of a dataset, enter:
.Bd -literal -offset indent
# zfs set sharenfs=on mypool/usr/home
.Ed
.Pp
It is also possible to set additional options for sharing datasets through NFS, such as
.Ar -alldirs
,
.Ar -maproot
and
.Ar -network
.
To set additional options to a dataset shared through NFS, enter:
.Bd -literal -offset indent
# zfs set sharenfs="-alldirs,-maproot=root,-network=192.168.1.0/24" mypool/usr/home
.Ed
.Ss MANAGING SNAPSHOTS
.Pp
Snapshots are one of the most powerful features of ZFS.
A snapshot provides a read-only, point-in-time copy of the dataset.
With Copy-On-Write (COW), snapshots can be created quickly by preserving the older version of the data
on disk.
If no snapshots exist, space is reclaimed for future use when data is rewritten
or deleted.
Snapshots preserve disk space by recording only the differences between the
current dataset and a previous version.
Snapshots are allowed only on whole datasets, not on individual files or
directories.
When a snapshot is created from a dataset, everything contained in it is
duplicated.
This includes the file system properties, files, directories, permissions, and
so on.
Snapshots use no additional space when they are first created, only consuming
space as the blocks they reference are changed.
Recursive snapshots taken with
.Ar -r
create a snapshot with the same name on the dataset and all of its children,
providing a consistent moment-in-time snapshot of all of the file systems.
This can be important when an application has files on multiple datasets that
are related or dependent upon each other.
Without snapshots, a backup would have copies of the files from different
points in time.
.Pp
Snapshots in ZFS provide a variety of features that even other file systems with snapshot
functionality lack.
A typical example of snapshot use is to have a quick way of backing up the
current state of the file system when a risky action like a software
installation or a system upgrade is performed.
If the action fails, the snapshot can be rolled back and the system has the
same state as when the snapshot was created.
If the upgrade was successful, the snapshot can be deleted to free up space.
Without snapshots, a failed upgrade often requires a restore from backup, which
is tedious, time consuming, and may require downtime during which the system
cannot be used.
Snapshots can be rolled back quickly, even while the system is running in
normal operation, with little or no downtime.
The time savings are enormous with multi-terabyte storage systems and the time
required to copy the data from backup.
Snapshots are not a replacement for a complete backup of a pool, but can be
used as a quick and easy way to store a copy of the dataset at a specific point
in time.
.Ss CREATING SNAPSHOTS
.Pp
Snapshots are created with
.Cm zfs snapshot dataset@snapshotname
.
Adding
.Ar -r
creates a snapshot recursively, with the same name on all child datasets.
.Pp
Create a recursive snapshot of the entire pool:
.Bd -literal -offset indent
# zfs list -t all
NAME                                   USED  AVAIL  REFER  MOUNTPOINT
mypool                                 780M  93.2G   144K  none
mypool/ROOT                            777M  93.2G   144K  none
mypool/ROOT/default                    777M  93.2G   777M  /
mypool/tmp                             176K  93.2G   176K  /tmp
mypool/usr                             616K  93.2G   144K  /usr
mypool/usr/home                        184K  93.2G   184K  /usr/home
mypool/usr/ports                       144K  93.2G   144K  /usr/ports
mypool/usr/src                         144K  93.2G   144K  /usr/src
mypool/var                            1.29M  93.2G   616K  /var
mypool/var/crash                       148K  93.2G   148K  /var/crash
mypool/var/log                         178K  93.2G   178K  /var/log
mypool/var/mail                        144K  93.2G   144K  /var/mail
mypool/var/newname                    87.5K  93.2G  87.5K  /var/newname
mypool/var/newname@new_snapshot_name      0      -  87.5K  -
mypool/var/tmp                         152K  93.2G   152K  /var/tmp
# zfs snapshot -r mypool@my_recursive_snapshot
# zfs list -t snapshot
NAME                                        USED  AVAIL  REFER  MOUNTPOINT
mypool@my_recursive_snapshot                   0      -   144K  -
mypool/ROOT@my_recursive_snapshot              0      -   144K  -
mypool/ROOT/default@my_recursive_snapshot      0      -   777M  -
mypool/tmp@my_recursive_snapshot               0      -   176K  -
mypool/usr@my_recursive_snapshot               0      -   144K  -
mypool/usr/home@my_recursive_snapshot          0      -   184K  -
mypool/usr/ports@my_recursive_snapshot         0      -   144K  -
mypool/usr/src@my_recursive_snapshot           0      -   144K  -
mypool/var@my_recursive_snapshot               0      -   616K  -
mypool/var/crash@my_recursive_snapshot         0      -   148K  -
mypool/var/log@my_recursive_snapshot           0      -   178K  -
mypool/var/mail@my_recursive_snapshot          0      -   144K  -
mypool/var/newname@new_snapshot_name           0      -  87.5K  -
mypool/var/newname@my_recursive_snapshot       0      -  87.5K  -
mypool/var/tmp@my_recursive_snapshot           0      -   152K  -
.Ed
.Pp
Snapshots are not shown by a normal
.Cm zfs list
operation.
To list snapshots,
.Ar -t snapshot
is appended to
.Cm zfs list
.
.Ar -t all
displays both file systems and snapshots.
.Pp
Snapshots are not mounted directly, so path is shown in the
.Ql MOUNTPOINT
column.
There is no mention of available disk space in the
.Ql AVAIL
column, as snapshots cannot be written to after they are created.
Compare the snapshot to the original dataset from which it was created:
.Bd -literal -offset indent
# zfs list -rt all mypool/usr/home
NAME                                    USED  AVAIL  REFER  MOUNTPOINT
mypool/usr/home                         184K  93.2G   184K  /usr/home
mypool/usr/home@my_recursive_snapshot      0      -   184K  -
.Ed
.Pp
Displaying both the dataset and the snapshot together reveals how snapshots
work in COW fashion.
They save only the changes (delta) that were made and not the complete file system contents all over again.
This means that snapshots take little space when few changes are made.
Space usage can be made even more apparent by copying a file to the dataset,
then making a second snapshot:
.Bd -literal -offset indent
# cp /etc/passwd  /var/tmp
# zfs snapshot mypool/var/tmp@after_cp
# zfs list -rt all mypool/var/tmp
NAME                                   USED  AVAIL  REFER  MOUNTPOINT
mypool/var/tmp                         206K  93.2G   118K  /var/tmp
mypool/var/tmp@my_recursive_snapshot    88K      -   152K  -
mypool/var/tmp@after_cp                   0      -   118K  -
.Ed
.Pp
The second snapshot contains only the changes to the dataset after the copy
operation.
This yields enormous space savings.
Notice that the size of the snapshot mypool/var/tmp@my_recursive_snapshot also changed in the
.Ql USED
column to indicate the changes between itself and the snapshot taken
afterwards.
.Ss COMPARING SNAPSHOTS
.Pp
ZFS provides a built-in command to compare the differences in content between
two snapshots.
This is helpful when many snapshots were taken over time and the user wants to
see how the file system has changed over time.
For example,
.Cm zfs diff
lets a user find the latest snapshot that still contains a file that was
accidentally deleted.
Doing this for the two snapshots that were created in the previous section
yields this output:
.Bd -literal -offset indent
# zfs list -rt all mypool/var/tmp
NAME                                   USED  AVAIL  REFER  MOUNTPOINT
mypool/var/tmp                         206K  93.2G   118K  /var/tmp
mypool/var/tmp@my_recursive_snapshot    88K      -   152K  -
mypool/var/tmp@after_cp                   0      -   118K  -
# zfs diff mypool/var/tmp@my_recursive_snapshot
M       /var/tmp/
+       /var/tmp/passwd
.Ed
.Pp
The command lists the changes between the specified snapshot (in this case
.Ql mypool/var/tmp@my_recursive_snapshot
) and the live file system.
The first column shows the type of change:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
+
.Ta
The path or file was added.
.It
.Ta
-
.Ta
The path or file was deleted.
.It
.Ta
M
.Ta
The path or file was modified.
.It
.Ta
R
.Ta
The path or file was renamed.
.El
.Pp
Comparing the output with the table, it becomes clear that
.Pa passwd
was added after the snapshot
.Ql mypool/var/tmp@my_recursive_snapshot
was created.
This also resulted in a modification to the parent directory mounted at
.Ql /var/tmp
.
.Pp
Comparing two snapshots is helpful when using the ZFS replication feature to transfer a dataset to a different host for backup
purposes.
.Pp
Compare two snapshots by providing the full dataset name and snapshot name of
both datasets:
.Bd -literal -offset indent
# cp /var/tmp/passwd /var/tmp/passwd.copy
# zfs snapshot mypool/var/tmp@diff_snapshot
# zfs diff mypool/var/tmp@my_recursive_snapshot  mypool/var/tmp@diff_snapshot
M       /var/tmp/
+       /var/tmp/passwd
+       /var/tmp/passwd.copy
# zfs diff mypool/var/tmp@my_recursive_snapshot  mypool/var/tmp@after_cp
M       /var/tmp/
+       /var/tmp/passwd
.Ed
.Pp
A backup administrator can compare two snapshots received from the sending host
and determine the actual changes in the dataset.
See the Replication section for more information.
.Ss SNAPSHOT ROLLBACK
.Pp
When at least one snapshot is available, it can be rolled back to at any time.
Most of the time this is the case when the current state of the dataset is no
longer required and an older version is preferred.
Scenarios such as local development tests have gone wrong, botched system
updates hampering the system's overall functionality, or the requirement to
restore accidentally deleted files or directories are all too common
occurrences.
Luckily, rolling back a snapshot is just as easy as typing
.Cm zfs rollback snapshotname
.
Depending on how many changes are involved, the operation will finish in a
certain amount of time.
During that time, the dataset always remains in a consistent state, much like a
database that conforms to ACID principles is performing a rollback.
This is happening while the dataset is live and accessible without requiring a
downtime.
Once the snapshot has been rolled back, the dataset has the same state as it
had when the snapshot was originally taken.
All other data in that dataset that was not part of the snapshot is discarded.
Taking a snapshot of the current state of the dataset before rolling back to a
previous one is a good idea when some data is required later.
This way, the user can roll back and forth between snapshots without losing
data that is still valuable.
.Pp
In the first example, a snapshot is rolled back because of a careless
.Cm rm
operation that removes too much data than was intended.
.Bd -literal -offset indent
# zfs list -rt all mypool/var/tmp
NAME                                   USED  AVAIL  REFER  MOUNTPOINT
mypool/var/tmp                         262K  93.2G   120K  /var/tmp
mypool/var/tmp@my_recursive_snapshot    88K      -   152K  -
mypool/var/tmp@after_cp               53.5K      -   118K  -
mypool/var/tmp@diff_snapshot              0      -   120K  -
# ls /var/tmp
passwd          passwd.copy     vi.recover
# rm /var/tmp/passwd*
# ls /var/tmp
vi.recover
.Ed
.Pp
At this point, the user realized that too many files were deleted and wants
them back.
 ZFS provides an easy way to get them back using rollbacks, but only when snapshots
of important data are performed on a regular basis.
To get the files back and start over from the last snapshot, issue the command:
.Bd -literal -offset indent
# zfs rollback mypool/var/tmp@diff_snapshot
# ls /var/tmp
passwd          passwd.copy     vi.recover
.Ed
.Pp
The rollback operation restored the dataset to the state of the last snapshot.
It is also possible to roll back to a snapshot that was taken much earlier and
has other snapshots that were created after it.
When trying to do this, ZFS will issue this warning:
.Bd -literal -offset indent
# zfs list -rt snapshot mypool/var/tmp
AME                                   USED  AVAIL  REFER  MOUNTPOINT
mypool/var/tmp@my_recursive_snapshot    88K      -   152K  -
mypool/var/tmp@after_cp               53.5K      -   118K  -
mypool/var/tmp@diff_snapshot              0      -   120K  -
# zfs rollback mypool/var/tmp@my_recursive_snapshot
cannot rollback to 'mypool/var/tmp@my_recursive_snapshot': more recent snapshots exist
use '-r' to force deletion of the following snapshots:
mypool/var/tmp@after_cp
mypool/var/tmp@diff_snapshot
.Ed
.Pp
This warning means that snapshots exist between the current state of the
dataset and the snapshot to which the user wants to roll back.
To complete the rollback, these snapshots must be deleted.
 ZFS cannot track all the changes between different states of the dataset, because
snapshots are read-only.
 ZFS will not delete the affected snapshots unless the user specifies
.Ar -r
to indicate that this is the desired action.
If that is the intention, and the consequences of losing all intermediate
snapshots is understood, the command can be issued:
.Bd -literal -offset indent
# zfs rollback -r mypool/var/tmp@my_recursive_snapshot
# zfs list -rt snapshot mypool/var/tmp
NAME                                   USED  AVAIL  REFER  MOUNTPOINT
mypool/var/tmp@my_recursive_snapshot     8K      -   152K  -
# ls /var/tmp
vi.recover
.Ed
.Pp
The output from
.Cm zfs list -t snapshot
confirms that the intermediate snapshots were removed as a result of
.Cm zfs rollback -r
.
.Ss RESTORING INDIVIDUAL FILES FROM SNAPSHOTS
.Pp
Snapshots are mounted in a hidden directory under the parent dataset:
.Pa .zfs/snapshots/snapshotname
.
By default, these directories will not be displayed even when a standard
.Cm ls -a
is issued.
Although the directory is not displayed, it is there nevertheless and can be
accessed like any normal directory.
The property named
.Ql snapdir
controls whether these hidden directories show up in a directory listing.
Setting the property to
.Ql visible
allows them to appear in the output of
.Cm ls
and other commands that deal with directory contents.
.Bd -literal -offset indent
# zfs get snapdir mypool/var/tmp
NAME            PROPERTY  VALUE    SOURCE
mypool/var/tmp  snapdir   hidden   default
# ls -a /var/tmp
.               ..              passwd          vi.recover
# zfs set snapdir=visible mypool/var/tmp
# ls -a /var/tmp
.               ..              .zfs            passwd          vi.recover
.Ed
.Pp
Individual files can easily be restored to a previous state by copying them
from the snapshot back to the parent dataset.
The directory structure below
.Pa .zfs/snapshot
has a directory named exactly like the snapshots taken earlier to make it
easier to identify them.
In the next example, it is assumed that a file is to be restored from the
hidden
.Pa .zfs
directory by copying it from the snapshot that contained the latest version of
the file:
.Bd -literal -offset indent
# rm /var/tmp/passwd
# ls -a /var/tmp
.               ..              .zfs            vi.recover
# ls /var/tmp/.zfs/snapshot
after_cp                my_recursive_snapshot
# ls /var/tmp/.zfs/snapshot/after_cp
passwd          vi.recover
# cp /var/tmp/.zfs/snapshot/after_cp/passwd  /var/tmp
.Ed
.Pp
When
.Cm ls .zfs/snapshot
was issued, the
.Ql snapdir
property might have been set to hidden, but it would still be possible to list
the contents of that directory.
It is up to the administrator to decide whether these directories will be
displayed.
It is possible to display these for certain datasets and prevent it for others.
Copying files or directories from this hidden
.Pa .zfs/snapshot
is simple enough.
Trying it the other way around results in this error:
.Bd -literal -offset indent
# cp /etc/rc.conf /var/tmp/.zfs/snapshot/after_cp/
cp: /var/tmp/.zfs/snapshot/after_cp/rc.conf: Read-only file system
.Ed
.Pp
The error reminds the user that snapshots are read-only and cannot be changed
after creation.
Files cannot be copied into or removed from snapshot directories because that
would change the state of the dataset they represent.
.Pp
Snapshots consume space based on how much the parent file system has changed
since the time of the snapshot.
The
.Ql written
property of a snapshot tracks how much space is being used by the snapshot.
.Pp
Snapshots are destroyed and the space reclaimed with
.Cm zfs destroy dataset@snapshot
.
Adding
.Ar -r
recursively removes all snapshots with the same name under the parent dataset.
Adding
.Ar -n -v
to the command displays a list of the snapshots that would be deleted and an
estimate of how much space would be reclaimed without performing the actual
destroy operation.
.Ss MANAGING CLONES
.Pp
A clone is a copy of a snapshot that is treated more like a regular dataset.
Unlike a snapshot, a clone is not read only, is mounted, and can have its own
properties.
Once a clone has been created using
.Cm zfs clone
, the snapshot it was created from cannot be destroyed.
The child/parent relationship between the clone and the snapshot can be
reversed using
.Cm zfs promote
.
After a clone has been promoted, the snapshot becomes a child of the clone,
rather than of the original parent dataset.
This will change how the space is accounted, but not actually change the amount
of space consumed.
The clone can be mounted at any point within the ZFS file system hierarchy, not just below the original location of the snapshot.
.Pp
To demonstrate the clone feature, this example dataset is used:
.Bd -literal -offset indent
# zfs list -rt all camino/home/joe
NAME                    USED  AVAIL  REFER  MOUNTPOINT
camino/home/joe         108K   1.3G    87K  /usr/home/joe
camino/home/joe@plans    21K      -  85.5K  -
camino/home/joe@backup    0K      -    87K  -
.Ed
.Pp
A typical use for clones is to experiment with a specific dataset while keeping
the snapshot around to fall back to in case something goes wrong.
Since snapshots cannot be changed, a read/write clone of a snapshot is created.
After the desired result is achieved in the clone, the clone can be promoted to
a dataset and the old file system removed.
This is not strictly necessary, as the clone and dataset can coexist without
problems.
.Bd -literal -offset indent
# zfs clone camino/home/joe@backup  camino/home/joenew
# ls /usr/home/joe*
/usr/home/joe:
backup.txz     plans.txt

/usr/home/joenew:
backup.txz     plans.txt
# df -h /usr/home
Filesystem          Size    Used   Avail Capacity  Mounted on
usr/home/joe        1.3G     31k    1.3G     0%    /usr/home/joe
usr/home/joenew     1.3G     31k    1.3G     0%    /usr/home/joenew
.Ed
.Pp
After a clone is created it is an exact copy of the state the dataset was in
when the snapshot was taken.
The clone can now be changed independently from its originating dataset.
The only connection between the two is the snapshot.
 ZFS records this connection in the property
.Ql origin
.
Once the dependency between the snapshot and the clone has been removed by
promoting the clone using
.Cm zfs promote
, the
.Ql origin
of the clone is removed as it is now an independent dataset.
This example demonstrates it:
.Bd -literal -offset indent
# zfs get origin camino/home/joenew
NAME                  PROPERTY  VALUE                     SOURCE
camino/home/joenew    origin    camino/home/joe@backup    -
# zfs promote camino/home/joenew
# zfs get origin camino/home/joenew
NAME                  PROPERTY  VALUE   SOURCE
camino/home/joenew    origin    -       -
.Ed
.Pp
After making some changes like copying
.Pa loader.conf
to the promoted clone, for example, the old directory becomes obsolete in this
case.
Instead, the promoted clone can replace it.
This can be achieved by two consecutive commands:
.Cm zfs destroy
on the old dataset and
.Cm zfs rename
on the clone to name it like the old dataset (it could also get an entirely
different name).
.Bd -literal -offset indent
# cp /boot/defaults/loader.conf  /usr/home/joenew
# zfs destroy -f camino/home/joe
# zfs rename camino/home/joenew  camino/home/joe
# ls /usr/home/joe
backup.txz     loader.conf     plans.txt
# df -h /usr/home
Filesystem          Size    Used   Avail Capacity  Mounted on
usr/home/joe        1.3G    128k    1.3G     0%    /usr/home/joe
.Ed
.Pp
The cloned snapshot is now handled like an ordinary dataset.
It contains all the data from the original snapshot plus the files that were
added to it like
.Pa loader.conf
.
Clones can be used in different scenarios to provide useful features to ZFS
users.
For example, jails could be provided as snapshots containing different sets of
installed applications.
Users can clone these snapshots and add their own applications as they see fit.
Once they are satisfied with the changes, the clones can be promoted to full
datasets and provided to end users to work with like they would with a real
dataset.
This saves time and administrative overhead when providing these jails.
.Ss REPLICATION
.Pp
Keeping data on a single pool in one location exposes it to risks like theft
and natural or human disasters.
Making regular backups of the entire pool is vital.
 ZFS provides a built-in serialization feature that can send a stream representation
of the data to standard output.
Using this technique, it is possible to not only store the data on another pool
connected to the local system, but also to send it over a network to another
system.
Snapshots are the basis for this replication (see the section on ZFS snapshots).
The commands used for replicating data are
.Cm zfs send
and
.Cm zfs receive
.
.Pp
These examples demonstrate ZFS replication with these two pools:
.Bd -literal -offset indent
# zpool list
NAME    SIZE  ALLOC   FREE    CAP  DEDUP  HEALTH  ALTROOT
backup  960M    77K   896M     0%  1.00x  ONLINE  -
mypool  984M  43.7M   940M     4%  1.00x  ONLINE  -
.Ed
.Pp
The pool named mypool is the primary pool where data is written to and read from on a regular basis.
A second pool, backup is used as a standby in case the primary pool becomes unavailable.
Note that this fail-over is not done automatically by ZFS, but must be manually done by a system administrator when needed.
A snapshot is used to provide a consistent version of the file system to be
replicated.
Once a snapshot of mypool has been created, it can be copied to the backup pool.
Only snapshots can be replicated.
Changes made since the most recent snapshot will not be included.
.Bd -literal -offset indent
# zfs snapshot mypool@backup1
# zfs list -t snapshot
NAME                    USED  AVAIL  REFER  MOUNTPOINT
mypool@backup1             0      -  43.6M  -
.Ed
.Pp
Now that a snapshot exists,
.Cm zfs send
can be used to create a stream representing the contents of the snapshot.
This stream can be stored as a file or received by another pool.
The stream is written to standard output, but must be redirected to a file or
pipe or an error is produced:
.Bd -literal -offset indent
# zfs send mypool@backup1
Error: Stream can not be written to a terminal.
You must redirect standard output.
.Ed
.Pp
To back up a dataset with
.Cm zfs send
, redirect to a file located on the mounted backup pool.
Ensure that the pool has enough free space to accommodate the size of the
snapshot being sent, which means all of the data contained in the snapshot, not
just the changes from the previous snapshot.
.Bd -literal -offset indent
# zfs send mypool@backup1 > /backup/backup1
# zpool list
NAME    SIZE  ALLOC   FREE    CAP  DEDUP  HEALTH  ALTROOT
backup  960M  63.7M   896M     6%  1.00x  ONLINE  -
mypool  984M  43.7M   940M     4%  1.00x  ONLINE  -
.Ed
.Pp
The
.Cm zfs send
transferred all the data in the snapshot called backup1 to the pool named backup.
Creating and sending these snapshots can be done automatically with a
.Xr cron 8 job.
.Pp
Instead of storing the backups as archive files, ZFS can receive them as a live file system, allowing the backed up data to be
accessed directly.
To get to the actual data contained in those streams,
.Cm zfs receive
is used to transform the streams back into files and directories.
The example below combines
.Cm zfs send
and
.Cm zfs receive
using a pipe to copy the data from one pool to another.
The data can be used directly on the receiving pool after the transfer is
complete.
A dataset can only be replicated to an empty dataset.
.Bd -literal -offset indent
# zfs snapshot mypool@replica1
# zfs send -v mypool@replica1 | zfs receive backup/mypool
send from @ to mypool@replica1 estimated size is 50.1M
total estimated size is 50.1M
TIME        SENT   SNAPSHOT

# zpool list
NAME    SIZE  ALLOC   FREE    CAP  DEDUP  HEALTH  ALTROOT
backup  960M  63.7M   896M     6%  1.00x  ONLINE  -
mypool  984M  43.7M   940M     4%  1.00x  ONLINE  -
.Ed
.Ss INCREMENTAL BACKUPS
.Pp
.Cm zfs send
can also determine the difference between two snapshots and send only the
differences between the two.
This saves disk space and transfer time.
For example:
.Bd -literal -offset indent
# zfs snapshot mypool@replica2
# zfs list -t snapshot
NAME                    USED  AVAIL  REFER  MOUNTPOINT
mypool@replica1         5.72M      -  43.6M  -
mypool@replica2             0      -  44.1M  -
# zpool list
NAME    SIZE  ALLOC   FREE    CAP  DEDUP  HEALTH  ALTROOT
backup  960M  61.7M   898M     6%  1.00x  ONLINE  -
mypool  960M  50.2M   910M     5%  1.00x  ONLINE  -
.Ed
.Pp
A second snapshot called replica2 was created.
This second snapshot contains only the changes that were made to the file
system between now and the previous snapshot, replica1.
Using
.Cm zfs send -i
and indicating the pair of snapshots generates an incremental replica stream
containing only the data that has changed.
This can only succeed if the initial snapshot already exists on the receiving
side.
.Bd -literal -offset indent
# zfs send -v -i mypool@replica1  mypool@replica2 | zfs receive /backup/mypool
send from @replica1 to mypool@replica2 estimated size is 5.02M
total estimated size is 5.02M
TIME        SENT   SNAPSHOT

# zpool list
NAME    SIZE  ALLOC   FREE    CAP  DEDUP  HEALTH  ALTROOT
backup  960M  80.8M   879M     8%  1.00x  ONLINE  -
mypool  960M  50.2M   910M     5%  1.00x  ONLINE  -

# zfs list
NAME                         USED  AVAIL  REFER  MOUNTPOINT
backup                      55.4M   240G   152K  /backup
backup/mypool               55.3M   240G  55.2M  /backup/mypool
mypool                      55.6M  11.6G  55.0M  /mypool

# zfs list -t snapshot
NAME                                         USED  AVAIL  REFER  MOUNTPOINT
backup/mypool@replica1                       104K      -  50.2M  -
backup/mypool@replica2                          0      -  55.2M  -
mypool@replica1                             29.9K      -  50.0M  -
mypool@replica2                                 0      -  55.0M  -
.Ed
.Pp
The incremental stream was successfully transferred.
Only the data that had changed was replicated, rather than the entirety of replica1.
Only the differences were sent, which took much less time to transfer and saved
disk space by not copying the complete pool each time.
This is useful when having to rely on slow networks or when costs per
transferred byte must be considered.
.Pp
A new file system, backup/mypool, is available with all of the files and data from the pool mypool.
If
.Ar -P
is specified, the properties of the dataset will be copied, including
compression settings, quotas, and mount points.
When
.Ar -R
is specified, all child datasets of the indicated dataset will be copied, along
with all of their properties.
Sending and receiving can be automated so that regular backups are created on
the second pool.
.Ss SENDING ENCRYPTED BACKUPS OVER SSH
.Pp
Sending streams over the network is a good way to keep a remote backup, but it
does come with a drawback.
Data sent over the network link is not encrypted, allowing anyone to intercept
and transform the streams back into data without the knowledge of the sending
user.
This is undesirable, especially when sending the streams over the internet to a
remote host.
 SSH can be used to securely encrypt data send over a network connection.
Since ZFS only requires the stream to be redirected from standard output, it is
relatively easy to pipe it through SSH.
To keep the contents of the file system encrypted in transit and on the remote
system, consider using PEFS.
.Pp
A few settings and security precautions must be completed first.
Only the necessary steps required for the
.Cm zfs send
operation are shown here.
For more information on SSH, see .
.Pp
This configuration is required:
.Bl -bullet -offset -compact
.It
Passwordless SSH access between sending and receiving host using SSH keys
.It
Normally, the privileges of the
.Ql root
user are needed to send and receive streams.
This requires logging in to the receiving system as
.Ql root
.
However, logging in as
.Ql root
is disabled by default for security reasons.
The ZFS Delegation system can be used to allow a non-
.Ql root
user on each system to perform the respective send and receive operations.
.It
On the sending system:
.Bd -literal -offset indent
# zfs allow -u someuser send,snapshot mypool
.Ed
.It
To mount the pool, the unprivileged user must own the directory, and regular
users must be allowed to mount file systems.
On the receiving system:
.Bd -literal -offset indent
# sysctl vfs.usermount=1
vfs.usermount: 0 -> 1
# sysrc -f /etc/sysctl.conf vfs.usermount=1
# zfs create recvpool/backup
# zfs allow -u someuser create,mount,receive recvpool/backup
# chown someuser  /recvpool/backup
.Ed
.El
.Pp
The unprivileged user now has the ability to receive and mount datasets, and
the home dataset can be replicated to the remote system:
.Bd -literal -offset indent
% zfs snapshot -r mypool/home@monday
% zfs send -R mypool/home@monday | ssh someuser@backuphost zfs recv -dvu recvpool/backup
.Ed
.Pp
A recursive snapshot called monday is made of the file system dataset home that resides on the pool mypool.
Then it is sent with
.Cm zfs send -R
to include the dataset, all child datasets, snapshots, clones, and settings in
the stream.
The output is piped to the waiting
.Cm zfs receive
on the remote host backuphost through SSH.
Using a fully qualified domain name or IP address is recommended.
The receiving machine writes the data to the backup dataset on the recvpool pool.
Adding
.Ar -d
to
.Cm zfs recv
overwrites the name of the pool on the receiving side with the name of the
snapshot.
.Ar -u
causes the file systems to not be mounted on the receiving side.
When
.Ar -v
is included, more detail about the transfer is shown, including elapsed time
and the amount of data transferred.
.Ss DATASET, USER, AND GROUP QUOTAS
.Pp
Dataset quotas are used to restrict the amount of space that can be consumed by a particular
dataset.
 Reference Quotas work in very much the same way, but only count the space used by the dataset
itself, excluding snapshots and child datasets.
Similarly, user and group quotas can be used to prevent users or groups from using all of the space in
the pool or dataset.
.Pp
To enforce a dataset quota of 10 GB for
.Pa storage/home/bob
:
.Bd -literal -offset indent
# zfs set quota=10G storage/home/bob
.Ed
.Pp
To enforce a reference quota of 10 GB for
.Pa storage/home/bob
:
.Bd -literal -offset indent
# zfs set refquota=10G storage/home/bob
.Ed
.Pp
To remove a quota of 10 GB for
.Pa storage/home/bob
:
.Bd -literal -offset indent
# zfs set quota=none storage/home/bob
.Ed
.Pp
The general format is
.Ql userquota@user=size
, and the user's name must be in one of these formats:
.Bl -bullet -offset -compact
.It
POSIX compatible name such as joe.
.It
POSIX numeric ID such as 789.
.It
SID name such as joe.bloggs@example.com.
.It
SID numeric ID such as S-1-123-456-789.
.El
.Pp
For example, to enforce a user quota of 50 GB for the user named joe:
.Bd -literal -offset indent
# zfs set userquota@joe=50G
.Ed
.Pp
To remove any quota:
.Bd -literal -offset indent
# zfs set userquota@joe=none
.Ed
.Pp
User quota properties are not displayed by
.Cm zfs get all
.
Non-
.Ql root
users can only see their own quotas unless they have been granted the
.Ql userquota
privilege.
Users with this privilege are able to view and set everyone's quota.
.Pp
The general format for setting a group quota is:
.Ql groupquota@group=size
.
.Pp
To set the quota for the group firstgroup to 50 GB, use:
.Bd -literal -offset indent
# zfs set groupquota@firstgroup=50G
.Ed
.Pp
To remove the quota for the group firstgroup, or to make sure that one is not set, instead use:
.Bd -literal -offset indent
# zfs set groupquota@firstgroup=none
.Ed
.Pp
As with the user quota property, non-
.Ql root
users can only see the quotas associated with the groups to which they belong.
However,
.Ql root
or a user with the
.Ql groupquota
privilege can view and set all quotas for all groups.
.Pp
To display the amount of space used by each user on a file system or snapshot
along with any quotas, use
.Cm zfs userspace
.
For group information, use
.Cm zfs groupspace
.
For more information about supported options or how to display only specific
options, refer to
.Xr zfs 1 .
.Pp
Users with sufficient privileges, and
.Ql root
, can list the quota for
.Pa storage/home/bob
using:
.Bd -literal -offset indent
# zfs get quota storage/home/bob
.Ed
.Ss RESERVATIONS
.Pp
Reservations guarantee a minimum amount of space will always be available on a dataset.
The reserved space will not be available to any other dataset.
This feature can be especially useful to ensure that free space is available
for an important dataset or log files.
.Pp
The general format of the
.Ql reservation
property is
.Ql reservation=size
, so to set a reservation of 10 GB on
.Pa storage/home/bob
, use:
.Bd -literal -offset indent
# zfs set reservation=10G storage/home/bob
.Ed
.Pp
To clear any reservation:
.Bd -literal -offset indent
# zfs set reservation=none storage/home/bob
.Ed
.Pp
The same principle can be applied to the
.Ql refreservation
property for setting a Reference Reservation, with the general format
.Ql refreservation=size
.
.Pp
This command shows any reservations or refreservations that exist on
.Pa storage/home/bob
:
.Bd -literal -offset indent
# zfs get reservation storage/home/bob
# zfs get refreservation storage/home/bob
.Ed
.Ss COMPRESSION
.Pp
ZFS provides transparent compression.
Compressing data at the block level as it is written not only saves space, but
can also increase disk throughput.
If data is compressed by 25%, but the compressed data is written to the disk at
the same rate as the uncompressed version, resulting in an effective write
speed of 125%.
Compression can also be a great alternative to Deduplication because it does not require additional memory.
.Pp
ZFS offers several different compression algorithms, each with different
trade-offs.
With the introduction of LZ4 compression in ZFS v5000, it is possible to enable compression for the entire pool without the
large performance trade-off of other algorithms.
The biggest advantage to LZ4 is the early abort feature.
If LZ4 does not achieve at least 12.5% compression in the first part of the data, the
block is written uncompressed to avoid wasting CPU cycles trying to compress
data that is either already compressed or uncompressible.
For details about the different compression algorithms available in ZFS, see the Compression entry in the terminology section.
.Pp
The administrator can monitor the effectiveness of compression using a number
of dataset properties.
.Bd -literal -offset indent
# zfs get used,compressratio,compression,logicalused mypool/compressed_dataset
NAME        PROPERTY          VALUE     SOURCE
mypool/compressed_dataset  used              449G      -
mypool/compressed_dataset  compressratio     1.11x     -
mypool/compressed_dataset  compression       lz4       local
mypool/compressed_dataset  logicalused       496G      -
.Ed
.Pp
The dataset is currently using 449 GB of space (the used property).
Without compression, it would have taken 496 GB of space (the
.Ql logicalused
property).
This results in the 1.11:1 compression ratio.
.Pp
Compression can have an unexpected side effect when combined with User Quotas.
User quotas restrict how much space a user can consume on a dataset, but the
measurements are based on how much space is used after compression.
So if a user has a quota of 10 GB, and writes 10 GB of compressible data, they
will still be able to store additional data.
If they later update a file, say a database, with more or less compressible
data, the amount of space available to them will change.
This can result in the odd situation where a user did not increase the actual
amount of data (the
.Ql logicalused
property), but the change in compression caused them to reach their quota
limit.
.Pp
Compression can have a similar unexpected interaction with backups.
Quotas are often used to limit how much data can be stored to ensure there is
sufficient backup space available.
However since quotas do not consider compression, more data may be written than
would fit with uncompressed backups.
.Ss DEDUPLICATION
.Pp
When enabled, deduplication uses the checksum of each block to detect duplicate blocks.
When a new block is a duplicate of an existing block, ZFS writes an additional reference to the existing data instead of the whole
duplicate block.
Tremendous space savings are possible if the data contains many duplicated
files or repeated information.
Be warned: deduplication requires an extremely large amount of memory, and most
of the space savings can be had without the extra cost by enabling compression
instead.
.Pp
To activate deduplication, set the
.Ql dedup
property on the target pool:
.Bd -literal -offset indent
# zfs set dedup=on pool
.Ed
.Pp
Only new data being written to the pool will be deduplicated.
Data that has already been written to the pool will not be deduplicated merely
by activating this option.
A pool with a freshly activated deduplication property will look like this
example:
.Bd -literal -offset indent
# zpool list
NAME  SIZE ALLOC  FREE CAP DEDUP HEALTH ALTROOT
pool 2.84G 2.19M 2.83G  0% 1.00x ONLINE -
.Ed
.Pp
The
.Ql DEDUP
column shows the actual rate of deduplication for the pool.
A value of
.Ql 1.00x
shows that data has not been deduplicated yet.
In the next example, the ports tree is copied three times into different
directories on the deduplicated pool created above.
.Bd -literal -offset indent
# for d in dir1 dir2 dir3; do
> mkdir $d && cp -R /usr/ports $d &
> done
.Ed
.Pp
Redundant data is detected and deduplicated:
.Bd -literal -offset indent
# zpool list
NAME SIZE  ALLOC FREE CAP DEDUP HEALTH ALTROOT
pool 2.84G 20.9M 2.82G 0% 3.00x ONLINE -
.Ed
.Pp
The
.Ql DEDUP
column shows a factor of
.Ql 3.00x
.
Multiple copies of the ports tree data was detected and deduplicated, using
only a third of the space.
The potential for space savings can be enormous, but comes at the cost of
having enough memory to keep track of the deduplicated blocks.
.Pp
Deduplication is not always beneficial, especially when the data on a pool is
not redundant.
 ZFS can show potential space savings by simulating deduplication on an existing
pool:
.Bd -literal -offset indent
# zdb -S pool
Simulated DDT histogram:

bucket              allocated                       referenced
______   ______________________________   ______________________________
refcnt   blocks   LSIZE   PSIZE   DSIZE   blocks   LSIZE   PSIZE   DSIZE
------   ------   -----   -----   -----   ------   -----   -----   -----
     1    2.58M    289G    264G    264G    2.58M    289G    264G    264G
     2     206K   12.6G   10.4G   10.4G     430K   26.4G   21.6G   21.6G
     4    37.6K    692M    276M    276M     170K   3.04G   1.26G   1.26G
     8    2.18K   45.2M   19.4M   19.4M    20.0K    425M    176M    176M
    16      174   2.83M   1.20M   1.20M    3.33K   48.4M   20.4M   20.4M
    32       40   2.17M    222K    222K    1.70K   97.2M   9.91M   9.91M
    64        9     56K   10.5K   10.5K      865   4.96M    948K    948K
   128        2   9.50K      2K      2K      419   2.11M    438K    438K
   256        5   61.5K     12K     12K    1.90K   23.0M   4.47M   4.47M
    1K        2      1K      1K      1K    2.98K   1.49M   1.49M   1.49M
 Total    2.82M    303G    275G    275G    3.20M    319G    287G    287G

dedup = 1.05, compress = 1.11, copies = 1.00, dedup * compress / copies = 1.16
.Ed
.Pp
After
.Cm zdb -S
finishes analyzing the pool, it shows the space reduction ratio that would be
achieved by activating deduplication.
In this case,
.Ql 1.16
is a very poor space saving ratio that is mostly provided by compression.
Activating deduplication on this pool would not save any significant amount of
space, and is not worth the amount of memory required to enable deduplication.
Using the formula ratio = dedup * compress / copies, system administrators can plan the storage allocation, deciding whether the
workload will contain enough duplicate blocks to justify the memory
requirements.
If the data is reasonably compressible, the space savings may be very good.
Enabling compression first is recommended, and compression can also provide
greatly increased performance.
Only enable deduplication in cases where the additional savings will be
considerable and there is sufficient memory for the DDT.
.Ss ZFS AND JAILS
.Pp
.Cm zfs jail
and the corresponding
.Ql jailed
property are used to delegate a ZFS dataset to a Jail.
.Cm zfs jail jailid
attaches a dataset to the specified jail, and
.Cm zfs unjail
detaches it.
For the dataset to be controlled from within a jail, the
.Ql jailed
property must be set.
Once a dataset is jailed, it can no longer be mounted on the host because it
may have mount points that would compromise the security of the host.
.Ss DELEGATED ADMINISTRATION
.Pp
A comprehensive permission delegation system allows unprivileged users to
perform ZFS administration functions.
For example, if each user's home directory is a dataset, users can be given
permission to create and destroy snapshots of their home directories.
A backup user can be given permission to use replication features.
A usage statistics script can be allowed to run with access only to the space
utilization data for all users.
It is even possible to delegate the ability to delegate permissions.
Permission delegation is possible for each subcommand and most properties.
.Ss DELEGATING DATASET CREATION
.Pp
.Cm zfs allow someuser create mydataset
gives the specified user permission to create child datasets under the selected
parent dataset.
There is a caveat: creating a new dataset involves mounting it.
That requires setting the FreeBSD
.Ql vfs.usermount
.Xr sysctl 8 to
.Ql 1
to allow non-root users to mount a file system.
There is another restriction aimed at preventing abuse: non-
.Ql root
users must own the mountpoint where the file system is to be mounted.
.Ss DELEGATING PERMISSION DELEGATION
.Pp
.Cm zfs allow someuser allow mydataset
gives the specified user the ability to assign any permission they have on the
target dataset, or its children, to other users.
If a user has the
.Ql snapshot
permission and the
.Ql allow
permission, that user can then grant the
.Ql snapshot
permission to other users.
.Ss ADVANCED TOPICS
.Ss TUNING
.Pp
There are a number of tunables that can be adjusted to make ZFS perform best for different workloads.
.Bl -bullet -offset -compact
.It
.Ev vfs.zfs.arc_max
- Maximum size of the ARC.
The default is all RAM less 1 GB, or one half of RAM, whichever is more.
However, a lower value should be used if the system will be running any other
daemons or processes that may require memory.
This value can be adjusted at runtime with
.Xr sysctl 8 and can be set in
.Pa /boot/loader.conf
or
.Pa /etc/sysctl.conf
.
.It
.Ev vfs.zfs.arc_meta_limit
- Limit the portion of the ARC that can be used to store metadata.
The default is one fourth of
.Ev vfs.zfs.arc_max
.
Increasing this value will improve performance if the workload involves
operations on a large number of files and directories, or frequent metadata
operations, at the cost of less file data fitting in the ARC.
This value can be adjusted at runtime with
.Xr sysctl 8 and can be set in
.Pa /boot/loader.conf
or
.Pa /etc/sysctl.conf
.
.It
.Ev vfs.zfs.arc_min
- Minimum size of the ARC.
The default is one half of
.Ev vfs.zfs.arc_meta_limit
.
Adjust this value to prevent other applications from pressuring out the entire ARC.
This value can be adjusted at runtime with
.Xr sysctl 8 and can be set in
.Pa /boot/loader.conf
or
.Pa /etc/sysctl.conf
.
.It
.Ev vfs.zfs.vdev.cache.size
- A preallocated amount of memory reserved as a cache for each device in the
pool.
The total amount of memory used will be this value multiplied by the number of
devices.
This value can only be adjusted at boot time, and is set in
.Pa /boot/loader.conf
.
.It
.Ev vfs.zfs.min_auto_ashift
- Minimum
.Ev ashift
(sector size) that will be used automatically at pool creation time.
The value is a power of two.
The default value of
.Ql 9
represents
.Ql 2^9 = 512
, a sector size of 512 bytes.
To avoid write amplification and get the best performance, set this value to the largest sector size used by
a device in the pool.
Many drives have 4 KB sectors.
Using the default
.Ev ashift
of
.Ql 9
with these drives results in write amplification on these devices.
Data that could be contained in a single 4 KB write must instead be written in
eight 512-byte writes.
 ZFS tries to read the native sector size from all devices when creating a pool, but
many drives with 4 KB sectors report that their sectors are 512 bytes for
compatibility.
Setting
.Ev vfs.zfs.min_auto_ashift
to
.Ql 12
(
.Ql 2^12 = 4096
) before creating a pool forces ZFS to use 4 KB blocks for best performance on these drives.
Forcing 4 KB blocks is also useful on pools where disk upgrades are planned.
Future disks are likely to use 4 KB sectors, and
.Ev ashift
values cannot be changed after a pool is created.
In some specific cases, the smaller 512-byte block size might be preferable.
When used with 512-byte disks for databases, or as storage for virtual
machines, less data is transferred during small random reads.
This can provide better performance, especially when using a smaller ZFS record size.
.It
.Ev vfs.zfs.prefetch_disable
- Disable prefetch.
A value of
.Ql 0
is enabled and
.Ql 1
is disabled.
The default is
.Ql 0
, unless the system has less than 4 GB of RAM.
Prefetch works by reading larger blocks than were requested into the ARC in hopes that the data will be needed soon.
If the workload has a large number of random reads, disabling prefetch may
actually improve performance by reducing unnecessary reads.
This value can be adjusted at any time with
.Xr sysctl 8 .
.It
.Ev vfs.zfs.vdev.trim_on_init
- Control whether new devices added to the pool have the
.Ql TRIM
command run on them.
This ensures the best performance and longevity for SSDs, but takes extra time.
If the device has already been secure erased, disabling this setting will make
the addition of the new device faster.
This value can be adjusted at any time with
.Xr sysctl 8 .
.It
.Ev vfs.zfs.vdev.max_pending
- Limit the number of pending I/O requests per device.
A higher value will keep the device command queue full and may give higher
throughput.
A lower value will reduce latency.
This value can be adjusted at any time with
.Xr sysctl 8 .
.It
.Ev vfs.zfs.top_maxinflight
- Maxmimum number of outstanding I/Os per top-level vdev.
Limits the depth of the command queue to prevent high latency.
The limit is per top-level vdev, meaning the limit applies to each mirror, RAID-Z, or other vdev independently.
This value can be adjusted at any time with
.Xr sysctl 8 .
.It
.Ev vfs.zfs.l2arc_write_max
- Limit the amount of data written to the L2ARC per second.
This tunable is designed to extend the longevity of SSDs by limiting the amount of data written to the device.
This value can be adjusted at any time with
.Xr sysctl 8 .
.It
.Ev vfs.zfs.l2arc_write_boost
- The value of this tunable is added to
.Ev vfs.zfs.l2arc_write_max
and increases the write speed to the SSD until the first block is evicted from the L2ARC.
This
.Do
Turbo Warmup Phase
.Dc
is designed to reduce the performance loss from an empty L2ARC after a reboot.
This value can be adjusted at any time with
.Xr sysctl 8 .
.It
.Ev vfs.zfs.scrub_delay
- Number of ticks to delay between each I/O during a
.Cm scrub
.
To ensure that a
.Cm scrub
does not interfere with the normal operation of the pool, if any other I/O is happening the
.Cm scrub
will delay between each command.
This value controls the limit on the total IOPS (I/Os Per Second) generated by the
.Cm scrub
.
The granularity of the setting is determined by the value of
.Ev kern.hz
which defaults to 1000 ticks per second.
This setting may be changed, resulting in a different effective IOPS limit.
The default value is
.Ql 4
, resulting in a limit of: 1000 ticks/sec / 4 = 250IOPS.
Using a value of 20 would give a limit of: 1000 ticks/sec / 20 = 50IOPS.
The speed of
.Cm scrub
is only limited when there has been recent activity on the pool, as determined
by
.Ev vfs.zfs.scan_idle
.
This value can be adjusted at any time with
.Xr sysctl 8 .
.It
.Ev vfs.zfs.resilver_delay
- Number of milliseconds of delay inserted between each I/O during a resilver.
To ensure that a resilver does not interfere with the normal operation of the
pool, if any other I/O is happening the resilver will delay between each
command.
This value controls the limit of total IOPS (I/Os Per Second) generated by the resilver.
The granularity of the setting is determined by the value of
.Ev kern.hz
which defaults to 1000 ticks per second.
This setting may be changed, resulting in a different effective IOPS limit.
The default value is 2, resulting in a limit of: 1000 ticks/sec / 2 = 500IOPS.
Returning the pool to an Online state may be more important if another device failing could Fault the pool, causing data loss.
A value of 0 will give the resilver operation the same priority as other
operations, speeding the healing process.
The speed of resilver is only limited when there has been other recent activity
on the pool, as determined by
.Ev vfs.zfs.scan_idle
.
This value can be adjusted at any time with
.Xr sysctl 8 .
.It
.Ev vfs.zfs.scan_idle
- Number of milliseconds since the last operation before the pool is considered
idle.
When the pool is idle the rate limiting for
.Cm scrub
and resilver are disabled.
This value can be adjusted at any time with
.Xr sysctl 8 .
.It
.Ev vfs.zfs.txg.timeout
- Maximum number of seconds between transaction groups.
The current transaction group will be written to the pool and a fresh
transaction group started if this amount of time has elapsed since the previous
transaction group.
A transaction group my be triggered earlier if enough data is written.
The default value is 5 seconds.
A larger value may improve read performance by delaying asynchronous writes,
but this may cause uneven performance when the transaction group is written.
This value can be adjusted at any time with
.Xr sysctl 8 .
.El
.Ss ZFS ON I386
.Pp
Some of the features provided by ZFS are memory intensive, and may require tuning for maximum efficiency on systems
with limited RAM.
.Ss MEMORY
.Pp
As a bare minimum, the total system memory should be at least one gigabyte.
The amount of recommended RAM depends upon the size of the pool and which ZFS features are used.
A general rule of thumb is 1 GB of RAM for every 1 TB of storage.
If the deduplication feature is used, a general rule of thumb is 5 GB of RAM
per TB of storage to be deduplicated.
While some users successfully use ZFS with less RAM, systems under heavy load may panic due to memory exhaustion.
Further tuning may be required for systems with less than the recommended RAM
requirements.
.Ss KERNEL CONFIGURATION
.Pp
Due to the address space limitations of the i386 platform, ZFS users on the i386 architecture must add this option to a custom kernel configuration file,
rebuild the kernel, and reboot:
.Bd -literal -offset indent
options        KVA_PAGES=512
.Ed
.Pp
This expands the kernel address space, allowing the
.Ev vm.kvm_size
tunable to be pushed beyond the currently imposed limit of 1 GB, or the limit
of 2 GB for PAE.
To find the most suitable value for this option, divide the desired address
space in megabytes by four.
In this example, it is
.Ql 512
for 2 GB.
.Ss LOADER TUNABLES
.Pp
The
.Pa kmem
address space can be increased on all FreeBSD architectures.
On a test system with 1 GB of physical memory, success was achieved with these
options added to
.Pa /boot/loader.conf
, and the system restarted:
.Bd -literal -offset indent
vm.kmem_size="330M"
vm.kmem_size_max="330M"
vfs.zfs.arc_max="40M"
vfs.zfs.vdev.cache.size="5M"
.Ed
.Pp
For a more detailed list of recommendations for ZFS-related tuning, see https://wiki.freebsd.org/ZFSTuningGuide.
.Ss ADDITIONAL RESOURCES
.Bl -bullet -offset -compact
.It
FreeBSD Wiki - ZFS
.It
FreeBSD Wiki - ZFS Tuning
.It
Illumos Wiki - ZFS
.It
Oracle Solaris ZFS Administration Guide
.It
Calomel Blog - ZFS Raidz Performance, Capacity and Integrity
.El
.Ss ZFS FEATURES AND TERMINOLOGY
.Pp
ZFS is a fundamentally different file system because it is more than just a file
system.
 ZFS combines the roles of file system and volume manager, enabling additional
storage devices to be added to a live system and having the new space available
on all of the existing file systems in that pool immediately.
By combining the traditionally separate roles, ZFS is able to overcome previous limitations that prevented RAID groups being able to grow.
Each top level device in a pool is called a vdev, which can be a simple disk or a RAID transformation such as a mirror or RAID-Z array.
 ZFS file systems (called datasets) each have access to the combined free space of the entire pool.
As blocks are allocated from the pool, the space available to each file system
decreases.
This approach avoids the common pitfall with extensive partitioning where free
space becomes fragmented across the partitions.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
pool
.Ta
A storage pool is the most basic building block of ZFS.
A pool is made up of one or more vdevs, the underlying devices that store the
data.
A pool is then used to create one or more file systems (datasets) or block
devices (volumes).
These datasets and volumes share the pool of remaining free space.
Each pool is uniquely identified by a name and a GUID.
The features available are determined by the ZFS version number on the pool.
.It
.Ta
vdev Types
.Ta
A pool is made up of one or more vdevs, which themselves can be a single disk
or a group of disks, in the case of a RAID transform.
When multiple vdevs are used, ZFS spreads data across the vdevs to increase performance and maximize usable
space.
.Bl -bullet -offset -compact
.It
Disk - The most basic type of vdev is a standard block device.
This can be an entire disk (such as
.Pa /dev/ada0
or
.Pa /dev/da0
) or a partition (
.Pa /dev/ada0p3
).
On FreeBSD, there is no performance penalty for using a partition rather than
the entire disk.
This differs from recommendations made by the Solaris documentation.
.It
File - In addition to disks, ZFS pools can be backed by regular files, this is especially useful for testing and
experimentation.
Use the full path to the file as the device path in
.Cm zpool create
.
All vdevs must be at least 128 MB in size.
.It
Mirror - When creating a mirror, specify the
.Ql mirror
keyword followed by the list of member devices for the mirror.
A mirror consists of two or more devices, all data will be written to all
member devices.
A mirror vdev will only hold as much data as its smallest member.
A mirror vdev can withstand the failure of all but one of its members without
losing any data.
A regular single disk vdev can be upgraded to a mirror vdev at any time with
.Cm zpool attach
.
.It
RAID-Z - ZFS implements RAID-Z, a variation on standard RAID-5 that offers better distribution of parity and eliminates the
.Do
RAID-5 write hole
.Dc
in which the data and parity information become inconsistent after an
unexpected restart.
 ZFS supports three levels of RAID-Z which provide varying levels of redundancy in exchange for decreasing levels of
usable storage.
The types are named RAID-Z1 through RAID-Z3 based on the number of parity devices in the array and the number of disks
which can fail while the pool remains operational.
In a RAID-Z1 configuration with four disks, each 1 TB, usable storage is 3 TB and the pool
will still be able to operate in degraded mode with one faulted disk.
If an additional disk goes offline before the faulted disk is replaced and
resilvered, all data in the pool can be lost.
In a RAID-Z3 configuration with eight disks of 1 TB, the volume will provide 5 TB of usable
space and still be able to operate with three faulted disks.
 Sun recommends no more than nine disks in a single vdev.
If the configuration has more disks, it is recommended to divide them into
separate vdevs and the pool data will be striped across them.
A configuration of two RAID-Z2 vdevs consisting of 8 disks each would create something similar to a RAID-60 array.
A RAID-Z group's storage capacity is approximately the size of the smallest disk
multiplied by the number of non-parity disks.
Four 1 TB disks in RAID-Z1 has an effective size of approximately 3 TB, and an array of eight 1 TB disks
in RAID-Z3 will yield 5 TB of usable space.
.It
Spare - ZFS has a special pseudo-vdev type for keeping track of available hot spares.
Note that installed hot spares are not deployed automatically; they must
manually be configured to replace the failed device using
.Cm zfs replace
.
.It
Log - ZFS Log Devices, also known as ZFS Intent Log (ZIL) move the intent log from the regular pool devices to a dedicated device,
typically an SSD.
Having a dedicated log device can significantly improve the performance of
applications with a high volume of synchronous writes, especially databases.
Log devices can be mirrored, but RAID-Z is not supported.
If multiple log devices are used, writes will be load balanced across them.
.It
Cache - Adding a cache vdev to a pool will add the storage of the cache to the L2ARC.
Cache devices cannot be mirrored.
Since a cache device only stores additional copies of existing data, there is
no risk of data loss.
.El
.It
.Ta
Transaction Group (TXG)
.Ta
Transaction Groups are the way changed blocks are grouped together and
eventually written to the pool.
Transaction groups are the atomic unit that ZFS uses to assert consistency.
Each transaction group is assigned a unique 64-bit consecutive identifier.
There can be up to three active transaction groups at a time, one in each of
these three states:
.Bl -bullet -offset -compact
.It
Open - When a new transaction group is created, it is in the open state, and accepts
new writes.
There is always a transaction group in the open state, however the transaction
group may refuse new writes if it has reached a limit.
Once the open transaction group has reached a limit, or the
.Ev vfs.zfs.txg.timeout
has been reached, the transaction group advances to the next state.
.It
Quiescing - A short state that allows any pending operations to finish while not blocking
the creation of a new open transaction group.
Once all of the transactions in the group have completed, the transaction group
advances to the final state.
.It
Syncing - All of the data in the transaction group is written to stable storage.
This process will in turn modify other data, such as metadata and space maps,
that will also need to be written to stable storage.
The process of syncing involves multiple passes.
The first, all of the changed data blocks, is the biggest, followed by the
metadata, which may take multiple passes to complete.
Since allocating space for the data blocks generates new metadata, the syncing
state cannot finish until a pass completes that does not allocate any
additional space.
The syncing state is also where synctasks are completed.
Synctasks are administrative operations, such as creating or destroying
snapshots and datasets, that modify the uberblock are completed.
Once the sync state is complete, the transaction group in the quiescing state
is advanced to the syncing state.
.El
All administrative functions, such as
.Cm snapshot
are written as part of the transaction group.
When a synctask is created, it is added to the currently open transaction
group, and that group is advanced as quickly as possible to the syncing state
to reduce the latency of administrative commands.
.It
.Ta
Adaptive Replacement Cache (ARC)
.Ta
ZFS uses an Adaptive Replacement Cache (ARC), rather than a more traditional Least Recently Used (LRU) cache.
An LRU cache is a simple list of items in the cache, sorted by when each object was
most recently used.
New items are added to the top of the list.
When the cache is full, items from the bottom of the list are evicted to make
room for more active objects.
An ARC consists of four lists; the Most Recently Used (MRU) and Most Frequently Used (MFU) objects, plus a ghost list for each.
These ghost lists track recently evicted objects to prevent them from being
added back to the cache.
This increases the cache hit ratio by avoiding objects that have a history of
only being used occasionally.
Another advantage of using both an MRU and MFU is that scanning an entire file system would normally evict all data from an MRU or LRU cache in favor of this freshly accessed content.
With ZFS, there is also an MFU that only tracks the most frequently used objects, and the cache of the most
commonly accessed blocks remains.
.It
.Ta
L2ARC
.Ta
L2ARC is the second level of the ZFS caching system.
The primary ARC is stored in RAM.
Since the amount of available RAM is often limited, ZFS can also use cache vdevs.
Solid State Disks (SSDs) are often used as these cache devices due to their higher speed and lower
latency compared to traditional spinning disks.
 L2ARC is entirely optional, but having one will significantly increase read speeds
for files that are cached on the SSD instead of having to be read from the regular disks.
 L2ARC can also speed up deduplication because a DDT that does not fit in RAM but does fit in the L2ARC will be much faster than a DDT that must be read from disk.
The rate at which data is added to the cache devices is limited to prevent
prematurely wearing out SSDs with too many writes.
Until the cache is full (the first block has been evicted to make room),
writing to the L2ARC is limited to the sum of the write limit and the boost limit, and afterwards
limited to the write limit.
A pair of
.Xr sysctl 8 values control these rate limits.
.Ev vfs.zfs.l2arc_write_max
controls how many bytes are written to the cache per second, while
.Ev vfs.zfs.l2arc_write_boost
adds to this limit during the
.Do
Turbo Warmup Phase
.Dc
(Write Boost).
.It
.Ta
ZIL
.Ta
ZIL accelerates synchronous transactions by using storage devices like SSDs that are faster than those used in the main storage pool.
When an application requests a synchronous write (a guarantee that the data has
been safely stored to disk rather than merely cached to be written later), the
data is written to the faster ZIL storage, then later flushed out to the regular disks.
This greatly reduces latency and improves performance.
Only synchronous workloads like databases will benefit from a ZIL.
Regular asynchronous writes such as copying files will not use the ZIL at all.
.It
.Ta
Copy-On-Write
.Ta
Unlike a traditional file system, when data is overwritten on ZFS, the new data is written to a different block rather than overwriting the old
data in place.
Only when this write is complete is the metadata then updated to point to the
new location.
In the event of a shorn write (a system crash or power loss in the middle of
writing a file), the entire original contents of the file are still available
and the incomplete write is discarded.
This also means that ZFS does not require a
.Xr fsck 8 after an unexpected shutdown.
.It
.Ta
Dataset
.Ta
Dataset is the generic term for a ZFS file system, volume, snapshot or clone.
Each dataset has a unique name in the format poolname/path@snapshot.
The root of the pool is technically a dataset as well.
Child datasets are named hierarchically like directories.
For example, mypool/home, the home dataset, is a child of mypool and inherits properties from it.
This can be expanded further by creating mypool/home/user.
This grandchild dataset will inherit properties from the parent and
grandparent.
Properties on a child can be set to override the defaults inherited from the
parents and grandparents.
Administration of datasets and their children can be delegated.
.It
.Ta
File system
.Ta
A ZFS dataset is most often used as a file system.
Like most other file systems, a ZFS file system is mounted somewhere in the systems directory hierarchy and
contains files and directories of its own with permissions, flags, and other
metadata.
.It
.Ta
Volume
.Ta
In additional to regular file system datasets, ZFS can also create volumes, which are block devices.
Volumes have many of the same features, including copy-on-write, snapshots,
clones, and checksumming.
Volumes can be useful for running other file system formats on top of ZFS, such as UFS virtualization, or exporting iSCSI extents.
.It
.Ta
Snapshot
.Ta
The copy-on-write (COW) design of ZFS allows for nearly instantaneous, consistent snapshots with arbitrary names.
After taking a snapshot of a dataset, or a recursive snapshot of a parent
dataset that will include all child datasets, new data is written to new
blocks, but the old blocks are not reclaimed as free space.
The snapshot contains the original version of the file system, and the live
file system contains any changes made since the snapshot was taken.
No additional space is used.
As new data is written to the live file system, new blocks are allocated to
store this data.
The apparent size of the snapshot will grow as the blocks are no longer used in
the live file system, but only in the snapshot.
These snapshots can be mounted read only to allow for the recovery of previous
versions of files.
It is also possible to rollback a live file system to a specific snapshot, undoing any changes that took place
after the snapshot was taken.
Each block in the pool has a reference counter which keeps track of how many
snapshots, clones, datasets, or volumes make use of that block.
As files and snapshots are deleted, the reference count is decremented.
When a block is no longer referenced, it is reclaimed as free space.
Snapshots can also be marked with a hold.
When a snapshot is held, any attempt to destroy it will return an
.Ql EBUSY
error.
Each snapshot can have multiple holds, each with a unique name.
The release command removes the hold so the snapshot can deleted.
Snapshots can be taken on volumes, but they can only be cloned or rolled back,
not mounted independently.
.It
.Ta
Clone
.Ta
Snapshots can also be cloned.
A clone is a writable version of a snapshot, allowing the file system to be
forked as a new dataset.
As with a snapshot, a clone initially consumes no additional space.
As new data is written to a clone and new blocks are allocated, the apparent
size of the clone grows.
When blocks are overwritten in the cloned file system or volume, the reference
count on the previous block is decremented.
The snapshot upon which a clone is based cannot be deleted because the clone
depends on it.
The snapshot is the parent, and the clone is the child.
Clones can be promoted, reversing this dependency and making the clone the parent and the previous
parent the child.
This operation requires no additional space.
Because the amount of space used by the parent and child is reversed, existing
quotas and reservations might be affected.
.It
.Ta
Checksum
.Ta
Every block that is allocated is also checksummed.
The checksum algorithm used is a per-dataset property, see
.Cm set
.
The checksum of each block is transparently validated as it is read, allowing ZFS to detect silent corruption.
If the data that is read does not match the expected checksum, ZFS will attempt to recover the data from any available redundancy, like mirrors or RAID-Z).
Validation of all checksums can be triggered with
.Cm scrub
.
Checksum algorithms include:
.Bl -bullet -offset -compact
.It
.Ql fletcher2
.It
.Ql fletcher4
.It
.Ql sha256
.El
The
.Ql fletcher
algorithms are faster, but
.Ql sha256
is a strong cryptographic hash and has a much lower chance of collisions at the
cost of some performance.
Checksums can be disabled, but it is not recommended.
.It
.Ta
Compression
.Ta
Each dataset has a compression property, which defaults to off.
This property can be set to one of a number of compression algorithms.
This will cause all new data that is written to the dataset to be compressed.
Beyond a reduction in space used, read and write throughput often increases
because fewer blocks are read or written.
.Bl -bullet -offset -compact
.It
LZ4 - Added in ZFS pool version 5000 (feature flags), LZ4 is now the recommended compression algorithm.
 LZ4 compresses approximately 50% faster than LZJB when operating on compressible data, and is over three times faster when
operating on uncompressible data.
 LZ4 also decompresses approximately 80% faster than LZJB.
On modern CPUs, LZ4 can often compress at over 500 MB/s, and decompress at over 1.5 GB/s (per
single CPU core).
.It
LZJB - The default compression algorithm.
Created by Jeff Bonwick (one of the original creators of ZFS).
 LZJB offers good compression with less CPU overhead compared to GZIP.
In the future, the default compression algorithm will likely change to LZ4.
.It
GZIP - A popular stream compression algorithm available in ZFS.
One of the main advantages of using GZIP is its configurable level of compression.
When setting the
.Ql compress
property, the administrator can choose the level of compression, ranging from
.Ql gzip1
, the lowest level of compression, to
.Ql gzip9
, the highest level of compression.
This gives the administrator control over how much CPU time to trade for saved disk space.
.It
ZLE - Zero Length Encoding is a special compression algorithm that only compresses
continuous runs of zeros.
This compression algorithm is only useful when the dataset contains large
blocks of zeros.
.El
.It
.Ta
Copies
.Ta
When set to a value greater than 1, the
.Ql copies
property instructs ZFS to maintain multiple copies of each block in the File System or Volume.
Setting this property on important datasets provides additional redundancy from
which to recover a block that does not match its checksum.
In pools without redundancy, the copies feature is the only form of redundancy.
The copies feature can recover from a single bad sector or other forms of minor
corruption, but it does not protect the pool from the loss of an entire disk.
.It
.Ta
Deduplication
.Ta
Checksums make it possible to detect duplicate blocks of data as they are
written.
With deduplication, the reference count of an existing, identical block is
increased, saving storage space.
To detect duplicate blocks, a deduplication table (DDT) is kept in memory.
The table contains a list of unique checksums, the location of those blocks,
and a reference count.
When new data is written, the checksum is calculated and compared to the list.
If a match is found, the existing block is used.
The SHA256 checksum algorithm is used with deduplication to provide a secure cryptographic
hash.
Deduplication is tunable.
If
.Ql dedup
is
.Ql on
, then a matching checksum is assumed to mean that the data is identical.
If
.Ql dedup
is set to
.Ql verify
, then the data in the two blocks will be checked byte-for-byte to ensure it is
actually identical.
If the data is not identical, the hash collision will be noted and the two
blocks will be stored separately.
Because DDT must store the hash of each unique block, it consumes a very large amount of
memory.
A general rule of thumb is 5-6 GB of ram per 1 TB of deduplicated data).
In situations where it is not practical to have enough RAM to keep the entire DDT in memory, performance will suffer greatly as the DDT must be read from disk before each new block is written.
Deduplication can use L2ARC to store the DDT, providing a middle ground between fast system memory and slower disks.
Consider using compression instead, which often provides nearly as much space
savings without the additional memory requirement.
.It
.Ta
Scrub
.Ta
Instead of a consistency check like
.Xr fsck 8 , ZFS has
.Cm scrub
.
.Cm scrub
reads all data blocks stored on the pool and verifies their checksums against
the known good checksums stored in the metadata.
A periodic check of all the data stored on the pool ensures the recovery of any
corrupted blocks before they are needed.
A scrub is not required after an unclean shutdown, but is recommended at least
once every three months.
The checksum of each block is verified as blocks are read during normal use,
but a scrub makes certain that even infrequently used blocks are checked for
silent corruption.
Data security is improved, especially in archival storage situations.
The relative priority of
.Cm scrub
can be adjusted with
.Ev vfs.zfs.scrub_delay
to prevent the scrub from degrading the performance of other workloads on the
pool.
.It
.Ta
Dataset Quota
.Ta
ZFS provides very fast and accurate dataset, user, and group space accounting in
addition to quotas and space reservations.
This gives the administrator fine grained control over how space is allocated
and allows space to be reserved for critical file systems.
.Pp
ZFS supports different types of quotas: the dataset quota, the reference quota (refquota), the user quota, and the group quota.
.Pp
Quotas limit the amount of space that a dataset and all of its descendants,
including snapshots of the dataset, child datasets, and the snapshots of those
datasets, can consume.
.Pp
Quotas cannot be set on volumes, as the
.Ql volsize
property acts as an implicit quota.
.It
.Ta
Reference Quota
.Ta
A reference quota limits the amount of space a dataset can consume by enforcing
a hard limit.
However, this hard limit includes only space that the dataset references and
does not include space used by descendants, such as file systems or snapshots.
.It
.Ta
User Quota
.Ta
User quotas are useful to limit the amount of space that can be used by the
specified user.
.It
.Ta
Group Quota
.Ta
The group quota limits the amount of space that a specified group can consume.
.It
.Ta
Dataset Reservation
.Ta
The
.Ql reservation
property makes it possible to guarantee a minimum amount of space for a
specific dataset and its descendants.
If a 10 GB reservation is set on
.Pa storage/home/bob
, and another dataset tries to use all of the free space, at least 10 GB of
space is reserved for this dataset.
If a snapshot is taken of
.Pa storage/home/bob
, the space used by that snapshot is counted against the reservation.
The
.Ql refreservation
property works in a similar way, but it excludes descendants like snapshots.
.Pp
Reservations of any sort are useful in many situations, such as planning and
testing the suitability of disk space allocation in a new system, or ensuring
that enough space is available on file systems for audio logs or system
recovery procedures and files.
.It
.Ta
Reference Reservation
.Ta
The
.Ql refreservation
property makes it possible to guarantee a minimum amount of space for the use
of a specific dataset excluding its descendants.
This means that if a 10 GB reservation is set on
.Pa storage/home/bob
, and another dataset tries to use all of the free space, at least 10 GB of
space is reserved for this dataset.
In contrast to a regular reservation, space used by snapshots and descendant datasets is not counted against the
reservation.
For example, if a snapshot is taken of
.Pa storage/home/bob
, enough disk space must exist outside of the
.Ql refreservation
amount for the operation to succeed.
Descendants of the main data set are not counted in the
.Ql refreservation
amount and so do not encroach on the space set.
.It
.Ta
Resilver
.Ta
When a disk fails and is replaced, the new disk must be filled with the data
that was lost.
The process of using the parity information distributed across the remaining
drives to calculate and write the missing data to the new drive is called resilvering.
.It
.Ta
Online
.Ta
A pool or vdev in the
.Ql Online
state has all of its member devices connected and fully operational.
Individual devices in the
.Ql Online
state are functioning normally.
.It
.Ta
Offline
.Ta
Individual devices can be put in an
.Ql Offline
state by the administrator if there is sufficient redundancy to avoid putting
the pool or vdev into a Faulted state.
An administrator may choose to offline a disk in preparation for replacing it,
or to make it easier to identify.
.It
.Ta
Degraded
.Ta
A pool or vdev in the
.Ql Degraded
state has one or more disks that have been disconnected or have failed.
The pool is still usable, but if additional devices fail, the pool could become
unrecoverable.
Reconnecting the missing devices or replacing the failed disks will return the
pool to an Online state after the reconnected or new device has completed the Resilver process.
.It
.Ta
Faulted
.Ta
A pool or vdev in the
.Ql Faulted
state is no longer operational.
The data on it can no longer be accessed.
A pool or vdev enters the
.Ql Faulted
state when the number of missing or failed devices exceeds the level of
redundancy in the vdev.
If missing devices can be reconnected, the pool will return to a Online state.
If there is insufficient redundancy to compensate for the number of failed
disks, then the contents of the pool are lost and must be restored from
backups.
.El
.Ss SYNOPSIS
.Pp
File systems are an integral part of any operating system.
They allow users to upload and store files, provide access to data, and make
hard drives useful.
Different operating systems differ in their native file system.
Traditionally, the native FreeBSD file system has been the Unix File System UFS which has been modernized as UFS2.
Since FreeBSD 7.0, the Z File System (ZFS) is also available as a native file system.
See for more information.
.Pp
In addition to its native file systems, FreeBSD supports a multitude of other
file systems so that data from other operating systems can be accessed locally,
such as data stored on locally attached USB storage devices, flash drives, and hard disks.
This includes support for the Linux Extended File System (EXT) and the Reiser file system.
.Pp
There are different levels of FreeBSD support for the various file systems.
Some require a kernel module to be loaded and others may require a toolset to
be installed.
Some non-native file system support is full read-write while others are
read-only.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
The difference between native and supported file systems.
.It
Which file systems are supported by FreeBSD.
.It
How to enable, configure, access, and make use of non-native file systems.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Understand UNIX and FreeBSD basics.
.It
Be familiar with the basics of kernel configuration and compilation.
.It
Feel comfortable installing software in FreeBSD.
.It
Have some familiarity with disks, storage, and device names in FreeBSD.
.El
.Ss LINUX FILE SYSTEMS
.Pp
FreeBSD provides built-in support for several Linux file systems.
This section demonstrates how to load support for and how to mount the
supported Linux file systems.
.Ss EXT2
.Pp
Kernel support for ext2 file systems has been available since FreeBSD 2.2.
In FreeBSD 8.x and earlier, the code is licensed under the GPL.
Since FreeBSD 9.0, the code has been rewritten and is now BSD licensed.
.Pp
The
.Xr ext2fs 5 driver allows the FreeBSD kernel to both read and write to ext2 file systems.
.Pp
This driver can also be used to access ext3 and ext4 file systems.
However, ext3 journaling and extended attributes are not supported.
Support for ext4 is read-only.
.Pp
To access an ext file system, first load the kernel loadable module:
.Bd -literal -offset indent
# kldload ext2fs
.Ed
.Pp
Then, mount the ext volume by specifying its FreeBSD partition name and an
existing mount point.
This example mounts
.Pa /dev/ad1s1
on
.Pa /mnt
:
.Bd -literal -offset indent
# mount -t ext2fs /dev/ad1s1  /mnt
.Ed
.Ss REISERFS
.Pp
FreeBSD provides read-only support for The Reiser file system, ReiserFS.
.Pp
To load the
.Xr reiserfs 5 driver:
.Bd -literal -offset indent
# kldload reiserfs
.Ed
.Pp
Then, to mount a ReiserFS volume located on
.Pa /dev/ad1s1
:
.Bd -literal -offset indent
# mount -t reiserfs /dev/ad1s1  /mnt
.Ed
.Ss SYNOPSIS
.Pp
Virtualization software allows multiple operating systems to run simultaneously
on the same computer.
Such software systems for PCs often involve a host operating system which runs the virtualization software
and supports any number of guest operating systems.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
The difference between a host operating system and a guest operating system.
.It
How to install FreeBSD on an Intel-based Apple  Mac computer.
.It
How to install FreeBSD on MicrosoftWindows with Virtual PC.
.It
How to install FreeBSD as a guest in bhyve.
.It
How to tune a FreeBSD system for best performance under virtualization.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Understand the basics of UNIX and FreeBSD.
.It
Know how to install FreeBSD.
.It
Know how to set up a network connection.
.It
Know how to install additional third-party software.
.El
.Ss FREEBSD AS A GUEST ON PARALLELS FOR MAC OS X
.Pp
Parallels Desktop for Mac is a commercial software product available for Intel based Apple  Mac computers running Mac OS 10.4.6 or higher.
FreeBSD is a fully supported guest operating system.
Once Parallels has been installed on Mac OS X, the user must configure a virtual machine and then install the desired guest
operating system.
.Ss INSTALLING FREEBSD ON PARALLELS/MAC OS X
.Pp
The first step in installing FreeBSD on Parallels is to create a new virtual machine for installing FreeBSD.
Select
.Ql FreeBSD
as the
.Ql Guest OS Type
when prompted:
.Pp
Choose a reasonable amount of disk and memory depending on the plans for this
virtual FreeBSD instance.
4GB of disk space and 512MB of RAM work well for most uses of FreeBSD under Parallels:
.Pp
Select the type of networking and a network interface:
.Pp
Save and finish the configuration:
.Pp
After the FreeBSD virtual machine has been created, FreeBSD can be installed on
it.
This is best done with an official FreeBSD CD/DVD or with an ISO image downloaded from an official FTP site.
Copy the appropriate ISO image to the local Mac filesystem or insert a CD/DVD in the Mac's CD-ROM drive.
Click on the disc icon in the bottom right corner of the FreeBSD Parallels window.
This will bring up a window that can be used to associate the CD-ROM drive in the virtual machine with the ISO file on disk or with the real CD-ROM drive.
.Pp
Once this association with the CD-ROM source has been made, reboot the FreeBSD virtual machine by clicking the reboot
icon.
 Parallels will reboot with a special BIOS that first checks if there is a CD-ROM.
.Pp
In this case it will find the FreeBSD installation media and begin a normal
FreeBSD installation.
Perform the installation, but do not attempt to configure Xorg at this time.
.Pp
When the installation is finished, reboot into the newly installed FreeBSD
virtual machine.
.Ss CONFIGURING FREEBSD ON PARALLELS
.Pp
After FreeBSD has been successfully installed on Mac OS X with Parallels, there are a number of configuration steps that can be taken to optimize the
system for virtualized operation.
.Ss SET BOOT LOADER VARIABLES
.Pp
The most important step is to reduce the
.Ar kern.hz
tunable to reduce the CPU utilization of FreeBSD under the Parallels environment.
This is accomplished by adding the following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
kern.hz=100
.Ed
.Pp
Without this setting, an idle FreeBSD Parallels guest will use roughly 15% of the CPU of a single processor iMac.
After this change the usage will be closer to 5%.
.Ss CREATE A NEW KERNEL CONFIGURATION FILE
.Pp
All of the SCSI, FireWire, and USB device drivers can be removed from a custom
kernel configuration file.
 Parallels provides a virtual network adapter used by the
.Xr ed 4 driver, so all network devices except for
.Xr ed 4 and
.Xr miibus 4 can be removed from the kernel.
.Ss CONFIGURE NETWORKING
.Pp
The most basic networking setup uses DHCP to connect the virtual machine to the
same local area network as the host Mac.
This can be accomplished by adding
.Ql ifconfig_ed0="DHCP"
to
.Pa /etc/rc.conf
.
More advanced networking setups are described in .
.Ss FREEBSD AS A GUEST ON VIRTUAL PC FOR WINDOWS
.Pp
Virtual PC for Windows is a Microsoft software product available for free download.
See this website for the system requirements.
Once Virtual PC has been installed on MicrosoftWindows, the user can configure a virtual machine and then install the desired guest
operating system.
.Ss INSTALLING FREEBSD ON VIRTUAL PC
.Pp
The first step in installing FreeBSD on Virtual PC is to create a new virtual machine for installing FreeBSD.
Select
.Ql Create a virtual machine
when prompted:
.Pp
Select
.Ql Other
as the
.Ql Operating system
when prompted:
.Pp
Then, choose a reasonable amount of disk and memory depending on the plans for
this virtual FreeBSD instance.
4GB of disk space and 512MB of RAM work well for most uses of FreeBSD under Virtual PC:
.Pp
Save and finish the configuration:
.Pp
Select the FreeBSD virtual machine and click
.Ql Settings
, then set the type of networking and a network interface:
.Pp
After the FreeBSD virtual machine has been created, FreeBSD can be installed on
it.
This is best done with an official FreeBSD CD/DVD or with an ISO image downloaded from an official FTP site.
Copy the appropriate ISO image to the local Windows filesystem or insert a CD/DVD in the CD drive, then double click on the FreeBSD virtual machine to boot.
Then, click
.Ql CD
and choose
.Ql Capture ISO Image...
on the Virtual PC window.
This will bring up a window where the CD-ROM drive in the virtual machine can be associated with an ISO file on disk or with the real CD-ROM drive.
.Pp
Once this association with the CD-ROM source has been made, reboot the FreeBSD virtual machine by clicking
.Ql Action
and
.Ql Reset
.
 Virtual PC will reboot with a special BIOS that first checks for a CD-ROM.
.Pp
In this case it will find the FreeBSD installation media and begin a normal
FreeBSD installation.
Continue with the installation, but do not attempt to configure Xorg at this time.
.Pp
When the installation is finished, remember to eject the CD/DVD or release the ISO image.
Finally, reboot into the newly installed FreeBSD virtual machine.
.Ss CONFIGURING FREEBSD ON VIRTUAL PC
.Pp
After FreeBSD has been successfully installed on MicrosoftWindows with Virtual PC, there are a number of configuration steps that can be taken to optimize the
system for virtualized operation.
.Ss SET BOOT LOADER VARIABLES
.Pp
The most important step is to reduce the
.Ar kern.hz
tunable to reduce the CPU utilization of FreeBSD under the Virtual PC environment.
This is accomplished by adding the following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
kern.hz=100
.Ed
.Pp
Without this setting, an idle FreeBSD Virtual PC guest OS will use roughly 40% of the CPU of a single processor computer.
After this change, the usage will be closer to 3%.
.Ss CREATE A NEW KERNEL CONFIGURATION FILE
.Pp
All of the SCSI, FireWire, and USB device drivers can be removed from a custom
kernel configuration file.
 Virtual PC provides a virtual network adapter used by the
.Xr de 4 driver, so all network devices except for
.Xr de 4 and
.Xr miibus 4 can be removed from the kernel.
.Ss CONFIGURE NETWORKING
.Pp
The most basic networking setup uses DHCP to connect the virtual machine to the
same local area network as the MicrosoftWindows host.
This can be accomplished by adding
.Ql ifconfig_de0="DHCP"
to
.Pa /etc/rc.conf
.
More advanced networking setups are described in .
.Ss FREEBSD AS A GUEST ON VMWARE FUSION FOR MAC OS
.Pp
VMware Fusion for Mac is a commercial software product available for Intel based Apple  Mac computers running Mac OS 10.4.9 or higher.
FreeBSD is a fully supported guest operating system.
Once VMware Fusion has been installed on Mac OS X, the user can configure a virtual machine and then install the desired guest
operating system.
.Ss INSTALLING FREEBSD ON VMWARE FUSION
.Pp
The first step is to start VMware Fusion which will load the Virtual Machine Library.
Click
.Ql New
to create the virtual machine:
.Pp
This will load the New Virtual Machine Assistant.
Click
.Ql Continue
to proceed:
.Pp
Select
.Ql Other
as the
.Ql Operating System
and either
.Ql FreeBSD
or
.Ql FreeBSD 64-bit
, as the
.Ql Version
when prompted:
.Pp
Choose the name of the virtual machine and the directory where it should be
saved:
.Pp
Choose the size of the Virtual Hard Disk for the virtual machine:
.Pp
Choose the method to install the virtual machine, either from an ISO image or from a CD/DVD:
.Pp
Click
.Ql Finish
and the virtual machine will boot:
.Pp
Install FreeBSD as usual:
.Pp
Once the install is complete, the settings of the virtual machine can be
modified, such as memory usage:
.Pp
The System Hardware settings of the virtual machine cannot be modified while
the virtual machine is running.
.Pp
The number of CPUs the virtual machine will have access to:
.Pp
The status of the CD-ROM device.
Normally the CD/DVD/ISO is disconnected from the virtual machine when it is no longer needed.
.Pp
The last thing to change is how the virtual machine will connect to the
network.
To allow connections to the virtual machine from other machines besides the
host, choose
.Ql Connect directly to the physical network (Bridged)
.
Otherwise,
.Ql Share the host's internet connection (NAT)
is preferred so that the virtual machine can have access to the Internet, but
the network cannot access the virtual machine.
.Pp
After modifying the settings, boot the newly installed FreeBSD virtual machine.
.Ss CONFIGURING FREEBSD ON VMWARE FUSION
.Pp
After FreeBSD has been successfully installed on Mac OS X with VMware Fusion, there are a number of configuration steps that can be taken to optimize the
system for virtualized operation.
.Ss SET BOOT LOADER VARIABLES
.Pp
The most important step is to reduce the
.Ar kern.hz
tunable to reduce the CPU utilization of FreeBSD under the VMware Fusion environment.
This is accomplished by adding the following line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
kern.hz=100
.Ed
.Pp
Without this setting, an idle FreeBSD VMware Fusion guest will use roughly 15% of the CPU of a single processor iMac.
After this change, the usage will be closer to 5%.
.Ss CREATE A NEW KERNEL CONFIGURATION FILE
.Pp
All of the FireWire, and USB device drivers can be removed from a custom kernel
configuration file.
 VMware Fusion provides a virtual network adapter used by the
.Xr em 4 driver, so all network devices except for
.Xr em 4 can be removed from the kernel.
.Ss CONFIGURE NETWORKING
.Pp
The most basic networking setup uses DHCP to connect the virtual machine to the
same local area network as the host Mac.
This can be accomplished by adding
.Ql ifconfig_em0="DHCP"
to
.Pa /etc/rc.conf
.
More advanced networking setups are described in .
.Ss FREEBSD AS A GUEST ON VIRTUALBOX
.Pp
FreeBSD works well as a guest in VirtualBox.
The virtualization software is available for most common operating systems,
including FreeBSD itself.
.Pp
The VirtualBox guest additions provide support for:
.Bl -bullet -offset -compact
.It
Clipboard sharing.
.It
Mouse pointer integration.
.It
Host time synchronization.
.It
Window scaling.
.It
Seamless mode.
.El
.Pp
These commands are run in the FreeBSD guest.
.Pp
First, install the
.Ql emulators/virtualbox-ose-additions
package or port in the FreeBSD guest.
This will install the port:
.Bd -literal -offset indent
# cd /usr/ports/emulators/virtualbox-ose-additions && make install clean
.Ed
.Pp
Add these lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
vboxguest_enable="YES"
vboxservice_enable="YES"
.Ed
.Pp
If
.Xr ntpd 8 or
.Xr ntpdate 8 is used, disable host time synchronization:
.Bd -literal -offset indent
vboxservice_flags="--disable-timesync"
.Ed
.Pp
Xorg will automatically recognize the
.Ql vboxvideo
driver.
It can also be manually entered in
.Pa /etc/X11/xorg.conf
:
.Bd -literal -offset indent
Section "Device"
	Identifier "Card0"
	Driver "vboxvideo"
	VendorName "InnoTek Systemberatung GmbH"
	BoardName "VirtualBox Graphics Adapter"
EndSection
.Ed
.Pp
To use the
.Ql vboxmouse
driver, adjust the mouse section in
.Pa /etc/X11/xorg.conf
:
.Bd -literal -offset indent
Section "InputDevice"
	Identifier "Mouse0"
	Driver "vboxmouse"
EndSection
.Ed
.Pp
HAL users should create the following
.Pa /usr/local/etc/hal/fdi/policy/90-vboxguest.fdi
or copy it from
.Pa /usr/local/share/hal/fdi/policy/10osvendor/90-vboxguest.fdi
:
.Bd -literal -offset indent
<?xml version="1.0" encoding="utf-8"?>
<!--
# Sun VirtualBox
# Hal driver description for the vboxmouse driver
# $Id: chapter.xml,v 1.33 2012-03-17 04:53:52 eadler Exp $

	Copyright (C) 2008-2009 Sun Microsystems, Inc.

	This file is part of VirtualBox Open Source Edition (OSE, as
	available from http://www.virtualbox.org. This file is free software;
	you can redistribute it and/or modify it under the terms of the GNU
	General Public License (GPL) as published by the Free Software
	Foundation, in version 2 as it comes in the "COPYING" file of the
	VirtualBox OSE distribution. VirtualBox OSE is distributed in the
	hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.

	Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
	Clara, CA 95054 USA or visit http://www.sun.com if you need
	additional information or have any questions.
-->
<deviceinfo version="0.2">
  <device>
    <match key="info.subsystem" string="pci">
      <match key="info.product" string="VirtualBox guest Service">
        <append key="info.capabilities" type="strlist">input</append>
	<append key="info.capabilities" type="strlist">input.mouse</append>
        <merge key="input.x11_driver" type="string">vboxmouse</merge>
	<merge key="input.device" type="string">/dev/vboxguest</merge>
      </match>
    </match>
  </device>
</deviceinfo>
.Ed
.Ss FREEBSD AS A HOST WITH VIRTUALBOX
.Pp
VirtualBox is an actively developed, complete virtualization package, that is available
for most operating systems including Windows, Mac OS, Linux and FreeBSD.
It is equally capable of running Windows or UNIX-like guests.
It is released as open source software, but with closed-source components
available in a separate extension pack.
These components include support for USB 2.0 devices.
More information may be found on the
.Do
Downloads
.Dc
page of the VirtualBox wiki.
Currently, these extensions are not available for FreeBSD.
.Ss INSTALLING VIRTUALBOX
.Pp
VirtualBox is available as a FreeBSD package or port in
.Ql emulators/virtualbox-ose
.
The port can be installed using these commands:
.Bd -literal -offset indent
# cd /usr/ports/emulators/virtualbox-ose
# make install clean
.Ed
.Pp
One useful option in the port's configuration menu is the
.Ql GuestAdditions
suite of programs.
These provide a number of useful features in guest operating systems, like
mouse pointer integration (allowing the mouse to be shared between host and
guest without the need to press a special keyboard shortcut to switch) and
faster video rendering, especially in Windows guests.
The guest additions are available in the
.Ql Devices
menu, after the installation of the guest is finished.
.Pp
A few configuration changes are needed before VirtualBox is started for the first time.
The port installs a kernel module in
.Pa /boot/modules
which must be loaded into the running kernel:
.Bd -literal -offset indent
# kldload vboxdrv
.Ed
.Pp
To ensure the module is always loaded after a reboot, add this line to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
vboxdrv_load="YES"
.Ed
.Pp
To use the kernel modules that allow bridged or host-only networking, add this
line to
.Pa /etc/rc.conf
and reboot the computer:
.Bd -literal -offset indent
vboxnet_enable="YES"
.Ed
.Pp
The
.Ql vboxusers
group is created during installation of VirtualBox.
All users that need access to VirtualBox will have to be added as members of this group.
.Cm pw
can be used to add new members:
.Bd -literal -offset indent
# pw groupmod vboxusers -m yourusername
.Ed
.Pp
The default permissions for
.Pa /dev/vboxnetctl
are restrictive and need to be changed for bridged networking:
.Bd -literal -offset indent
# chown root:vboxusers /dev/vboxnetctl
# chmod 0660 /dev/vboxnetctl
.Ed
.Pp
To make this permissions change permanent, add these lines to
.Pa /etc/devfs.conf
:
.Bd -literal -offset indent
own     vboxnetctl root:vboxusers
perm    vboxnetctl 0660
.Ed
.Pp
To launch VirtualBox, type from a Xorg session:
.Bd -literal -offset indent
% VirtualBox
.Ed
.Pp
For more information on configuring and using VirtualBox, refer to the official website.
For FreeBSD-specific information and troubleshooting instructions, refer to the relevant page in the FreeBSD wiki.
.Ss VIRTUALBOX USB SUPPORT
.Pp
VirtualBox can be configured to pass USB devices through to the guest operating system.
The host controller of the OSE version is limited to emulating USB 1.1 devices until the extension pack supporting USB 2.0 and 3.0 devices becomes available on FreeBSD.
.Pp
For VirtualBox to be aware of USB devices attached to the machine, the user needs to be a member of the
.Ql operator
group.
.Bd -literal -offset indent
# pw groupmod operator -m yourusername
.Ed
.Pp
Restart the login session and VirtualBox for these changes to take effect, and create USB filters as necessary.
.Ss VIRTUALBOX HOST DVD/CD ACCESS
.Pp
Access to the host DVD/CD drives from guests is achieved through the sharing of the physical drives.
Within VirtualBox, this is set up from the Storage window in the Settings of the virtual
machine.
If needed, create an empty IDE  CD/DVD device first.
Then choose the Host Drive from the popup menu for the virtual CD/DVD drive selection.
A checkbox labeled
.Ql Passthrough
will appear.
This allows the virtual machine to use the hardware directly.
For example, audio CDs or the burner will only function if this option is selected.
.Pp
HAL needs to run for VirtualBox  DVD/CD functions to work, so enable it in
.Pa /etc/rc.conf
and start it if it is not already running:
.Bd -literal -offset indent
hald_enable="YES"
.Ed
.Bd -literal -offset indent
# service hald start
.Ed
.Pp
In order for users to be able to use VirtualBox  DVD/CD functions, they need access to
.Pa /dev/xpt0
,
.Pa /dev/cdN
, and
.Pa /dev/passN
.
This is usually achieved by making the user a member of
.Ql operator
.
Permissions to these devices have to be corrected by adding these lines to
.Pa /etc/devfs.conf
:
.Bd -literal -offset indent
perm cd* 0660
perm xpt0 0660
perm pass* 0660
.Ed
.Bd -literal -offset indent
# service devfs restart
.Ed
.Ss FREEBSD AS A HOST WITH BHYVE
.Pp
The bhyve  BSD-licensed hypervisor became part of the base system with FreeBSD 10.0-RELEASE.
This hypervisor supports a number of guests, including FreeBSD, OpenBSD, and
many Linux distributions.
By default, bhyve provides access to serial console and does not emulate a graphical console.
Virtualization offload features of newer CPUs are used to avoid the legacy methods of translating instructions and manually
managing memory mappings.
.Pp
The bhyve design requires a processor that supports Intel Extended Page Tables (EPT) or AMD Rapid Virtualization Indexing (RVI) or Nested Page Tables (NPT).
Hosting Linux guests or FreeBSD guests with more than one vCPU requires VMX unrestricted mode support (UG).
Most newer processors, specifically the IntelCore i3/i5/i7 and IntelXeon E3/E5/E7, support these features.
 UG support was introduced with Intel's Westmere micro-architecture.
For a complete list of Intel processors that support EPT, refer to http://ark.intel.com/search/advanced?s=t&ExtendedPageTables=true.
 RVI is found on the third generation and later of the AMD Opteron (Barcelona) processors.
The easiest way to tell if a processor supports bhyve is to run
.Cm dmesg
or look in
.Pa /var/run/dmesg.boot
for the
.Ql POPCNT
processor feature flag on the
.Ql Features2
line for AMD processors or
.Ql EPT
and
.Ql UG
on the
.Ql VT-x
line for Intel processors.
.Ss PREPARING THE HOST
.Pp
The first step to creating a virtual machine in bhyve is configuring the host system.
First, load the bhyve kernel module:
.Bd -literal -offset indent
# kldload vmm
.Ed
.Pp
Then, create a
.Pa tap
interface for the network device in the virtual machine to attach to.
In order for the network device to participate in the network, also create a
bridge interface containing the
.Pa tap
interface and the physical interface as members.
In this example, the physical interface is igb0:
.Bd -literal -offset indent
# ifconfig tap0 create
# sysctl net.link.tap.up_on_open=1
net.link.tap.up_on_open: 0 -> 1
# ifconfig bridge0 create
# ifconfig bridge0 addm igb0 addm tap0
# ifconfig bridge0 up
.Ed
.Ss CREATING A FREEBSD GUEST
.Pp
Create a file to use as the virtual disk for the guest machine.
Specify the size and name of the virtual disk:
.Bd -literal -offset indent
# truncate -s 16G  guest.img
.Ed
.Pp
Download an installation image of FreeBSD to install:
.Bd -literal -offset indent
# fetch
ftp://ftp.freebsd.org/pub/FreeBSD/releases/ISO-IMAGES/10.3/FreeBSD-10.3-RELEASE-amd64-bootonly.iso
FreeBSD-10.3-RELEASE-amd64-bootonly.iso       100% of  230 MB  570 kBps 06m17s
.Ed
.Pp
FreeBSD comes with an example script for running a virtual machine in bhyve.
The script will start the virtual machine and run it in a loop, so it will
automatically restart if it crashes.
The script takes a number of options to control the configuration of the
machine:
.Ar -c
controls the number of virtual CPUs,
.Ar -m
limits the amount of memory available to the guest,
.Ar -t
defines which
.Pa tap
device to use,
.Ar -d
indicates which disk image to use,
.Ar -i
tells bhyve to boot from the CD image instead of the disk, and
.Ar -I
defines which CD image to use.
The last parameter is the name of the virtual machine, used to track the
running machines.
This example starts the virtual machine in installation mode:
.Bd -literal -offset indent
# sh /usr/share/examples/bhyve/vmrun.sh -c 1 -m 1024M -t tap0 -d guest.img -i -I FreeBSD-10.3-RELEASE-amd64-bootonly.iso  guestname
.Ed
.Pp
The virtual machine will boot and start the installer.
After installing a system in the virtual machine, when the system asks about
dropping in to a shell at the end of the installation, choose
.Ql Yes
.
.Pp
Reboot the virtual machine.
While rebooting the virtual machine causes bhyve to exit, the
.Pa vmrun.sh
script runs
.Cm bhyve
in a loop and will automatically restart it.
When this happens, choose the reboot option from the boot loader menu in order
to escape the loop.
Now the guest can be started from the virtual disk:
.Bd -literal -offset indent
# sh /usr/share/examples/bhyve/vmrun.sh -c 4 -m 1024M -t tap0 -d guest.img  guestname
.Ed
.Ss CREATING A LINUX GUEST
.Pp
In order to boot operating systems other than FreeBSD, the
.Ql sysutils/grub2-bhyve
port must be first installed.
.Pp
Next, create a file to use as the virtual disk for the guest machine:
.Bd -literal -offset indent
# truncate -s 16G  linux.img
.Ed
.Pp
Starting a virtual machine with bhyve is a two step process.
First a kernel must be loaded, then the guest can be started.
The Linux kernel is loaded with
.Ql sysutils/grub2-bhyve
.
Create a
.Pa device.map
that grub will use to map the virtual devices to the files on the host system:
.Bd -literal -offset indent
(hd0) ./linux.img
(cd0) ./somelinux.iso
.Ed
.Pp
Use
.Ql sysutils/grub2-bhyve
to load the Linux kernel from the ISO image:
.Bd -literal -offset indent
# grub-bhyve -m device.map -r cd0 -M 1024M  linuxguest
.Ed
.Pp
This will start grub.
If the installation CD contains a
.Pa grub.cfg
, a menu will be displayed.
If not, the
.Ql vmlinuz
and
.Ql initrd
files must be located and loaded manually:
.Bd -literal -offset indent
grub> ls
(hd0) (cd0) (cd0,msdos1) (host)
grub> ls (cd0)/isolinux
boot.cat boot.msg grub.conf initrd.img isolinux.bin isolinux.cfg memtest
splash.jpg TRANS.TBL vesamenu.c32 vmlinuz
grub> linux (cd0)/isolinux/vmlinuz
grub> initrd (cd0)/isolinux/initrd.img
grub> boot
.Ed
.Pp
Now that the Linux kernel is loaded, the guest can be started:
.Bd -literal -offset indent
# bhyve -A -H -P -s 0:0,hostbridge -s 1:0,lpc -s 2:0,virtio-net,tap0 -s 3:0,virtio-blk,./linux.img \ -s 4:0,ahci-cd,./somelinux.iso -l com1,stdio -c 4 -m 1024M  linuxguest
.Ed
.Pp
The system will boot and start the installer.
After installing a system in the virtual machine, reboot the virtual machine.
This will cause bhyve to exit.
The instance of the virtual machine needs to be destroyed before it can be
started again:
.Bd -literal -offset indent
# bhyvectl --destroy --vm=linuxguest
.Ed
.Pp
Now the guest can be started directly from the virtual disk.
Load the kernel:
.Bd -literal -offset indent
# grub-bhyve -m device.map -r hd0,msdos1 -M 1024M  linuxguest
grub> ls
(hd0) (hd0,msdos2) (hd0,msdos1) (cd0) (cd0,msdos1) (host)
(lvm/VolGroup-lv_swap) (lvm/VolGroup-lv_root)
grub> ls (hd0,msdos1)/
lost+found/ grub/ efi/ System.map-2.6.32-431.el6.x86_64 config-2.6.32-431.el6.x
86_64 symvers-2.6.32-431.el6.x86_64.gz vmlinuz-2.6.32-431.el6.x86_64
initramfs-2.6.32-431.el6.x86_64.img
grub> linux (hd0,msdos1)/vmlinuz-2.6.32-431.el6.x86_64
root=/dev/mapper/VolGroup-lv_root
grub> initrd (hd0,msdos1)/initramfs-2.6.32-431.el6.x86_64.img
grub> boot
.Ed
.Pp
Boot the virtual machine:
.Bd -literal -offset indent
# bhyve -A -H -P -s 0:0,hostbridge -s 1:0,lpc -s 2:0,virtio-net,tap0 \ -s 3:0,virtio-blk,./linux.img -l com1,stdio -c 4 -m 1024M  linuxguest
.Ed
.Pp
Linux will now boot in the virtual machine and eventually present you with the login
prompt.
Login and use the virtual machine.
When you are finished, reboot the virtual machine to exit bhyve.
Destroy the virtual machine instance:
.Bd -literal -offset indent
# bhyvectl --destroy --vm=linuxguest
.Ed
.Ss BOOTING BHYVE VIRTUAL MACHINES WITH UEFI FIRMWARE
.Pp
In addition to bhyveload and grub-bhyve, the bhyve hypervisor can also boot virtual machines using the UEFI userspace firmware.
This option may support guest operating systems that are not supported by the
other loaders.
.Pp
In order to make use of the UEFI support in bhyve, first obtain the UEFI firmware images.
This can be done by installing
.Ql sysutils/bhyve-firmware
port or package.
.Pp
With the firmware in place, add the flags
.Ar -l bootrom,/path/to/firmware
to your bhyve command line.
The actual bhyve command may look like this:
.Bd -literal -offset indent
# bhyve -AHP -s 0:0,hostbridge -s 1:0,lpc \ -s 2:0,virtio-net,tap1 -s 3:0,virtio-blk,./disk.img \ -s 4:0,ahci-cd,./install.iso -c 4 -m 1024M \ -l bootrom,/usr/local/share/uefi-firmware/BHYVE_UEFI.fd \ guest
.Ed
.Pp
.Ql sysutils/bhyve-firmware
also contains a CSM-enabled firmware, to boot guests with no UEFI support in legacy BIOS mode:
.Bd -literal -offset indent
# bhyve -AHP -s 0:0,hostbridge -s 1:0,lpc \ -s 2:0,virtio-net,tap1 -s 3:0,virtio-blk,./disk.img \ -s 4:0,ahci-cd,./install.iso -c 4 -m 1024M \ -l bootrom,/usr/local/share/uefi-firmware/BHYVE_UEFI_CSM.fd \ guest
.Ed
.Ss GRAPHICAL UEFI FRAMEBUFFER FOR BHYVE GUESTS
.Pp
The UEFI firmware support is particularly useful with predominantly graphical guest
operating systems such as Microsoft Windows.
.Pp
Support for the UEFI-GOP framebuffer may also be enabled with the
.Ar -s 29,fbuf,tcp=0.0.0.0:5900
flags.
The framebuffer resolution may be configured with
.Ar w=800
and
.Ar h=600
, and bhyve can be instructed to wait for a VNC connection before booting the guest by adding
.Ar wait
.
The framebuffer may be accessed from the host or over the network via the VNC protocol.
.Pp
The resulting bhyve command would look like this:
.Bd -literal -offset indent
# bhyve -AHP -s 0:0,hostbridge -s 31:0,lpc \ -s 2:0,virtio-net,tap1 -s 3:0,virtio-blk,./disk.img \ -s 4:0,ahci-cd,./install.iso -c 4 -m 1024M \ -s 29,fbuf,tcp=0.0.0.0:5900,w=800,h=600,wait \ -l bootrom,/usr/local/share/uefi-firmware/BHYVE_UEFI.fd \ guest
.Ed
.Pp
Note, in BIOS emulation mode, the framebuffer will cease receiving updates once
control is passed from firmware to guest operating system.
.Ss USING ZFS WITH BHYVE GUESTS
.Pp
If ZFS is available on the host machine, using ZFS volumes instead of disk image files can provide significant performance
benefits for the guest VMs.
A ZFS volume can be created by:
.Bd -literal -offset indent
# zfs create -V16G -o volmode=dev zroot/linuxdisk0
.Ed
.Pp
When starting the VM, specify the ZFS volume as the disk drive:
.Bd -literal -offset indent
# bhyve -A -H -P -s 0:0,hostbridge -s 1:0,lpc -s 2:0,virtio-net,tap0 -s3:0,virtio-blk,/dev/zvol/zroot/linuxdisk0 \ -l com1,stdio -c 4 -m 1024M  linuxguest
.Ed
.Ss VIRTUAL MACHINE CONSOLES
.Pp
It is advantageous to wrap the bhyve console in a session management tool such as
.Ql sysutils/tmux
or
.Ql sysutils/screen
in order to detach and reattach to the console.
It is also possible to have the console of bhyve be a null modem device that can be accessed with
.Cm cu
.
To do this, load the
.Pa nmdm
kernel module and replace
.Ar -l com1,stdio
with
.Ar -l com1,/dev/nmdm0A
.
The
.Pa /dev/nmdm
devices are created automatically as needed, where each is a pair,
corresponding to the two ends of the null modem cable (
.Pa /dev/nmdm0A
and
.Pa /dev/nmdm0B
).
See
.Xr nmdm 4 for more information.
.Bd -literal -offset indent
# kldload nmdm
# bhyve -A -H -P -s 0:0,hostbridge -s 1:0,lpc -s 2:0,virtio-net,tap0 -s 3:0,virtio-blk,./linux.img \ -l com1,/dev/nmdm0A -c 4 -m 1024M  linuxguest
# cu -l /dev/nmdm0B
Connected

Ubuntu 13.10 handbook ttyS0

handbook login:
.Ed
.Ss MANAGING VIRTUAL MACHINES
.Pp
A device node is created in
.Pa /dev/vmm
for each virtual machine.
This allows the administrator to easily see a list of the running virtual
machines:
.Bd -literal -offset indent
# ls -al /dev/vmm
total 1
dr-xr-xr-x   2 root  wheel    512 Mar 17 12:19 ./
dr-xr-xr-x  14 root  wheel    512 Mar 17 06:38 ../
crw-------   1 root  wheel  0x1a2 Mar 17 12:20 guestname
crw-------   1 root  wheel  0x19f Mar 17 12:19 linuxguest
crw-------   1 root  wheel  0x1a1 Mar 17 12:19 otherguest
.Ed
.Pp
A specified virtual machine can be destroyed using
.Cm bhyvectl
:
.Bd -literal -offset indent
# bhyvectl --destroy --vm=guestname
.Ed
.Ss PERSISTENT CONFIGURATION
.Pp
In order to configure the system to start bhyve guests at boot time, the following configurations must be made in the specified
files:
.Ss /ETC/SYSCTL.CONF
.Bd -literal -offset indent
net.link.tap.up_on_open=1
.Ed
.Ss /ETC/RC.CONF
.Bd -literal -offset indent
cloned_interfaces="bridge0 tap0"
ifconfig_bridge0="addm igb0 addm tap0"
kld_list="nmdm vmm"
.Ed
.Ss FREEBSD AS A XEN-HOST
.Pp
Xen is a GPLv2-licensed type 1 hypervisor for Intel and ARM architectures.
FreeBSD has included i386 and AMD64-Bit DomU and Amazon EC2 unprivileged domain (virtual machine) support since FreeBSD 8.0 and includes
Dom0 control domain (host) support in FreeBSD 11.0.
Support for para-virtualized (PV) domains has been removed from FreeBSD 11 in
favor of hardware virtualized (HVM) domains, which provides better performance.
.Pp
Xen is a bare-metal hypervisor, which means that it is the first program loaded
after the BIOS.
A special privileged guest called the Domain-0 (
.Ql Dom0
for short) is then started.
The Dom0 uses its special privileges to directly access the underlying physical
hardware, making it a high-performance solution.
It is able to access the disk controllers and network adapters directly.
The Xen management tools to manage and control the Xen hypervisor are also used by the Dom0 to create, list, and destroy VMs.
Dom0 provides virtual disks and networking for unprivileged domains, often
called
.Ql DomU
.
 Xen Dom0 can be compared to the service console of other hypervisor solutions,
while the DomU is where individual guest VMs are run.
.Pp
Xen can migrate VMs between different Xen servers.
When the two xen hosts share the same underlying storage, the migration can be
done without having to shut the VM down first.
Instead, the migration is performed live while the DomU is running and there is
no need to restart it or plan a downtime.
This is useful in maintenance scenarios or upgrade windows to ensure that the
services provided by the DomU are still provided.
Many more features of Xen are listed on the Xen Wiki Overview page.
Note that not all features are supported on FreeBSD yet.
.Ss HARDWARE REQUIREMENTS FOR XEN DOM0
.Pp
To run the Xen hypervisor on a host, certain hardware functionality is required.
Hardware virtualized domains require Extended Page Table (EPT) and Input/Output Memory Management Unit (IOMMU) support in the host processor.
.Ss XEN DOM0 CONTROL DOMAIN SETUP
.Pp
The
.Ql emulators/xen
package works with FreeBSD 11 amd64 binary snapshots and equivalent systems
built from source.
This example assumes VNC output for unprivileged domains which is accessed from
a another system using a tool such as
.Ql net/tightvnc
.
.Pp
Install
.Ql emulators/xen
:
.Bd -literal -offset indent
# pkg install xen
.Ed
.Pp
Configuration files must be edited to prepare the host for the Dom0
integration.
An entry to
.Pa /etc/sysctl.conf
disables the limit on how many pages of memory are allowed to be wired.
Otherwise, DomU VMs with higher memory requirements will not run.
.Bd -literal -offset indent
# sysrc -f /etc/sysctl.conf vm.max_wired=-1
.Ed
.Pp
Another memory-related setting involves changing
.Pa /etc/login.conf
, setting the
.Ql memorylocked
option to
.Ql unlimited
.
Otherwise, creating DomU domains may fail with
.Er Cannot allocate memory
errors.
After making the change to
.Pa /etc/login.conf
, run
.Cm cap_mkdb
to update the capability database.
See for details.
.Bd -literal -offset indent
# sed -i '' -e 's/memorylocked=64K/memorylocked=unlimited/' /etc/login.conf
# cap_mkdb /etc/login.conf
.Ed
.Pp
Add an entry for the Xen console to
.Pa /etc/ttys
:
.Bd -literal -offset indent
# echo 'xc0 "/usr/libexec/getty Pc" xterm on secure' >> /etc/ttys
.Ed
.Pp
Selecting a Xen kernel in
.Pa /boot/loader.conf
activates the Dom0.
 Xen also requires resources like CPU and memory from the host machine for itself
and other DomU domains.
How much CPU and memory depends on the individual requirements and hardware
capabilities.
In this example, 8 GB of memory and 4 virtual CPUs are made available for the
Dom0.
The serial console is also activated and logging options are defined.
.Bd -literal -offset indent
# sysrc -f /boot/loader.conf hw.pci.mcfg=0
# sysrc -f /boot/loader.conf xen_kernel="/boot/xen"
# sysrc -f /boot/loader.conf xen_cmdline="dom0_mem=8192M dom0_max_vcpus=4 dom0pvh=1 console=com1,vga com1=115200,8n1 guest_loglvl=all loglvl=all"
.Ed
.Pp
Log files that Xen creates for the Dom0 and DomU VMs are stored in
.Pa /var/log/xen
.
This directory does not exist by default and must be created.
.Bd -literal -offset indent
# mkdir -p /var/log/xen
# chmod 644 /var/log/xen
.Ed
.Pp
Xen provides a boot menu to activate and de-activate the hypervisor on demand in
.Pa /boot/menu.rc.local
:
.Bd -literal -offset indent
# echo "try-include /boot/xen.4th" >> /boot/menu.rc.local
.Ed
.Pp
Activate the xencommons service during system startup:
.Bd -literal -offset indent
# sysrc xencommons_enable=yes
.Ed
.Pp
These settings are enough to start a Dom0-enabled system.
However, it lacks network functionality for the DomU machines.
To fix that, define a bridged interface with the main NIC of the system which
the DomU VMs can use to connect to the network.
Replace igb0 with the host network interface name.
.Bd -literal -offset indent
# sysrc autobridge_interfaces=bridge0
# sysrc autobridge_bridge0=igb0
# sysrc ifconfig_bridge0=SYNCDHCP
.Ed
.Pp
Restart the host to load the Xen kernel and start the Dom0.
.Bd -literal -offset indent
# reboot
.Ed
.Pp
After successfully booting the Xen kernel and logging into the system again, the Xen management tool
.Cm xl
is used to show information about the domains.
.Bd -literal -offset indent
# xl list
Name                                        ID   Mem VCPUs      State   Time(s)
Domain-0                                     0  8192     4     r-----     962.0
.Ed
.Pp
The output confirms that the Dom0 (called
.Ql Domain-0
) has the ID
.Ql 0
and is running.
It also has the memory and virtual CPUs that were defined in
.Pa /boot/loader.conf
earlier.
More information can be found in the Xen Documentation.
DomU guest VMs can now be created.
.Ss XEN DOMU GUEST VM CONFIGURATION
.Pp
Unprivileged domains consist of a configuration file and virtual or physical
hard disks.
Virtual disk storage for the DomU can be files created by
.Xr truncate 1 or ZFS volumes as described in .
In this example, a 20 GB volume is used.
A VM is created with the ZFS volume, a FreeBSD ISO image, 1 GB of RAM and two
virtual CPUs.
The ISO installation file is retrieved with
.Xr fetch 1 and saved locally in a file called
.Pa freebsd.iso
.
.Bd -literal -offset indent
# fetch
ftp://ftp.freebsd.org/pub/FreeBSD/releases/ISO-IMAGES/10.3/FreeBSD-10.3-RELEASE-amd64-bootonly.iso -o freebsd.iso
.Ed
.Pp
A ZFS volume of 20 GB called
.Pa xendisk0
is created to serve as the disk space for the VM.
.Bd -literal -offset indent
# zfs create -V20G -o volmode=dev zroot/xendisk0
.Ed
.Pp
The new DomU guest VM is defined in a file.
Some specific definitions like name, keymap, and VNC connection details are
also defined.
The following
.Pa freebsd.cfg
contains a minimum DomU configuration for this example:
.Bd -literal -offset indent
# cat freebsd.cfg
builder = "hvm" 
name = "freebsd" 
memory = 1024 
vcpus = 2 
vif = [ 'mac=00:16:3E:74:34:32,bridge=bridge0' ] 
disk = [
'/dev/zvol/tank/xendisk0,raw,hda,rw', 
'/root/freebsd.iso,raw,hdc:cdrom,r' 
  ]
vnc = 1 
vnclisten = "0.0.0.0"
serial = "pty"
usbdevice = "tablet"
.Ed
.Pp
These lines are explained in more detail:
.Pp
This defines what kind of virtualization to use.
.Ql hvm
refers to hardware-assisted virtualization or hardware virtual machine.
Guest operating systems can run unmodified on CPUs with virtualization
extensions, providing nearly the same performance as running on physical
hardware.
.Ql generic
is the default value and creates a PV domain.
.Pp
Name of this virtual machine to distinguish it from others running on the same
Dom0.
Required.
.Pp
Quantity of RAM in megabytes to make available to the VM.
This amount is subtracted from the hypervisor's total available memory, not the
memory of the Dom0.
.Pp
Number of virtual CPUs available to the guest VM.
For best performance, do not create guests with more virtual CPUs than the
number of physical CPUs on the host.
.Pp
Virtual network adapter.
This is the bridge connected to the network interface of the host.
The
.Ql mac
parameter is the MAC address set on the virtual network interface.
This parameter is optional, if no MAC is provided Xen will generate a random one.
.Pp
Full path to the disk, file, or ZFS volume of the disk storage for this VM.
Options and multiple disk definitions are separated by commas.
.Pp
Defines the Boot medium from which the initial operating system is installed.
In this example, it is the ISO imaged downloaded earlier.
Consult the Xen documentation for other kinds of devices and options to set.
.Pp
Options controlling VNC connectivity to the serial console of the DomU.
In order, these are: active VNC support, define IP address on which to listen,
device node for the serial console, and the input method for precise
positioning of the mouse and other input methods.
.Ql keymap
defines which keymap to use, and is
.Ql english
by default.
.Pp
After the file has been created with all the necessary options, the DomU is
created by passing it to
.Cm xl create
as a parameter.
.Bd -literal -offset indent
# xl create freebsd.cfg
.Ed
.Pp
Each time the Dom0 is restarted, the configuration file must be passed to
.Cm xl create
again to re-create the DomU.
By default, only the Dom0 is created after a reboot, not the individual VMs.
The VMs can continue where they left off as they stored the operating system on
the virtual disk.
The virtual machine configuration can change over time (for example, when
adding more memory).
The virtual machine configuration files must be properly backed up and kept
available to be able to re-create the guest VM when needed.
.Pp
The output of
.Cm xl list
confirms that the DomU has been created.
.Bd -literal -offset indent
# xl list
Name                                        ID   Mem VCPUs      State   Time(s)
Domain-0                                     0  8192     4     r-----  1653.4
freebsd                                      1  1024     1     -b----   663.9
.Ed
.Pp
To begin the installation of the base operating system, start the VNC client,
directing it to the main network address of the host or to the IP address
defined on the
.Ql vnclisten
line of
.Pa freebsd.cfg
.
After the operating system has been installed, shut down the DomU and
disconnect the VNC viewer.
Edit
.Pa freebsd.cfg
, removing the line with the
.Ql cdrom
definition or commenting it out by inserting a
.Ql #
character at the beginning of the line.
To load this new configuration, it is necessary to remove the old DomU with
.Cm xl destroy
, passing either the name or the id as the parameter.
Afterwards, recreate it using the modified
.Pa freebsd.cfg
.
.Bd -literal -offset indent
# xl destroy freebsd
# xl create freebsd.cfg
.Ed
.Pp
The machine can then be accessed again using the VNC viewer.
This time, it will boot from the virtual disk where the operating system has
been installed and can be used as a virtual machine.
.Ss SYNOPSIS
.Pp
FreeBSD is a distributed project with users and contributors located all over
the world.
As such, FreeBSD supports localization into many languages, allowing users to
view, input, or process data in non-English languages.
One can choose from most of the major languages, including, but not limited to:
Chinese, German, Japanese, Korean, French, Russian, and Vietnamese.
.Pp
The term internationalization has been shortened to i18n, which represents the number of letters between the first and the last letters
of
.Ql internationalization
.
 L10n uses the same naming scheme, but from
.Ql localization
.
The i18n/L10n methods, protocols, and applications allow users to use languages of their
choice.
.Pp
This chapter discusses the internationalization and localization features of
FreeBSD.
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
How locale names are constructed.
.It
How to set the locale for a login shell.
.It
How to configure the console for non-English languages.
.It
How to configure Xorg for different languages.
.It
How to find i18n-compliant applications.
.It
Where to find more information for configuring specific languages.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Know how to install additional third-party applications.
.El
.Ss USING LOCALIZATION
.Pp
Localization settings are based on three components: the language code, country
code, and encoding.
Locale names are constructed from these parts as follows:
.Bd -literal -offset indent
LanguageCode_CountryCode.Encoding
.Ed
.Pp
The LanguageCode and CountryCode are used to determine the country and the specific language variation.
 provides some examples of LanguageCode_CountryCode:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
LanguageCode_Country Code
.Ta
Description
.It
.Ta
en_US
.Ta
English, United States
.It
.Ta
ru_RU
.Ta
Russian, Russia
.It
.Ta
zh_TW
.Ta
Traditional Chinese, Taiwan
.El
.Pp
A complete listing of available locales can be found by typing:
.Bd -literal -offset indent
% locale -a | more
.Ed
.Pp
To determine the current locale setting:
.Bd -literal -offset indent
% locale
.Ed
.Pp
Language specific character sets, such as ISO8859-1, ISO8859-15, KOI8-R, and
CP437, are described in
.Xr multibyte 3 .
The active list of character sets can be found at the IANA Registry.
.Pp
Some languages, such as Chinese or Japanese, cannot be represented using ASCII characters and require an extended language encoding using either wide or
multibyte characters.
Examples of wide or multibyte encodings include EUC and Big5.
Older applications may mistake these encodings for control characters while
newer applications usually recognize these characters.
Depending on the implementation, users may be required to compile an
application with wide or multibyte character support, or to configure it
correctly.
.Pp
FreeBSD uses Xorg-compatible locale encodings.
.Pp
The rest of this section describes the various methods for configuring the
locale on a FreeBSD system.
The next section will discuss the considerations for finding and compiling
applications with i18n support.
.Ss SETTING LOCALE FOR LOGIN SHELL
.Pp
Locale settings are configured either in a user's
.Pa ~/.login_conf
or in the startup file of the user's shell:
.Pa ~/.profile
,
.Pa ~/.bashrc
, or
.Pa ~/.cshrc
.
.Pp
Two environment variables should be set:
.Bl -bullet -offset -compact
.It
.Ev LANG
, which sets the locale
.It
.Ev MM_CHARSET
, which sets the MIME character set used by applications
.El
.Pp
In addition to the user's shell configuration, these variables should also be
set for specific application configuration and Xorg configuration.
.Pp
Two methods are available for making the needed variable assignments: the login class method, which is the recommended method, and the startup file method.
The next two sections demonstrate how to use both methods.
.Ss LOGIN CLASSES METHOD
.Pp
This first method is the recommended method as it assigns the required
environment variables for locale name and MIME character sets for every possible shell.
This setup can either be performed by each user or it can be configured for all
users by the superuser.
.Pp
This minimal example sets both variables for Latin-1 encoding in the
.Pa .login_conf
of an individual user's home directory:
.Bd -literal -offset indent
me:\
	:charset=ISO-8859-1:\
	:lang=de_DE.ISO8859-1:
.Ed
.Pp
Here is an example of a user's
.Pa ~/.login_conf
that sets the variables for Traditional Chinese in BIG-5 encoding.
More variables are needed because some applications do not correctly respect
locale variables for Chinese, Japanese, and Korean:
.Bd -literal -offset indent
#Users who do not wish to use monetary units or time formats
#of Taiwan can manually change each variable
me:\
	:lang=zh_TW.Big5:\
	:setenv=LC_ALL=zh_TW.Big5,LC_COLLATE=zh_TW.Big5,LC_CTYPE=zh_TW.Big5,LC_MESSAGES=zh_TW.Big5,LC_MONETARY=zh_TW.Big5,LC_NUMERIC=zh_TW.Big5,LC_TIME=zh_TW.Big5:\
	:charset=big5:\
	:xmodifiers="@im=gcin": #Set gcin as the XIM Input Server
.Ed
.Pp
Alternately, the superuser can configure all users of the system for
localization.
The following variables in
.Pa /etc/login.conf
are used to set the locale and MIME character set:
.Bd -literal -offset indent
language_name|Account Type Description:\
	:charset=MIME_charset:\
	:lang=locale_name:\
	:tc=default:
.Ed
.Pp
So, the previous Latin-1 example would look like this:
.Bd -literal -offset indent
german|German Users Accounts:\
	:charset=ISO-8859-1:\
	:lang=de_DE.ISO8859-1:\
	:tc=default:
.Ed
.Pp
See
.Xr login.conf 5 for more details about these variables.
.Pp
Whenever
.Pa /etc/login.conf
is edited, remember to execute the following command to update the capability
database:
.Bd -literal -offset indent
# cap_mkdb /etc/login.conf
.Ed
.Ss UTILITIES WHICH CHANGE LOGIN CLASSES
.Pp
In addition to manually editing
.Pa /etc/login.conf
, several utilities are available for setting the locale for newly created
users.
.Pp
When using
.Cm vipw
to add new users, specify the language to set the locale:
.Bd -literal -offset indent
user:password:1111:11:language:0:0:User Name:/home/user:/bin/sh
.Ed
.Pp
When using
.Cm adduser
to add new users, the default language can be pre-configured for all new users
or specified for an individual user.
.Pp
If all new users use the same language, set
.Ql defaultclass=language
in
.Pa /etc/adduser.conf
.
.Pp
To override this setting when creating a user, either input the required locale
at this prompt:
.Bd -literal -offset indent
Enter login class: default []:
.Ed
.Pp
or specify the locale to set when invoking
.Cm adduser
:
.Bd -literal -offset indent
# adduser -class language
.Ed
.Pp
If
.Cm pw
is used to add new users, specify the locale as follows:
.Bd -literal -offset indent
# pw useradd user_name -L language
.Ed
.Ss SHELL STARTUP FILE METHOD
.Pp
This second method is not recommended as each shell that is used requires
manual configuration, where each shell has a different configuration file and
differing syntax.
As an example, to set the German language for the
.Cm sh
shell, these lines could be added to
.Pa ~/.profile
to set the shell for that user only.
These lines could also be added to
.Pa /etc/profile
or
.Pa /usr/share/skel/dot.profile
to set that shell for all users:
.Bd -literal -offset indent
.Ev LANG
=de_DE.ISO8859-1; export
.Ev LANG

.Ev MM_CHARSET
=ISO-8859-1; export
.Ev MM_CHARSET
.Ed
.Pp
However, the name of the configuration file and the syntax used differs for the
.Cm csh
shell.
These are the equivalent settings for
.Pa ~/.csh.login
,
.Pa /etc/csh.login
, or
.Pa /usr/share/skel/dot.login
:
.Bd -literal -offset indent
setenv
.Ev LANG
 de_DE.ISO8859-1
setenv
.Ev MM_CHARSET
 ISO-8859-1
.Ed
.Pp
To complicate matters, the syntax needed to configure Xorg in
.Pa ~/.xinitrc
also depends upon the shell.
The first example is for the
.Cm sh
shell and the second is for the
.Cm csh
shell:
.Bd -literal -offset indent
.Ev LANG
=de_DE.ISO8859-1; export
.Ev LANG
.Ed
.Bd -literal -offset indent
setenv
.Ev LANG
 de_DE.ISO8859-1
.Ed
.Ss CONSOLE SETUP
.Pp
Several localized fonts are available for the console.
To see a listing of available fonts, type
.Cm ls /usr/share/syscons/fonts
.
To configure the console font, specify the font_name, without the
.Pa .fnt
suffix, in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
font8x16=font_name
font8x14=font_name
font8x8=font_name
.Ed
.Pp
The keymap and screenmap can be set by adding the following to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
scrnmap=screenmap_name
keymap=keymap_name
keychange="fkey_number sequence"
.Ed
.Pp
To see the list of available screenmaps, type
.Cm ls /usr/share/syscons/scrnmaps
.
Do not include the
.Pa .scm
suffix when specifying screenmap_name.
A screenmap with a corresponding mapped font is usually needed as a workaround
for expanding bit 8 to bit 9 on a VGA adapter's font character matrix so that
letters are moved out of the pseudographics area if the screen font uses a bit
8 column.
.Pp
To see the list of available keymaps, type
.Cm ls /usr/share/syscons/keymaps
.
When specifying the keymap_name, do not include the
.Pa .kbd
suffix.
To test keymaps without rebooting, use
.Xr kbdmap 1 .
.Pp
The
.Ql keychange
entry is usually needed to program function keys to match the selected terminal
type because function key sequences cannot be defined in the keymap.
.Pp
Next, set the correct console terminal type in
.Pa /etc/ttys
for all virtual terminal entries.
 summarizes the available terminal types.:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Character Set
.Ta
Terminal Type
.It
.Ta
ISO8859-1 or ISO8859-15
.Ta
.Ql cons25l1
.It
.Ta
ISO8859-2
.Ta
.Ql cons25l2
.It
.Ta
ISO8859-7
.Ta
.Ql cons25l7
.It
.Ta
KOI8-R
.Ta
.Ql cons25r
.It
.Ta
KOI8-U
.Ta
.Ql cons25u
.It
.Ta
CP437 (VGA default)
.Ta
.Ql cons25
.It
.Ta
US-ASCII
.Ta
.Ql cons25w
.El
.Pp
For languages with wide or multibyte characters, install a console for that
language from the FreeBSD Ports Collection.
The available ports are summarized in .
Once installed, refer to the port's
.Pa pkg-message
or man pages for configuration and usage instructions.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Language
.Ta
Port Location
.It
.Ta
Traditional Chinese (BIG-5)
.Ta
.Ql chinese/big5con
.It
.Ta
Chinese/Japanese/Korean
.Ta
.Ql chinese/cce
.It
.Ta
Chinese/Japanese/Korean
.Ta
.Ql chinese/zhcon
.It
.Ta
Japanese
.Ta
.Ql chinese/kon2
.It
.Ta
Japanese
.Ta
.Ql japanese/kon2-14dot
.It
.Ta
Japanese
.Ta
.Ql japanese/kon2-16dot
.El
.Pp
If moused is enabled in
.Pa /etc/rc.conf
, additional configuration may be required.
By default, the mouse cursor of the
.Xr syscons 4 driver occupies the
.Ql 0xd0
-
.Ql 0xd3
range in the character set.
If the language uses this range, move the cursor's range by adding the
following line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
mousechar_start=3
.Ed
.Ss XORG SETUP
.Pp
describes how to install and configure Xorg.
When configuring Xorg for localization, additional fonts and input methods are available from the
FreeBSD Ports Collection.
Application specific i18n settings such as fonts and menus can be tuned in
.Pa ~/.Xresources
and should allow users to view their selected language in graphical application
menus.
.Pp
The X Input Method (XIM) protocol is an Xorg standard for inputting non-English characters.
 summarizes the input method applications which are available in the FreeBSD
Ports Collection.
Additional Fcitx and Uim applications are also available.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Language
.Ta
Input Method
.It
.Ta
Chinese
.Ta
.Ql chinese/gcin
.It
.Ta
Chinese
.Ta
.Ql chinese/ibus-chewing
.It
.Ta
Chinese
.Ta
.Ql chinese/ibus-pinyin
.It
.Ta
Chinese
.Ta
.Ql chinese/oxim
.It
.Ta
Chinese
.Ta
.Ql chinese/scim-fcitx
.It
.Ta
Chinese
.Ta
.Ql chinese/scim-pinyin
.It
.Ta
Chinese
.Ta
.Ql chinese/scim-tables
.It
.Ta
Japanese
.Ta
.Ql japanese/ibus-anthy
.It
.Ta
Japanese
.Ta
.Ql japanese/ibus-mozc
.It
.Ta
Japanese
.Ta
.Ql japanese/ibus-skk
.It
.Ta
Japanese
.Ta
.Ql japanese/im-ja
.It
.Ta
Japanese
.Ta
.Ql japanese/kinput2
.It
.Ta
Japanese
.Ta
.Ql japanese/scim-anthy
.It
.Ta
Japanese
.Ta
.Ql japanese/scim-canna
.It
.Ta
Japanese
.Ta
.Ql japanese/scim-honoka
.It
.Ta
Japanese
.Ta
.Ql japanese/scim-honoka-plugin-romkan
.It
.Ta
Japanese
.Ta
.Ql japanese/scim-honoka-plugin-wnn
.It
.Ta
Japanese
.Ta
.Ql japanese/scim-prime
.It
.Ta
Japanese
.Ta
.Ql japanese/scim-skk
.It
.Ta
Japanese
.Ta
.Ql japanese/scim-tables
.It
.Ta
Japanese
.Ta
.Ql japanese/scim-tomoe
.It
.Ta
Japanese
.Ta
.Ql japanese/scim-uim
.It
.Ta
Japanese
.Ta
.Ql japanese/skkinput
.It
.Ta
Japanese
.Ta
.Ql japanese/skkinput3
.It
.Ta
Japanese
.Ta
.Ql japanese/uim-anthy
.It
.Ta
Korean
.Ta
.Ql korean/ibus-hangul
.It
.Ta
Korean
.Ta
.Ql korean/imhangul
.It
.Ta
Korean
.Ta
.Ql korean/nabi
.It
.Ta
Korean
.Ta
.Ql korean/scim-hangul
.It
.Ta
Korean
.Ta
.Ql korean/scim-tables
.It
.Ta
Vietnamese
.Ta
.Ql vietnamese/xvnkb
.It
.Ta
Vietnamese
.Ta
.Ql vietnamese/x-unikey
.El
.Ss FINDING I18N APPLICATIONS
.Pp
i18n applications are programmed using i18n kits under libraries.
These allow developers to write a simple file and translate displayed menus and
texts to each language.
.Pp
The FreeBSD Ports Collection contains many applications with built-in support for wide or multibyte
characters for several languages.
Such applications include
.Ql i18n
in their names for easy identification.
However, they do not always support the language needed.
.Pp
Some applications can be compiled with the specific charset.
This is usually done in the port's
.Pa Makefile
or by passing a value to configure.
Refer to the i18n documentation in the respective FreeBSD port's source for more information on
how to determine the needed configure value or the port's
.Pa Makefile
to determine which compile options to use when building the port.
.Ss LOCALE CONFIGURATION FOR SPECIFIC LANGUAGES
.Pp
This section provides configuration examples for localizing a FreeBSD system
for the Russian language.
It then provides some additional resources for localizing other languages.
.Pp
This section shows the specific settings needed to localize a FreeBSD system
for the Russian language.
Refer to Using Localization for a more complete description of each type of setting.
.Pp
To set this locale for the login shell, add the following lines to each user's
.Pa ~/.login_conf
:
.Bd -literal -offset indent
me:My Account:\
	:charset=KOI8-R:\
	:lang=ru_RU.KOI8-R:
.Ed
.Pp
To configure the console, add the following lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
keymap="ru.koi8-r"
scrnmap="koi8-r2cp866"
font8x16="cp866b-8x16"
font8x14="cp866-8x14"
font8x8="cp866-8x8"
mousechar_start=3
.Ed
.Pp
For each
.Ql ttyv
entry in
.Pa /etc/ttys
, use
.Ql cons25r
as the terminal type.
.Pp
To configure printing, a special output filter is needed to convert from KOI8-R
to CP866 since most printers with Russian characters come with hardware code
page CP866.
FreeBSD includes a default filter for this purpose,
.Pa /usr/libexec/lpr/ru/koi2alt
.
To use this filter, add this entry to
.Pa /etc/printcap
:
.Bd -literal -offset indent
lp|Russian local line printer:\
	:sh:of=/usr/libexec/lpr/ru/koi2alt:\
	:lp=/dev/lpt0:sd=/var/spool/output/lpd:lf=/var/log/lpd-errs:
.Ed
.Pp
Refer to
.Xr printcap 5 for a more detailed explanation.
.Pp
To configure support for Russian filenames in mounted MS-DOS file systems, include
.Ar -L
and the locale name when adding an entry to
.Pa /etc/fstab
:
.Bd -literal -offset indent
/dev/ad0s2      /dos/c  msdos   rw,-Lru_RU.KOI8-R 0 0
.Ed
.Pp
Refer to
.Xr mount_msdosfs 8 for more details.
.Pp
To configure Russian fonts for Xorg, install the
.Ql x11-fonts/xorg-fonts-cyrillic
package.
Then, check the
.Ql "Files"
section in
.Pa /etc/X11/xorg.conf
.
The following line must be added before any other
.Ql FontPath
entries:
.Bd -literal -offset indent
FontPath   "/usr/local/lib/X11/fonts/cyrillic"
.Ed
.Pp
Additional Cyrillic fonts are available in the Ports Collection.
.Pp
To activate a Russian keyboard, add the following to the
.Ql "Keyboard"
section of
.Pa /etc/xorg.conf
:
.Bd -literal -offset indent
Option "XkbLayout"   "us,ru"
Option "XkbOptions"  "grp:toggle"
.Ed
.Pp
Make sure that
.Ql XkbDisable
is commented out in that file.
.Pp
For
.Ql grp:toggle
use Right Alt, for
.Ql grp:ctrl_shift_toggle
use CtrlShift.
For
.Ql grp:caps_toggle
use CapsLock.
The old CapsLock function is still available in LAT mode only using ShiftCapsLock.
.Ql grp:caps_toggle
does not work in Xorg for some unknown reason.
.Pp
If the keyboard has
.Do
Windows
.Dc
keys, and some non-alphabetical keys are mapped incorrectly, add the following
line to
.Pa /etc/xorg.conf
:
.Bd -literal -offset indent
Option "XkbVariant" ",winkeys"
.Ed
.Pp
The Russian XKB keyboard may not work with non-localized applications.
Minimally localized applications should call a
.Fn XtSetLanguageProc 
function early in the program.
.Pp
See
.Lk http://koi8.pp.ru/xwin.html
for more instructions on localizing Xorg applications.
For more general information about KOI8-R encoding, refer to
.Lk http://koi8.pp.ru/
.
.Ss ADDITIONAL LANGUAGE-SPECIFIC RESOURCES
.Pp
This section lists some additional resources for configuring other locales.
.Bl -tag -offset -compact
.It Traditional Chinese for Taiwan
The FreeBSD-Taiwan Project has a Chinese HOWTO for FreeBSD at
.Lk http://netlab.cse.yzu.edu.tw/~statue/freebsd/zh-tut/
.
.It Greek Language Localization
A complete article on Greek support in FreeBSD is available here, in Greek only, as part of the official FreeBSD Greek documentation.
.It Japanese and Korean Language Localization
For Japanese, refer to
.Lk http://www.jp.FreeBSD.org/
, and for Korean, refer to
.Lk http://www.kr.FreeBSD.org/
.
.It Non-English FreeBSD Documentation
Some FreeBSD contributors have translated parts of the FreeBSD documentation to
other languages.
They are available through links on the FreeBSD web site or in
.Pa /usr/share/doc
.
.El
.Ss SYNOPSIS
.Pp
FreeBSD is under constant development between releases.
Some people prefer to use the officially released versions, while others prefer
to keep in sync with the latest developments.
However, even official releases are often updated with security and other
critical fixes.
Regardless of the version used, FreeBSD provides all the necessary tools to
keep the system updated, and allows for easy upgrades between versions.
This chapter describes how to track the development system and the basic tools
for keeping a FreeBSD system up-to-date.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
How to keep a FreeBSD system up-to-date with freebsd-update or Subversion.
.It
How to compare the state of an installed system against a known pristine copy.
.It
How to keep the installed documentation up-to-date with Subversion or documentation ports.
.It
The difference between the two development branches: FreeBSD-STABLE and
FreeBSD-CURRENT.
.It
How to rebuild and reinstall the entire base system.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Properly set up the network connection ().
.It
Know how to install additional third-party software ().
.El
.Pp
Throughout this chapter,
.Cm svn
is used to obtain and update FreeBSD sources.
To use it, first install the
.Ql devel/subversion
port or package.
.Pp
Applying security patches in a timely manner and upgrading to a newer release
of an operating system are important aspects of ongoing system administration.
FreeBSD includes a utility called
.Cm freebsd-update
which can be used to perform both these tasks.
.Pp
This utility supports binary security and errata updates to FreeBSD, without
the need to manually compile and install the patch or a new kernel.
Binary updates are available for all architectures and releases currently
supported by the security team.
The list of supported releases and their estimated end-of-life dates are listed
at
.Lk https://www.FreeBSD.org/security/
.
.Pp
This utility also supports operating system upgrades to minor point releases as
well as upgrades to another release branch.
Before upgrading to a new release, review its release announcement as it
contains important information pertinent to the release.
Release announcements are available from
.Lk https://www.FreeBSD.org/releases/
.
.Pp
If a
.Cm crontab
utilizing the features of
.Xr freebsd-update 8 exists, it must be disabled before upgrading the operating system.
.Pp
This section describes the configuration file used by
.Cm freebsd-update
, demonstrates how to apply a security patch and how to upgrade to a minor or
major operating system release, and discusses some of the considerations when
upgrading the operating system.
.Ss THE CONFIGURATION FILE
.Pp
The default configuration file for
.Cm freebsd-update
works as-is.
Some users may wish to tweak the default configuration in
.Pa /etc/freebsd-update.conf
, allowing better control of the process.
The comments in this file explain the available options, but the following may
require a bit more explanation:
.Bd -literal -offset indent
# Components of the base system which should be kept updated.
Components world kernel
.Ed
.Pp
This parameter controls which parts of FreeBSD will be kept up-to-date.
The default is to update the entire base system and the kernel.
Individual components can instead be specified, such as
.Ql src/base
or
.Ql src/sys
.
However, the best option is to leave this at the default as changing it to
include specific items requires every needed item to be listed.
Over time, this could have disastrous consequences as source code and binaries
may become out of sync.
.Bd -literal -offset indent
# Paths which start with anything matching an entry in an IgnorePaths
# statement will be ignored.
IgnorePaths /boot/kernel/linker.hints
.Ed
.Pp
To leave specified directories, such as
.Pa /bin
or
.Pa /sbin
, untouched during the update process, add their paths to this statement.
This option may be used to prevent
.Cm freebsd-update
from overwriting local modifications.
.Bd -literal -offset indent
# Paths which start with anything matching an entry in an UpdateIfUnmodified
# statement will only be updated if the contents of the file have not been
# modified by the user (unless changes are merged; see below).
UpdateIfUnmodified /etc/ /var/ /root/ /.cshrc /.profile
.Ed
.Pp
This option will only update unmodified configuration files in the specified
directories.
Any changes made by the user will prevent the automatic updating of these
files.
There is another option,
.Ql KeepModifiedMetadata
, which will instruct
.Cm freebsd-update
to save the changes during the merge.
.Bd -literal -offset indent
# When upgrading to a new FreeBSD release, files which match MergeChanges
# will have any local changes merged into the version from the new release.
MergeChanges /etc/ /var/named/etc/ /boot/device.hints
.Ed
.Pp
List of directories with configuration files that
.Cm freebsd-update
should attempt to merge.
The file merge process is a series of
.Xr diff 1 patches similar to
.Xr mergemaster 8 , but with fewer options.
Merges are either accepted, open an editor, or cause
.Cm freebsd-update
to abort.
When in doubt, backup
.Pa /etc
and just accept the merges.
See
.Xr mergemaster 8 for more information about
.Cm mergemaster
.
.Bd -literal -offset indent
# Directory in which to store downloaded updates and temporary
# files used by FreeBSD Update.
# WorkDir /var/db/freebsd-update
.Ed
.Pp
This directory is where all patches and temporary files are placed.
In cases where the user is doing a version upgrade, this location should have
at least a gigabyte of disk space available.
.Bd -literal -offset indent
# When upgrading between releases, should the list of Components be
# read strictly (StrictComponents yes) or merely as a list of components
# which *might* be installed of which FreeBSD Update should figure out
# which actually are installed and upgrade those (StrictComponents no)?
# StrictComponents no
.Ed
.Pp
When this option is set to
.Ql yes
,
.Cm freebsd-update
will assume that the
.Ql Components
list is complete and will not attempt to make changes outside of the list.
Effectively,
.Cm freebsd-update
will attempt to update every file which belongs to the
.Ql Components
list.
.Ss APPLYING SECURITY PATCHES
.Pp
The process of applying FreeBSD security patches has been simplified, allowing
an administrator to keep a system fully patched using
.Cm freebsd-update
.
More information about FreeBSD security advisories can be found in .
.Pp
FreeBSD security patches may be downloaded and installed using the following
commands.
The first command will determine if any outstanding patches are available, and
if so, will list the files that will be modifed if the patches are applied.
The second command will apply the patches.
.Bd -literal -offset indent
# freebsd-update fetch
# freebsd-update install
.Ed
.Pp
If the update applies any kernel patches, the system will need a reboot in
order to boot into the patched kernel.
If the patch was applied to any running binaries, the affected applications
should be restarted so that the patched version of the binary is used.
.Pp
The system can be configured to automatically check for updates once every day
by adding this entry to
.Pa /etc/crontab
:
.Bd -literal -offset indent
@daily                                  root    freebsd-update cron
.Ed
.Pp
If patches exist, they will automatically be downloaded but will not be
applied.
The
.Ql root
user will be sent an email so that the patches may be reviewed and manually
installed with
.Cm freebsd-update install
.
.Pp
If anything goes wrong,
.Cm freebsd-update
has the ability to roll back the last set of changes with the following
command:
.Bd -literal -offset indent
# freebsd-update rollback
Uninstalling updates... done.
.Ed
.Pp
Again, the system should be restarted if the kernel or any kernel modules were
modified and any affected binaries should be restarted.
.Pp
Only the
.Pa GENERIC
kernel can be automatically updated by
.Cm freebsd-update
.
If a custom kernel is installed, it will have to be rebuilt and reinstalled
after
.Cm freebsd-update
finishes installing the updates.
However,
.Cm freebsd-update
will detect and update the
.Pa GENERIC
kernel if
.Pa /boot/GENERIC
exists, even if it is not the current running kernel of the system.
.Pp
Always keep a copy of the
.Pa GENERIC
kernel in
.Pa /boot/GENERIC
.
It will be helpful in diagnosing a variety of problems and in performing
version upgrades.
Refer to for instructions on how to get a copy of the
.Pa GENERIC
kernel.
.Pp
Unless the default configuration in
.Pa /etc/freebsd-update.conf
has been changed,
.Cm freebsd-update
will install the updated kernel sources along with the rest of the updates.
Rebuilding and reinstalling a new custom kernel can then be performed in the
usual way.
.Pp
The updates distributed by
.Cm freebsd-update
do not always involve the kernel.
It is not necessary to rebuild a custom kernel if the kernel sources have not
been modified by
.Cm freebsd-update install
.
However,
.Cm freebsd-update
will always update
.Pa /usr/src/sys/conf/newvers.sh
.
The current patch level, as indicated by the
.Ql -p
number reported by
.Cm uname -r
, is obtained from this file.
Rebuilding a custom kernel, even if nothing else changed, allows
.Cm uname
to accurately report the current patch level of the system.
This is particularly helpful when maintaining multiple systems, as it allows
for a quick assessment of the updates installed in each one.
.Ss PERFORMING MAJOR AND MINOR VERSION UPGRADES
.Pp
Upgrades from one minor version of FreeBSD to another, like from FreeBSD 9.0 to
FreeBSD 9.1, are called
.Ql minor version
upgrades.
.Ql Major version
upgrades occur when FreeBSD is upgraded from one major version to another, like
from FreeBSD 9.X to FreeBSD 10.X.
Both types of upgrades can be performed by providing
.Cm freebsd-update
with a release version target.
.Pp
If the system is running a custom kernel, make sure that a copy of the
.Pa GENERIC
kernel exists in
.Pa /boot/GENERIC
before starting the upgrade.
Refer to for instructions on how to get a copy of the
.Pa GENERIC
kernel.
.Pp
The following command, when run on a FreeBSD 9.0 system, will upgrade it to
FreeBSD 9.1:
.Bd -literal -offset indent
# freebsd-update -r 9.1-RELEASE upgrade
.Ed
.Pp
After the command has been received,
.Cm freebsd-update
will evaluate the configuration file and current system in an attempt to gather
the information necessary to perform the upgrade.
A screen listing will display which components have and have not been detected.
For example:
.Bd -literal -offset indent
Looking up update.FreeBSD.org mirrors... 1 mirrors found.
Fetching metadata signature for 9.0-RELEASE from update1.FreeBSD.org... done.
Fetching metadata index... done.
Inspecting system... done.

The following components of FreeBSD seem to be installed:
kernel/smp src/base src/bin src/contrib src/crypto src/etc src/games
src/gnu src/include src/krb5 src/lib src/libexec src/release src/rescue
src/sbin src/secure src/share src/sys src/tools src/ubin src/usbin
world/base world/info world/lib32 world/manpages

The following components of FreeBSD do not seem to be installed:
kernel/generic world/catpages world/dict world/doc world/games
world/proflibs

Does this look reasonable (y/n)? y
.Ed
.Pp
At this point,
.Cm freebsd-update
will attempt to download all files required for the upgrade.
In some cases, the user may be prompted with questions regarding what to
install or how to proceed.
.Pp
When using a custom kernel, the above step will produce a warning similar to
the following:
.Bd -literal -offset indent
WARNING: This system is running a "MYKERNEL" kernel, which is not a
kernel configuration distributed as part of FreeBSD 9.0-RELEASE.
This kernel will not be updated: you MUST update the kernel manually
before running "/usr/sbin/freebsd-update install"
.Ed
.Pp
This warning may be safely ignored at this point.
The updated
.Pa GENERIC
kernel will be used as an intermediate step in the upgrade process.
.Pp
Once all the patches have been downloaded to the local system, they will be
applied.
This process may take a while, depending on the speed and workload of the
machine.
Configuration files will then be merged.
The merging process requires some user intervention as a file may be merged or
an editor may appear on screen for a manual merge.
The results of every successful merge will be shown to the user as the process
continues.
A failed or ignored merge will cause the process to abort.
Users may wish to make a backup of
.Pa /etc
and manually merge important files, such as
.Pa master.passwd
or
.Pa group
at a later time.
.Pp
The system is not being altered yet as all patching and merging is happening in
another directory.
Once all patches have been applied successfully, all configuration files have
been merged and it seems the process will go smoothly, the changes can be
committed to disk by the user using the following command:
.Bd -literal -offset indent
# freebsd-update install
.Ed
.Pp
The kernel and kernel modules will be patched first.
If the system is running with a custom kernel, use
.Xr nextboot 8 to set the kernel for the next boot to the updated
.Pa /boot/GENERIC
:
.Bd -literal -offset indent
# nextboot -k GENERIC
.Ed
.Pp
Before rebooting with the
.Pa GENERIC
kernel, make sure it contains all the drivers required for the system to boot
properly and connect to the network, if the machine being updated is accessed
remotely.
In particular, if the running custom kernel contains built-in functionality
usually provided by kernel modules, make sure to temporarily load these modules
into the
.Pa GENERIC
kernel using the
.Pa /boot/loader.conf
facility.
It is recommended to disable non-essential services as well as any disk and
network mounts until the upgrade process is complete.
.Pp
The machine should now be restarted with the updated kernel:
.Bd -literal -offset indent
# shutdown -r now
.Ed
.Pp
Once the system has come back online, restart
.Cm freebsd-update
using the following command.
Since the state of the process has been saved,
.Cm freebsd-update
will not start from the beginning, but will instead move on to the next phase
and remove all old shared libraries and object files.
.Bd -literal -offset indent
# freebsd-update install
.Ed
.Pp
Depending upon whether any library version numbers were bumped, there may only
be two install phases instead of three.
.Pp
The upgrade is now complete.
If this was a major version upgrade, reinstall all ports and packages as
described in .
.Ss CUSTOM KERNELS WITH FREEBSD 9.X AND LATER
.Pp
Before using
.Cm freebsd-update
, ensure that a copy of the
.Pa GENERIC
kernel exists in
.Pa /boot/GENERIC
.
If a custom kernel has only been built once, the kernel in
.Pa /boot/kernel.old
is the
.Ql GENERIC
kernel.
Simply rename this directory to
.Pa /boot/kernel
.
.Pp
If a custom kernel has been built more than once or if it is unknown how many
times the custom kernel has been built, obtain a copy of the
.Ql GENERIC
kernel that matches the current version of the operating system.
If physical access to the system is available, a copy of the
.Ql GENERIC
kernel can be installed from the installation media:
.Bd -literal -offset indent
# mount /cdrom
# cd /cdrom/usr/freebsd-dist
# tar -C/ -xvf kernel.txz boot/kernel/kernel
.Ed
.Pp
Alternately, the
.Ql GENERIC
kernel may be rebuilt and installed from source:
.Bd -literal -offset indent
# cd /usr/src
# make kernel __MAKE_CONF=/dev/null SRCCONF=/dev/null
.Ed
.Pp
For this kernel to be identified as the
.Ql GENERIC
kernel by
.Cm freebsd-update
, the
.Pa GENERIC
configuration file must not have been modified in any way.
It is also suggested that the kernel is built without any other special
options.
.Pp
Rebooting into the
.Pa GENERIC
kernel is not required as
.Cm freebsd-update
only needs
.Pa /boot/GENERIC
to exist.
.Ss UPGRADING PACKAGES AFTER A MAJOR VERSION UPGRADE
.Pp
Generally, installed applications will continue to work without problems after
minor version upgrades.
Major versions use different Application Binary Interfaces (ABIs), which will break most third-party applications.
After a major version upgrade, all installed packages and ports need to be
upgraded.
Packages can be upgraded using
.Cm pkg upgrade
.
To upgrade installed ports, use a utility such as
.Ql ports-mgmt/portmaster
.
.Pp
A forced upgrade of all installed packages will replace the packages with fresh
versions from the repository even if the version number has not increased.
This is required because of the ABI version change when upgrading between major
versions of FreeBSD.
The forced upgrade can be accomplished by performing:
.Bd -literal -offset indent
# pkg-static upgrade -f
.Ed
.Pp
A rebuild of all installed applications can be accomplished with this command:
.Bd -literal -offset indent
# portmaster -af
.Ed
.Pp
This command will display the configuration screens for each application that
has configurable options and wait for the user to interact with those screens.
To prevent this behavior, and use only the default options, include
.Ar -G
in the above command.
.Pp
Once the software upgrades are complete, finish the upgrade process with a
final call to
.Cm freebsd-update
in order to tie up all the loose ends in the upgrade process:
.Bd -literal -offset indent
# freebsd-update install
.Ed
.Pp
If the
.Pa GENERIC
kernel was temporarily used, this is the time to build and install a new custom
kernel using the instructions in .
.Pp
Reboot the machine into the new FreeBSD version.
The upgrade process is now complete.
.Ss SYSTEM STATE COMPARISON
.Pp
The state of the installed FreeBSD version against a known good copy can be
tested using
.Cm freebsd-update IDS
.
This command evaluates the current version of system utilities, libraries, and
configuration files and can be used as a built-in Intrusion Detection System (IDS).
.Pp
This command is not a replacement for a real IDS such as
.Ql security/snort
.
As
.Cm freebsd-update
stores data on disk, the possibility of tampering is evident.
While this possibility may be reduced using
.Ev kern.securelevel
and by storing the
.Cm freebsd-update
data on a read-only file system when not in use, a better solution would be to
compare the system against a secure disk, such as a DVD or securely stored external USB disk device.
An alternative method for providing IDS functionality using a built-in utility is described in
.Pp
To begin the comparison, specify the output file to save the results to:
.Bd -literal -offset indent
# freebsd-update IDS >> outfile.ids
.Ed
.Pp
The system will now be inspected and a lengthy listing of files, along with the SHA256 hash values for both the known value in the release and the current
installation, will be sent to the specified output file.
.Pp
The entries in the listing are extremely long, but the output format may be
easily parsed.
For instance, to obtain a list of all files which differ from those in the
release, issue the following command:
.Bd -literal -offset indent
# cat outfile.ids | awk '{ print $1 }' | more
/etc/master.passwd
/etc/motd
/etc/passwd
/etc/pf.conf
.Ed
.Pp
This sample output has been truncated as many more files exist.
Some files have natural modifications.
For example,
.Pa /etc/passwd
will be modified if users have been added to the system.
Kernel modules may differ as
.Cm freebsd-update
may have updated them.
To exclude specific files or directories, add them to the
.Ql IDSIgnorePaths
option in
.Pa /etc/freebsd-update.conf
.
.Ss UPDATING THE DOCUMENTATION SET
.Pp
Documentation is an integral part of the FreeBSD operating system.
While an up-to-date version of the FreeBSD documentation is always available on
the FreeBSD web site (https://www.freebsd.org/doc/), it can be handy to have an up-to-date, local copy of the FreeBSD website,
handbooks, FAQ, and articles.
.Pp
This section describes how to use either source or the FreeBSD Ports Collection
to keep a local copy of the FreeBSD documentation up-to-date.
.Pp
For information on editing and submitting corrections to the documentation,
refer to the FreeBSD Documentation Project Primer for New Contributors (https://www.freebsd.org/doc/en_US.ISO8859-1/books/fdp-primer/).
.Ss UPDATING DOCUMENTATION FROM SOURCE
.Pp
Rebuilding the FreeBSD documentation from source requires a collection of tools
which are not part of the FreeBSD base system.
The required tools, including svn, can be installed from the
.Ql textproc/docproj
package or port developed by the FreeBSD Documentation Project.
.Pp
Once installed, use svn to fetch a clean copy of the documentation source:
.Bd -literal -offset indent
# svn checkout https://svn.FreeBSD.org/doc/head /usr/doc
.Ed
.Pp
The initial download of the documentation sources may take a while.
Let it run until it completes.
.Pp
Future updates of the documentation sources may be fetched by running:
.Bd -literal -offset indent
# svn update /usr/doc
.Ed
.Pp
Once an up-to-date snapshot of the documentation sources has been fetched to
.Pa /usr/doc
, everything is ready for an update of the installed documentation.
.Pp
A full update of all available languages may be performed by typing:
.Bd -literal -offset indent
# cd /usr/doc
# make install clean
.Ed
.Pp
If an update of only a specific language is desired,
.Cm make
can be invoked in a language-specific subdirectory of
.Pa /usr/doc
:
.Bd -literal -offset indent
# cd /usr/doc/en_US.ISO8859-1
# make install clean
.Ed
.Pp
An alternative way of updating the documentation is to run this command from
.Pa /usr/doc
or the desired language-specific subdirectory:
.Bd -literal -offset indent
# make update
.Ed
.Pp
The output formats that will be installed may be specified by setting
.Ev FORMATS
:
.Bd -literal -offset indent
# cd /usr/doc
# make FORMATS='html html-split' install clean
.Ed
.Pp
Several options are available to ease the process of updating only parts of the
documentation, or the build of specific translations.
These options can be set either as system-wide options in
.Pa /etc/make.conf
, or as command-line options passed to
.Cm make
.
.Pp
The options include:
.Bl -tag -offset -compact
.It
.Ev DOC_LANG
The list of languages and encodings to build and install, such as
.Ql en_US.ISO8859-1
for English documentation.
.It
.Ev FORMATS
A single format or a list of output formats to be built.
Currently,
.Ql html
,
.Ql html-split
,
.Ql txt
,
.Ql ps
, and
.Ql pdf
are supported.
.It
.Ev DOCDIR
Where to install the documentation.
It defaults to
.Pa /usr/share/doc
.
.El
.Pp
For more
.Cm make
variables supported as system-wide options in FreeBSD, refer to
.Xr make.conf 5 .
.Pp
The previous section presented a method for updating the FreeBSD documentation
from sources.
This section describes an alternative method which uses the Ports Collection
and makes it possible to:
.Bl -bullet -offset -compact
.It
Install pre-built packages of the documentation, without having to locally
build anything or install the documentation toolchain.
.It
Build the documentation sources through the ports framework, making the
checkout and build steps a bit easier.
.El
.Pp
This method of updating the FreeBSD documentation is supported by a set of
documentation ports and packages which are updated by the Documentation
Engineering Team
.Mt doceng@FreeBSD.org
on a monthly basis.
These are listed in the FreeBSD Ports Collection, under the docs category (http://www.freshports.org/docs/).
.Pp
Organization of the documentation ports is as follows:
.Bl -bullet -offset -compact
.It
The
.Ql misc/freebsd-doc-en
package or port installs all of the English documentation.
.It
The
.Ql misc/freebsd-doc-all
meta-package or port installs all documentation in all available languages.
.It
There is a package and port for each translation, such as
.Ql misc/freebsd-doc-hu
for the Hungarian documentation.
.El
.Pp
When binary packages are used, the FreeBSD documentation will be installed in
all available formats for the given language.
For example, the following command will install the latest package of the
Hungarian documentation:
.Bd -literal -offset indent
# pkg install hu-freebsd-doc
.Ed
.Pp
Packages use a format that differs from the corresponding port's name:
.Ql lang-freebsd-doc
, where lang is the short format of the language code, such as
.Ql hu
for Hungarian, or
.Ql zh_cn
for Simplified Chinese.
.Pp
To specify the format of the documentation, build the port instead of
installing the package.
For example, to build and install the English documentation:
.Bd -literal -offset indent
# cd /usr/ports/misc/freebsd-doc-en
# make install clean
.Ed
.Pp
The port provides a configuration menu where the format to build and install
can be specified.
By default, split HTML, similar to the format used on
.Lk http://www.FreeBSD.org
, and PDF are selected.
.Pp
Alternately, several
.Cm make
options can be specified when building a documentation port, including:
.Bl -tag -offset -compact
.It
.Ev WITH_HTML
Builds the HTML format with a single HTML file per document.
The formatted documentation is saved to a file called
.Pa article.html
, or
.Pa book.html
.
.It
.Ev WITH_PDF
The formatted documentation is saved to a file called
.Pa article.pdf
or
.Pa book.pdf
.
.It
.Ev DOCBASE
Specifies where to install the documentation.
It defaults to
.Pa /usr/local/share/doc/freebsd
.
.El
.Pp
This example uses variables to install the Hungarian documentation as a PDF in the specified directory:
.Bd -literal -offset indent
# cd /usr/ports/misc/freebsd-doc-hu
# make -DWITH_PDF DOCBASE=share/doc/freebsd/hu install clean
.Ed
.Pp
Documentation packages or ports can be updated using the instructions in .
For example, the following command updates the installed Hungarian
documentation using
.Ql ports-mgmt/portmaster
by using packages only:
.Bd -literal -offset indent
# portmaster -PP hu-freebsd-doc
.Ed
.Ss TRACKING A DEVELOPMENT BRANCH
.Pp
FreeBSD has two development branches: FreeBSD-CURRENT and FreeBSD-STABLE.
.Pp
This section provides an explanation of each branch and its intended audience,
as well as how to keep a system up-to-date with each respective branch.
.Ss USING FREEBSD-CURRENT
.Pp
FreeBSD-CURRENT is the
.Do
bleeding edge
.Dc
of FreeBSD development and FreeBSD-CURRENT users are expected to have a high
degree of technical skill.
Less technical users who wish to track a development branch should track
FreeBSD-STABLE instead.
.Pp
FreeBSD-CURRENT is the very latest source code for FreeBSD and includes works
in progress, experimental changes, and transitional mechanisms that might or
might not be present in the next official release.
While many FreeBSD developers compile the FreeBSD-CURRENT source code daily,
there are short periods of time when the source may not be buildable.
These problems are resolved as quickly as possible, but whether or not
FreeBSD-CURRENT brings disaster or new functionality can be a matter of when
the source code was synced.
.Pp
FreeBSD-CURRENT is made available for three primary interest groups:
.Bl -enum -offset -compact
.It
Members of the FreeBSD community who are actively working on some part of the
source tree.
.It
Members of the FreeBSD community who are active testers.
They are willing to spend time solving problems, making topical suggestions on
changes and the general direction of FreeBSD, and submitting patches.
.It
Users who wish to keep an eye on things, use the current source for reference
purposes, or make the occasional comment or code contribution.
.El
.Pp
FreeBSD-CURRENT should not be considered a fast-track to getting new features before the next release as
pre-release features are not yet fully tested and most likely contain bugs.
It is not a quick way of getting bug fixes as any given commit is just as
likely to introduce new bugs as to fix existing ones.
FreeBSD-CURRENT is not in any way
.Do
officially supported
.Dc
.
.Pp
To track FreeBSD-CURRENT:
.Bl -enum -offset -compact
.It
Join the freebsd-current and the svn-src-head lists.
This is essential in order to see the comments that people are making about the current state of
the system and to receive important bulletins about the current state of
FreeBSD-CURRENT.
The svn-src-head list records the commit log entry for each change as it is made, along with any
pertinent information on possible side effects.
To join these lists, go to http://lists.FreeBSD.org/mailman/listinfo, click on the list to subscribe to, and follow the instructions.
In order to track changes to the whole source tree, not just the changes to
FreeBSD-CURRENT, subscribe to the svn-src-all list.
.It
Synchronize with the FreeBSD-CURRENT sources.
Typically, svn is used to check out the -CURRENT code from the
.Ql head
branch of one of the Subversion mirror sites listed in .
.It
Due to the size of the repository, some users choose to only synchronize the
sections of source that interest them or which they are contributing patches
to.
However, users that plan to compile the operating system from source must
download all of FreeBSD-CURRENT, not just selected portions.
Before compiling FreeBSD-CURRENT , read
.Pa /usr/src/Makefile
very carefully and follow the instructions in .
Read the FreeBSD-CURRENT mailing list and
.Pa /usr/src/UPDATING
to stay up-to-date on other bootstrapping procedures that sometimes become
necessary on the road to the next release.
.It
Be active!
FreeBSD-CURRENT users are encouraged to submit their suggestions for
enhancements or bug fixes.
Suggestions with accompanying code are always welcome.
.El
.Ss USING FREEBSD-STABLE
.Pp
FreeBSD-STABLE is the development branch from which major releases are made.
Changes go into this branch at a slower pace and with the general assumption
that they have first been tested in FreeBSD-CURRENT.
This is still a development branch and, at any given time, the sources for FreeBSD-STABLE may
or may not be suitable for general use.
It is simply another engineering development track, not a resource for
end-users.
Users who do not have the resources to perform testing should instead run the
most recent release of FreeBSD.
.Pp
Those interested in tracking or contributing to the FreeBSD development
process, especially as it relates to the next release of FreeBSD, should
consider following FreeBSD-STABLE.
.Pp
While the FreeBSD-STABLE branch should compile and run at all times, this
cannot be guaranteed.
Since more people run FreeBSD-STABLE than FreeBSD-CURRENT, it is inevitable
that bugs and corner cases will sometimes be found in FreeBSD-STABLE that were
not apparent in FreeBSD-CURRENT.
For this reason, one should not blindly track FreeBSD-STABLE.
It is particularly important not to update any production servers to FreeBSD-STABLE without thoroughly testing
the code in a development or testing environment.
.Pp
To track FreeBSD-STABLE:
.Bl -enum -offset -compact
.It
Join the freebsd-stable list in order to stay informed of build dependencies that may appear in
FreeBSD-STABLE or any other issues requiring special attention.
Developers will also make announcements in this mailing list when they are
contemplating some controversial fix or update, giving the users a chance to
respond if they have any issues to raise concerning the proposed change.
Join the relevant svn list for the branch being tracked.
For example, users tracking the 9-STABLE branch should join the svn-src-stable-9 list.
This list records the commit log entry for each change as it is made, along
with any pertinent information on possible side effects.
To join these lists, go to http://lists.FreeBSD.org/mailman/listinfo, click on the list to subscribe to, and follow the instructions.
In order to track changes for the whole source tree, subscribe to svn-src-all.
.It
To install a new FreeBSD-STABLE system, install the most recent FreeBSD-STABLE
release from the FreeBSD mirror sites or use a monthly snapshot built from FreeBSD-STABLE.
Refer to www.freebsd.org/snapshots for more information about snapshots.
To compile or upgrade to an existing FreeBSD system to FreeBSD-STABLE, use svn  to check out the source for the desired branch.
Branch names, such as
.Ql stable/9
, are listed at www.freebsd.org/releng.
.It
Before compiling or upgrading to FreeBSD-STABLE , read
.Pa /usr/src/Makefile
carefully and follow the instructions in .
Read the FreeBSD-STABLE mailing list and
.Pa /usr/src/UPDATING
to keep up-to-date on other bootstrapping procedures that sometimes become
necessary on the road to the next release.
.El
.Ss UPDATING FREEBSD FROM SOURCE
.Pp
Updating FreeBSD by compiling from source offers several advantages over binary
updates.
Code can be built with options to take advantage of specific hardware.
Parts of the base system can be built with non-default settings, or left out
entirely where they are not needed or desired.
The build process takes longer to update a system than just installing binary
updates, but allows complete customization to produce a tailored version of
FreeBSD.
.Ss QUICK START
.Pp
This is a quick reference for the typical steps used to update FreeBSD by
building from source.
Later sections describe the process in more detail.
.Ss UPDATE AND BUILD
.Bd -literal -offset indent
# svn update /usr/src  
check
.Pa /usr/src/UPDATING
  
# cd /usr/src          
# make -j4 buildworld  
# make -j4 kernel      
# shutdown -r now      
# cd /usr/src          
# make installworld    
# mergemaster -Ui      
# shutdown -r now
.Ed
.Pp
Get the latest version of the source.
See for more information on obtaining and updating source.
.Pp
Check
.Pa /usr/src/UPDATING
for any manual steps required before or after building from source.
.Pp
Go to the source directory.
.Pp
Compile the world, everything except the kernel.
.Pp
Compile and install the kernel.
This is equivalent to
.Cm make buildkernel installkernel
.
.Pp
Reboot the system to the new kernel.
.Pp
Go to the source directory.
.Pp
Install the world.
.Pp
Update and merge configuration files in
.Pa /etc/
.
.Pp
Restart the system to use the newly-built world and kernel.
.Ss PREPARING FOR A SOURCE UPDATE
.Pp
Read
.Pa /usr/src/UPDATING
.
Any manual steps that must be performed before or after an update are described
in this file.
.Ss UPDATING THE SOURCE
.Pp
FreeBSD source code is located in
.Pa /usr/src/
.
The preferred method of updating this source is through the Subversion version control system.
Verify that the source code is under version control:
.Bd -literal -offset indent
# svn info /usr/src
Path: /usr/src
Working Copy Root Path: /usr/src
...
.Ed
.Pp
This indicates that
.Pa /usr/src/
is under version control and can be updated with
.Xr svn 1 :
.Bd -literal -offset indent
# svn update /usr/src
.Ed
.Pp
The update process can take some time if the directory has not been updated
recently.
After it finishes, the source code is up to date and the build process
described in the next section can begin.
.Ss OBTAINING THE SOURCE
.Pp
If the output says
.Ql '/usr/src' is not a working copy
, the files there are missing or were installed with a different method.
A new checkout of the source is required.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
.Cm uname -r
Output
.Ta
Repository Path
.Ta
Description
.It
.Ta
.Ql X.Y-RELEASE
.Ta
.Ql base/releng/
X.Y
.Ta
The Release version plus only critical security and bug fix patches.
This branch is recommended for most users.
.It
.Ta
.Ql X.Y-STABLE
.Ta
.Ql base/stable/
X
.Ta
.Pp
The Release version plus all additional development on that branch.
 STABLE refers to the Applications Binary Interface (ABI) not changing, so software compiled for earlier versions still runs.
For example, software compiled to run on FreeBSD 10.1 will still run on FreeBSD
10-STABLE compiled later.
.Pp
STABLE branches occasionally have bugs or incompatibilities which might affect
users, although these are typically fixed quickly.
.It
.Ta
.Ql X-CURRENT
.Ta
.Ql base/head/
.Ta
The latest unreleased development version of FreeBSD.
The CURRENT branch can have major bugs or incompatibilities and is recommended
only for advanced users.
.El
.Pp
Determine which version of FreeBSD is being used with
.Xr uname 1 :
.Bd -literal -offset indent
# uname -r
10.3-RELEASE
.Ed
.Pp
Based on , the source used to update
.Ql 10.3-RELEASE
has a repository path of
.Ql base/releng/10.3
.
That path is used when checking out the source:
.Bd -literal -offset indent
# mv /usr/src /usr/src.bak  
# svn checkout https://svn.freebsd.org/base/releng/10.3 /usr/src
.Ed
.Pp
Move the old directory out of the way.
If there are no local modifications in this directory, it can be deleted.
.Pp
The path from is added to the repository URL.
The third parameter is the destination directory for the source code on the
local system.
.Ss BUILDING FROM SOURCE
.Pp
The world, or all of the operating system except the kernel, is compiled.
This is done first to provide up-to-date tools to build the kernel.
Then the kernel itself is built:
.Bd -literal -offset indent
# cd /usr/src
# make buildworld
# make buildkernel
.Ed
.Pp
The compiled code is written to
.Pa /usr/obj
.
.Pp
These are the basic steps.
Additional options to control the build are described below.
.Ss PERFORMING A CLEAN BUILD
.Pp
Some versions of the FreeBSD build system leave previously-compiled code in the
temporary object directory,
.Pa /usr/obj
.
This can speed up later builds by avoiding recompiling code that has not
changed.
To force a clean rebuild of everything, use
.Ql cleanworld
before starting a build:
.Bd -literal -offset indent
# make cleanworld
.Ed
.Ss SETTING THE NUMBER OF JOBS
.Pp
Increasing the number of build jobs on multi-core processors can improve build
speed.
Determine the number of cores with
.Cm sysctl hw.ncpu
.
Processors vary, as do the build systems used with different versions of
FreeBSD, so testing is the only sure method to tell how a different number of
jobs affects the build speed.
For a starting point, consider values between half and double the number of
cores.
The number of jobs is specified with
.Ar -j
.
.Pp
Building the world and kernel with four jobs:
.Bd -literal -offset indent
# make -j4 buildworld buildkernel
.Ed
.Ss BUILDING ONLY THE KERNEL
.Pp
A
.Ql buildworld
must be completed if the source code has changed.
After that, a
.Ql buildkernel
to build a kernel can be run at any time.
To build just the kernel:
.Bd -literal -offset indent
# cd /usr/src
# make buildkernel
.Ed
.Ss BUILDING A CUSTOM KERNEL
.Pp
The standard FreeBSD kernel is based on a kernel config file called
.Pa GENERIC
.
The
.Pa GENERIC
kernel includes the most commonly-needed device drivers and options.
Sometimes it is useful or necessary to build a custom kernel, adding or
removing device drivers or options to fit a specific need.
.Pp
For example, someone developing a small embedded computer with severely limited RAM could remove unneeded device drivers or options to make the kernel slightly
smaller.
.Pp
Kernel config files are located in
.Pa /usr/src/sys/arch/conf/
, where arch is the output from
.Cm uname -m
.
On most computers, that is
.Ql amd64
, giving a config file directory of
.Pa /usr/src/sys/amd64/conf/
.
.Pp
.Pa /usr/src
can be deleted or recreated, so it is preferable to keep custom kernel config
files in a separate directory, like
.Pa /root
.
Link the kernel config file into the
.Pa conf
directory.
If that directory is deleted or overwritten, the kernel config can be re-linked
into the new one.
.Pp
A custom config file can be created by copying the
.Pa GENERIC
config file.
In this example, the new custom kernel is for a storage server, so is named
.Pa STORAGESERVER
:
.Bd -literal -offset indent
# cp /usr/src/sys/amd64/conf/GENERIC /root/STORAGESERVER
# cd /usr/src/sys/amd64/conf
# ln -s /root/STORAGESERVER .
.Ed
.Pp
.Pa /root/STORAGESERVER
is then edited, adding or removing devices or options as shown in
.Xr config 5 .
.Pp
The custom kernel is built by setting
.Ev KERNCONF
to the kernel config file on the command line:
.Bd -literal -offset indent
# make buildkernel KERNCONF=STORAGESERVER
.Ed
.Ss INSTALLING THE COMPILED CODE
.Pp
After the
.Ql buildworld
and
.Ql buildkernel
steps have been completed, the new kernel and world are installed:
.Bd -literal -offset indent
# cd /usr/src
# make installkernel
# shutdown -r now
# cd /usr/src
# make installworld
# shutdown -r now
.Ed
.Pp
If a custom kernel was built,
.Ev KERNCONF
must also be set to use the new custom kernel:
.Bd -literal -offset indent
# cd /usr/src
# make installkernel KERNCONF=STORAGESERVER
# shutdown -r now
# cd /usr/src
# make installworld
# shutdown -r now
.Ed
.Ss COMPLETING THE UPDATE
.Pp
A few final tasks complete the update.
Any modified configuration files are merged with the new versions, outdated
libraries are located and removed, then the system is restarted.
.Ss MERGING CONFIGURATION FILES WITH MERGEMASTER
.Pp
.Xr mergemaster 8 provides an easy way to merge changes that have been made to system
configuration files with new versions of those files.
.Pp
With
.Ar -Ui
,
.Xr mergemaster 8 automatically updates files that have not been user-modified and installs new
files that are not already present:
.Bd -literal -offset indent
# mergemaster -Ui
.Ed
.Pp
If a file must be manually merged, an interactive display allows the user to
choose which portions of the files are kept.
See
.Xr mergemaster 8 for more information.
.Ss CHECKING FOR OUTDATED FILES AND LIBRARIES
.Pp
Some obsolete files or directories can remain after an update.
These files can be located:
.Bd -literal -offset indent
# make check-old
.Ed
.Pp
and deleted:
.Bd -literal -offset indent
# make delete-old
.Ed
.Pp
Some obsolete libraries can also remain.
These can be detected with:
.Bd -literal -offset indent
# make check-old-libs
.Ed
.Pp
and deleted with
.Bd -literal -offset indent
# make delete-old-libs
.Ed
.Pp
Programs which were still using those old libraries will stop working when the
library has been deleted.
These programs must be rebuilt or replaced after deleting the old libraries.
.Pp
When all the old files or directories are known to be safe to delete, pressing y and Enter to delete each file can be avoided by setting
.Ev BATCH_DELETE_OLD_FILES
in the command.
For example:
.Bd -literal -offset indent
# make BATCH_DELETE_OLD_FILES=yes delete-old-libs
.Ed
.Ss RESTARTING AFTER THE UPDATE
.Pp
The last step after updating is to restart the computer so all the changes take
effect:
.Bd -literal -offset indent
# shutdown -r now
.Ed
.Pp
When multiple machines need to track the same source tree, it is a waste of
disk space, network bandwidth, and CPU cycles to have each system download the sources and rebuild everything.
The solution is to have one machine do most of the work, while the rest of the
machines mount that work via NFS.
This section outlines a method of doing so.
For more information about using NFS, refer to .
.Pp
First, identify a set of machines which will run the same set of binaries,
known as a
.Ql build set
.
Each machine can have a custom kernel, but will run the same userland binaries.
From that set, choose a machine to be the
.Ql build machine
that the world and kernel are built on.
Ideally, this is a fast machine that has sufficient spare CPU to run
.Cm make buildworld
and
.Cm make buildkernel
.
.Pp
Select a machine to be the
.Ql test machine
, which will test software updates before they are put into production.
This must be a machine that can afford to be down for an extended period of time.
It can be the build machine, but need not be.
.Pp
All the machines in this build set need to mount
.Pa /usr/obj
and
.Pa /usr/src
from the build machine via NFS.
For multiple build sets,
.Pa /usr/src
should be on one build machine, and NFS mounted on the rest.
.Pp
Ensure that
.Pa /etc/make.conf
and
.Pa /etc/src.conf
on all the machines in the build set agree with the build machine.
That means that the build machine must build all the parts of the base system
that any machine in the build set is going to install.
Also, each build machine should have its kernel name set with
.Ev KERNCONF
in
.Pa /etc/make.conf
, and the build machine should list them all in its
.Ev KERNCONF
, listing its own kernel first.
The build machine must have the kernel configuration files for each machine in
its
.Pa /usr/src/sys/arch/conf
.
.Pp
On the build machine, build the kernel and world as described in , but do not install anything on the build machine.
Instead, install the built kernel on the test machine.
On the test machine, mount
.Pa /usr/src
and
.Pa /usr/obj
via NFS.
Then, run
.Cm shutdown now
to go to single-user mode in order to install the new kernel and world and run
.Cm mergemaster
as usual.
When done, reboot to return to normal multi-user operations.
.Pp
After verifying that everything on the test machine is working properly, use
the same procedure to install the new software on each of the other machines in
the build set.
.Pp
The same methodology can be used for the ports tree.
The first step is to share
.Pa /usr/ports
via NFS to all the machines in the build set.
To configure
.Pa /etc/make.conf
to share distfiles, set
.Ev DISTDIR
to a common shared directory that is writable by whichever user
.Ql root
is mapped to by the NFS mount.
Each machine should set
.Ev WRKDIRPREFIX
to a local build directory, if ports are to be built locally.
Alternately, if the build system is to build and distribute packages to the
machines in the build set, set
.Ev PACKAGES
on the build system to a directory similar to
.Ev DISTDIR
.
.Ss SYNOPSIS
.Pp
DTrace, also known as Dynamic Tracing, was developed by Sun as a tool for locating performance bottlenecks in production and pre-production
systems.
In addition to diagnosing performance problems, DTrace can be used to help
investigate and debug unexpected behavior in both the FreeBSD kernel and in
userland programs.
.Pp
DTrace is a remarkable profiling tool, with an impressive array of features for
diagnosing system issues.
It may also be used to run pre-written scripts to take advantage of its
capabilities.
Users can author their own utilities using the DTrace D Language, allowing them
to customize their profiling based on specific needs.
.Pp
The FreeBSD implementation provides full support for kernel DTrace and
experimental support for userland DTrace.
Userland DTrace allows users to perform function boundary tracing for userland
programs using the
.Ql pid
provider, and to insert static probes into userland programs for later tracing.
Some ports, such as
.Ql databases/postgres-server
and
.Ql lang/php56
have a DTrace option to enable static probes.
FreeBSD 10.0-RELEASE has reasonably good userland DTrace support, but it is not
considered production ready.
In particular, it is possible to crash traced programs.
.Pp
The official guide to DTrace is maintained by the Illumos project at
.Lk DTrace Guide
.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
What DTrace is and what features it provides.
.It
Differences between the Solaris DTrace implementation and the one provided by FreeBSD.
.It
How to enable and use DTrace on FreeBSD.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Understand UNIX and FreeBSD basics ().
.It
Have some familiarity with security and how it pertains to FreeBSD ().
.El
.Ss IMPLEMENTATION DIFFERENCES
.Pp
While the DTrace in FreeBSD is similar to that found in Solaris, differences do exist.
The primary difference is that in FreeBSD, DTrace is implemented as a set of
kernel modules and DTrace can not be used until the modules are loaded.
To load all of the necessary modules:
.Bd -literal -offset indent
# kldload dtraceall
.Ed
.Pp
Beginning with FreeBSD 10.0-RELEASE, the modules are automatically loaded when
.Cm dtrace
is run.
.Pp
FreeBSD uses the
.Ql DDB_CTF
kernel option to enable support for loading CTF data from kernel modules and the kernel itself.
 CTF is the Solaris Compact C Type Format which encapsulates a reduced form of debugging
information similar to DWARF and the venerable stabs.
 CTF data is added to binaries by the
.Cm ctfconvert
and
.Cm ctfmerge
build tools.
The
.Cm ctfconvert
utility parses DWARF  ELF debug sections created by the compiler and
.Cm ctfmerge
merges CTF  ELF sections from objects into either executables or shared libraries.
.Pp
Some different providers exist for FreeBSD than for Solaris.
Most notable is the
.Ql dtmalloc
provider, which allows tracing
.Fn malloc
by type in the FreeBSD kernel.
Some of the providers found in Solaris, such as
.Ql cpc
and
.Ql mib
, are not present in FreeBSD.
These may appear in future versions of FreeBSD.
Moreover, some of the providers available in both operating systems are not
compatible, in the sense that their probes have different argument types.
Thus, D scripts written on Solaris may or may not work unmodified on FreeBSD, and vice versa.
.Pp
Due to security differences, only
.Ql root
may use DTrace on FreeBSD.
 Solaris has a few low level security checks which do not yet exist in FreeBSD.
As such, the
.Pa /dev/dtrace/dtrace
is strictly limited to
.Ql root
.
.Pp
DTrace falls under the Common Development and Distribution License (CDDL) license.
To view this license on FreeBSD, see
.Pa /usr/src/cddl/contrib/opensolaris/OPENSOLARIS.LICENSE
or view it online at
.Lk http://opensource.org/licenses/CDDL-1.0
.
While a FreeBSD kernel with DTrace support is BSD licensed, the CDDL is used when the modules are distributed in binary form or the binaries are
loaded.
.Ss ENABLING DTRACE SUPPORT
.Pp
In FreeBSD 9.2 and 10.0, DTrace support is built into the
.Pa GENERIC
kernel.
Users of earlier versions of FreeBSD or who prefer to statically compile in
DTrace support should add the following lines to a custom kernel configuration
file and recompile the kernel using the instructions in :
.Bd -literal -offset indent
options         KDTRACE_HOOKS
options         DDB_CTF
makeoptions	DEBUG=-g
makeoptions	WITH_CTF=1
.Ed
.Pp
Users of the AMD64 architecture should also add this line:
.Bd -literal -offset indent
options         KDTRACE_FRAME
.Ed
.Pp
This option provides support for FBT.
While DTrace will work without this option, there will be limited support for
function boundary tracing.
.Pp
Once the FreeBSD system has rebooted into the new kernel, or the DTrace kernel
modules have been loaded using
.Cm kldload dtraceall
, the system will need support for the Korn shell as the DTrace Toolkit has
several utilities written in
.Cm ksh
.
Make sure that the
.Ql shells/ksh93
package or port is installed.
It is also possible to run these tools under
.Ql shells/pdksh
or
.Ql shells/mksh
.
.Pp
Finally, install the current DTrace Toolkit, a collection of ready-made scripts
for collecting system information.
There are scripts to check open files, memory, CPU usage, and a lot more.
FreeBSD 10 installs a few of these scripts into
.Pa /usr/share/dtrace
.
On other FreeBSD versions, or to install the full DTrace Toolkit, use the
.Ql sysutils/DTraceToolkit
package or port.
.Pp
The scripts found in
.Pa /usr/share/dtrace
have been specifically ported to FreeBSD.
Not all of the scripts found in the DTrace Toolkit will work as-is on FreeBSD
and some scripts may require some effort in order for them to work on FreeBSD.
.Pp
The DTrace Toolkit includes many scripts in the special language of DTrace.
This language is called the D language and it is very similar to C++.
An in depth discussion of the language is beyond the scope of this document.
It is extensively discussed at
.Lk http://wikis.oracle.com/display/DTrace/Documentation
.
.Ss USING DTRACE
.Pp
DTrace scripts consist of a list of one or more
.Ql probes
, or instrumentation points, where each probe is associated with an action.
Whenever the condition for a probe is met, the associated action is executed.
For example, an action may occur when a file is opened, a process is started,
or a line of code is executed.
The action might be to log some information or to modify context variables.
The reading and writing of context variables allows probes to share information
and to cooperatively analyze the correlation of different events.
.Pp
To view all probes, the administrator can execute the following command:
.Bd -literal -offset indent
# dtrace -l | more
.Ed
.Pp
Each probe has an
.Ql ID
, a
.Ql PROVIDER
(dtrace or fbt), a
.Ql MODULE
, and a
.Ql FUNCTION NAME
.
Refer to
.Xr dtrace 1 for more information about this command.
.Pp
The examples in this section provide an overview of how to use two of the fully
supported scripts from the DTrace Toolkit: the
.Pa hotkernel
and
.Pa procsystime
scripts.
.Pp
The
.Pa hotkernel
script is designed to identify which function is using the most kernel time.
It will produce output similar to the following:
.Bd -literal -offset indent
# cd /usr/share/dtrace/toolkit
# ./hotkernel
Sampling... Hit Ctrl-C to end.
.Ed
.Pp
As instructed, use the CtrlC key combination to stop the process.
Upon termination, the script will display a list of kernel functions and timing
information, sorting the output in increasing order of time:
.Bd -literal -offset indent
kernel`_thread_lock_flags                                   2   0.0%
0xc1097063                                                  2   0.0%
kernel`sched_userret                                        2   0.0%
kernel`kern_select                                          2   0.0%
kernel`generic_copyin                                       3   0.0%
kernel`_mtx_assert                                          3   0.0%
kernel`vm_fault                                             3   0.0%
kernel`sopoll_generic                                       3   0.0%
kernel`fixup_filename                                       4   0.0%
kernel`_isitmyx                                             4   0.0%
kernel`find_instance                                        4   0.0%
kernel`_mtx_unlock_flags                                    5   0.0%
kernel`syscall                                              5   0.0%
kernel`DELAY                                                5   0.0%
0xc108a253                                                  6   0.0%
kernel`witness_lock                                         7   0.0%
kernel`read_aux_data_no_wait                                7   0.0%
kernel`Xint0x80_syscall                                     7   0.0%
kernel`witness_checkorder                                   7   0.0%
kernel`sse2_pagezero                                        8   0.0%
kernel`strncmp                                              9   0.0%
kernel`spinlock_exit                                       10   0.0%
kernel`_mtx_lock_flags                                     11   0.0%
kernel`witness_unlock                                      15   0.0%
kernel`sched_idletd                                       137   0.3%
0xc10981a5                                              42139  99.3%
.Ed
.Pp
This script will also work with kernel modules.
To use this feature, run the script with
.Ar -m
:
.Bd -literal -offset indent
# ./hotkernel -m
Sampling... Hit Ctrl-C to end.
^C
MODULE                                                  COUNT   PCNT
0xc107882e                                                  1   0.0%
0xc10e6aa4                                                  1   0.0%
0xc1076983                                                  1   0.0%
0xc109708a                                                  1   0.0%
0xc1075a5d                                                  1   0.0%
0xc1077325                                                  1   0.0%
0xc108a245                                                  1   0.0%
0xc107730d                                                  1   0.0%
0xc1097063                                                  2   0.0%
0xc108a253                                                 73   0.0%
kernel                                                    874   0.4%
0xc10981a5                                             213781  99.6%
.Ed
.Pp
The
.Pa procsystime
script captures and prints the system call time usage for a given process ID (PID) or process name.
In the following example, a new instance of
.Pa /bin/csh
was spawned.
Then,
.Pa procsystime
was executed and remained waiting while a few commands were typed on the other
incarnation of
.Cm csh
.
These are the results of this test:
.Bd -literal -offset indent
# ./procsystime -n csh
Tracing... Hit Ctrl-C to end...
^C

Elapsed Times for processes csh,

         SYSCALL          TIME (ns)
          getpid               6131
       sigreturn               8121
           close              19127
           fcntl              19959
             dup              26955
         setpgid              28070
            stat              31899
       setitimer              40938
           wait4              62717
       sigaction              67372
     sigprocmask             119091
    gettimeofday             183710
           write             263242
          execve             492547
           ioctl             770073
           vfork            3258923
      sigsuspend            6985124
            read         3988049784
.Ed
.Pp
As shown, the
.Fn read
system call used the most time in nanoseconds while the
.Fn getpid
system call used the least amount of time.
.Sh USB DEVICE MODE / USB OTG
.Ss SYNOPSIS
.Pp
This chapter covers the use of USB Device Mode and USB On The Go (USB OTG) in FreeBSD.
This includes virtual serial consoles, virtual network interfaces, and virtual
USB drives.
.Pp
When running on hardware that supports USB device mode or USB OTG, like that built into many embedded boards, the FreeBSD USB stack can run in device mode.
Device mode makes it possible for the computer to present itself as different
kinds of USB device classes, including serial ports, network adapters, and mass storage, or
a combination thereof.
A USB host like a laptop or desktop computer is able to access them just like
physical USB devices.
Device mode is sometimes called the
.Do
USB gadget mode
.Dc
.
.Pp
There are two basic ways the hardware can provide the device mode
functionality: with a separate "client port", which only supports the device
mode, and with a USB OTG port, which can provide both device and host mode.
For USB OTG ports, the USB stack switches between host-side and device-side automatically, depending on
what is connected to the port.
Connecting a USB device like a memory stick to the port causes FreeBSD to switch to host mode.
Connecting a USB host like a computer causes FreeBSD to switch to device mode.
Single purpose "client ports" always work in device mode.
.Pp
What FreeBSD presents to the USB host depends on the
.Ev hw.usb.template
sysctl.
Some templates provide a single device, such as a serial terminal; others
provide multiple ones, which can all be used at the same time.
An example is the template 10, which provides a mass storage device, a serial
console, and a network interface.
See
.Xr usb_template 4 for the list of available values.
.Pp
Note that in some cases, depending on the hardware and the hosts operating
system, for the host to notice the configuration change, it must be either
physically disconnected and reconnected, or forced to rescan the USB bus in a system-specific way.
When FreeBSD is running on the host,
.Xr usbconfig 8
.Cm reset
can be used.
This also must be done after loading
.Pa usb_template.ko
if the USB host was already connected to the USB  OTG socket.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
How to set up USB Device Mode functionality on FreeBSD.
.It
How to configure the virtual serial port on FreeBSD.
.It
How to connect to the virtual serial port from various operating systems.
.It
How to configure FreeBSD to provide a virtual USB network interface.
.It
How to configure FreeBSD to provide a virtual USB storage device.
.El
.Ss USB VIRTUAL SERIAL PORTS
.Ss CONFIGURING USB DEVICE MODE SERIAL PORTS
.Pp
Virtual serial port support is provided by templates number 3, 8, and 10.
Note that template 3 works with Microsoft Windows 10 without the need for
special drivers and INF files.
Other host operating systems work with all three templates.
Both
.Xr usb_template 4 and
.Xr umodem 4 kernel modules must be loaded.
.Pp
To enable USB device mode serial ports, add those lines to
.Pa /etc/ttys
:
.Bd -literal -offset indent
ttyU0	"/usr/libexec/getty 3wire"	vt100	onifconsole secure
ttyU1	"/usr/libexec/getty 3wire"	vt100	onifconsole secure
.Ed
.Pp
Then add these lines to
.Pa /etc/devd.conf
:
.Bd -literal -offset indent
notify 100 {
	match "system"		"DEVFS";
	match "subsystem"	"CDEV";
	match "type"		"CREATE";
	match "cdev"		"ttyU[0-9]+";
	action "/sbin/init q";
};
.Ed
.Pp
Reload the configuration if
.Xr devd 8 is already running:
.Bd -literal -offset indent
# service devd restart
.Ed
.Pp
Make sure the necessary modules are loaded and the correct template is set at
boot by adding those lines to
.Pa /boot/loader.conf
, creating it if it does not already exist:
.Bd -literal -offset indent
umodem_load="YES"
hw.usb.template=3
.Ed
.Pp
To load the module and set the template without rebooting use:
.Bd -literal -offset indent
# kldload umodem
# sysctl hw.usb.template=3
.Ed
.Ss CONNECTING TO USB DEVICE MODE SERIAL PORTS FROM FREEBSD
.Pp
To connect to a board configured to provide USB device mode serial ports,
connect the USB host, such as a laptop, to the boards USB OTG or USB client
port.
Use
.Cm pstat -t
on the host to list the terminal lines.
Near the end of the list you should see a USB serial port, eg "ttyU0".
To open the connection, use:
.Bd -literal -offset indent
# cu -l /dev/ttyU0
.Ed
.Pp
After pressing the Enter key a few times you will see a login prompt.
.Ss CONNECTING TO USB DEVICE MODE SERIAL PORTS FROM MACOS
.Pp
To connect to a board configured to provide USB device mode serial ports,
connect the USB host, such as a laptop, to the boards USB OTG or USB client
port.
To open the connection, use:
.Bd -literal -offset indent
# cu -l /dev/cu.usbmodemFreeBSD1
.Ed
.Ss CONNECTING TO USB DEVICE MODE SERIAL PORTS FROM LINUX
.Pp
To connect to a board configured to provide USB device mode serial ports,
connect the USB host, such as a laptop, to the boards USB OTG or USB client
port.
To open the connection, use:
.Bd -literal -offset indent
# minicom -D /dev/ttyACM0
.Ed
.Ss CONNECTING TO USB DEVICE MODE SERIAL PORTS FROM MICROSOFT WINDOWS 10
.Pp
To connect to a board configured to provide USB device mode serial ports,
connect the USB host, such as a laptop, to the boards USB OTG or USB client
port.
To open a connection you will need a serial terminal program, such as PuTTY.
To check the COM port name used by Windows, run Device Manager, expand "Ports
(COM & LPT)".
You will see a name similar to "USB Serial Device (COM4)".
Run serial terminal program of your choice, for example PuTTY.
In the PuTTY dialog set "Connection type" to "Serial", type the COMx obtained from Device
Manager in the "Serial line" dialog box and click Open.
.Ss USB DEVICE MODE NETWORK INTERFACES
.Pp
Virtual network interfaces support is provided by templates number 1, 8, and
10.
Note that none of them works with Microsoft Windows.
Other host operating systems work with all three templates.
Both
.Xr usb_template 4 and
.Xr if_cdce 4 kernel modules must be loaded.
.Pp
Make sure the necessary modules are loaded and the correct template is set at
boot by adding those lines to
.Pa /boot/loader.conf
, creating it if it does not already exist:
.Bd -literal -offset indent
if_cdce_load="YES"
hw.usb.template=1
.Ed
.Pp
To load the module and set the template without rebooting use:
.Bd -literal -offset indent
# kldload if_cdce
# sysctl hw.usb.template=1
.Ed
.Ss USB VIRTUAL STORAGE DEVICE
.Pp
The
.Xr cfumass 4 driver is a USB device mode driver first available in FreeBSD 12.0.
.Pp
Mass Storage target is provided by templates 0 and 10.
Both
.Xr usb_template 4 and
.Xr cfumass 4 kernel modules must be loaded.
.Xr cfumass 4 interfaces to the CTL subsystem, the same one that is used for iSCSI or Fibre Channel targets.
On the host side, USB Mass Storage initiators can only access a single LUN, LUN 0.
.Ss CONFIGURING USB MASS STORAGE TARGET USING THE CFUMASS STARTUP SCRIPT
.Pp
The simplest way to set up a read-only USB storage target is to use the
.Pa cfumass
rc script.
To configure it this way, copy the files to be presented to the USB host
machine into the
.Ql /var/cfumass
directory, and add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
cfumass_enable="YES"
.Ed
.Pp
To configure the target without restarting, run this command:
.Bd -literal -offset indent
# service cfumass start
.Ed
.Pp
Differently from serial and network functionality, the template should not be
set to 0 or 10 in
.Pa /boot/loader.conf
.
This is because the LUN must be set up before setting the template.
The cfumass startup script sets the correct template number automatically when
started.
.Ss CONFIGURING USB MASS STORAGE USING OTHER MEANS
.Pp
The rest of this chapter provides detailed description of setting the target
without using the cfumass rc file.
This is necessary if eg one wants to provide a writeable LUN.
.Pp
USB Mass Storage does not require the
.Xr ctld 8 daemon to be running, although it can be used if desired.
This is different from iSCSI.
Thus, there are two ways to configure the target:
.Xr ctladm 8 , or
.Xr ctld 8 .
Both require the
.Pa cfumass.ko
kernel module to be loaded.
The module can be loaded manually:
.Bd -literal -offset indent
# kldload cfumass
.Ed
.Pp
If
.Pa cfumass.ko
has not been built into the kernel,
.Pa /boot/loader.conf
can be set to load the module at boot:
.Bd -literal -offset indent
cfumass_load="YES"
.Ed
.Pp
A LUN can be created without the
.Xr ctld 8 daemon:
.Bd -literal -offset indent
# ctladm create -b block -o file=/data/target0
.Ed
.Pp
This presents the contents of the image file
.Pa /data/target0
as a LUN to the USB host.
The file must exist before executing the command.
To configure the LUN at system startup, add the command to
.Pa /etc/rc.local
.
.Pp
.Xr ctld 8 can also be used to manage LUNs.
Create
.Pa /etc/ctl.conf
, add a line to
.Pa /etc/rc.conf
to make sure
.Xr ctld 8 is automatically started at boot, and then start the daemon.
.Pp
This is an example of a simple
.Pa /etc/ctl.conf
configuration file.
Refer to
.Xr ctl.conf 5 for a more complete description of the options.
.Bd -literal -offset indent
target naa.50015178f369f092 {
	lun 0 {
		path /data/target0
		size 4G
	}
}
.Ed
.Pp
The example creates a single target with a single LUN.
The
.Ql naa.50015178f369f092
is a device identifier composed of 32 random hexadecimal digits.
The
.Ql path
line defines the full path to a file or zvol backing the LUN.
That file must exist before starting
.Xr ctld 8 .
The second line is optional and specifies the size of the LUN.
.Pp
To make sure the
.Xr ctld 8 daemon is started at boot, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
ctld_enable="YES"
.Ed
.Pp
To start
.Xr ctld 8 now, run this command:
.Bd -literal -offset indent
# service ctld start
.Ed
.Pp
As the
.Xr ctld 8 daemon is started, it reads
.Pa /etc/ctl.conf
.
If this file is edited after the daemon starts, reload the changes so they take
effect immediately:
.Bd -literal -offset indent
# service ctld reload
.Ed
.Sh NETWORK COMMUNICATION
.Pp
FreeBSD is one of the most widely deployed operating systems for high
performance network servers.
The chapters in this part cover:
.Bl -bullet -offset -compact
.It
Serial communication
.It
PPP and PPP over Ethernet
.It
Electronic Mail
.It
Running Network Servers
.It
Firewalls
.It
Other Advanced Networking Topics
.El
.Pp
These chapters are designed to be read when the information is needed.
They do not need to be read in any particular order, nor is it necessary to
read all of them before using FreeBSD in a network environment.
.Sh SERIAL COMMUNICATIONS
.Ss SYNOPSIS
.Pp
UNIX has always had support for serial communications as the very first UNIX machines relied on serial lines for user input and output.
Things have changed a lot from the days when the average terminal consisted of
a 10-character-per-second serial printer and a keyboard.
This chapter covers some of the ways serial communications can be used on
FreeBSD.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
How to connect terminals to a FreeBSD system.
.It
How to use a modem to dial out to remote hosts.
.It
How to allow remote users to login to a FreeBSD system with a modem.
.It
How to boot a FreeBSD system from a serial console.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Know how to configure and install a custom kernel.
.It
Understand FreeBSD permissions and processes.
.It
Have access to the technical manual for the serial hardware to be used with
FreeBSD.
.El
.Ss SERIAL TERMINOLOGY AND HARDWARE
.Pp
The following terms are often used in serial communications:
.Bl -tag -offset -compact
.It bps
Bits per Second (bps) is the rate at which data is transmitted.
.It DTE
Data Terminal Equipment (DTE) is one of two endpoints in a serial communication.
An example would be a computer.
.It DCE
Data Communications Equipment (DTE) is the other endpoint in a serial communication.
Typically, it is a modem or serial terminal.
.It RS-232
The original standard which defined hardware serial communications.
It has since been renamed to TIA-232.
.El
.Pp
When referring to communication data rates, this section does not use the term
.Ql baud
.
Baud refers to the number of electrical state transitions made in a period of
time, while bps is the correct term to use.
.Pp
To connect a serial terminal to a FreeBSD system, a serial port on the computer
and the proper cable to connect to the serial device are needed.
Users who are already familiar with serial hardware and cabling can safely skip
this section.
.Ss SERIAL CABLES AND PORTS
.Pp
There are several different kinds of serial cables.
The two most common types are null-modem cables and standard RS-232 cables.
The documentation for the hardware should describe the type of cable required.
.Pp
These two types of cables differ in how the wires are connected to the
connector.
Each wire represents a signal, with the defined signals summarized in .
A standard serial cable passes all of the RS-232C signals straight through.
For example, the
.Do
Transmitted Data
.Dc
pin on one end of the cable goes to the
.Do
Transmitted Data
.Dc
pin on the other end.
This is the type of cable used to connect a modem to the FreeBSD system, and is
also appropriate for some terminals.
.Pp
A null-modem cable switches the
.Do
Transmitted Data
.Dc
pin of the connector on one end with the
.Do
Received Data
.Dc
pin on the other end.
The connector can be either a DB-25 or a DB-9.
.Pp
A null-modem cable can be constructed using the pin connections summarized in , , and .
While the standard calls for a straight-through pin 1 to pin 1
.Do
Protective Ground
.Dc
line, it is often omitted.
Some terminals work using only pins 2, 3, and 7, while others require different
configurations.
When in doubt, refer to the documentation for the hardware.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Acronyms
.Ta
Names
.It
.Ta
RD
.Ta
Received Data
.It
.Ta
TD
.Ta
Transmitted Data
.It
.Ta
DTR
.Ta
Data Terminal Ready
.It
.Ta
DSR
.Ta
Data Set Ready
.It
.Ta
DCD
.Ta
Data Carrier Detect
.It
.Ta
SG
.Ta
Signal Ground
.It
.Ta
RTS
.Ta
Request to Send
.It
.Ta
CTS
.Ta
Clear to Send
.El
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Signal
.Ta
Pin #
.Ta
.Ta
Pin #
.Ta
Signal
.It
.Ta
SG
.Ta
7
.Ta
connects to
.Ta
7
.Ta
SG
.It
.Ta
TD
.Ta
2
.Ta
connects to
.Ta
3
.Ta
RD
.It
.Ta
RD
.Ta
3
.Ta
connects to
.Ta
2
.Ta
TD
.It
.Ta
RTS
.Ta
4
.Ta
connects to
.Ta
5
.Ta
CTS
.It
.Ta
CTS
.Ta
5
.Ta
connects to
.Ta
4
.Ta
RTS
.It
.Ta
DTR
.Ta
20
.Ta
connects to
.Ta
6
.Ta
DSR
.It
.Ta
DTR
.Ta
20
.Ta
connects to
.Ta
8
.Ta
DCD
.It
.Ta
DSR
.Ta
6
.Ta
connects to
.Ta
20
.Ta
DTR
.It
.Ta
DCD
.Ta
8
.Ta
connects to
.Ta
20
.Ta
DTR
.El
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Signal
.Ta
Pin #
.Ta
.Ta
Pin #
.Ta
Signal
.It
.Ta
RD
.Ta
2
.Ta
connects to
.Ta
3
.Ta
TD
.It
.Ta
TD
.Ta
3
.Ta
connects to
.Ta
2
.Ta
RD
.It
.Ta
DTR
.Ta
4
.Ta
connects to
.Ta
6
.Ta
DSR
.It
.Ta
DTR
.Ta
4
.Ta
connects to
.Ta
1
.Ta
DCD
.It
.Ta
SG
.Ta
5
.Ta
connects to
.Ta
5
.Ta
SG
.It
.Ta
DSR
.Ta
6
.Ta
connects to
.Ta
4
.Ta
DTR
.It
.Ta
DCD
.Ta
1
.Ta
connects to
.Ta
4
.Ta
DTR
.It
.Ta
RTS
.Ta
7
.Ta
connects to
.Ta
8
.Ta
CTS
.It
.Ta
CTS
.Ta
8
.Ta
connects to
.Ta
7
.Ta
RTS
.El
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Signal
.Ta
Pin #
.Ta
.Ta
Pin #
.Ta
Signal
.It
.Ta
RD
.Ta
2
.Ta
connects to
.Ta
2
.Ta
TD
.It
.Ta
TD
.Ta
3
.Ta
connects to
.Ta
3
.Ta
RD
.It
.Ta
DTR
.Ta
4
.Ta
connects to
.Ta
6
.Ta
DSR
.It
.Ta
DTR
.Ta
4
.Ta
connects to
.Ta
8
.Ta
DCD
.It
.Ta
SG
.Ta
5
.Ta
connects to
.Ta
7
.Ta
SG
.It
.Ta
DSR
.Ta
6
.Ta
connects to
.Ta
20
.Ta
DTR
.It
.Ta
DCD
.Ta
1
.Ta
connects to
.Ta
20
.Ta
DTR
.It
.Ta
RTS
.Ta
7
.Ta
connects to
.Ta
5
.Ta
CTS
.It
.Ta
CTS
.Ta
8
.Ta
connects to
.Ta
4
.Ta
RTS
.El
.Pp
When one pin at one end connects to a pair of pins at the other end, it is
usually implemented with one short wire between the pair of pins in their
connector and a long wire to the other single pin.
.Pp
Serial ports are the devices through which data is transferred between the
FreeBSD host computer and the terminal.
Several kinds of serial ports exist.
Before purchasing or constructing a cable, make sure it will fit the ports on
the terminal and on the FreeBSD system.
.Pp
Most terminals have DB-25 ports.
Personal computers may have DB-25 or DB-9 ports.
A multiport serial card may have RJ-12 or RJ-45/ ports.
See the documentation that accompanied the hardware for specifications on the
kind of port or visually verify the type of port.
.Pp
In FreeBSD, each serial port is accessed through an entry in
.Pa /dev
.
There are two different kinds of entries:
.Bl -bullet -offset -compact
.It
Call-in ports are named
.Pa /dev/ttyuN
where N is the port number, starting from zero.
If a terminal is connected to the first serial port (
.Pa COM1
), use
.Pa /dev/ttyu0
to refer to the terminal.
If the terminal is on the second serial port (
.Pa COM2
), use
.Pa /dev/ttyu1
, and so forth.
Generally, the call-in port is used for terminals.
Call-in ports require that the serial line assert the
.Do
Data Carrier Detect
.Dc
signal to work correctly.
.It
Call-out ports are named
.Pa /dev/cuauN
on FreeBSD versions 8.X and higher and
.Pa /dev/cuadN
on FreeBSD versions 7.X and lower.
Call-out ports are usually not used for terminals, but are used for modems.
The call-out port can be used if the serial cable or the terminal does not
support the
.Do
Data Carrier Detect
.Dc
signal.
.El
.Pp
FreeBSD also provides initialization devices (
.Pa /dev/ttyuN.init
and
.Pa /dev/cuauN.init
or
.Pa /dev/cuadN.init
) and locking devices (
.Pa /dev/ttyuN.lock
and
.Pa /dev/cuauN.lock
or
.Pa /dev/cuadN.lock
).
The initialization devices are used to initialize communications port
parameters each time a port is opened, such as
.Ql crtscts
for modems which use
.Ql RTS/CTS
signaling for flow control.
The locking devices are used to lock flags on ports to prevent users or
programs changing certain parameters.
Refer to
.Xr termios 4 ,
.Xr sio 4 , and
.Xr stty 1 for information on terminal settings, locking and initializing devices, and
setting terminal options, respectively.
.Ss SERIAL PORT CONFIGURATION
.Pp
By default, FreeBSD supports four serial ports which are commonly known as
.Pa COM1
,
.Pa COM2
,
.Pa COM3
, and
.Pa COM4
.
FreeBSD also supports dumb multi-port serial interface cards, such as the
BocaBoard 1008 and 2016, as well as more intelligent multi-port cards such as
those made by Digiboard.
However, the default kernel only looks for the standard
.Pa COM
ports.
.Pp
To see if the system recognizes the serial ports, look for system boot messages
that start with
.Ql uart
:
.Bd -literal -offset indent
# grep uart /var/run/dmesg.boot
.Ed
.Pp
If the system does not recognize all of the needed serial ports, additional
entries can be added to
.Pa /boot/device.hints
.
This file already contains
.Ql hint.uart.0.*
entries for
.Pa COM1
and
.Ql hint.uart.1.*
entries for
.Pa COM2
.
When adding a port entry for
.Pa COM3
use
.Ql 0x3E8
, and for
.Pa COM4
use
.Ql 0x2E8
.
Common IRQ addresses are
.Ql 5
for
.Pa COM3
and
.Ql 9
for
.Pa COM4
.
.Pp
To determine the default set of terminal I/O settings used by the port, specify its device name.
This example determines the settings for the call-in port on
.Pa COM2
:
.Bd -literal -offset indent
# stty -a -f /dev/ttyu1
.Ed
.Pp
System-wide initialization of serial devices is controlled by
.Pa /etc/rc.d/serial
.
This file affects the default settings of serial devices.
To change the settings for a device, use
.Cm stty
.
By default, the changed settings are in effect until the device is closed and
when the device is reopened, it goes back to the default set.
To permanently change the default set, open and adjust the settings of the
initialization device.
For example, to turn on
.Ar CLOCAL
mode, 8 bit communication, and
.Ar XON/XOFF
flow control for
.Pa ttyu5
, type:
.Bd -literal -offset indent
# stty -f /dev/ttyu5.init clocal cs8 ixon ixoff
.Ed
.Pp
To prevent certain settings from being changed by an application, make
adjustments to the locking device.
For example, to lock the speed of
.Pa ttyu5
to 57600 bps, type:
.Bd -literal -offset indent
# stty -f /dev/ttyu5.lock 57600
.Ed
.Pp
Now, any application that opens
.Pa ttyu5
and tries to change the speed of the port will be stuck with 57600 bps.
.Pp
Terminals provide a convenient and low-cost way to access a FreeBSD system when
not at the computer's console or on a connected network.
This section describes how to use terminals with FreeBSD.
.Pp
The original UNIX systems did not have consoles.
Instead, users logged in and ran programs through terminals that were connected
to the computer's serial ports.
.Pp
The ability to establish a login session on a serial port still exists in
nearly every UNIX-like operating system today, including FreeBSD.
By using a terminal attached to an unused serial port, a user can log in and
run any text program that can normally be run on the console or in an
.Cm xterm
window.
.Pp
Many terminals can be attached to a FreeBSD system.
An older spare computer can be used as a terminal wired into a more powerful
computer running FreeBSD.
This can turn what might otherwise be a single-user computer into a powerful
multiple-user system.
.Pp
FreeBSD supports three types of terminals:
.Bl -tag -offset -compact
.It Dumb terminals
Dumb terminals are specialized hardware that connect to computers over serial
lines.
They are called
.Do
dumb
.Dc
because they have only enough computational power to display, send, and receive
text.
No programs can be run on these devices.
Instead, dumb terminals connect to a computer that runs the needed programs.
There are hundreds of kinds of dumb terminals made by many manufacturers, and
just about any kind will work with FreeBSD.
Some high-end terminals can even display graphics, but only certain software
packages can take advantage of these advanced features.
Dumb terminals are popular in work environments where workers do not need
access to graphical applications.
.It Computers Acting as Terminals
Since a dumb terminal has just enough ability to display, send, and receive
text, any spare computer can be a dumb terminal.
All that is needed is the proper cable and some
.Ql terminal emulation
software to run on the computer.
This configuration can be useful.
For example, if one user is busy working at the FreeBSD system's console,
another user can do some text-only work at the same time from a less powerful
personal computer hooked up as a terminal to the FreeBSD system.
There are at least two utilities in the base-system of FreeBSD that can be used
to work through a serial connection:
.Xr cu 1 and
.Xr tip 1 .
For example, to connect from a client system that runs FreeBSD to the serial
connection of another system:
.Bd -literal -offset indent
# cu -l /dev/cuauN
.Ed
Ports are numbered starting from zero.
This means that
.Pa COM1
is
.Pa /dev/cuau0
.
Additional programs are available through the Ports Collection, such as
.Ql comms/minicom
.
.It X Terminals
X terminals are the most sophisticated kind of terminal available.
Instead of connecting to a serial port, they usually connect to a network like
Ethernet.
Instead of being relegated to text-only applications, they can display any Xorg application.
This chapter does not cover the setup, configuration, or use of X terminals.
.El
.Ss TERMINAL CONFIGURATION
.Pp
This section describes how to configure a FreeBSD system to enable a login
session on a serial terminal.
It assumes that the system recognizes the serial port to which the terminal is
connected and that the terminal is connected with the correct cable.
.Pp
In FreeBSD,
.Cm init
reads
.Pa /etc/ttys
and starts a
.Cm getty
process on the available terminals.
The
.Cm getty
process is responsible for reading a login name and starting the
.Cm login
program.
The ports on the FreeBSD system which allow logins are listed in
.Pa /etc/ttys
.
For example, the first virtual console,
.Pa ttyv0
, has an entry in this file, allowing logins on the console.
This file also contains entries for the other virtual consoles, serial ports,
and pseudo-ttys.
For a hardwired terminal, the serial port's
.Pa /dev
entry is listed without the
.Ql /dev
part.
For example,
.Pa /dev/ttyv0
is listed as
.Ql ttyv0
.
.Pp
The default
.Pa /etc/ttys
configures support for the first four serial ports,
.Pa ttyu0
through
.Pa ttyu3
:
.Bd -literal -offset indent
ttyu0   "/usr/libexec/getty std.9600"   dialup  off secure
ttyu1   "/usr/libexec/getty std.9600"   dialup  off secure
ttyu2   "/usr/libexec/getty std.9600"   dialup  off secure
ttyu3   "/usr/libexec/getty std.9600"   dialup  off secure
.Ed
.Pp
When attaching a terminal to one of those ports, modify the default entry to
set the required speed and terminal type, to turn the device
.Ql on
and, if needed, to change the port's
.Ql secure
setting.
If the terminal is connected to another port, add an entry for the port.
.Pp
configures two terminals in
.Pa /etc/ttys
.
The first entry configures a Wyse-50 connected to
.Pa COM2
.
The second entry configures an old computer running Procomm terminal software emulating a VT-100 terminal.
The computer is connected to the sixth serial port on a multi-port serial card.
.Bd -literal -offset indent
ttyu1  "/usr/libexec/getty std.38400"  wy50  on  insecure
ttyu5   "/usr/libexec/getty std.19200"  vt100  on insecure
.Ed
.Pp
The first field specifies the device name of the serial terminal.
.Pp
The second field tells
.Cm getty
to initialize and open the line, set the line speed, prompt for a user name,
and then execute the
.Cm login
program.
The optional
.Ql getty type
configures characteristics on the terminal line, like bps rate and parity.
The available getty types are listed in
.Pa /etc/gettytab
.
In almost all cases, the getty types that start with
.Ql std
will work for hardwired terminals as these entries ignore parity.
There is a
.Ql std
entry for each bps rate from 110 to 115200.
Refer to
.Xr gettytab 5 for more information.
.Pp
When setting the getty type, make sure to match the communications settings
used by the terminal.
For this example, the Wyse-50 uses no parity and connects at 38400 bps.
The computer uses no parity and connects at 19200 bps.
.Pp
The third field is the type of terminal.
For dial-up ports,
.Ql unknown
or
.Ql dialup
is typically used since users may dial up with practically any type of terminal
or software.
Since the terminal type does not change for hardwired terminals, a real
terminal type from
.Pa /etc/termcap
can be specified.
For this example, the Wyse-50 uses the real terminal type while the computer
running Procomm is set to emulate a VT-100.
.Pp
The fourth field specifies if the port should be enabled.
To enable logins on this port, this field must be set to
.Ql on
.
.Pp
The final field is used to specify whether the port is secure.
Marking a port as
.Ql secure
means that it is trusted enough to allow
.Ql root
to login from that port.
Insecure ports do not allow
.Ql root
logins.
On an insecure port, users must login from unprivileged accounts and then use
.Cm su
or a similar mechanism to gain superuser privileges, as described in .
For security reasons, it is recommended to change this setting to
.Ql insecure
.
.Pp
After making any changes to
.Pa /etc/ttys
, send a SIGHUP (hangup) signal to the
.Cm init
process to force it to re-read its configuration file:
.Bd -literal -offset indent
# kill -HUP 1
.Ed
.Pp
Since
.Cm init
is always the first process run on a system, it always has a process ID of
.Ql 1
.
.Pp
If everything is set up correctly, all cables are in place, and the terminals
are powered up, a
.Cm getty
process should now be running on each terminal and login prompts should be
available on each terminal.
.Ss TROUBLESHOOTING THE CONNECTION
.Pp
Even with the most meticulous attention to detail, something could still go
wrong while setting up a terminal.
Here is a list of common symptoms and some suggested fixes.
.Pp
If no login prompt appears, make sure the terminal is plugged in and powered
up.
If it is a personal computer acting as a terminal, make sure it is running
terminal emulation software on the correct serial port.
.Pp
Make sure the cable is connected firmly to both the terminal and the FreeBSD
computer.
Make sure it is the right kind of cable.
.Pp
Make sure the terminal and FreeBSD agree on the bps rate and parity settings.
For a video display terminal, make sure the contrast and brightness controls
are turned up.
If it is a printing terminal, make sure paper and ink are in good supply.
.Pp
Use
.Cm ps
to make sure that a
.Cm getty
process is running and serving the terminal.
For example, the following listing shows that a
.Cm getty
is running on the second serial port,
.Pa ttyu1
, and is using the
.Ql std.38400
entry in
.Pa /etc/gettytab
:
.Bd -literal -offset indent
# ps -axww|grep ttyu
22189  d1  Is+    0:00.03 /usr/libexec/getty std.38400 ttyu1
.Ed
.Pp
If no
.Cm getty
process is running, make sure the port is enabled in
.Pa /etc/ttys
.
Remember to run
.Cm kill -HUP 1
after modifying
.Pa /etc/ttys
.
.Pp
If the
.Cm getty
process is running but the terminal still does not display a login prompt, or
if it displays a prompt but will not accept typed input, the terminal or cable
may not support hardware handshaking.
Try changing the entry in
.Pa /etc/ttys
from
.Ql std.38400
to
.Ql 3wire.38400
, then run
.Cm kill -HUP 1
after modifying
.Pa /etc/ttys
.
The
.Ql 3wire
entry is similar to
.Ql std
, but ignores hardware handshaking.
The baud rate may need to be reduced or software flow control enabled when
using
.Ql 3wire
to prevent buffer overflows.
.Pp
If garbage appears instead of a login prompt, make sure the terminal and
FreeBSD agree on the bps rate and parity settings.
Check the
.Cm getty
processes to make sure the correct getty type is in use.
If not, edit
.Pa /etc/ttys
and run
.Cm kill -HUP 1
.
.Pp
If characters appear doubled and the password appears when typed, switch the
terminal, or the terminal emulation software, from
.Do
half duplex
.Dc
or
.Do
local echo
.Dc
to
.Do
full duplex.
.Dc
.Pp
Configuring a FreeBSD system for dial-in service is similar to configuring
terminals, except that modems are used instead of terminal devices.
FreeBSD supports both external and internal modems.
.Pp
External modems are more convenient because they often can be configured via
parameters stored in non-volatile RAM and they usually provide lighted indicators that display the state of important RS-232 signals, indicating whether the modem is operating properly.
.Pp
Internal modems usually lack non-volatile RAM, so their configuration may be limited to setting DIP switches.
If the internal modem has any signal indicator lights, they are difficult to
view when the system's cover is in place.
.Pp
When using an external modem, a proper cable is needed.
A standard RS-232C serial cable should suffice.
.Pp
FreeBSD needs the RTS and CTS signals for flow control at speeds above 2400 bps, the CD signal to detect when a call has been answered or the line has been hung up,
and the DTR signal to reset the modem after a session is complete.
Some cables are wired without all of the needed signals, so if a login session
does not go away when the line hangs up, there may be a problem with the cable.
Refer to for more information about these signals.
.Pp
Like other UNIX-like operating systems, FreeBSD uses the hardware signals to find out when a
call has been answered or a line has been hung up and to hangup and reset the
modem after a call.
FreeBSD avoids sending commands to the modem or watching for status reports
from the modem.
.Pp
FreeBSD supports the NS8250, NS16450, NS16550, and NS16550A-based RS-232C (CCITT V.24) communications interfaces.
The 8250 and 16450 devices have single-character buffers.
The 16550 device provides a 16-character buffer, which allows for better system
performance.
Bugs in plain 16550 devices prevent the use of the 16-character buffer, so use
16550A devices if possible.
Because single-character-buffer devices require more work by the operating
system than the 16-character-buffer devices, 16550A-based serial interface
cards are preferred.
If the system has many active serial ports or will have a heavy load,
16550A-based cards are better for low-error-rate communications.
.Pp
The rest of this section demonstrates how to configure a modem to receive
incoming connections, how to communicate with the modem, and offers some
troubleshooting tips.
.Ss MODEM CONFIGURATION
.Pp
As with terminals,
.Cm init
spawns a
.Cm getty
process for each configured serial port used for dial-in connections.
When a user dials the modem's line and the modems connect, the
.Do
Carrier Detect
.Dc
signal is reported by the modem.
The kernel notices that the carrier has been detected and instructs
.Cm getty
to open the port and display a login: prompt at the specified initial line speed.
In a typical configuration, if garbage characters are received, usually due to
the modem's connection speed being different than the configured speed,
.Cm getty
tries adjusting the line speeds until it receives reasonable characters.
After the user enters their login name,
.Cm getty
executes
.Cm login
, which completes the login process by asking for the user's password and then
starting the user's shell.
.Pp
There are two schools of thought regarding dial-up modems.
One configuration method is to set the modems and systems so that no matter at
what speed a remote user dials in, the dial-in RS-232 interface runs at a locked speed.
The benefit of this configuration is that the remote user always sees a system
login prompt immediately.
The downside is that the system does not know what a user's true data rate is,
so full-screen programs like Emacs will not adjust their screen-painting methods to make their response better for
slower connections.
.Pp
The second method is to configure the RS-232 interface to vary its speed based on the remote user's connection speed.
Because
.Cm getty
does not understand any particular modem's connection speed reporting, it gives
a login: message at an initial speed and watches the characters that come back in
response.
If the user sees junk, they should press Enter until they see a recognizable prompt.
If the data rates do not match,
.Cm getty
sees anything the user types as junk, tries the next speed, and gives the login: prompt again.
This procedure normally only takes a keystroke or two before the user sees a
good prompt.
This login sequence does not look as clean as the locked-speed method, but a
user on a low-speed connection should receive better interactive response from
full-screen programs.
.Pp
When locking a modem's data communications rate at a particular speed, no
changes to
.Pa /etc/gettytab
should be needed.
However, for a matching-speed configuration, additional entries may be required
in order to define the speeds to use for the modem.
This example configures a 14.4 Kbps modem with a top interface speed of 19.2
Kbps using 8-bit, no parity connections.
It configures
.Cm getty
to start the communications rate for a V.32bis connection at 19.2 Kbps, then
cycles through 9600 bps, 2400 bps, 1200 bps, 300 bps, and back to 19.2 Kbps.
Communications rate cycling is implemented with the
.Ql nx=
(next table) capability.
Each line uses a
.Ql tc=
(table continuation) entry to pick up the rest of the settings for a particular
data rate.
.Bd -literal -offset indent
#
# Additions for a V.32bis Modem
#
um|V300|High Speed Modem at 300,8-bit:\
        :nx=V19200:tc=std.300:
un|V1200|High Speed Modem at 1200,8-bit:\
        :nx=V300:tc=std.1200:
uo|V2400|High Speed Modem at 2400,8-bit:\
        :nx=V1200:tc=std.2400:
up|V9600|High Speed Modem at 9600,8-bit:\
        :nx=V2400:tc=std.9600:
uq|V19200|High Speed Modem at 19200,8-bit:\
        :nx=V9600:tc=std.19200:
.Ed
.Pp
For a 28.8 Kbps modem, or to take advantage of compression on a 14.4 Kbps
modem, use a higher communications rate, as seen in this example:
.Bd -literal -offset indent
#
# Additions for a V.32bis or V.34 Modem
# Starting at 57.6 Kbps
#
vm|VH300|Very High Speed Modem at 300,8-bit:\
        :nx=VH57600:tc=std.300:
vn|VH1200|Very High Speed Modem at 1200,8-bit:\
        :nx=VH300:tc=std.1200:
vo|VH2400|Very High Speed Modem at 2400,8-bit:\
        :nx=VH1200:tc=std.2400:
vp|VH9600|Very High Speed Modem at 9600,8-bit:\
        :nx=VH2400:tc=std.9600:
vq|VH57600|Very High Speed Modem at 57600,8-bit:\
        :nx=VH9600:tc=std.57600:
.Ed
.Pp
For a slow CPU or a heavily loaded system without 16550A-based serial ports, this
configuration may produce
.Er sio
.Do
silo
.Dc
errors at 57.6 Kbps.
.Pp
The configuration of
.Pa /etc/ttys
is similar to , but a different argument is passed to
.Cm getty
and
.Ql dialup
is used for the terminal type.
Replace xxx with the process
.Cm init
will run on the device:
.Bd -literal -offset indent
ttyu0   "/usr/libexec/getty xxx"   dialup on
.Ed
.Pp
The
.Ql dialup
terminal type can be changed.
For example, setting
.Ql vt102
as the default terminal type allows users to use VT102 emulation on their remote systems.
.Pp
For a locked-speed configuration, specify the speed with a valid type listed in
.Pa /etc/gettytab
.
This example is for a modem whose port speed is locked at 19.2 Kbps:
.Bd -literal -offset indent
ttyu0   "/usr/libexec/getty std.19200"   dialup on
.Ed
.Pp
In a matching-speed configuration, the entry needs to reference the appropriate
beginning
.Do
auto-baud
.Dc
entry in
.Pa /etc/gettytab
.
To continue the example for a matching-speed modem that starts at 19.2 Kbps,
use this entry:
.Bd -literal -offset indent
ttyu0   "/usr/libexec/getty V19200"   dialup on
.Ed
.Pp
After editing
.Pa /etc/ttys
, wait until the modem is properly configured and connected before signaling
.Cm init
:
.Bd -literal -offset indent
# kill -HUP 1
.Ed
.Pp
High-speed modems, like V.32, V.32bis, and V.34 modems, use hardware (
.Ql RTS/CTS
) flow control.
Use
.Cm stty
to set the hardware flow control flag for the modem port.
This example sets the
.Ev crtscts
flag on
.Pa COM2
's dial-in and dial-out initialization devices:
.Bd -literal -offset indent
# stty -f /dev/ttyu1.init crtscts
# stty -f /dev/cuau1.init crtscts
.Ed
.Ss TROUBLESHOOTING
.Pp
This section provides a few tips for troubleshooting a dial-up modem that will
not connect to a FreeBSD system.
.Pp
Hook up the modem to the FreeBSD system and boot the system.
If the modem has status indication lights, watch to see whether the modem's DTR indicator lights when the login: prompt appears on the system's console.
If it lights up, that should mean that FreeBSD has started a
.Cm getty
process on the appropriate communications port and is waiting for the modem to
accept a call.
.Pp
If the DTR indicator does not light, login to the FreeBSD system through the console and
type
.Cm ps ax
to see if FreeBSD is running a
.Cm getty
process on the correct port:
.Bd -literal -offset indent
  114 ??  I      0:00.10 /usr/libexec/getty V19200 ttyu0
.Ed
.Pp
If the second column contains a
.Ql d0
instead of a
.Ql ??
and the modem has not accepted a call yet, this means that
.Cm getty
has completed its open on the communications port.
This could indicate a problem with the cabling or a misconfigured modem because
.Cm getty
should not be able to open the communications port until the carrier detect
signal has been asserted by the modem.
.Pp
If no
.Cm getty
processes are waiting to open the port, double-check that the entry for the
port is correct in
.Pa /etc/ttys
.
Also, check
.Pa /var/log/messages
to see if there are any log messages from
.Cm init
or
.Cm getty
.
.Pp
Next, try dialing into the system.
Be sure to use 8 bits, no parity, and 1 stop bit on the remote system.
If a prompt does not appear right away, or the prompt shows garbage, try
pressing Enter about once per second.
If there is still no login: prompt, try sending a
.Cm BREAK
.
When using a high-speed modem, try dialing again after locking the dialing
modem's interface speed.
.Pp
If there is still no login: prompt, check
.Pa /etc/gettytab
again and double-check that:
.Bl -bullet -offset -compact
.It
The initial capability name specified in the entry in
.Pa /etc/ttys
matches the name of a capability in
.Pa /etc/gettytab
.
.It
Each
.Ql nx=
entry matches another
.Pa gettytab
capability name.
.It
Each
.Ql tc=
entry matches another
.Pa gettytab
capability name.
.El
.Pp
If the modem on the FreeBSD system will not answer, make sure that the modem is
configured to answer the phone when DTR is asserted.
If the modem seems to be configured correctly, verify that the DTR line is asserted by checking the modem's indicator lights.
.Pp
If it still does not work, try sending an email to the FreeBSD general questions mailing list describing the modem and the problem.
.Ss DIAL-OUT SERVICE
.Pp
The following are tips for getting the host to connect over the modem to
another computer.
This is appropriate for establishing a terminal session with a remote host.
.Pp
This kind of connection can be helpful to get a file on the Internet if there
are problems using PPP.
If PPP is not working, use the terminal session to FTP the needed file.
Then use zmodem to transfer it to the machine.
.Ss USING A STOCK HAYES MODEM
.Pp
A generic Hayes dialer is built into
.Cm tip
.
Use
.Ql at=hayes
in
.Pa /etc/remote
.
.Pp
The Hayes driver is not smart enough to recognize some of the advanced features
of newer modems messages like
.Ql BUSY
,
.Ql NO DIALTONE
, or
.Ql CONNECT 115200
.
Turn those messages off when using
.Cm tip
with
.Cm ATX0&W
.
.Pp
The dial timeout for
.Cm tip
is 60 seconds.
The modem should use something less, or else
.Cm tip
will think there is a communication problem.
Try
.Cm ATS7=45&W
.
.Ss USING AT COMMANDS
.Pp
Create a
.Do
direct
.Dc
entry in
.Pa /etc/remote
.
For example, if the modem is hooked up to the first serial port,
.Pa /dev/cuau0
, use the following line:
.Bd -literal -offset indent
cuau0:dv=/dev/cuau0:br#19200:pa=none
.Ed
.Pp
Use the highest bps rate the modem supports in the
.Ql br
capability.
Then, type
.Cm tip cuau0
to connect to the modem.
.Pp
Or, use
.Cm cu
as
.Ql root
with the following command:
.Bd -literal -offset indent
# cu -lline -sspeed
.Ed
.Pp
line is the serial port, such as
.Pa /dev/cuau0
, and speed is the speed, such as
.Ql 57600
.
When finished entering the AT commands, type
.Cm ~.
to exit.
.Ss THE @ SIGN DOES NOT WORK
.Pp
The
.Ql @
sign in the phone number capability tells
.Cm tip
to look in
.Pa /etc/phones
for a phone number.
But, the
.Ql @
sign is also a special character in capability files like
.Pa /etc/remote
, so it needs to be escaped with a backslash:
.Bd -literal -offset indent
pn=\@
.Ed
.Ss DIALING FROM THE COMMAND LINE
.Pp
Put a
.Do
generic
.Dc
entry in
.Pa /etc/remote
.
For example:
.Bd -literal -offset indent
tip115200|Dial any phone number at 115200 bps:\
        :dv=/dev/cuau0:br#115200:at=hayes:pa=none:du:
tip57600|Dial any phone number at 57600 bps:\
        :dv=/dev/cuau0:br#57600:at=hayes:pa=none:du:
.Ed
.Pp
This should now work:
.Bd -literal -offset indent
# tip -115200 5551234
.Ed
.Pp
Users who prefer
.Cm cu
over
.Cm tip
, can use a generic
.Ql cu
entry:
.Bd -literal -offset indent
cu115200|Use cu to dial any number at 115200bps:\
        :dv=/dev/cuau1:br#57600:at=hayes:pa=none:du:
.Ed
.Pp
and type:
.Bd -literal -offset indent
# cu 5551234 -s 115200
.Ed
.Ss SETTING THE BPS RATE
.Pp
Put in an entry for
.Ql tip1200
or
.Ql cu1200
, but go ahead and use whatever bps rate is appropriate with the
.Ql br
capability.
.Cm tip
thinks a good default is 1200 bps which is why it looks for a
.Ql tip1200
entry.
1200 bps does not have to be used, though.
.Ss ACCESSING A NUMBER OF HOSTS THROUGH A TERMINAL SERVER
.Pp
Rather than waiting until connected and typing
.Cm CONNECT host
each time, use
.Cm tip
's
.Ql cm
capability.
For example, these entries in
.Pa /etc/remote
will let you type
.Cm tip pain
or
.Cm tip muffin
to connect to the hosts
.Ql pain
or
.Ql muffin
, and
.Cm tip deep13
to connect to the terminal server.
.Bd -literal -offset indent
pain|pain.deep13.com|Forrester's machine:\
        :cm=CONNECT pain\n:tc=deep13:
muffin|muffin.deep13.com|Frank's machine:\
        :cm=CONNECT muffin\n:tc=deep13:
deep13:Gizmonics Institute terminal server:\
        :dv=/dev/cuau2:br#38400:at=hayes:du:pa=none:pn=5551234:
.Ed
.Ss USING MORE THAN ONE LINE WITH TIP
.Pp
This is often a problem where a university has several modem lines and several
thousand students trying to use them.
.Pp
Make an entry in
.Pa /etc/remote
and use
.Ql @
for the
.Ql pn
capability:
.Bd -literal -offset indent
big-university:\
        :pn=\@:tc=dialout
dialout:\
        :dv=/dev/cuau3:br#9600:at=courier:du:pa=none:
.Ed
.Pp
Then, list the phone numbers in
.Pa /etc/phones
:
.Bd -literal -offset indent
big-university 5551111
big-university 5551112
big-university 5551113
big-university 5551114
.Ed
.Pp
.Cm tip
will try each number in the listed order, then give up.
To keep retrying, run
.Cm tip
in a
.Ql while
loop.
.Ss USING THE FORCE CHARACTER
.Pp
CtrlP is the default
.Do
force
.Dc
character, used to tell
.Cm tip
that the next character is literal data.
The force character can be set to any other character with the
.Cm ~s
escape, which means
.Do
set a variable.
.Dc
.Pp
Type
.Cm ~sforce=single-char
followed by a newline.
 single-char is any single character.
If single-char is left out, then the force character is the null character, which is accessed
by typing Ctrl2 or CtrlSpace.
A pretty good value for single-char is ShiftCtrl6, which is only used on some terminal servers.
.Pp
To change the force character, specify the following in
.Pa ~/.tiprc
:
.Bd -literal -offset indent
force=single-char
.Ed
.Ss UPPER CASE CHARACTERS
.Pp
This happens when CtrlA is pressed, which is
.Cm tip
's
.Do
raise character
.Dc
, specially designed for people with broken caps-lock keys.
Use
.Cm ~s
to set
.Ql raisechar
to something reasonable.
It can be set to be the same as the force character, if neither feature is
used.
.Pp
Here is a sample
.Pa ~/.tiprc
for Emacs users who need to type Ctrl2 and CtrlA:
.Bd -literal -offset indent
force=^^
raisechar=^^
.Ed
.Pp
The
.Ql ^^
is ShiftCtrl6.
.Ss FILE TRANSFERS WITH TIP
.Pp
When talking to another UNIX-like operating system, files can be sent and received using
.Cm ~p
(put) and
.Cm ~t
(take).
These commands run
.Cm cat
and
.Cm echo
on the remote system to accept and send files.
The syntax is:
.Cm ~p
.Ar local-file
.Ar remote-file
.Cm ~t
.Ar remote-file
.Ar local-file
.Pp
There is no error checking, so another protocol, like zmodem, should probably
be used.
.Ss USING ZMODEM WITH TIP ?
.Pp
To receive files, start the sending program on the remote end.
Then, type
.Cm ~C rz
to begin receiving them locally.
.Pp
To send files, start the receiving program on the remote end.
Then, type
.Cm ~C sz files
to send them to the remote system.
.Pp
FreeBSD has the ability to boot a system with a dumb terminal on a serial port
as a console.
This configuration is useful for system administrators who wish to install
FreeBSD on machines that have no keyboard or monitor attached, and developers
who want to debug the kernel or device drivers.
.Pp
As described in , FreeBSD employs a three stage bootstrap.
The first two stages are in the boot block code which is stored at the
beginning of the FreeBSD slice on the boot disk.
The boot block then loads and runs the boot loader as the third stage code.
.Pp
In order to set up booting from a serial console, the boot block code, the boot
loader code, and the kernel need to be configured.
.Ss QUICK SERIAL CONSOLE CONFIGURATION
.Pp
This section provides a fast overview of setting up the serial console.
This procedure can be used when the dumb terminal is connected to
.Pa COM1
.
.Ss CONFIGURING A SERIAL CONSOLE ON COM1
.Pp
Connect the serial cable to
.Pa COM1
and the controlling terminal.
.Pp
To configure boot messages to display on the serial console, issue the
following command as the superuser:
.Bd -literal -offset indent
# echo 'console="comconsole"' >> /boot/loader.conf
.Ed
.Pp
Edit
.Pa /etc/ttys
and change
.Ql off
to
.Ql on
and
.Ql dialup
to
.Ql vt100
for the
.Pa ttyu0
entry.
Otherwise, a password will not be required to connect via the serial console,
resulting in a potential security hole.
.Pp
Reboot the system to see if the changes took effect.
.Pp
If a different configuration is required, see the next section for a more
in-depth configuration explanation.
.Ss IN-DEPTH SERIAL CONSOLE CONFIGURATION
.Pp
This section provides a more detailed explanation of the steps needed to setup
a serial console in FreeBSD.
.Ss CONFIGURING A SERIAL CONSOLE
.Pp
Prepare a serial cable.
.Pp
Use either a null-modem cable or a standard serial cable and a null-modem
adapter.
See for a discussion on serial cables.
.Pp
Unplug the keyboard.
.Pp
Many systems probe for the keyboard during the Power-On Self-Test (POST) and will generate an error if the keyboard is not detected.
Some machines will refuse to boot until the keyboard is plugged in.
.Pp
If the computer complains about the error, but boots anyway, no further
configuration is needed.
.Pp
If the computer refuses to boot without a keyboard attached, configure the BIOS so that it ignores this error.
Consult the motherboard's manual for details on how to do this.
.Pp
Try setting the keyboard to
.Do
Not installed
.Dc
in the BIOS.
This setting tells the BIOS not to probe for a keyboard at power-on so it should not complain if the
keyboard is absent.
If that option is not present in the BIOS, look for an
.Do
Halt on Error
.Dc
option instead.
Setting this to
.Do
All but Keyboard
.Dc
or to
.Do
No Errors
.Dc
will have the same effect.
.Pp
If the system has a PS/2 mouse, unplug it as well.
 PS/2 mice share some hardware with the keyboard and leaving the mouse plugged in can
fool the keyboard probe into thinking the keyboard is still there.
.Pp
While most systems will boot without a keyboard, quite a few will not boot
without a graphics adapter.
Some systems can be configured to boot with no graphics adapter by changing the
.Do
graphics adapter
.Dc
setting in the BIOS configuration to
.Do
Not installed
.Dc
.
Other systems do not support this option and will refuse to boot if there is no
display hardware in the system.
With these machines, leave some kind of graphics card plugged in, even if it is
just a junky mono board.
A monitor does not need to be attached.
.Pp
Plug a dumb terminal, an old computer with a modem program, or the serial port
on another UNIX box into the serial port.
.Pp
Add the appropriate
.Ql hint.sio.*
entries to
.Pa /boot/device.hints
for the serial port.
Some multi-port cards also require kernel configuration options.
Refer to
.Xr sio 4 for the required options and device hints for each supported serial port.
.Pp
Create
.Pa boot.config
in the root directory of the
.Ql a
partition on the boot drive.
.Pp
This file instructs the boot block code how to boot the system.
In order to activate the serial console, one or more of the following options
are needed.
When using multiple options, include them all on the same line:
.Bl -tag -offset -compact
.It
.Ar -h
Toggles between the internal and serial consoles.
Use this to switch console devices.
For instance, to boot from the internal (video) console, use
.Ar -h
to direct the boot loader and the kernel to use the serial port as its console
device.
Alternatively, to boot from the serial port, use
.Ar -h
to tell the boot loader and the kernel to use the video display as the console
instead.
.It
.Ar -D
Toggles between the single and dual console configurations.
In the single configuration, the console will be either the internal console
(video display) or the serial port, depending on the state of
.Ar -h
.
In the dual console configuration, both the video display and the serial port
will become the console at the same time, regardless of the state of
.Ar -h
.
However, the dual console configuration takes effect only while the boot block
is running.
Once the boot loader gets control, the console specified by
.Ar -h
becomes the only console.
.It
.Ar -P
Makes the boot block probe the keyboard.
If no keyboard is found, the
.Ar -D
and
.Ar -h
options are automatically set.
Due to space constraints in the current version of the boot blocks,
.Ar -P
is capable of detecting extended keyboards only.
Keyboards with less than 101 keys and without F11 and F12 keys may not be
detected.
Keyboards on some laptops may not be properly found because of this limitation.
If this is the case, do not use
.Ar -P
.
.El
.Pp
Use either
.Ar -P
to select the console automatically or
.Ar -h
to activate the serial console.
Refer to
.Xr boot 8 and
.Xr boot.config 5 for more details.
.Pp
The options, except for
.Ar -P
, are passed to the boot loader.
The boot loader will determine whether the internal video or the serial port
should become the console by examining the state of
.Ar -h
.
This means that if
.Ar -D
is specified but
.Ar -h
is not specified in
.Pa /boot.config
, the serial port can be used as the console only during the boot block as the
boot loader will use the internal video display as the console.
.Pp
Boot the machine.
.Pp
When FreeBSD starts, the boot blocks echo the contents of
.Pa /boot.config
to the console.
For example:
.Bd -literal -offset indent
/boot.config: -P
Keyboard: no
.Ed
.Pp
The second line appears only if
.Ar -P
is in
.Pa /boot.config
and indicates the presence or absence of the keyboard.
These messages go to either the serial or internal console, or both, depending
on the option in
.Pa /boot.config
:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Options
.Ta
Message goes to
.It
.Ta
none
.Ta
internal console
.It
.Ta
.Ar -h
.Ta
serial console
.It
.Ta
.Ar -D
.Ta
serial and internal consoles
.It
.Ta
.Ar -Dh
.Ta
serial and internal consoles
.It
.Ta
.Ar -P
, keyboard present
.Ta
internal console
.It
.Ta
.Ar -P
, keyboard absent
.Ta
serial console
.El
.Pp
After the message, there will be a small pause before the boot blocks continue
loading the boot loader and before any further messages are printed to the
console.
Under normal circumstances, there is no need to interrupt the boot blocks, but
one can do so in order to make sure things are set up correctly.
.Pp
Press any key, other than Enter, at the console to interrupt the boot process.
The boot blocks will then prompt for further action:
.Bd -literal -offset indent
>> FreeBSD/i386 BOOT
Default: 0:ad(0,a)/boot/loader
boot:
.Ed
.Pp
Verify that the above message appears on either the serial or internal console,
or both, according to the options in
.Pa /boot.config
.
If the message appears in the correct console, press Enter to continue the boot process.
.Pp
If there is no prompt on the serial terminal, something is wrong with the
settings.
Enter
.Ar -h
then Enter or Return to tell the boot block (and then the boot loader and the kernel) to choose the
serial port for the console.
Once the system is up, go back and check what went wrong.
.Pp
During the third stage of the boot process, one can still switch between the
internal console and the serial console by setting appropriate environment
variables in the boot loader.
See
.Xr loader 8 for more information.
.Pp
This line in
.Pa /boot/loader.conf
or
.Pa /boot/loader.conf.local
configures the boot loader and the kernel to send their boot messages to the
serial console, regardless of the options in
.Pa /boot.config
:
.Bd -literal -offset indent
console="comconsole"
.Ed
.Pp
That line should be the first line of
.Pa /boot/loader.conf
so that boot messages are displayed on the serial console as early as possible.
.Pp
If that line does not exist, or if it is set to
.Ql console="vidconsole"
, the boot loader and the kernel will use whichever console is indicated by
.Ar -h
in the boot block.
See
.Xr loader.conf 5 for more information.
.Pp
At the moment, the boot loader has no option equivalent to
.Ar -P
in the boot block, and there is no provision to automatically select the
internal console and the serial console based on the presence of the keyboard.
.Pp
While it is not required, it is possible to provide a
.Cm login
prompt over the serial line.
To configure this, edit the entry for the serial port in
.Pa /etc/ttys
using the instructions in .
If the speed of the serial port has been changed, change
.Ql std.9600
to match the new setting.
.Ss SETTING A FASTER SERIAL PORT SPEED
.Pp
By default, the serial port settings are 9600 baud, 8 bits, no parity, and 1
stop bit.
To change the default console speed, use one of the following options:
.Bl -bullet -offset -compact
.It
Edit
.Pa /etc/make.conf
and set
.Ev BOOT_COMCONSOLE_SPEED
to the new console speed.
Then, recompile and install the boot blocks and the boot loader:
.Bd -literal -offset indent
# cd /sys/boot
# make clean
# make
# make install
.Ed
If the serial console is configured in some other way than by booting with
.Ar -h
, or if the serial console used by the kernel is different from the one used by
the boot blocks, add the following option, with the desired speed, to a custom
kernel configuration file and compile a new kernel:
.Bd -literal -offset indent
options CONSPEED=19200
.Ed
.It
Add the
.Ar -S19200
boot option to
.Pa /boot.config
, replacing 19200 with the speed to use.
.It
Add the following options to
.Pa /boot/loader.conf
.
Replace 115200 with the speed to use.
.Bd -literal -offset indent
boot_multicons="YES"
boot_serial="YES"
comconsole_speed="115200"
console="comconsole,vidconsole"
.Ed
.El
.Ss ENTERING THE DDB DEBUGGER FROM THE SERIAL LINE
.Pp
To configure the ability to drop into the kernel debugger from the serial
console, add the following options to a custom kernel configuration file and
compile the kernel using the instructions in .
Note that while this is useful for remote diagnostics, it is also dangerous if
a spurious BREAK is generated on the serial port.
Refer to
.Xr ddb 4 and
.Xr ddb 8 for more information about the kernel debugger.
.Bd -literal -offset indent
options BREAK_TO_DEBUGGER
options DDB
.Ed
.Sh PPP
.Ss SYNOPSIS
.Pp
FreeBSD supports the Point-to-Point (PPP) protocol which can be used to establish a network or Internet connection
using a dial-up modem.
This chapter describes how to configure modem-based communication services in
FreeBSD.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
How to configure, use, and troubleshoot a PPP connection.
.It
How to set up PPP over Ethernet (PPPoE).
.It
How to set up PPP over ATM (PPPoA).
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Be familiar with basic network terminology.
.It
Understand the basics and purpose of a dial-up connection and PPP.
.El
.Ss CONFIGURING PPP
.Pp
FreeBSD provides built-in support for managing dial-up PPP connections using
.Xr ppp 8 .
The default FreeBSD kernel provides support for
.Pa tun
which is used to interact with a modem hardware.
Configuration is performed by editing at least one configuration file, and
configuration files containing examples are provided.
Finally,
.Cm ppp
is used to start and manage connections.
.Pp
In order to use a PPP connection, the following items are needed:
.Bl -bullet -offset -compact
.It
A dial-up account with an Internet Service Provider (ISP).
.It
A dial-up modem.
.It
The dial-up number for the ISP.
.It
The login name and password assigned by the ISP.
.It
The IP address of one or more DNS servers.
Normally, the ISP provides these addresses.
If it did not, FreeBSD can be configured to use DNS negotiation.
.El
.Pp
If any of the required information is missing, contact the ISP.
.Pp
The following information may be supplied by the ISP, but is not necessary:
.Bl -bullet -offset -compact
.It
The IP address of the default gateway.
If this information is unknown, the ISP will automatically provide the correct value during connection setup.
When configuring PPP on FreeBSD, this address is referred to as
.Ql HISADDR
.
.It
The subnet mask.
If the ISP has not provided one,
.Ql 255.255.255.255
will be used in the
.Xr ppp 8 configuration file.
.It
If the ISP has assigned a static IP address and hostname, it should be input into the configuration file.
Otherwise, this information will be automatically provided during connection
setup.
.El
.Pp
The rest of this section demonstrates how to configure FreeBSD for common PPP connection scenarios.
The required configuration file is
.Pa /etc/ppp/ppp.conf
and additional files and examples are available in
.Pa /usr/share/examples/ppp/
.
.Pp
Throughout this section, many of the file examples display line numbers.
These line numbers have been added to make it easier to follow the discussion
and are not meant to be placed in the actual file.
.Pp
When editing a configuration file, proper indentation is important.
Lines that end in a
.Ql :
start in the first column (beginning of the line) while all other lines should
be indented as shown using spaces or tabs.
.Ss BASIC CONFIGURATION
.Pp
In order to configure a PPP connection, first edit
.Pa /etc/ppp/ppp.conf
with the dial-in information for the ISP.
This file is described as follows:
.Bd -literal -offset indent
1     default:
2       set log Phase Chat LCP IPCP CCP tun command
3       ident user-ppp VERSION
4       set device /dev/cuau0
5       set speed 115200
6       set dial "ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \
7                 \"\" AT OK-AT-OK ATE1Q0 OK \\dATDT\\T TIMEOUT 40 CONNECT"
8       set timeout 180
9       enable dns
10
11    provider:
12      set phone "(123) 456 7890"
13      set authname foo
14      set authkey bar
15      set timeout 300
16      set ifaddr x.x.x.x/0 y.y.y.y/0 255.255.255.255 0.0.0.0
17      add default HISADDR
.Ed
.Bl -tag -offset -compact
.It Line 1:
Identifies the
.Ql default
entry.
Commands in this entry (lines 2 through 9) are executed automatically when
.Cm ppp
is run.
.It Line 2:
Enables verbose logging parameters for testing the connection.
Once the configuration is working satisfactorily, this line should be reduced
to:
.Bd -literal -offset indent
set log phase tun
.Ed
.It Line 3:
Displays the version of
.Xr ppp 8 to the PPP software running on the other side of the connection.
.It Line 4:
Identifies the device to which the modem is connected, where
.Pa COM1
is
.Pa /dev/cuau0
and
.Pa COM2
is
.Pa /dev/cuau1
.
.It Line 5:
Sets the connection speed.
If
.Ql 115200
does not work on an older modem, try
.Ql 38400
instead.
.It Lines 6 & 7:
The dial string written as an expect-send syntax.
Refer to
.Xr chat 8 for more information.
Note that this command continues onto the next line for readability.
Any command in
.Pa ppp.conf
may do this if the last character on the line is
.Ql \
.
.It Line 8:
Sets the idle timeout for the link in seconds.
.It Line 9:
Instructs the peer to confirm the DNS settings.
If the local network is running its own DNS server, this line should be commented out, by adding a
.Ql #
at the beginning of the line, or removed.
.It Line 10:
A blank line for readability.
Blank lines are ignored by
.Xr ppp 8 .
.It Line 11:
Identifies an entry called
.Ql provider
.
This could be changed to the name of the ISP so that
.Ar load ISP
can be used to start the connection.
.It Line 12:
Use the phone number for the ISP.
Multiple phone numbers may be specified using the colon (
.Ql :
) or pipe character (
.Ql |
) as a separator.
To rotate through the numbers, use a colon.
To always attempt to dial the first number first and only use the other numbers
if the first number fails, use the pipe character.
Always enclose the entire set of phone numbers between quotation marks (
.Ql "
) to prevent dialing failures.
.It Lines 13 & 14:
Use the user name and password for the ISP.
.It Line 15:
Sets the default idle timeout in seconds for the connection.
In this example, the connection will be closed automatically after 300 seconds
of inactivity.
To prevent a timeout, set this value to zero.
.It Line 16:
Sets the interface addresses.
The values used depend upon whether a static IP address has been obtained from the ISP or if it instead negotiates a dynamic IP address during connection.
If the ISP has allocated a static IP address and default gateway, replace x.x.x.x with the static IP address and replace y.y.y.y with the IP address of the default gateway.
If the ISP has only provided a static IP address without a gateway address, replace y.y.y.y with
.Ql 10.0.0.2/0
.
If the IP address changes whenever a connection is made, change this line to the
following value.
This tells
.Xr ppp 8 to use the IP Configuration Protocol (IPCP) to negotiate a dynamic IP address:
.Bd -literal -offset indent
set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.255 0.0.0.0
.Ed
.It Line 17:
Keep this line as-is as it adds a default route to the gateway.
The
.Ql HISADDR
will automatically be replaced with the gateway address specified on line 16.
It is important that this line appears after line 16.
.El
.Pp
Depending upon whether
.Xr ppp 8 is started manually or automatically, a
.Pa /etc/ppp/ppp.linkup
may also need to be created which contains the following lines.
This file is required when running
.Cm ppp
in
.Ar -auto
mode.
This file is used after the connection has been established.
At this point, the IP address will have been assigned and it is now be possible to add the routing
table entries.
When creating this file, make sure that provider matches the value demonstrated in line 11 of
.Pa ppp.conf
.
.Bd -literal -offset indent
provider:
      add default HISADDR
.Ed
.Pp
This file is also needed when the default gateway address is
.Do
guessed
.Dc
in a static IP address configuration.
In this case, remove line 17 from
.Pa ppp.conf
and create
.Pa /etc/ppp/ppp.linkup
with the above two lines.
More examples for this file can be found in
.Pa /usr/share/examples/ppp/
.
.Pp
By default,
.Cm ppp
must be run as
.Ql root
.
To change this default, add the account of the user who should run
.Cm ppp
to the
.Ql network
group in
.Pa /etc/group
.
.Pp
Then, give the user access to one or more entries in
.Pa /etc/ppp/ppp.conf
with
.Cm allow
.
For example, to give
.Ql fred
and
.Ql mary
permission to only the
.Ql provider:
entry, add this line to the
.Ql provider:
section:
.Bd -literal -offset indent
allow users fred mary
.Ed
.Pp
To give the specified users access to all entries, put that line in the
.Ql default
section instead.
.Ss ADVANCED CONFIGURATION
.Pp
It is possible to configure PPP to supply DNS and NetBIOS nameserver addresses
on demand.
.Pp
To enable these extensions with PPP version 1.x, the following lines might be added to the relevant section of
.Pa /etc/ppp/ppp.conf
.
.Bd -literal -offset indent
enable msext
set ns 203.14.100.1 203.14.100.2
set nbns 203.14.100.5
.Ed
.Pp
And for PPP version 2 and above:
.Bd -literal -offset indent
accept dns
set dns 203.14.100.1 203.14.100.2
set nbns 203.14.100.5
.Ed
.Pp
This will tell the clients the primary and secondary name server addresses, and
a NetBIOS nameserver host.
.Pp
In version 2 and above, if the
.Ql set dns
line is omitted, PPP will use the values found in
.Pa /etc/resolv.conf
.
.Ss PAP AND CHAP AUTHENTICATION
.Pp
Some ISPs set their system up so that the authentication part of the connection is done
using either of the PAP or CHAP authentication mechanisms.
If this is the case, the ISP will not give a login: prompt at connection, but will start talking PPP immediately.
.Pp
PAP is less secure than CHAP, but security is not normally an issue here as
passwords, although being sent as plain text with PAP, are being transmitted
down a serial line only.
There is not much room for crackers to
.Do
eavesdrop
.Dc
.
.Pp
The following alterations must be made:
.Bd -literal -offset indent
13      set authname MyUserName
14      set authkey MyPassword
15      set login
.Ed
.Bl -tag -offset -compact
.It Line 13:
This line specifies the PAP/CHAP user name.
Insert the correct value for MyUserName.
.It Line 14:
This line specifies the PAP/CHAP password.
Insert the correct value for MyPassword.
You may want to add an additional line, such as:
.Bd -literal -offset indent
16      accept PAP
.Ed
or
.Bd -literal -offset indent
16      accept CHAP
.Ed
to make it obvious that this is the intention, but PAP and CHAP are both
accepted by default.
.It Line 15:
The ISP will not normally require a login to the server when using PAP or CHAP.
Therefore, disable the
.Do
set login
.Dc
string.
.El
.Ss USING PPP NETWORK ADDRESS TRANSLATION CAPABILITY
.Pp
PPP has ability to use internal NAT without kernel diverting capabilities.
This functionality may be enabled by the following line in
.Pa /etc/ppp/ppp.conf
:
.Bd -literal -offset indent
nat enable yes
.Ed
.Pp
Alternatively, NAT may be enabled by command-line option
.Ql -nat
.
There is also
.Pa /etc/rc.conf
knob named
.Ql ppp_nat
, which is enabled by default.
.Pp
When using this feature, it may be useful to include the following
.Pa /etc/ppp/ppp.conf
options to enable incoming connections forwarding:
.Bd -literal -offset indent
nat port tcp 10.0.0.2:ftp ftp
nat port tcp 10.0.0.2:http http
.Ed
.Pp
or do not trust the outside at all
.Bd -literal -offset indent
nat deny_incoming yes
.Ed
.Ss FINAL SYSTEM CONFIGURATION
.Pp
While
.Cm ppp
is now configured, some edits still need to be made to
.Pa /etc/rc.conf
.
.Pp
Working from the top down in this file, make sure the
.Ql hostname=
line is set:
.Bd -literal -offset indent
hostname="foo.example.com"
.Ed
.Pp
If the ISP has supplied a static IP address and name, use this name as the host name.
.Pp
Look for the
.Ql network_interfaces
variable.
To configure the system to dial the ISP on demand, make sure the
.Pa tun0
device is added to the list, otherwise remove it.
.Bd -literal -offset indent
network_interfaces="lo0 tun0"
ifconfig_tun0=
.Ed
.Pp
The
.Ql ifconfig_tun0
variable should be empty, and a file called
.Pa /etc/start_if.tun0
should be created.
This file should contain the line:
.Bd -literal -offset indent
ppp -auto mysystem
.Ed
.Pp
This script is executed at network configuration time, starting the ppp daemon
in automatic mode.
If this machine acts as a gateway, consider including
.Ar -alias
.
Refer to the manual page for further details.
.Pp
Make sure that the router program is set to
.Ql NO
with the following line in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
router_enable="NO"
.Ed
.Pp
It is important that the
.Cm routed
daemon is not started, as
.Cm routed
tends to delete the default routing table entries created by
.Cm ppp
.
.Pp
It is probably a good idea to ensure that the
.Ql sendmail_flags
line does not include the
.Ar -q
option, otherwise
.Cm sendmail
will attempt to do a network lookup every now and then, possibly causing your
machine to dial out.
You may try:
.Bd -literal -offset indent
sendmail_flags="-bd"
.Ed
.Pp
The downside is that
.Cm sendmail
is forced to re-examine the mail queue whenever the ppp link.
To automate this, include
.Cm !bg
in
.Pa ppp.linkup
:
.Bd -literal -offset indent
1     provider:
2       delete ALL
3       add 0 0 HISADDR
4       !bg sendmail -bd -q30m
.Ed
.Pp
An alternative is to set up a
.Do
dfilter
.Dc
to block SMTP traffic.
Refer to the sample files for further details.
.Ss USING PPP
.Pp
All that is left is to reboot the machine.
After rebooting, either type:
.Bd -literal -offset indent
# ppp
.Ed
.Pp
and then
.Cm dial provider
to start the PPP session, or, to configure
.Cm ppp
to establish sessions automatically when there is outbound traffic and
.Pa start_if.tun0
does not exist, type:
.Bd -literal -offset indent
# ppp -auto provider
.Ed
.Pp
It is possible to talk to the
.Cm ppp
program while it is running in the background, but only if a suitable
diagnostic port has been set up.
To do this, add the following line to the configuration:
.Bd -literal -offset indent
set server /var/run/ppp-tun%d DiagnosticPassword 0177
.Ed
.Pp
This will tell PPP to listen to the specified UNIX domain socket, asking clients for the specified password before allowing
access.
The
.Ql %d
in the name is replaced with the
.Pa tun
device number that is in use.
.Pp
Once a socket has been set up, the
.Xr pppctl 8 program may be used in scripts that wish to manipulate the running program.
.Ss CONFIGURING DIAL-IN SERVICES
.Pp
provides a good description on enabling dial-up services using
.Xr getty 8 .
.Pp
An alternative to
.Cm getty
is
.Ql comms/mgetty+sendfax
port), a smarter version of
.Cm getty
designed with dial-up lines in mind.
.Pp
The advantages of using
.Cm mgetty
is that it actively talks to modems, meaning if port is turned off in
.Pa /etc/ttys
then the modem will not answer the phone.
.Pp
Later versions of
.Cm mgetty
(from 0.99beta onwards) also support the automatic detection of PPP streams, allowing clients scriptless access to the server.
.Pp
Refer to http://mgetty.greenie.net/doc/mgetty_toc.html for more information on
.Cm mgetty
.
.Pp
By default the
.Ql comms/mgetty+sendfax
port comes with the
.Ql AUTO_PPP
option enabled allowing
.Cm mgetty
to detect the LCP phase of PPP connections and automatically spawn off a ppp shell.
However, since the default login/password sequence does not occur it is
necessary to authenticate users using either PAP or CHAP.
.Pp
This section assumes the user has successfully compiled, and installed the
.Ql comms/mgetty+sendfax
port on his system.
.Pp
Ensure that
.Pa /usr/local/etc/mgetty+sendfax/login.config
has the following:
.Bd -literal -offset indent
/AutoPPP/ -     - /etc/ppp/ppp-pap-dialup
.Ed
.Pp
This tells
.Cm mgetty
to run
.Pa ppp-pap-dialup
for detected PPP connections.
.Pp
Create an executable file called
.Pa /etc/ppp/ppp-pap-dialup
containing the following:
.Bd -literal -offset indent
#!/bin/sh
exec /usr/sbin/ppp -direct pap$IDENT
.Ed
.Pp
For each dial-up line enabled in
.Pa /etc/ttys
, create a corresponding entry in
.Pa /etc/ppp/ppp.conf
.
This will happily co-exist with the definitions we created above.
.Bd -literal -offset indent
pap:
  enable pap
  set ifaddr 203.14.100.1 203.14.100.20-203.14.100.40
  enable proxy
.Ed
.Pp
Each user logging in with this method will need to have a username/password in
.Pa /etc/ppp/ppp.secret
, or alternatively add the following option to authenticate users via PAP from
.Pa /etc/passwd
.
.Bd -literal -offset indent
enable passwdauth
.Ed
.Pp
To assign some users a static IP number, specify the number as the third argument in
.Pa /etc/ppp/ppp.secret
.
See
.Pa /usr/share/examples/ppp/ppp.secret.sample
for examples.
.Ss TROUBLESHOOTING PPP CONNECTIONS
.Pp
This section covers a few issues which may arise when using PPP over a modem connection.
Some ISPs present the
.Ql ssword
prompt while others present
.Ql password
.
If the
.Cm ppp
script is not written accordingly, the login attempt will fail.
The most common way to debug
.Cm ppp
connections is by connecting manually as described in this section.
.Ss CHECK THE DEVICE NODES
.Pp
When using a custom kernel, make sure to include the following line in the
kernel configuration file:
.Bd -literal -offset indent
device   uart
.Ed
.Pp
The
.Pa uart
device is already included in the
.Ql GENERIC
kernel, so no additional steps are necessary in this case.
Just check the
.Cm dmesg
output for the modem device with:
.Bd -literal -offset indent
# dmesg | grep uart
.Ed
.Pp
This should display some pertinent output about the
.Pa uart
devices.
These are the COM ports we need.
If the modem acts like a standard serial port, it should be listed on
.Pa uart1
, or
.Pa COM2
.
If so, a kernel rebuild is not required.
When matching up, if the modem is on
.Pa uart1
, the modem device would be
.Pa /dev/cuau1
.
.Ss CONNECTING MANUALLY
.Pp
Connecting to the Internet by manually controlling
.Cm ppp
is quick, easy, and a great way to debug a connection or just get information
on how the ISP treats
.Cm ppp
client connections.
Lets start PPP from the command line.
Note that in all of our examples we will use example as the hostname of the machine running PPP.
To start
.Cm ppp
:
.Bd -literal -offset indent
# ppp
.Ed
.Bd -literal -offset indent
ppp ON example> set device /dev/cuau1
.Ed
.Pp
This second command sets the modem device to
.Pa cuau1
.
.Bd -literal -offset indent
ppp ON example> set speed 115200
.Ed
.Pp
This sets the connection speed to 115,200 kbps.
.Bd -literal -offset indent
ppp ON example> enable dns
.Ed
.Pp
This tells
.Cm ppp
to configure the resolver and add the nameserver lines to
.Pa /etc/resolv.conf
.
If
.Cm ppp
cannot determine the hostname, it can manually be set later.
.Bd -literal -offset indent
ppp ON example> term
.Ed
.Pp
This switches to
.Do
terminal
.Dc
mode in order to manually control the modem.
.Bd -literal -offset indent
deflink: Entering terminal mode on
.Pa /dev/cuau1

type '~h' for help
.Ed
.Bd -literal -offset indent
at
OK
atdt123456789
.Ed
.Pp
Use
.Cm at
to initialize the modem, then use
.Cm atdt
and the number for the ISP to begin the dial in process.
.Bd -literal -offset indent
CONNECT
.Ed
.Pp
Confirmation of the connection, if we are going to have any connection
problems, unrelated to hardware, here is where we will attempt to resolve them.
.Bd -literal -offset indent
ISP Login:myusername
.Ed
.Pp
At this prompt, return the prompt with the username that was provided by the ISP.
.Bd -literal -offset indent
ISP Pass:mypassword
.Ed
.Pp
At this prompt, reply with the password that was provided by the ISP.
Just like logging into FreeBSD, the password will not echo.
.Bd -literal -offset indent
Shell or PPP:ppp
.Ed
.Pp
Depending on the ISP, this prompt might not appear.
If it does, it is asking whether to use a shell on the provider or to start
.Cm ppp
.
In this example,
.Cm ppp
was selected in order to establish an Internet connection.
.Bd -literal -offset indent
Ppp ON example>
.Ed
.Pp
Notice that in this example the first
.Ar p
has been capitalized.
This shows that we have successfully connected to the ISP.
.Bd -literal -offset indent
PPp ON example>
.Ed
.Pp
We have successfully authenticated with our ISP and are waiting for the assigned IP address.
.Bd -literal -offset indent
PPP ON example>
.Ed
.Pp
We have made an agreement on an IP address and successfully completed our connection.
.Bd -literal -offset indent
PPP ON example>add default HISADDR
.Ed
.Pp
Here we add our default route, we need to do this before we can talk to the
outside world as currently the only established connection is with the peer.
If this fails due to existing routes, put a bang character
.Ql !
in front of the
.Ar add
.
Alternatively, set this before making the actual connection and it will
negotiate a new route accordingly.
.Pp
If everything went good we should now have an active connection to the
Internet, which could be thrown into the background using CTRLz If
.Cm PPP
returns to
.Cm ppp
then the connection has bee lost.
This is good to know because it shows the connection status.
Capital P's represent a connection to the ISP and lowercase p's show that the connection has been lost.
.Ss DEBUGGING
.Pp
If a connection cannot be established, turn hardware flow CTS/RTS to off using
.Ar set ctsrts off
.
This is mainly the case when connected to some PPP-capable terminal servers, where PPP hangs when it tries to write data to the communication link, and waits for a
Clear To Send (CTS) signal which may never come.
When using this option, include
.Ar set accmap
as it may be required to defeat hardware dependent on passing certain
characters from end to end, most of the time XON/XOFF.
Refer to
.Xr ppp 8 for more information on this option and how it is used.
.Pp
An older modem may need
.Ar set parity even
.
Parity is set at none be default, but is used for error checking with a large
increase in traffic, on older modems.
.Pp
PPP may not return to the command mode, which is usually a negotiation error where
the ISP is waiting for negotiating to begin.
At this point, using
.Cm ~p
will force ppp to start sending the configuration information.
.Pp
If a login prompt never appears, PAP or CHAP authentication is most likely required.
To use PAP or CHAP, add the following options to PPP before going into terminal mode:
.Bd -literal -offset indent
ppp ON example> set authname myusername
.Ed
.Pp
Where myusername should be replaced with the username that was assigned by the ISP.
.Bd -literal -offset indent
ppp ON example> set authkey mypassword
.Ed
.Pp
Where mypassword should be replaced with the password that was assigned by the ISP.
.Pp
If a connection is established, but cannot seem to find any domain name, try to
.Xr ping 8 an IP address.
If there is 100 percent (100%) packet loss, it is likely that a default route
was not assigned.
Double check that
.Ar add default HISADDR
was set during the connection.
If a connection can be made to a remote IP address, it is possible that a resolver address has not been added to
.Pa /etc/resolv.conf
.
This file should look like:
.Bd -literal -offset indent
domain example.com
nameserver x.x.x.x
nameserver y.y.y.y
.Ed
.Pp
Where x.x.x.x and y.y.y.y should be replaced with the IP address of the ISP's DNS servers.
.Pp
To configure
.Xr syslog 3 to provide logging for the PPP connection, make sure this line exists in
.Pa /etc/syslog.conf
:
.Bd -literal -offset indent
!ppp
*.*     /var/log/ppp.log
.Ed
.Ss USING PPP OVER ETHERNET (PPPOE)
.Pp
This section describes how to set up PPP over Ethernet (PPPoE).
.Pp
Here is an example of a working
.Pa ppp.conf
:
.Bd -literal -offset indent
default:
  set log Phase tun command # you can add more detailed logging if you wish
  set ifaddr 10.0.0.1/0 10.0.0.2/0

name_of_service_provider:
  set device PPPoE:xl1 # replace xl1 with your Ethernet device
  set authname YOURLOGINNAME
  set authkey YOURPASSWORD
  set dial
  set login
  add default HISADDR
.Ed
.Pp
As
.Ql root
, run:
.Bd -literal -offset indent
# ppp -ddial name_of_service_provider
.Ed
.Pp
Add the following to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
ppp_enable="YES"
ppp_mode="ddial"
ppp_nat="YES"	# if you want to enable nat for your local network, otherwise NO
ppp_profile="name_of_service_provider"
.Ed
.Ss USING A PPPOE SERVICE TAG
.Pp
Sometimes it will be necessary to use a service tag to establish the
connection.
Service tags are used to distinguish between different PPPoE servers attached
to a given network.
.Pp
Any required service tag information should be in the documentation provided by
the ISP.
.Pp
As a last resort, one could try installing the
.Ql net/rr-pppoe
package or port.
Bear in mind however, this may de-program your modem and render it useless, so
think twice before doing it.
Simply install the program shipped with the modem.
Then, access the
.Ql System
menu from the program.
The name of the profile should be listed there.
It is usually ISP.
.Pp
The profile name (service tag) will be used in the PPPoE configuration entry in
.Pa ppp.conf
as the provider part for
.Cm set device
.
Refer to
.Xr ppp 8 for full details.
It should look like this:
.Bd -literal -offset indent
set device PPPoE:xl1:ISP
.Ed
.Pp
Do not forget to change xl1 to the proper device for the Ethernet card.
.Pp
Do not forget to change ISP to the profile.
.Pp
For additional information, refer to Cheaper Broadband with FreeBSD on DSL by Renaud Waldura.
.Ss PPPOE WITH A 3COM HOMECONNECT ADSL MODEM DUAL LINK
.Pp
This modem does not follow the PPPoE specification defined in RFC 2516.
.Pp
In order to make FreeBSD capable of communicating with this device, a sysctl
must be set.
This can be done automatically at boot time by updating
.Pa /etc/sysctl.conf
:
.Bd -literal -offset indent
net.graph.nonstandard_pppoe=1
.Ed
.Pp
or can be done immediately with the command:
.Bd -literal -offset indent
# sysctl net.graph.nonstandard_pppoe=1
.Ed
.Pp
Unfortunately, because this is a system-wide setting, it is not possible to
talk to a normal PPPoE client or server and a 3Com  HomeConnect ADSL Modem at the same time.
.Ss USING PPP OVER ATM (PPPOA)
.Pp
The following describes how to set up PPP over ATM (PPPoA).
PPPoA is a popular choice among European DSL providers.
.Ss USING MPD
.Pp
The mpd application can be used to connect to a variety of services, in particular PPTP
services.
It can be installed using the
.Ql net/mpd5
package or port.
Many ADSL modems require that a PPTP tunnel is created between the modem and
computer.
.Pp
Once installed, configure mpd to suit the provider's settings.
The port places a set of sample configuration files which are well documented
in
.Pa /usr/local/etc/mpd/
.
A complete guide to configure mpd is available in HTML format in
.Pa /usr/ports/share/doc/mpd/
.
Here is a sample configuration for connecting to an ADSL service with mpd.
The configuration is spread over two files, first the
.Pa mpd.conf
:
.Pp
This example
.Pa mpd.conf
only works with mpd 4.x.
.Bd -literal -offset indent
default:
    load adsl

adsl:
    new -i ng0 adsl adsl
    set bundle authname username 
    set bundle password password 
    set bundle disable multilink

    set link no pap acfcomp protocomp
    set link disable chap
    set link accept chap
    set link keep-alive 30 10

    set ipcp no vjcomp
    set ipcp ranges 0.0.0.0/0 0.0.0.0/0

    set iface route default
    set iface disable on-demand
    set iface enable proxy-arp
    set iface idle 0

    open
.Ed
.Pp
The username used to authenticate with your ISP.
.Pp
The password used to authenticate with your ISP.
.Pp
Information about the link, or links, to establish is found in
.Pa mpd.links
.
An example
.Pa mpd.links
to accompany the above example is given beneath:
.Bd -literal -offset indent
adsl:
    set link type pptp
    set pptp mode active
    set pptp enable originate outcall
    set pptp self 10.0.0.1 
    set pptp peer 10.0.0.138
.Ed
.Pp
The IP address of FreeBSD computer running mpd.
.Pp
The IP address of the ADSL modem.
The Alcatel SpeedTouch Home defaults to
.Ql 10.0.0.138
.
.Pp
It is possible to initialize the connection easily by issuing the following
command as
.Ql root
:
.Bd -literal -offset indent
# mpd -b adsl
.Ed
.Pp
To view the status of the connection:
.Bd -literal -offset indent
% ifconfig ng0
ng0: flags=88d1<UP,POINTOPOINT,RUNNING,NOARP,SIMPLEX,MULTICAST> mtu 1500
     inet 216.136.204.117 --> 204.152.186.171 netmask 0xffffffff
.Ed
.Pp
Using mpd is the recommended way to connect to an ADSL service with FreeBSD.
.Ss USING PPTPCLIENT
.Pp
It is also possible to use FreeBSD to connect to other PPPoA services using
.Ql net/pptpclient
.
.Pp
To use
.Ql net/pptpclient
to connect to a DSL service, install the port or package, then edit
.Pa /etc/ppp/ppp.conf
.
An example section of
.Pa ppp.conf
is given below.
For further information on
.Pa ppp.conf
options consult
.Xr ppp 8 .
.Bd -literal -offset indent
adsl:
 set log phase chat lcp ipcp ccp tun command
 set timeout 0
 enable dns
 set authname username 
 set authkey password 
 set ifaddr 0 0
 add default HISADDR
.Ed
.Pp
The username for the DSL provider.
.Pp
The password for your account.
.Pp
Since the account's password is added to
.Pa ppp.conf
in plain text form, make sure nobody can read the contents of this file:
.Bd -literal -offset indent
# chown root:wheel /etc/ppp/ppp.conf
# chmod 600 /etc/ppp/ppp.conf
.Ed
.Pp
This will open a tunnel for a PPP session to the DSL router.
Ethernet DSL modems have a preconfigured LAN IP address to connect to.
In the case of the Alcatel SpeedTouch Home, this address is
.Ql 10.0.0.138
.
The router's documentation should list the address the device uses.
To open the tunnel and start a PPP session:
.Bd -literal -offset indent
# pptp address  adsl
.Ed
.Pp
If an ampersand (
.Do
&
.Dc
) is added to the end of this command, pptp will return the prompt.
.Pp
A
.Pa tun
virtual tunnel device will be created for interaction between the pptp and ppp processes.
Once the prompt is returned, or the pptp process has confirmed a connection, examine the tunnel:
.Bd -literal -offset indent
% ifconfig tun0
tun0: flags=8051<UP,POINTOPOINT,RUNNING,MULTICAST> mtu 1500
        inet 216.136.204.21 --> 204.152.186.171 netmask 0xffffff00
	Opened by PID 918
.Ed
.Pp
If the connection fails, check the configuration of the router, which is
usually accessible using a web browser.
Also, examine the output of
.Cm pptp
and the contents of the log file,
.Pa /var/log/ppp.log
for clues.
.Ss SYNOPSIS
.Pp
.Do
Electronic Mail
.Dc
, better known as email, is one of the most widely used forms of communication
today.
This chapter provides a basic introduction to running a mail server on FreeBSD,
as well as an introduction to sending and receiving email using FreeBSD.
For more complete coverage of this subject, refer to the books listed in .
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
Which software components are involved in sending and receiving electronic
mail.
.It
Where basic Sendmail configuration files are located in FreeBSD.
.It
The difference between remote and local mailboxes.
.It
How to block spammers from illegally using a mail server as a relay.
.It
How to install and configure an alternate Mail Transfer Agent, replacing Sendmail.
.It
How to troubleshoot common mail server problems.
.It
How to set up the system to send mail only.
.It
How to use mail with a dialup connection.
.It
How to configure SMTP authentication for added security.
.It
How to install and use a Mail User Agent, such as mutt, to send and receive email.
.It
How to download mail from a remote POP or IMAP server.
.It
How to automatically apply filters and rules to incoming email.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Properly set up a network connection ().
.It
Properly set up the DNS information for a mail host ().
.It
Know how to install additional third-party software ().
.El
.Ss MAIL COMPONENTS
.Pp
There are five major parts involved in an email exchange: the Mail User Agent (MUA), the Mail Transfer Agent (MTA), a mail host, a remote or local mailbox, and DNS.
This section provides an overview of these components.
.Bl -tag -offset -compact
.It Mail User Agent (MUA)
The Mail User Agent (MUA) is an application which is used to compose, send, and receive emails.
This application can be a command line program, such as the built-in
.Cm mail
utility or a third-party application from the Ports Collection, such as mutt, alpine, or elm.
Dozens of graphical programs are also available in the Ports Collection,
including Claws Mail, Evolution, and Thunderbird.
Some organizations provide a web mail program which can be accessed through a
web browser.
More information about installing and using a MUA on FreeBSD can be found in .
.It Mail Transfer Agent (MTA)
The Mail Transfer Agent (MTA) is responsible for receiving incoming mail and delivering outgoing mail.
FreeBSD ships with Sendmail as the default MTA, but it also supports numerous other mail server daemons, including Exim, Postfix, and qmail.
 Sendmail configuration is described in .
If another MTA is installed using the Ports Collection, refer to its post-installation message
for FreeBSD-specific configuration details and the application's website for
more general configuration instructions.
.It Mail Host and Mailboxes
The mail host is a server that is responsible for delivering and receiving mail
for a host or a network.
The mail host collects all mail sent to the domain and stores it either in the
default
.Pa mbox
or the alternative Maildir format, depending on the configuration.
Once mail has been stored, it may either be read locally using a MUA or remotely accessed and collected using protocols such as POP or IMAP.
If mail is read locally, a POP or IMAP server does not need to be installed.
To access mailboxes remotely, a POP or IMAP server is required as these protocols allow users to connect to their mailboxes
from remote locations.
 IMAP offers several advantages over POP.
These include the ability to store a copy of messages on a remote server after
they are downloaded and concurrent updates.
 IMAP can be useful over low-speed links as it allows users to fetch the structure of
messages without downloading them.
It can also perform tasks such as searching on the server in order to minimize
data transfer between clients and servers.
Several POP and IMAP servers are available in the Ports Collection.
These include
.Ql mail/qpopper
,
.Ql mail/imap-uw
,
.Ql mail/courier-imap
, and
.Ql mail/dovecot2
.
It should be noted that both POP and IMAP transmit information, including username and password credentials, in
clear-text.
To secure the transmission of information across these protocols, consider
tunneling sessions over
.Xr ssh 1 () or using SSL ().
.It Domain Name System (DNS)
The Domain Name System (DNS) and its daemon
.Cm named
play a large role in the delivery of email.
In order to deliver mail from one site to another, the MTA will look up the remote site in DNS to determine which host will receive mail for the destination.
This process also occurs when mail is sent from a remote host to the MTA.
In addition to mapping hostnames to IP addresses, DNS is responsible for storing information specific to mail delivery, known as Mail
eXchanger MX records.
The MX record specifies which hosts will receive mail for a particular domain.
To view the MX records for a domain, specify the type of record.
Refer to
.Xr host 1 , for more details about this command:
.Bd -literal -offset indent
% host -t mx FreeBSD.org
FreeBSD.org mail is handled by 10 mx1.FreeBSD.org
.Ed
Refer to for more information about DNS and its configuration.
.El
.Pp
Sendmail is the default MTA installed with FreeBSD.
It accepts mail from MUAs and delivers it to the appropriate mail host, as defined by its
configuration.
 Sendmail can also accept network connections and deliver mail to local mailboxes or to
another program.
.Pp
The configuration files for Sendmail are located in
.Pa /etc/mail
.
This section describes these files in more detail.
.Bl -tag -offset -compact
.It
.Pa /etc/mail/access
This access database file defines which hosts or IP addresses have access to the local mail server and what kind of access they
have.
Hosts listed as
.Ar OK
, which is the default option, are allowed to send mail to this host as long as
the mail's final destination is the local machine.
Hosts listed as
.Ar REJECT
are rejected for all mail connections.
Hosts listed as
.Ar RELAY
are allowed to send mail for any destination using this mail server.
Hosts listed as
.Ar ERROR
will have their mail returned with the specified mail error.
If a host is listed as
.Ar SKIP
, Sendmail will abort the current search for this entry without accepting or rejecting the
mail.
Hosts listed as
.Ar QUARANTINE
will have their messages held and will receive the specified text as the reason
for the hold.
Examples of using these options for both IPv4 and IPv6 addresses can be found in the FreeBSD sample configuration,
.Pa /etc/mail/access.sample
:
.Bd -literal -offset indent
# $FreeBSD$
#
# Mail relay access control list.  Default is to reject mail unless the
# destination is local, or listed in /etc/mail/local-host-names
#
## Examples (commented out for safety)
#From:cyberspammer.com          ERROR:"550 We don't accept mail from spammers"
#From:okay.cyberspammer.com     OK
#Connect:sendmail.org           RELAY
#To:sendmail.org                RELAY
#Connect:128.32                 RELAY
#Connect:128.32.2               SKIP
#Connect:IPv6:1:2:3:4:5:6:7     RELAY
#Connect:suspicious.example.com QUARANTINE:Mail from suspicious host
#Connect:[127.0.0.3]            OK
#Connect:[IPv6:1:2:3:4:5:6:7:8] OK
.Ed
To configure the access database, use the format shown in the sample to make
entries in
.Pa /etc/mail/access
, but do not put a comment symbol (
.Ql #
) in front of the entries.
Create an entry for each host or network whose access should be configured.
Mail senders that match the left side of the table are affected by the action
on the right side of the table.
Whenever this file is updated, update its database and restart Sendmail:
.Bd -literal -offset indent
# makemap hash /etc/mail/access < /etc/mail/access
# service sendmail restart
.Ed
.It
.Pa /etc/mail/aliases
This database file contains a list of virtual mailboxes that are expanded to
users, files, programs, or other aliases.
Here are a few entries to illustrate the file format:
.Bd -literal -offset indent
root: localuser
ftp-bugs: joe,eric,paul
bit.bucket:  /dev/null
procmail: "|/usr/local/bin/procmail"
.Ed
The mailbox name on the left side of the colon is expanded to the target(s) on
the right.
The first entry expands the
.Ql root
mailbox to the
.Ql localuser
mailbox, which is then looked up in the
.Pa /etc/mail/aliases
database.
If no match is found, the message is delivered to
.Ql localuser
.
The second entry shows a mail list.
Mail to
.Ql ftp-bugs
is expanded to the three local mailboxes
.Ql joe
,
.Ql eric
, and
.Ql paul
.
A remote mailbox could be specified as user@example.com.
The third entry shows how to write mail to a file, in this case
.Pa /dev/null
.
The last entry demonstrates how to send mail to a program,
.Pa /usr/local/bin/procmail
, through a UNIX pipe.
Refer to
.Xr aliases 5 for more information about the format of this file.
Whenever this file is updated, run
.Cm newaliases
to update and initialize the aliases database.
.It
.Pa /etc/mail/sendmail.cf
This is the master configuration file for Sendmail.
It controls the overall behavior of Sendmail, including everything from rewriting email addresses to printing rejection
messages to remote mail servers.
Accordingly, this configuration file is quite complex.
Fortunately, this file rarely needs to be changed for standard mail servers.
The master Sendmail configuration file can be built from
.Xr m4 1 macros that define the features and behavior of Sendmail.
Refer to
.Pa /usr/src/contrib/sendmail/cf/README
for some of the details.
Whenever changes to this file are made, Sendmail needs to be restarted for the changes to take effect.
.It
.Pa /etc/mail/virtusertable
This database file maps mail addresses for virtual domains and users to real
mailboxes.
These mailboxes can be local, remote, aliases defined in
.Pa /etc/mail/aliases
, or files.
This allows multiple virtual domains to be hosted on one machine.
FreeBSD provides a sample configuration file in
.Pa /etc/mail/virtusertable.sample
to further demonstrate its format.
The following example demonstrates how to create custom entries using that
format:
.Bd -literal -offset indent
root@example.com                root
postmaster@example.com          postmaster@noc.example.net
@example.com                    joe
.Ed
This file is processed in a first match order.
When an email address matches the address on the left, it is mapped to the
local mailbox listed on the right.
The format of the first entry in this example maps a specific email address to
a local mailbox, whereas the format of the second entry maps a specific email
address to a remote mailbox.
Finally, any email address from
.Ql example.com
which has not matched any of the previous entries will match the last mapping
and be sent to the local mailbox
.Ql joe
.
When creating custom entries, use this format and add them to
.Pa /etc/mail/virtusertable
.
Whenever this file is edited, update its database and restart Sendmail:
.Bd -literal -offset indent
# makemap hash /etc/mail/virtusertable < /etc/mail/virtusertable
# service sendmail restart
.Ed
.It
.Pa /etc/mail/relay-domains
In a default FreeBSD installation, Sendmail is configured to only send mail from the host it is running on.
For example, if a POP server is available, users will be able to check mail from remote locations but
they will not be able to send outgoing emails from outside locations.
Typically, a few moments after the attempt, an email will be sent from
.Ql MAILER-DAEMON
with a
.Er 5.7 Relaying Denied
message.
The most straightforward solution is to add the ISP's FQDN to
.Pa /etc/mail/relay-domains
.
If multiple addresses are needed, add them one per line:
.Bd -literal -offset indent
your.isp.example.com
other.isp.example.net
users-isp.example.org
www.example.org
.Ed
After creating or editing this file, restart Sendmail with
.Cm service sendmail restart
.
Now any mail sent through the system by any host in this list, provided the
user has an account on the system, will succeed.
This allows users to send mail from the system remotely without opening the
system up to relaying SPAM from the Internet.
.El
.Pp
FreeBSD comes with Sendmail already installed as the MTA which is in charge of outgoing and incoming mail.
However, the system administrator can change the system's MTA.
A wide choice of alternative MTAs is available from the
.Ql mail
category of the FreeBSD Ports Collection.
.Pp
Once a new MTA is installed, configure and test the new software before replacing Sendmail.
Refer to the documentation of the new MTA for information on how to configure the software.
.Pp
Once the new MTA is working, use the instructions in this section to disable Sendmail and configure FreeBSD to use the replacement MTA.
.Ss DISABLE SENDMAIL
.Pp
If Sendmail's outgoing mail service is disabled, it is important that it is replaced with
an alternative mail delivery system.
Otherwise, system functions such as
.Xr periodic 8 will be unable to deliver their results by email.
Many parts of the system expect a functional MTA.
If applications continue to use Sendmail's binaries to try to send email after they are disabled, mail could go into an
inactive Sendmail queue and never be delivered.
.Pp
In order to completely disable Sendmail, add or edit the following lines in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
sendmail_enable="NO"
sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"
.Ed
.Pp
To only disable Sendmail's incoming mail service, use only this entry in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
sendmail_enable="NO"
.Ed
.Pp
More information on Sendmail's startup options is available in
.Xr rc.sendmail 8 .
.Ss REPLACE THE DEFAULT MTA
.Pp
When a new MTA is installed using the Ports Collection, its startup script is also installed
and startup instructions are mentioned in its package message.
Before starting the new MTA, stop the running Sendmail processes.
This example stops all of these services, then starts the Postfix service:
.Bd -literal -offset indent
# service sendmail stop
# service postfix start
.Ed
.Pp
To start the replacement MTA at system boot, add its configuration line to
.Pa /etc/rc.conf
.
This entry enables the Postfix MTA:
.Bd -literal -offset indent
postfix_enable="YES"
.Ed
.Pp
Some extra configuration is needed as Sendmail is so ubiquitous that some software assumes it is already installed and
configured.
Check
.Pa /etc/periodic.conf
and make sure that these values are set to
.Ql NO
.
If this file does not exist, create it with these entries:
.Bd -literal -offset indent
daily_clean_hoststat_enable="NO"
daily_status_mail_rejects_enable="NO"
daily_status_include_submit_mailq="NO"
daily_submit_queuerun="NO"
.Ed
.Pp
Some alternative MTAs provide their own compatible implementations of the Sendmail command-line interface in order to facilitate using them as drop-in
replacements for Sendmail.
However, some MUAs may try to execute standard Sendmail binaries instead of the new MTA's binaries.
FreeBSD uses
.Pa /etc/mail/mailer.conf
to map the expected Sendmail binaries to the location of the new binaries.
More information about this mapping can be found in
.Xr mailwrapper 8 .
.Pp
The default
.Pa /etc/mail/mailer.conf
looks like this:
.Bd -literal -offset indent
# $FreeBSD$
#
# Execute the "real" sendmail program, named /usr/libexec/sendmail/sendmail
#
sendmail        /usr/libexec/sendmail/sendmail
send-mail       /usr/libexec/sendmail/sendmail
mailq           /usr/libexec/sendmail/sendmail
newaliases      /usr/libexec/sendmail/sendmail
hoststat        /usr/libexec/sendmail/sendmail
purgestat       /usr/libexec/sendmail/sendmail
.Ed
.Pp
When any of the commands listed on the left are run, the system actually
executes the associated command shown on the right.
This system makes it easy to change what binaries are executed when these
default binaries are invoked.
.Pp
Some MTAs, when installed using the Ports Collection, will prompt to update this file
for the new binaries.
For example, Postfix will update the file like this:
.Bd -literal -offset indent
#
# Execute the Postfix sendmail program, named /usr/local/sbin/sendmail
#
sendmail        /usr/local/sbin/sendmail
send-mail       /usr/local/sbin/sendmail
mailq           /usr/local/sbin/sendmail
newaliases      /usr/local/sbin/sendmail
.Ed
.Pp
If the installation of the MTA does not automatically update
.Pa /etc/mail/mailer.conf
, edit this file in a text editor so that it points to the new binaries.
This example points to the binaries installed by
.Ql mail/ssmtp
:
.Bd -literal -offset indent
sendmail        /usr/local/sbin/ssmtp
send-mail       /usr/local/sbin/ssmtp
mailq           /usr/local/sbin/ssmtp
newaliases      /usr/local/sbin/ssmtp
hoststat        /usr/bin/true
purgestat       /usr/bin/true
.Ed
.Pp
Once everything is configured, it is recommended to reboot the system.
Rebooting provides the opportunity to ensure that the system is correctly
configured to start the new MTA automatically on boot.
.Ss TROUBLESHOOTING
.Pp
Why do I have to use the FQDN for hosts on my site?
.Pp
The host may actually be in a different domain.
For example, in order for a host in
.Ql foo.bar.edu
to reach a host called
.Ql mumble
in the
.Ql bar.edu
domain, refer to it by the Fully-Qualified Domain Name FQDN,
.Ql mumble.bar.edu
, instead of just
.Ql mumble
.
.Pp
This is because the version of BIND which ships with FreeBSD no longer provides default abbreviations for non-FQDNs
other than the local domain.
An unqualified host such as
.Ql mumble
must either be found as
.Ql mumble.foo.bar.edu
, or it will be searched for in the root domain.
.Pp
In older versions of BIND, the search continued across
.Ql mumble.bar.edu
, and
.Ql mumble.edu
.
RFC 1535 details why this is considered bad practice or even a security hole.
.Pp
As a good workaround, place the line:
.Bd -literal -offset indent
search foo.bar.edu bar.edu
.Ed
.Pp
instead of the previous:
.Bd -literal -offset indent
domain foo.bar.edu
.Ed
.Pp
into
.Pa /etc/resolv.conf
.
However, make sure that the search order does not go beyond the
.Do
boundary between local and public administration
.Dc
, as RFC 1535 calls it.
.Pp
How can I run a mail server on a dial-up PPP host?
.Pp
Connect to a FreeBSD mail gateway on the LAN.
The PPP connection is non-dedicated.
.Pp
One way to do this is to get a full-time Internet server to provide secondary MX  services for the domain.
In this example, the domain is
.Ql example.com
and the ISP has configured
.Ql example.net
to provide secondary MX services to the domain:
.Bd -literal -offset indent
example.com.          MX        10      example.com.
                      MX        20      example.net.
.Ed
.Pp
Only one host should be specified as the final recipient.
For Sendmail, add
.Ql Cw example.com
in
.Pa /etc/mail/sendmail.cf
on
.Ql example.com
.
.Pp
When the sending MTA attempts to deliver mail, it will try to connect to the system,
.Ql example.com
, over the PPP link.
This will time out if the destination is offline.
The MTA will automatically deliver it to the secondary MX site at the Internet Service Provider (ISP),
.Ql example.net
.
The secondary MX site will periodically try to connect to the primary MX host,
.Ql example.com
.
.Pp
Use something like this as a login script:
.Bd -literal -offset indent
#!/bin/sh
# Put me in /usr/local/bin/pppmyisp
( sleep 60 ; /usr/sbin/sendmail -q ) &
/usr/sbin/ppp -direct pppmyisp
.Ed
.Pp
When creating a separate login script for users, instead use
.Cm sendmail -qRexample.com
in the script above.
This will force all mail in the queue for
.Ql example.com
to be processed immediately.
.Pp
A further refinement of the situation can be seen from this example from the FreeBSD Internet service provider's mailing list:
.Bd -literal -offset indent
> we provide the secondary MX for a customer. The customer connects to
> our services several times a day automatically to get the mails to
> his primary MX (We do not call his site when a mail for his domains
> arrived). Our sendmail sends the mailqueue every 30 minutes. At the
> moment he has to stay 30 minutes online to be sure that all mail is
> gone to the primary MX.
>
> Is there a command that would initiate sendmail to send all the mails
> now? The user has not root-privileges on our machine of course.

In the
.Do
privacy flags
.Dc
 section of sendmail.cf, there is a
definition Opgoaway,restrictqrun

Remove restrictqrun to allow non-root users to start the queue processing.
You might also like to rearrange the MXs. We are the 1st MX for our
customers like this, and we have defined:

# If we are the best MX for a host, try directly instead of generating
# local config error.
OwTrue

That way a remote site will deliver straight to you, without trying
the customer connection.  You then send to your customer.  Only works for
.Do
hosts
.Dc
, so you need to get your customer to name their mail
machine
.Do
customer.com
.Dc
 as well as
.Do
hostname.customer.com
.Dc
 in the DNS.  Just put an A record in
the DNS for
.Do
customer.com
.Dc
.
.Ed
.Ss ADVANCED TOPICS
.Pp
This section covers more involved topics such as mail configuration and setting
up mail for an entire domain.
.Ss BASIC CONFIGURATION
.Pp
Out of the box, one can send email to external hosts as long as
.Pa /etc/resolv.conf
is configured or the network has access to a configured DNS server.
To have email delivered to the MTA on the FreeBSD host, do one of the following:
.Bl -bullet -offset -compact
.It
Run a DNS server for the domain.
.It
Get mail delivered directly to the FQDN for the machine.
.El
.Pp
In order to have mail delivered directly to a host, it must have a permanent
static IP address, not a dynamic IP address.
If the system is behind a firewall, it must be configured to allow SMTP
traffic.
To receive mail directly at a host, one of these two must be configured:
.Bl -bullet -offset -compact
.It
Make sure that the lowest-numbered MX record in DNS points to the host's static IP address.
.It
Make sure there is no MX entry in the DNS for the host.
.El
.Pp
Either of the above will allow mail to be received directly at the host.
.Pp
Try this:
.Bd -literal -offset indent
# hostname
example.FreeBSD.org
# host example.FreeBSD.org
example.FreeBSD.org has address 204.216.27.XX
.Ed
.Pp
In this example, mail sent directly to
.Mt yourlogin@example.FreeBSD.org
should work without problems, assuming Sendmail is running correctly on
.Ql example.FreeBSD.org
.
.Pp
For this example:
.Bd -literal -offset indent
# host example.FreeBSD.org
example.FreeBSD.org has address 204.216.27.XX
example.FreeBSD.org mail is handled (pri=10) by nevdull.FreeBSD.org
.Ed
.Pp
All mail sent to
.Ql example.FreeBSD.org
will be collected on
.Ql hub
under the same username instead of being sent directly to your host.
.Pp
The above information is handled by the DNS server.
The DNS record that carries mail routing information is the MX entry.
If no MX record exists, mail will be delivered directly to the host by way of its IP
address.
.Pp
The MX entry for
.Ql freefall.FreeBSD.org
at one time looked like this:
.Bd -literal -offset indent
freefall		MX	30	mail.crl.net
freefall		MX	40	agora.rdrop.com
freefall		MX	10	freefall.FreeBSD.org
freefall		MX	20	who.cdrom.com
.Ed
.Pp
.Ql freefall
had many MX entries.
The lowest MX number is the host that receives mail directly, if available.
If it is not accessible for some reason, the next lower-numbered host will
accept messages temporarily, and pass it along when a lower-numbered host
becomes available.
.Pp
Alternate MX sites should have separate Internet connections in order to be most useful.
Your ISP can provide this service.
.Ss MAIL FOR A DOMAIN
.Pp
When configuring a MTA for a network, any mail sent to hosts in its domain should be diverted to the MTA so that users can receive their mail on the master mail server.
.Pp
To make life easiest, a user account with the same username should exist on both the MTA and the system with the MUA.
Use
.Xr adduser 8 to create the user accounts.
.Pp
The MTA must be the designated mail exchanger for each workstation on the network.
This is done in theDNS configuration with an MX record:
.Bd -literal -offset indent
example.FreeBSD.org	A	204.216.27.XX		; Workstation
			MX	10 nevdull.FreeBSD.org	; Mailhost
.Ed
.Pp
This will redirect mail for the workstation to the MTA no matter where the A record points.
The mail is sent to the MX host.
.Pp
This must be configured on a DNS server.
If the network does not run its own DNS server, talk to the ISP or DNS provider.
.Pp
The following is an example of virtual email hosting.
Consider a customer with the domain
.Ql customer1.org
, where all the mail for
.Ql customer1.org
should be sent to
.Ql mail.myhost.com
.
The DNS entry should look like this:
.Bd -literal -offset indent
customer1.org		MX	10	mail.myhost.com
.Ed
.Pp
An
.Ql A
> record is not needed for
.Ql customer1.org
in order to only handle email for that domain.
However, running
.Cm ping
against
.Ql customer1.org
will not work unless an
.Ql A
record exists for it.
.Pp
Tell the MTA which domains and/or hostnames it should accept mail for.
Either of the following will work for Sendmail:
.Bl -bullet -offset -compact
.It
Add the hosts to
.Pa /etc/mail/local-host-names
when using the
.Ql FEATURE(use_cw_file)
.
.It
Add a
.Ql Cwyour.host.com
line to
.Pa /etc/sendmail.cf
.
.El
.Pp
There are many instances where one may only want to send mail through a relay.
Some examples are:
.Bl -bullet -offset -compact
.It
The computer is a desktop machine that needs to use programs such as
.Xr send-pr 1 , using the ISP's mail relay.
.It
The computer is a server that does not handle mail locally, but needs to pass
off all mail to a relay for processing.
.El
.Pp
While any MTA is capable of filling this particular niche, it can be difficult to properly
configure a full-featured MTA just to handle offloading mail.
Programs such as Sendmail and Postfix are overkill for this use.
.Pp
Additionally, a typical Internet access service agreement may forbid one from
running a
.Do
mail server
.Dc
.
.Pp
The easiest way to fulfill those needs is to install the
.Ql mail/ssmtp
port:
.Bd -literal -offset indent
# cd /usr/ports/mail/ssmtp
# make install replace clean
.Ed
.Pp
Once installed,
.Ql mail/ssmtp
can be configured with
.Pa /usr/local/etc/ssmtp/ssmtp.conf
:
.Bd -literal -offset indent
root=yourrealemail@example.com
mailhub=mail.example.com
rewriteDomain=example.com
hostname=_HOSTNAME_
.Ed
.Pp
Use the real email address for
.Ql root
.
Enter the ISP's outgoing mail relay in place of
.Ql mail.example.com
.
Some ISPs call this the
.Do
outgoing mail server
.Dc
or
.Do
SMTP server
.Dc
.
.Pp
Make sure to disable Sendmail, including the outgoing mail service.
See for details.
.Pp
.Ql mail/ssmtp
has some other options available.
Refer to the examples in
.Pa /usr/local/etc/ssmtp
or the manual page of ssmtp for more information.
.Pp
Setting up ssmtp in this manner allows any software on the computer that needs to send mail to
function properly, while not violating the ISP's usage policy or allowing the computer to be hijacked for spamming.
.Ss USING MAIL WITH A DIALUP CONNECTION
.Pp
When using a static IP address, one should not need to adjust the default
configuration.
Set the hostname to the assigned Internet name and Sendmail will do the rest.
.Pp
When using a dynamically assigned IP address and a dialup PPP connection to the
Internet, one usually has a mailbox on the ISP's mail server.
In this example, the ISP's domain is
.Ql example.net
, the user name is
.Ql user
, the hostname is
.Ql bsd.home
, and the ISP has allowed
.Ql relay.example.net
as a mail relay.
.Pp
In order to retrieve mail from the ISP's mailbox, install a retrieval agent from the Ports Collection.
.Ql mail/fetchmail
is a good choice as it supports many different protocols.
Usually, the ISP will provide POP.
When using user PPP, email can be automatically fetched when an Internet connection is established
with the following entry in
.Pa /etc/ppp/ppp.linkup
:
.Bd -literal -offset indent
MYADDR:
!bg su user -c fetchmail
.Ed
.Pp
When using Sendmail to deliver mail to non-local accounts, configure Sendmail to process the mail queue as soon as the Internet connection is established.
To do this, add this line after the above
.Cm fetchmail
entry in
.Pa /etc/ppp/ppp.linkup
:
.Bd -literal -offset indent
  !bg su user -c "sendmail -q"
.Ed
.Pp
In this example, there is an account for
.Ql user
on
.Ql bsd.home
.
In the home directory of
.Ql user
on
.Ql bsd.home
, create a
.Pa .fetchmailrc
which contains this line:
.Bd -literal -offset indent
poll example.net protocol pop3 fetchall pass MySecret
.Ed
.Pp
This file should not be readable by anyone except
.Ql user
as it contains the password
.Ql MySecret
.
.Pp
In order to send mail with the correct
.Ql from:
header, configure Sendmail to use
.Mt user@example.net
rather than
.Mt user@bsd.home
and to send all mail via
.Ql relay.example.net
, allowing quicker mail transmission.
.Pp
The following
.Pa .mc
should suffice:
.Bd -literal -offset indent
VERSIONID(`bsd.home.mc version 1.0')
OSTYPE(bsd4.4)dnl
FEATURE(nouucp)dnl
MAILER(local)dnl
MAILER(smtp)dnl
Cwlocalhost
Cwbsd.home
MASQUERADE_AS(`example.net')dnl
FEATURE(allmasquerade)dnl
FEATURE(masquerade_envelope)dnl
FEATURE(nocanonify)dnl
FEATURE(nodns)dnl
define(`SMART_HOST', `relay.example.net')
Dmbsd.home
define(`confDOMAIN_NAME',`bsd.home')dnl
define(`confDELIVERY_MODE',`deferred')dnl
.Ed
.Pp
Refer to the previous section for details of how to convert this file into the
.Pa sendmail.cf
format.
Do not forget to restart Sendmail after updating
.Pa sendmail.cf
.
.Pp
Configuring SMTP authentication on the MTA provides a number of benefits.
 SMTP authentication adds a layer of security to Sendmail, and provides mobile users who switch hosts the ability to use the same MTA without the need to reconfigure their mail client's settings each time.
.Pp
Install
.Ql security/cyrus-sasl2
from the Ports Collection.
This port supports a number of compile-time options.
For the SMTP authentication method demonstrated in this example, make sure that
.Ar LOGIN
is not disabled.
.Pp
After installing
.Ql security/cyrus-sasl2
, edit
.Pa /usr/local/lib/sasl2/Sendmail.conf
, or create it if it does not exist, and add the following line:
.Bd -literal -offset indent
pwcheck_method: saslauthd
.Ed
.Pp
Next, install
.Ql security/cyrus-sasl2-saslauthd
and add the following line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
saslauthd_enable="YES"
.Ed
.Pp
Finally, start the saslauthd daemon:
.Bd -literal -offset indent
# service saslauthd start
.Ed
.Pp
This daemon serves as a broker for Sendmail to authenticate against the FreeBSD
.Xr passwd 5 database.
This saves the trouble of creating a new set of usernames and passwords for
each user that needs to use SMTP authentication, and keeps the login and mail password the same.
.Pp
Next, edit
.Pa /etc/make.conf
and add the following lines:
.Bd -literal -offset indent
SENDMAIL_CFLAGS=-I/usr/local/include/sasl -DSASL
SENDMAIL_LDFLAGS=-L/usr/local/lib
SENDMAIL_LDADD=-lsasl2
.Ed
.Pp
These lines provide Sendmail the proper configuration options for linking to
.Ql cyrus-sasl2
at compile time.
Make sure that
.Ql cyrus-sasl2
has been installed before recompiling Sendmail.
.Pp
Recompile Sendmail by executing the following commands:
.Bd -literal -offset indent
# cd /usr/src/lib/libsmutil
# make cleandir && make obj && make
# cd /usr/src/lib/libsm
# make cleandir && make obj && make
# cd /usr/src/usr.sbin/sendmail
# make cleandir && make obj && make && make install
.Ed
.Pp
This compile should not have any problems if
.Pa /usr/src
has not changed extensively and the shared libraries it needs are available.
.Pp
After Sendmail has been compiled and reinstalled, edit
.Pa /etc/mail/freebsd.mc
or the local
.Pa .mc
.
Many administrators choose to use the output from
.Xr hostname 1 as the name of
.Pa .mc
for uniqueness.
Add these lines:
.Bd -literal -offset indent
dnl set SASL options
TRUST_AUTH_MECH(`GSSAPI DIGEST-MD5 CRAM-MD5 LOGIN')dnl
define(`confAUTH_MECHANISMS', `GSSAPI DIGEST-MD5 CRAM-MD5 LOGIN')dnl
.Ed
.Pp
These options configure the different methods available to Sendmail for authenticating users.
To use a method other than pwcheck, refer to the Sendmail documentation.
.Pp
Finally, run
.Xr make 1 while in
.Pa /etc/mail
.
That will run the new
.Pa .mc
and create a
.Pa .cf
named either
.Pa freebsd.cf
or the name used for the local
.Pa .mc
.
Then, run
.Cm make install restart
, which will copy the file to
.Pa sendmail.cf
, and properly restart Sendmail.
For more information about this process, refer to
.Pa /etc/mail/Makefile
.
.Pp
To test the configuration, use a MUA to send a test message.
For further investigation, set the
.Ar LogLevel
of Sendmail to
.Ql 13
and watch
.Pa /var/log/maillog
for any errors.
.Pp
For more information, refer to SMTP authentication.
.Pp
A MUA is an application that is used to send and receive email.
As email
.Do
evolves
.Dc
and becomes more complex, MUAs are becoming increasingly powerful and provide users increased functionality
and flexibility.
The
.Ql mail
category of the FreeBSD Ports Collection contains numerous MUAs.
These include graphical email clients such as Evolution or Balsa and console based clients such as mutt or alpine.
.Ss MAIL
.Pp
.Xr mail 1 is the default MUA installed with FreeBSD.
It is a console based MUA that offers the basic functionality required to send and receive text-based
email.
It provides limited attachment support and can only access local mailboxes.
.Pp
Although
.Cm mail
does not natively support interaction with POP or IMAP servers, these mailboxes may be downloaded to a local
.Pa mbox
using an application such as fetchmail.
.Pp
In order to send and receive email, run
.Cm mail
:
.Bd -literal -offset indent
% mail
.Ed
.Pp
The contents of the user's mailbox in
.Pa /var/mail
are automatically read by
.Cm mail
.
Should the mailbox be empty, the utility exits with a message indicating that
no mail could be found.
If mail exists, the application interface starts, and a list of messages will
be displayed.
Messages are automatically numbered, as can be seen in the following example:
.Bd -literal -offset indent
Mail version 8.1 6/6/93.  Type ? for help.
"/var/mail/marcs": 3 messages 3 new
>N  1 root@localhost        Mon Mar  8 14:05  14/510   "test"
 N  2 root@localhost        Mon Mar  8 14:05  14/509   "user account"
 N  3 root@localhost        Mon Mar  8 14:05  14/509   "sample"
.Ed
.Pp
Messages can now be read by typing t followed by the message number.
This example reads the first email:
.Bd -literal -offset indent
& t 1
Message 1:
From root@localhost  Mon Mar  8 14:05:52 2004
X-Original-To: marcs@localhost
Delivered-To: marcs@localhost
To: marcs@localhost
Subject: test
Date: Mon,  8 Mar 2004 14:05:52 +0200 (SAST)
From: root@localhost (Charlie Root)

This is a test message, please reply if you receive it.
.Ed
.Pp
As seen in this example, the message will be displayed with full headers.
To display the list of messages again, press h.
.Pp
If the email requires a reply, press either R or r
.Cm mail
keys.
 R instructs
.Cm mail
to reply only to the sender of the email, while r replies to all other recipients of the message.
These commands can be suffixed with the mail number of the message to reply to.
After typing the response, the end of the message should be marked by a single .
on its own line.
An example can be seen below:
.Bd -literal -offset indent
& R 1
To: root@localhost
Subject: Re: test

Thank you, I did get your email.
.

EOT
.Ed
.Pp
In order to send a new email, press m, followed by the recipient email address.
Multiple recipients may be specified by separating each address with the , delimiter.
The subject of the message may then be entered, followed by the message
contents.
The end of the message should be specified by putting a single .
on its own line.
.Bd -literal -offset indent
& mail root@localhost
Subject: I mastered mail Now I can send and receive email using mail ...
:) .

EOT
.Ed
.Pp
While using
.Cm mail
, press ?
to display help at any time.
Refer to
.Xr mail 1 for more help on how to use
.Cm mail
.
.Pp
.Xr mail 1 was not designed to handle attachments and thus deals with them poorly.
Newer MUAs handle attachments in a more intelligent way.
Users who prefer to use
.Cm mail
may find the
.Ql converters/mpack
port to be of considerable use.
.Ss MUTT
.Pp
mutt is a powerful MUA, with many features, including:
.Bl -bullet -offset -compact
.It
The ability to thread messages.
.It
PGP support for digital signing and encryption of email.
.It
MIME support.
.It
Maildir support.
.It
Highly customizable.
.El
.Pp
Refer to
.Lk http://www.mutt.org
for more information on mutt.
.Pp
mutt may be installed using the
.Ql mail/mutt
port.
After the port has been installed, mutt can be started by issuing the following command:
.Bd -literal -offset indent
% mutt
.Ed
.Pp
mutt will automatically read and display the contents of the user mailbox in
.Pa /var/mail
.
If no mails are found, mutt will wait for commands from the user.
The example below shows mutt displaying a list of messages:
.Pp
To read an email, select it using the cursor keys and press Enter.
An example of mutt displaying email can be seen below:
.Pp
Similar to
.Xr mail 1 , mutt can be used to reply only to the sender of the message as well as to all
recipients.
To reply only to the sender of the email, press r.
To send a group reply to the original sender as well as all the message
recipients, press g.
.Pp
By default, mutt uses the
.Xr vi 1 editor for creating and replying to emails.
Each user can customize this by creating or editing the
.Pa .muttrc
in their home directory and setting the
.Ql editor
variable or by setting the
.Ev EDITOR
environment variable.
Refer to
.Lk http://www.mutt.org/
for more information about configuring mutt.
.Pp
To compose a new mail message, press m.
After a valid subject has been given, mutt will start
.Xr vi 1 so the email can be written.
Once the contents of the email are complete, save and quit from
.Cm vi
.
 mutt will resume, displaying a summary screen of the mail that is to be delivered.
In order to send the mail, press y.
An example of the summary screen can be seen below:
.Pp
mutt contains extensive help which can be accessed from most of the menus by
pressing ?
.
The top line also displays the keyboard shortcuts where appropriate.
.Ss ALPINE
.Pp
alpine is aimed at a beginner user, but also includes some advanced features.
.Pp
alpine has had several remote vulnerabilities discovered in the past, which allowed
remote attackers to execute arbitrary code as users on the local system, by the
action of sending a specially-prepared email.
While known problems have been fixed, alpine code is written in an insecure style and the FreeBSD Security Officer believes
there are likely to be other undiscovered vulnerabilities.
Users install alpine at their own risk.
.Pp
The current version of alpine may be installed using the
.Ql mail/alpine
port.
Once the port has installed, alpine can be started by issuing the following command:
.Bd -literal -offset indent
% alpine
.Ed
.Pp
The first time alpine runs, it displays a greeting page with a brief introduction, as well as a
request from the alpine development team to send an anonymous email message allowing them to judge how
many users are using their client.
To send this anonymous message, press Enter.
Alternatively, press E to exit the greeting without sending an anonymous message.
An example of the greeting page is shown below:
.Pp
The main menu is then presented, which can be navigated using the cursor keys.
This main menu provides shortcuts for the composing new mails, browsing mail
directories, and administering address book entries.
Below the main menu, relevant keyboard shortcuts to perform functions specific
to the task at hand are shown.
.Pp
The default directory opened by alpine is
.Pa inbox
.
To view the message index, press I, or select the
.Ql MESSAGE INDEX
option shown below:
.Pp
The message index shows messages in the current directory and can be navigated
by using the cursor keys.
Highlighted messages can be read by pressing Enter.
.Pp
In the screenshot below, a sample message is displayed by alpine.
Contextual keyboard shortcuts are displayed at the bottom of the screen.
An example of one of a shortcut is r, which tells the MUA to reply to the current message being displayed.
.Pp
Replying to an email in alpine is done using the pico editor, which is installed by default with alpine.
 pico makes it easy to navigate the message and is easier for novice users to use
than
.Xr vi 1 or
.Xr mail 1 .
Once the reply is complete, the message can be sent by pressing CtrlX.
 alpine will ask for confirmation before sending the message.
.Pp
alpine can be customized using the
.Ql SETUP
option from the main menu.
Consult
.Lk http://www.washington.edu/alpine/
for more information.
.Pp
fetchmail is a full-featured IMAP and POP client.
It allows users to automatically download mail from remote IMAP and POP servers and save it into local mailboxes where it can be accessed more easily.
 fetchmail can be installed using the
.Ql mail/fetchmail
port, and offers various features, including:
.Bl -bullet -offset -compact
.It
Support for the POP3, APOP, KPOP, IMAP, ETRN and ODMR protocols.
.It
Ability to forward mail using SMTP, which allows filtering, forwarding, and aliasing to function normally.
.It
May be run in daemon mode to check periodically for new messages.
.It
Can retrieve multiple mailboxes and forward them, based on configuration, to
different local users.
.El
.Pp
This section explains some of the basic features of fetchmail.
This utility requires a
.Pa .fetchmailrc
configuration in the user's home directory in order to run correctly.
This file includes server information as well as login credentials.
Due to the sensitive nature of the contents of this file, it is advisable to
make it readable only by the user, with the following command:
.Bd -literal -offset indent
% chmod 600 .fetchmailrc
.Ed
.Pp
The following
.Pa .fetchmailrc
serves as an example for downloading a single user mailbox using POP.
It tells fetchmail to connect to
.Ql example.com
using a username of
.Ql joesoap
and a password of
.Ql XXX
.
This example assumes that the user
.Ql joesoap
exists on the local system.
.Bd -literal -offset indent
poll example.com protocol pop3 username "joesoap" password "XXX"
.Ed
.Pp
The next example connects to multiple POP and IMAP servers and redirects to different local usernames where applicable:
.Bd -literal -offset indent
poll example.com proto pop3:
user "joesoap", with password "XXX", is "jsoap" here;
user "andrea", with password "XXXX";
poll example2.net proto imap:
user "john", with password "XXXXX", is "myth" here;
.Ed
.Pp
fetchmail can be run in daemon mode by running it with
.Ar -d
, followed by the interval (in seconds) that fetchmail should poll servers listed in
.Pa .fetchmailrc
.
The following example configures fetchmail to poll every 600 seconds:
.Bd -literal -offset indent
% fetchmail -d 600
.Ed
.Pp
More information on fetchmail can be found at
.Lk http://www.fetchmail.info/
.
.Pp
procmail is a powerful application used to filter incoming mail.
It allows users to define
.Do
rules
.Dc
which can be matched to incoming mails to perform specific functions or to
reroute mail to alternative mailboxes or email addresses.
 procmail can be installed using the
.Ql mail/procmail
port.
Once installed, it can be directly integrated into most MTAs.
Consult the MTA documentation for more information.
Alternatively, procmail can be integrated by adding the following line to a
.Pa .forward
in the home directory of the user:
.Bd -literal -offset indent
"|exec /usr/local/bin/procmail || exit 75"
.Ed
.Pp
The following section displays some basic procmail rules, as well as brief descriptions of what they do.
Rules must be inserted into a
.Pa .procmailrc
, which must reside in the user's home directory.
.Pp
The majority of these rules can be found in
.Xr procmailex 5 .
.Pp
To forward all mail from
.Mt user@example.com
to an external address of
.Mt goodmail@example2.com
:
.Bd -literal -offset indent
:0
* ^From.*user@example.com
! goodmail@example2.com
.Ed
.Pp
To forward all mails shorter than 1000 bytes to an external address of
.Mt goodmail@example2.com
:
.Bd -literal -offset indent
:0
* < 1000
! goodmail@example2.com
.Ed
.Pp
To send all mail sent to
.Mt alternate@example.com
to a mailbox called
.Pa alternate
:
.Bd -literal -offset indent
:0
* ^TOalternate@example.com
alternate
.Ed
.Pp
To send all mail with a subject of
.Do
Spam
.Dc
to
.Pa /dev/null
:
.Bd -literal -offset indent
:0
^Subject:.*Spam
/dev/null
.Ed
.Pp
A useful recipe that parses incoming
.Ql FreeBSD.org
mailing lists and places each list in its own mailbox:
.Bd -literal -offset indent
:0
* ^Sender:.owner-freebsd-\/[^@]+@FreeBSD.ORG
{
	LISTNAME=${MATCH}
	:0
	* LISTNAME??^\/[^@]+
	FreeBSD-${MATCH}
}
.Ed
.Sh NETWORK SERVERS
.Ss SYNOPSIS
.Pp
This chapter covers some of the more frequently used network services on UNIX systems.
This includes installing, configuring, testing, and maintaining many different
types of network services.
Example configuration files are included throughout this chapter for reference.
.Pp
By the end of this chapter, readers will know:
.Bl -bullet -offset -compact
.It
How to manage the inetd daemon.
.It
How to set up the Network File System (NFS).
.It
How to set up the Network Information Server (NIS) for centralizing and sharing user accounts.
.It
How to set FreeBSD up to act as an LDAP server or client
.It
How to set up automatic network settings using DHCP.
.It
How to set up a Domain Name Server (DNS).
.It
How to set up the Apache  HTTP Server.
.It
How to set up a File Transfer Protocol (FTP) server.
.It
How to set up a file and print server for Windows clients using Samba.
.It
How to synchronize the time and date, and set up a time server using the
Network Time Protocol (NTP).
.It
How to set up iSCSI.
.El
.Pp
This chapter assumes a basic knowledge of:
.Bl -bullet -offset -compact
.It
.Pa /etc/rc
scripts.
.It
Network terminology.
.It
Installation of additional third-party software ().
.El
.Ss THE INETD SUPER-SERVER
.Pp
The
.Xr inetd 8 daemon is sometimes referred to as a Super-Server because it manages
connections for many services.
Instead of starting multiple applications, only the inetd service needs to be started.
When a connection is received for a service that is managed by inetd, it determines which program the connection is destined for, spawns a process
for that program, and delegates the program a socket.
Using inetd for services that are not heavily used can reduce system load, when compared to
running each daemon individually in stand-alone mode.
.Pp
Primarily, inetd is used to spawn other daemons, but several trivial protocols are handled
internally, such as chargen, auth, time, echo, discard, and daytime.
.Pp
This section covers the basics of configuring inetd.
.Ss CONFIGURATION FILE
.Pp
Configuration of inetd is done by editing
.Pa /etc/inetd.conf
.
Each line of this configuration file represents an application which can be
started by inetd.
By default, every line starts with a comment (
.Ql #
), meaning that inetd is not listening for any applications.
To configure inetd to listen for an application's connections, remove the
.Ql #
at the beginning of the line for that application.
.Pp
After saving your edits, configure inetd to start at system boot by editing
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
inetd_enable="YES"
.Ed
.Pp
To start inetd now, so that it listens for the service you configured, type:
.Bd -literal -offset indent
# service inetd start
.Ed
.Pp
Once inetd is started, it needs to be notified whenever a modification is made to
.Pa /etc/inetd.conf
:
.Bd -literal -offset indent
# service inetd reload
.Ed
.Pp
Typically, the default entry for an application does not need to be edited
beyond removing the
.Ql #
.
In some situations, it may be appropriate to edit the default entry.
.Pp
As an example, this is the default entry for
.Xr ftpd 8 over IPv4:
.Bd -literal -offset indent
ftp     stream  tcp     nowait  root    /usr/libexec/ftpd       ftpd -l
.Ed
.Pp
The seven columns in an entry are as follows:
.Bd -literal -offset indent
service-name
socket-type
protocol
{wait|nowait}[/max-child[/max-connections-per-ip-per-minute[/max-child-per-ip]]]
user[:group][/login-class]
server-program
server-program-arguments
.Ed
.Pp
where:
.Bl -tag -offset -compact
.It service-name
The service name of the daemon to start.
It must correspond to a service listed in
.Pa /etc/services
.
This determines which port inetd listens on for incoming connections to that service.
When using a custom service, it must first be added to
.Pa /etc/services
.
.It socket-type
Either
.Ql stream
,
.Ql dgram
,
.Ql raw
, or
.Ql seqpacket
.
Use
.Ql stream
for TCP connections and
.Ql dgram
for UDP services.
.It protocol
Use one of the following protocol names:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Protocol Name
.Ta
Explanation
.It
.Ta
tcp or tcp4
.Ta
TCP IPv4
.It
.Ta
udp or udp4
.Ta
UDP IPv4
.It
.Ta
tcp6
.Ta
TCP IPv6
.It
.Ta
udp6
.Ta
UDP IPv6
.It
.Ta
tcp46
.Ta
Both TCP IPv4 and IPv6
.It
.Ta
udp46
.Ta
Both UDP IPv4 and IPv6
.El
.It
{wait|nowait}[/max-child[/max-connections-per-ip-per-minute[/max-child-per-ip]]]
In this field,
.Ar wait
or
.Ar nowait
must be specified.
.Ar max-child
,
.Ar max-connections-per-ip-per-minute
and
.Ar max-child-per-ip
are optional.
.Ar wait|nowait
indicates whether or not the service is able to handle its own socket.
.Ar dgram
socket types must use
.Ar wait
while
.Ar stream
daemons, which are usually multi-threaded, should use
.Ar nowait
.
.Ar wait
usually hands off multiple sockets to a single daemon, while
.Ar nowait
spawns a child daemon for each new socket.
The maximum number of child daemons inetd may spawn is set by
.Ar max-child
.
For example, to limit ten instances of the daemon, place a
.Ql /10
after
.Ar nowait
.
Specifying
.Ql /0
allows an unlimited number of children.
.Ar max-connections-per-ip-per-minute
limits the number of connections from any particular IP address per minute.
Once the limit is reached, further connections from this IP address will be
dropped until the end of the minute.
For example, a value of
.Ql /10
would limit any particular IP address to ten connection attempts per minute.
.Ar max-child-per-ip
limits the number of child processes that can be started on behalf on any
single IP address at any moment.
These options can limit excessive resource consumption and help to prevent
Denial of Service attacks.
An example can be seen in the default settings for
.Xr fingerd 8 :
.Bd -literal -offset indent
finger stream  tcp     nowait/3/10 nobody /usr/libexec/fingerd fingerd -k -s
.Ed
.It user
The username the daemon will run as.
Daemons typically run as
.Ql root
,
.Ql daemon
, or
.Ql nobody
.
.It server-program
The full path to the daemon.
If the daemon is a service provided by inetd internally, use
.Ar internal
.
.It server-program-arguments
Used to specify any command arguments to be passed to the daemon on invocation.
If the daemon is an internal service, use
.Ar internal
.
.El
.Ss COMMAND-LINE OPTIONS
.Pp
Like most server daemons, inetd has a number of options that can be used to modify its behavior.
By default, inetd is started with
.Ql -wW -C 60
.
These options enable TCP wrappers for all services, including internal
services, and prevent any IP address from requesting any service more than 60 times per minute.
.Pp
To change the default options which are passed to inetd, add an entry for
.Ql inetd_flags
in
.Pa /etc/rc.conf
.
If inetd is already running, restart it with
.Cm service inetd restart
.
.Pp
The available rate limiting options are:
.Bl -tag -offset -compact
.It -c maximum
Specify the default maximum number of simultaneous invocations of each service,
where the default is unlimited.
May be overridden on a per-service basis by using
.Ar max-child
in
.Pa /etc/inetd.conf
.
.It -C rate
Specify the default maximum number of times a service can be invoked from a
single IP address per minute.
May be overridden on a per-service basis by using
.Ar max-connections-per-ip-per-minute
in
.Pa /etc/inetd.conf
.
.It -R rate
Specify the maximum number of times a service can be invoked in one minute,
where the default is
.Ql 256
.
A rate of
.Ql 0
allows an unlimited number.
.It -s maximum
Specify the maximum number of times a service can be invoked from a single IP address at any one time, where the default is unlimited.
May be overridden on a per-service basis by using
.Ar max-child-per-ip
in
.Pa /etc/inetd.conf
.
.El
.Pp
Additional options are available.
Refer to
.Xr inetd 8 for the full list of options.
.Ss SECURITY CONSIDERATIONS
.Pp
Many of the daemons which can be managed by inetd are not security-conscious.
Some daemons, such as fingerd, can provide information that may be useful to an attacker.
Only enable the services which are needed and monitor the system for excessive
connection attempts.
.Ql max-connections-per-ip-per-minute
,
.Ql max-child
and
.Ql max-child-per-ip
can be used to limit such attacks.
.Pp
By default, TCP wrappers is enabled.
Consult
.Xr hosts_access 5 for more information on placing TCP restrictions on various inetd invoked daemons.
.Pp
FreeBSD supports the Network File System (NFS), which allows a server to share directories and files with clients over a
network.
With NFS, users and programs can access files on remote systems as if they were stored
locally.
.Pp
NFS has many practical uses.
Some of the more common uses include:
.Bl -bullet -offset -compact
.It
Data that would otherwise be duplicated on each client can be kept in a single
location and accessed by clients on the network.
.It
Several clients may need access to the
.Pa /usr/ports/distfiles
directory.
Sharing that directory allows for quick access to the source files without
having to download them to each client.
.It
On large networks, it is often more convenient to configure a central NFS server on which all user home directories are stored.
Users can log into a client anywhere on the network and have access to their
home directories.
.It
Administration of NFS exports is simplified.
For example, there is only one file system where security or backup policies
must be set.
.It
Removable media storage devices can be used by other machines on the network.
This reduces the number of devices throughout the network and provides a
centralized location to manage their security.
It is often more convenient to install software on multiple machines from a
centralized installation media.
.El
.Pp
NFS consists of a server and one or more clients.
The client remotely accesses the data that is stored on the server machine.
In order for this to function properly, a few processes have to be configured
and running.
.Pp
These daemons must be running on the server:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Daemon
.Ta
Description
.It
.Ta
nfsd
.Ta
The NFS daemon which services requests from NFS clients.
.It
.Ta
mountd
.Ta
The NFS mount daemon which carries out requests received from nfsd.
.It
.Ta
rpcbind
.Ta
This daemon allows NFS clients to discover which port the NFS server is using.
.El
.Pp
Running
.Xr nfsiod 8 on the client can improve performance, but is not required.
.Ss CONFIGURING THE SERVER
.Pp
The file systems which the NFS server will share are specified in
.Pa /etc/exports
.
Each line in this file specifies a file system to be exported, which clients
have access to that file system, and any access options.
When adding entries to this file, each exported file system, its properties,
and allowed hosts must occur on a single line.
If no clients are listed in the entry, then any client on the network can mount
that file system.
.Pp
The following
.Pa /etc/exports
entries demonstrate how to export file systems.
The examples can be modified to match the file systems and client names on the
reader's network.
There are many options that can be used in this file, but only a few will be
mentioned here.
See
.Xr exports 5 for the full list of options.
.Pp
This example shows how to export
.Pa /cdrom
to three hosts named alpha, bravo, and charlie:
.Bd -literal -offset indent
/cdrom -ro alpha bravo charlie
.Ed
.Pp
The
.Ql -ro
flag makes the file system read-only, preventing clients from making any
changes to the exported file system.
This example assumes that the host names are either in DNS or in
.Pa /etc/hosts
.
Refer to
.Xr hosts 5 if the network does not have a DNS server.
.Pp
The next example exports
.Pa /home
to three clients by IP address.
This can be useful for networks without DNS or
.Pa /etc/hosts
entries.
The
.Ql -alldirs
flag allows subdirectories to be mount points.
In other words, it will not automatically mount the subdirectories, but will
permit the client to mount the directories that are required as needed.
.Bd -literal -offset indent
/usr/home  -alldirs  10.0.0.2 10.0.0.3 10.0.0.4
.Ed
.Pp
This next example exports
.Pa /a
so that two clients from different domains may access that file system.
The
.Ar -maproot=root
allows
.Ql root
on the remote system to write data on the exported file system as
.Ql root
.
If
.Ql -maproot=root
is not specified, the client's
.Ql root
user will be mapped to the server's
.Ql nobody
account and will be subject to the access limitations defined for
.Ql nobody
.
.Bd -literal -offset indent
/a  -maproot=root  host.example.com box.example.org
.Ed
.Pp
A client can only be specified once per file system.
For example, if
.Pa /usr
is a single file system, these entries would be invalid as both entries specify
the same host:
.Bd -literal -offset indent
# Invalid when /usr is one file system
/usr/src   client
/usr/ports client
.Ed
.Pp
The correct format for this situation is to use one entry:
.Bd -literal -offset indent
/usr/src /usr/ports  client
.Ed
.Pp
The following is an example of a valid export list, where
.Pa /usr
and
.Pa /exports
are local file systems:
.Bd -literal -offset indent
# Export src and ports to client01 and client02, but only
# client01 has root privileges on it
/usr/src /usr/ports -maproot=root    client01
/usr/src /usr/ports               client02
# The client machines have root and can mount anywhere
# on /exports. Anyone in the world can mount /exports/obj read-only
/exports -alldirs -maproot=root      client01 client02
/exports/obj -ro
.Ed
.Pp
To enable the processes required by the NFS server at boot time, add these options to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
rpcbind_enable="YES"
nfs_server_enable="YES"
mountd_flags="-r"
.Ed
.Pp
The server can be started now by running this command:
.Bd -literal -offset indent
# service nfsd start
.Ed
.Pp
Whenever the NFS server is started, mountd also starts automatically.
However, mountd only reads
.Pa /etc/exports
when it is started.
To make subsequent
.Pa /etc/exports
edits take effect immediately, force mountd to reread it:
.Bd -literal -offset indent
# service mountd reload
.Ed
.Ss CONFIGURING THE CLIENT
.Pp
To enable NFS clients, set this option in each client's
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
nfs_client_enable="YES"
.Ed
.Pp
Then, run this command on each NFS client:
.Bd -literal -offset indent
# service nfsclient start
.Ed
.Pp
The client now has everything it needs to mount a remote file system.
In these examples, the server's name is
.Ql server
and the client's name is
.Ql client
.
To mount
.Pa /home
on
.Ql server
to the
.Pa /mnt
mount point on
.Ql client
:
.Bd -literal -offset indent
# mount server:/home /mnt
.Ed
.Pp
The files and directories in
.Pa /home
will now be available on
.Ql client
, in the
.Pa /mnt
directory.
.Pp
To mount a remote file system each time the client boots, add it to
.Pa /etc/fstab
:
.Bd -literal -offset indent
server:/home	/mnt	nfs	rw	0	0
.Ed
.Pp
Refer to
.Xr fstab 5 for a description of all available options.
.Ss LOCKING
.Pp
Some applications require file locking to operate correctly.
To enable locking, add these lines to
.Pa /etc/rc.conf
on both the client and server:
.Bd -literal -offset indent
rpc_lockd_enable="YES"
rpc_statd_enable="YES"
.Ed
.Pp
Then start the applications:
.Bd -literal -offset indent
# service lockd start
# service statd start
.Ed
.Pp
If locking is not required on the server, the NFS client can be configured to lock locally by including
.Ar -L
when running mount.
Refer to
.Xr mount_nfs 8 for further details.
.Pp
The automatic mounter daemon, amd, automatically mounts a remote file system whenever a file or directory within
that file system is accessed.
File systems that are inactive for a period of time will be automatically
unmounted by amd.
.Pp
This daemon provides an alternative to modifying
.Pa /etc/fstab
to list every client.
It operates by attaching itself as an NFS server to the
.Pa /host
and
.Pa /net
directories.
When a file is accessed within one of these directories, amd looks up the corresponding remote mount and automatically mounts it.
.Pa /net
is used to mount an exported file system from an IP address while
.Pa /host
is used to mount an export from a remote hostname.
For instance, an attempt to access a file within
.Pa /host/foobar/usr
would tell amd to mount the
.Pa /usr
export on the host
.Ql foobar
.
.Pp
In this example,
.Cm showmount -e
shows the exported file systems that can be mounted from the NFS server,
.Ql foobar
:
.Bd -literal -offset indent
% showmount -e foobar
Exports list on foobar:
/usr                               10.10.10.0
/a                                 10.10.10.0
% cd /host/foobar/usr
.Ed
.Pp
The output from
.Cm showmount
shows
.Pa /usr
as an export.
When changing directories to
.Pa /host/foobar/usr
, amd intercepts the request and attempts to resolve the hostname
.Ql foobar
.
If successful, amd automatically mounts the desired export.
.Pp
To enable amd at boot time, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
amd_enable="YES"
.Ed
.Pp
To start amd now:
.Bd -literal -offset indent
# service amd start
.Ed
.Pp
Custom flags can be passed to amd from the
.Ev amd_flags
environment variable.
By default,
.Ev amd_flags
is set to:
.Bd -literal -offset indent
amd_flags="-a /.amd_mnt -l syslog /host /etc/amd.map /net /etc/amd.map"
.Ed
.Pp
The default options with which exports are mounted are defined in
.Pa /etc/amd.map
.
Some of the more advanced features of amd are defined in
.Pa /etc/amd.conf
.
.Pp
Consult
.Xr amd 8 and
.Xr amd.conf 5 for more information.
.Ss AUTOMATING MOUNTS WITH AUTOFS
.Pp
The
.Xr autofs 5 automount facility is supported starting with FreeBSD 10.1-RELEASE.
To use the automounter functionality in older versions of FreeBSD, use
.Xr amd 8 instead.
This chapter only describes the
.Xr autofs 5 automounter.
.Pp
The
.Xr autofs 5 facility is a common name for several components that, together, allow for
automatic mounting of remote and local filesystems whenever a file or directory
within that file system is accessed.
It consists of the kernel component,
.Xr autofs 5 , and several userspace applications:
.Xr automount 8 ,
.Xr automountd 8 and
.Xr autounmountd 8 .
It serves as an alternative for
.Xr amd 8 from previous FreeBSD releases.
Amd is still provided for backward compatibility purposes, as the two use
different map format; the one used by autofs is the same as with other SVR4
automounters, such as the ones in Solaris, MacOS X, and Linux.
.Pp
The
.Xr autofs 5 virtual filesystem is mounted on specified mountpoints by
.Xr automount 8 , usually invoked during boot.
.Pp
Whenever a process attempts to access file within the
.Xr autofs 5 mountpoint, the kernel will notify
.Xr automountd 8 daemon and pause the triggering process.
The
.Xr automountd 8 daemon will handle kernel requests by finding the proper map and mounting the
filesystem according to it, then signal the kernel to release blocked process.
The
.Xr autounmountd 8 daemon automatically unmounts automounted filesystems after some time, unless
they are still being used.
.Pp
The primary autofs configuration file is
.Pa /etc/auto_master
.
It assigns individual maps to top-level mounts.
For an explanation of
.Pa auto_master
and the map syntax, refer to
.Xr auto_master 5 .
.Pp
There is a special automounter map mounted on
.Pa /net
.
When a file is accessed within this directory,
.Xr autofs 5 looks up the corresponding remote mount and automatically mounts it.
For instance, an attempt to access a file within
.Pa /net/foobar/usr
would tell
.Xr automountd 8 to mount the
.Pa /usr
export from the host
.Ql foobar
.
.Pp
In this example,
.Cm showmount -e
shows the exported file systems that can be mounted from the NFS server,
.Ql foobar
:
.Bd -literal -offset indent
% showmount -e foobar
Exports list on foobar:
/usr                               10.10.10.0
/a                                 10.10.10.0
% cd /net/foobar/usr
.Ed
.Pp
The output from
.Cm showmount
shows
.Pa /usr
as an export.
When changing directories to
.Pa /host/foobar/usr
,
.Xr automountd 8 intercepts the request and attempts to resolve the hostname
.Ql foobar
.
If successful,
.Xr automountd 8 automatically mounts the source export.
.Pp
To enable
.Xr autofs 5 at boot time, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
autofs_enable="YES"
.Ed
.Pp
Then
.Xr autofs 5 can be started by running:
.Bd -literal -offset indent
# service automount start
# service automountd start
# service autounmountd start
.Ed
.Pp
The
.Xr autofs 5 map format is the same as in other operating systems.
Information about this format from other sources can be useful, like the Mac OS X document.
.Pp
Consult the
.Xr automount 8 ,
.Xr automountd 8 ,
.Xr autounmountd 8 , and
.Xr auto_master 5 manual pages for more information.
.Ss NETWORK INFORMATION SYSTEM (NIS)
.Pp
Network Information System (NIS) is designed to centralize administration of UNIX-like systems such as Solaris, HP-UX, AIX, Linux, NetBSD, OpenBSD, and FreeBSD.
 NIS was originally known as Yellow Pages but the name was changed due to trademark
issues.
This is the reason why NIS commands begin with
.Ql yp
.
.Pp
NIS is a Remote Procedure Call (RPC)-based client/server system that allows a group of machines within an NIS domain to share a common set of configuration files.
This permits a system administrator to set up NIS client systems with only minimal configuration data and to add, remove, or
modify configuration data from a single location.
.Pp
FreeBSD uses version 2 of the NIS protocol.
.Ss NIS TERMS AND PROCESSES
.Pp
Table 28.1 summarizes the terms and important processes used by NIS:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Term
.Ta
Description
.It
.Ta
NIS domain name
.Ta
NIS servers and clients share an NIS domain name.
Typically, this name does not have anything to do with DNS.
.It
.Ta
.Xr rpcbind 8
.Ta
This service enables RPC and must be running in order to run an NIS server or act as an NIS client.
.It
.Ta
.Xr ypbind 8
.Ta
This service binds an NIS client to its NIS server.
It will take the NIS domain name and use RPC to connect to the server.
It is the core of client/server communication in an NIS environment.
If this service is not running on a client machine, it will not be able to
access the NIS server.
.It
.Ta
.Xr ypserv 8
.Ta
This is the process for the NIS server.
If this service stops running, the server will no longer be able to respond to NIS requests so hopefully, there is a slave server to take over.
Some non-FreeBSD clients will not try to reconnect using a slave server and the ypbind process may need to be restarted on these clients.
.It
.Ta
.Xr rpc.yppasswdd 8
.Ta
This process only runs on NIS master servers.
This daemon allows NIS clients to change their NIS passwords.
If this daemon is not running, users will have to login to the NIS master server and change their passwords there.
.El
.Ss MACHINE TYPES
.Pp
There are three types of hosts in an NIS environment:
.Bl -bullet -offset -compact
.It
NIS master serverThis server acts as a central repository for host configuration information and
maintains the authoritative copy of the files used by all of the NIS clients.
The
.Pa passwd
,
.Pa group
, and other various files used by NIS clients are stored on the master server.
While it is possible for one machine to be an NIS master server for more than one NIS domain, this type of configuration will not be covered in this chapter as it
assumes a relatively small-scale NIS environment.
.It
NIS slave serversNIS slave servers maintain copies of the NIS master's data files in order to provide redundancy.
Slave servers also help to balance the load of the master server as NIS clients always attach to the NIS server which responds first.
.It
NIS clientsNIS clients authenticate against the NIS server during log on.
.El
.Pp
Information in many files can be shared using NIS.
The
.Pa master.passwd
,
.Pa group
, and
.Pa hosts
files are commonly shared via NIS.
Whenever a process on a client needs information that would normally be found
in these files locally, it makes a query to the NIS server that it is bound to instead.
.Ss PLANNING CONSIDERATIONS
.Pp
This section describes a sample NIS environment which consists of 15 FreeBSD machines with no centralized point of
administration.
Each machine has its own
.Pa /etc/passwd
and
.Pa /etc/master.passwd
.
These files are kept in sync with each other only through manual intervention.
Currently, when a user is added to the lab, the process must be repeated on all
15 machines.
.Pp
The configuration of the lab will be as follows:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Machine name
.Ta
IP address
.Ta
Machine role
.It
.Ta
.Ql ellington
.Ta
.Ql 10.0.0.2
.Ta
NIS master
.It
.Ta
.Ql coltrane
.Ta
.Ql 10.0.0.3
.Ta
NIS slave
.It
.Ta
.Ql basie
.Ta
.Ql 10.0.0.4
.Ta
Faculty workstation
.It
.Ta
.Ql bird
.Ta
.Ql 10.0.0.5
.Ta
Client machine
.It
.Ta
.Ql cli[1-11]
.Ta
.Ql 10.0.0.[6-17]
.Ta
Other client machines
.El
.Pp
If this is the first time an NIS scheme is being developed, it should be thoroughly planned ahead of time.
Regardless of network size, several decisions need to be made as part of the
planning process.
.Ss CHOOSING A NIS DOMAIN NAME
.Pp
When a client broadcasts its requests for info, it includes the name of the NIS domain that it is part of.
This is how multiple servers on one network can tell which server should answer
which request.
Think of the NIS domain name as the name for a group of hosts.
.Pp
Some organizations choose to use their Internet domain name for their NIS domain name.
This is not recommended as it can cause confusion when trying to debug network
problems.
The NIS domain name should be unique within the network and it is helpful if it
describes the group of machines it represents.
For example, the Art department at Acme Inc.
might be in the
.Do
acme-art
.Dc
NIS domain.
This example will use the domain name
.Ql test-domain
.
.Pp
However, some non-FreeBSD operating systems require the NIS domain name to be the same as the Internet domain name.
If one or more machines on the network have this restriction, the Internet
domain name must be used as the NIS domain name.
.Ss PHYSICAL SERVER REQUIREMENTS
.Pp
There are several things to keep in mind when choosing a machine to use as a NIS server.
Since NIS clients depend upon the availability of the server, choose a machine that is
not rebooted frequently.
The NIS server should ideally be a stand alone machine whose sole purpose is to be an NIS server.
If the network is not heavily used, it is acceptable to put the NIS server on a machine running other services.
However, if the NIS server becomes unavailable, it will adversely affect all NIS clients.
.Ss CONFIGURING THE NIS MASTER SERVER
.Pp
The canonical copies of all NIS files are stored on the master server.
The databases used to store the information are called NIS maps.
In FreeBSD, these maps are stored in
.Pa /var/yp/[domainname]
where
.Pa [domainname]
is the name of the NIS domain.
Since multiple domains are supported, it is possible to have several
directories, one for each domain.
Each domain will have its own independent set of maps.
.Pp
NIS master and slave servers handle all NIS requests through
.Xr ypserv 8 .
This daemon is responsible for receiving incoming requests from NIS clients, translating the requested domain and map name to a path to the
corresponding database file, and transmitting data from the database back to
the client.
.Pp
Setting up a master NIS server can be relatively straight forward, depending on environmental needs.
Since FreeBSD provides built-in NIS support, it only needs to be enabled by adding the following lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
nisdomainname="test-domain"	
nis_server_enable="YES"		
nis_yppasswdd_enable="YES"
.Ed
.Pp
This line sets the NIS domain name to
.Ql test-domain
.
.Pp
This automates the start up of the NIS server processes when the system boots.
.Pp
This enables the
.Xr rpc.yppasswdd 8 daemon so that users can change their NIS password from a client machine.
.Pp
Care must be taken in a multi-server domain where the server machines are also NIS clients.
It is generally a good idea to force the servers to bind to themselves rather
than allowing them to broadcast bind requests and possibly become bound to each
other.
Strange failure modes can result if one server goes down and others are
dependent upon it.
Eventually, all the clients will time out and attempt to bind to other servers,
but the delay involved can be considerable and the failure mode is still
present since the servers might bind to each other all over again.
.Pp
A server that is also a client can be forced to bind to a particular server by
adding these additional lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
nis_client_enable="YES" # run client stuff as well
nis_client_flags="-S NIS domain,server"
.Ed
.Pp
After saving the edits, type
.Cm /etc/netstart
to restart the network and apply the values defined in
.Pa /etc/rc.conf
.
Before initializing the NIS maps, start
.Xr ypserv 8 :
.Bd -literal -offset indent
# service ypserv start
.Ed
.Ss INITIALIZING THE NIS MAPS
.Pp
NIS maps are generated from the configuration files in
.Pa /etc
on the NIS master, with one exception:
.Pa /etc/master.passwd
.
This is to prevent the propagation of passwords to all the servers in the NIS domain.
Therefore, before the NIS maps are initialized, configure the primary password files:
.Bd -literal -offset indent
# cp /etc/master.passwd /var/yp/master.passwd
# cd /var/yp
# vi master.passwd
.Ed
.Pp
It is advisable to remove all entries for system accounts as well as any user
accounts that do not need to be propagated to the NIS clients, such as the
.Ql root
and any other administrative accounts.
.Pp
Ensure that the
.Pa /var/yp/master.passwd
is neither group or world readable by setting its permissions to
.Ql 600
.
.Pp
After completing this task, initialize the NIS maps.
FreeBSD includes the
.Xr ypinit 8 script to do this.
When generating maps for the master server, include
.Ar -m
and specify the NIS domain name:
.Bd -literal -offset indent
ellington# ypinit -m test-domain
Server Type: MASTER Domain: test-domain
Creating an YP server will require that you answer a few questions.
Questions will all be asked at the beginning of the procedure.
Do you want this procedure to quit on non-fatal errors? [y/n: n] n
Ok, please remember to go back and redo manually whatever fails.
If not, something might not work.
At this point, we have to construct a list of this domains YP servers.
rod.darktech.org is already known as master server.
Please continue to add any slave servers, one per line. When you are
done with the list, type a <control D>.
master server   :  ellington
next host to add:  coltrane
next host to add:  ^D
The current list of NIS servers looks like this:
ellington
coltrane
Is this correct?  [y/n: y] y

[..output from map generation..]

NIS Map update completed.
ellington has been setup as an YP master server without any errors.
.Ed
.Pp
This will create
.Pa /var/yp/Makefile
from
.Pa /var/yp/Makefile.dist
.
By default, this file assumes that the environment has a single NIS server with only FreeBSD clients.
Since
.Ql test-domain
has a slave server, edit this line in
.Pa /var/yp/Makefile
so that it begins with a comment (
.Ql #
):
.Bd -literal -offset indent
NOPUSH = "True"
.Ed
.Ss ADDING NEW USERS
.Pp
Every time a new user is created, the user account must be added to the master NIS server and the NIS maps rebuilt.
Until this occurs, the new user will not be able to login anywhere except on
the NIS master.
For example, to add the new user
.Ql jsmith
to the
.Ql test-domain
domain, run these commands on the master server:
.Bd -literal -offset indent
# pw useradd jsmith
# cd /var/yp
# make test-domain
.Ed
.Pp
The user could also be added using
.Cm adduser jsmith
instead of
.Cm pw useradd smith
.
.Ss SETTING UP A NIS SLAVE SERVER
.Pp
To set up an NIS slave server, log on to the slave server and edit
.Pa /etc/rc.conf
as for the master server.
Do not generate any NIS maps, as these already exist on the master server.
When running
.Cm ypinit
on the slave server, use
.Ar -s
(for slave) instead of
.Ar -m
(for master).
This option requires the name of the NIS master in addition to the domain name, as seen in this example:
.Bd -literal -offset indent
coltrane# ypinit -s ellington test-domain

Server Type: SLAVE Domain: test-domain Master: ellington

Creating an YP server will require that you answer a few questions.
Questions will all be asked at the beginning of the procedure.

Do you want this procedure to quit on non-fatal errors? [y/n: n]  n

Ok, please remember to go back and redo manually whatever fails.
If not, something might not work.
There will be no further questions. The remainder of the procedure
should take a few minutes, to copy the databases from ellington.
Transferring netgroup...
ypxfr: Exiting: Map successfully transferred
Transferring netgroup.byuser...
ypxfr: Exiting: Map successfully transferred
Transferring netgroup.byhost...
ypxfr: Exiting: Map successfully transferred
Transferring master.passwd.byuid...
ypxfr: Exiting: Map successfully transferred
Transferring passwd.byuid...
ypxfr: Exiting: Map successfully transferred
Transferring passwd.byname...
ypxfr: Exiting: Map successfully transferred
Transferring group.bygid...
ypxfr: Exiting: Map successfully transferred
Transferring group.byname...
ypxfr: Exiting: Map successfully transferred
Transferring services.byname...
ypxfr: Exiting: Map successfully transferred
Transferring rpc.bynumber...
ypxfr: Exiting: Map successfully transferred
Transferring rpc.byname...
ypxfr: Exiting: Map successfully transferred
Transferring protocols.byname...
ypxfr: Exiting: Map successfully transferred
Transferring master.passwd.byname...
ypxfr: Exiting: Map successfully transferred
Transferring networks.byname...
ypxfr: Exiting: Map successfully transferred
Transferring networks.byaddr...
ypxfr: Exiting: Map successfully transferred
Transferring netid.byname...
ypxfr: Exiting: Map successfully transferred
Transferring hosts.byaddr...
ypxfr: Exiting: Map successfully transferred
Transferring protocols.bynumber...
ypxfr: Exiting: Map successfully transferred
Transferring ypservers...
ypxfr: Exiting: Map successfully transferred
Transferring hosts.byname...
ypxfr: Exiting: Map successfully transferred

coltrane has been setup as an YP slave server without any errors.
Remember to update map ypservers on ellington.
.Ed
.Pp
This will generate a directory on the slave server called
.Pa /var/yp/test-domain
which contains copies of the NIS master server's maps.
Adding these
.Pa /etc/crontab
entries on each slave server will force the slaves to sync their maps with the
maps on the master server:
.Bd -literal -offset indent
20      *       *       *       *       root   /usr/libexec/ypxfr passwd.byname
21      *       *       *       *       root   /usr/libexec/ypxfr passwd.byuid
.Ed
.Pp
These entries are not mandatory because the master server automatically
attempts to push any map changes to its slaves.
However, since clients may depend upon the slave server to provide correct
password information, it is recommended to force frequent password map updates.
This is especially important on busy networks where map updates might not
always complete.
.Pp
To finish the configuration, run
.Cm /etc/netstart
on the slave server in order to start the NIS services.
.Ss SETTING UP AN NIS CLIENT
.Pp
An NIS client binds to an NIS server using
.Xr ypbind 8 .
This daemon broadcasts RPC requests on the local network.
These requests specify the domain name configured on the client.
If an NIS server in the same domain receives one of the broadcasts, it will respond to ypbind, which will record the server's address.
If there are several servers available, the client will use the address of the
first server to respond and will direct all of its NIS requests to that server.
The client will automatically ping the server on a regular basis to make sure it is still available.
If it fails to receive a reply within a reasonable amount of time, ypbind will mark the domain as unbound and begin broadcasting again in the hopes of
locating another server.
.Pp
To configure a FreeBSD machine to be an NIS client:
.Pp
Edit
.Pa /etc/rc.conf
and add the following lines in order to set the NIS domain name and start
.Xr ypbind 8 during network startup:
.Bd -literal -offset indent
nisdomainname="test-domain"
nis_client_enable="YES"
.Ed
.Pp
To import all possible password entries from the NIS server, use
.Cm vipw
to remove all user accounts except one from
.Pa /etc/master.passwd
.
When removing the accounts, keep in mind that at least one local account should
remain and this account should be a member of
.Ql wheel
.
If there is a problem with NIS, this local account can be used to log in remotely, become the superuser, and
fix the problem.
Before saving the edits, add the following line to the end of the file:
.Bd -literal -offset indent
+:::::::::
.Ed
.Pp
This line configures the client to provide anyone with a valid account in the NIS server's password maps an account on the client.
There are many ways to configure the NIS client by modifying this line.
One method is described in .
For more detailed reading, refer to the book
.Ql Managing NFS and NIS
, published by O'Reilly Media.
.Pp
To import all possible group entries from the NIS server, add this line to
.Pa /etc/group
:
.Bd -literal -offset indent
+:*::
.Ed
.Pp
To start the NIS client immediately, execute the following commands as the superuser:
.Bd -literal -offset indent
# /etc/netstart
# service ypbind start
.Ed
.Pp
After completing these steps, running
.Cm ypcat passwd
on the client should show the server's
.Pa passwd
map.
.Ss NIS SECURITY
.Pp
Since RPC is a broadcast-based service, any system running ypbind within the same domain can retrieve the contents of the NIS maps.
To prevent unauthorized transactions,
.Xr ypserv 8 supports a feature called
.Do
securenets
.Dc
which can be used to restrict access to a given set of hosts.
By default, this information is stored in
.Pa /var/yp/securenets
, unless
.Xr ypserv 8 is started with
.Ar -p
and an alternate path.
This file contains entries that consist of a network specification and a
network mask separated by white space.
Lines starting with
.Ql #
are considered to be comments.
A sample
.Pa securenets
might look like this:
.Bd -literal -offset indent
# allow connections from local host -- mandatory
127.0.0.1     255.255.255.255
# allow connections from any host
# on the 192.168.128.0 network
192.168.128.0 255.255.255.0
# allow connections from any host
# between 10.0.0.0 to 10.0.15.255
# this includes the machines in the testlab
10.0.0.0      255.255.240.0
.Ed
.Pp
If
.Xr ypserv 8 receives a request from an address that matches one of these rules, it will
process the request normally.
If the address fails to match a rule, the request will be ignored and a warning
message will be logged.
If the
.Pa securenets
does not exist,
.Cm ypserv
will allow connections from any host.
.Pp
is an alternate mechanism for providing access control instead of
.Pa securenets
.
While either access control mechanism adds some security, they are both
vulnerable to
.Do
IP spoofing
.Dc
attacks.
All NIS-related traffic should be blocked at the firewall.
.Pp
Servers using
.Pa securenets
may fail to serve legitimate NIS clients with archaic TCP/IP implementations.
Some of these implementations set all host bits to zero when doing broadcasts
or fail to observe the subnet mask when calculating the broadcast address.
While some of these problems can be fixed by changing the client configuration,
other problems may force the retirement of these client systems or the
abandonment of
.Pa securenets
.
.Pp
The use of TCP Wrapper increases the latency of the NIS server.
The additional delay may be long enough to cause timeouts in client programs,
especially in busy networks with slow NIS servers.
If one or more clients suffer from latency, convert those clients into NIS slave servers and force them to bind to themselves.
.Ss BARRING SOME USERS
.Pp
In this example, the
.Ql basie
system is a faculty workstation within the NIS domain.
The
.Pa passwd
map on the master NIS server contains accounts for both faculty and students.
This section demonstrates how to allow faculty logins on this system while
refusing student logins.
.Pp
To prevent specified users from logging on to a system, even if they are
present in the NIS database, use
.Cm vipw
to add
.Ql -username
with the correct number of colons towards the end of
.Pa /etc/master.passwd
on the client, where username is the username of a user to bar from logging in.
The line with the blocked user must be before the
.Ql +
line that allows NIS users.
In this example,
.Ql bill
is barred from logging on to
.Ql basie
:
.Bd -literal -offset indent
basie# cat /etc/master.passwd
root:[password]:0:0::0:0:The super-user:/root:/bin/csh
toor:[password]:0:0::0:0:The other super-user:/root:/bin/sh
daemon:*:1:1::0:0:Owner of many system processes:/root:/sbin/nologin
operator:*:2:5::0:0:System &:/:/sbin/nologin
bin:*:3:7::0:0:Binaries Commands and Source,,,:/:/sbin/nologin
tty:*:4:65533::0:0:Tty Sandbox:/:/sbin/nologin
kmem:*:5:65533::0:0:KMem Sandbox:/:/sbin/nologin
games:*:7:13::0:0:Games pseudo-user:/usr/games:/sbin/nologin
news:*:8:8::0:0:News Subsystem:/:/sbin/nologin
man:*:9:9::0:0:Mister Man Pages:/usr/share/man:/sbin/nologin
bind:*:53:53::0:0:Bind Sandbox:/:/sbin/nologin
uucp:*:66:66::0:0:UUCP pseudo-user:/var/spool/uucppublic:/usr/libexec/uucp/uucico
xten:*:67:67::0:0:X-10 daemon:/usr/local/xten:/sbin/nologin
pop:*:68:6::0:0:Post Office Owner:/nonexistent:/sbin/nologin
nobody:*:65534:65534::0:0:Unprivileged user:/nonexistent:/sbin/nologin
-bill:::::::::
+:::::::::

basie#
.Ed
.Ss USING NETGROUPS
.Pp
Barring specified users from logging on to individual systems becomes
unscaleable on larger networks and quickly loses the main benefit of NIS: centralized administration.
.Pp
Netgroups were developed to handle large, complex networks with hundreds of
users and machines.
Their use is comparable to UNIX groups, where the main difference is the lack of a numeric ID and the ability
to define a netgroup by including both user accounts and other netgroups.
.Pp
To expand on the example used in this chapter, the NIS domain will be extended to add the users and systems shown in Tables 28.2 and
28.3:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
User Name(s)
.Ta
Description
.It
.Ta
.Ql alpha
,
.Ql beta
.Ta
IT department employees
.It
.Ta
.Ql charlie
,
.Ql delta
.Ta
IT department apprentices
.It
.Ta
.Ql echo
,
.Ql foxtrott
,
.Ql golf
, ...
.Ta
employees
.It
.Ta
.Ql able
,
.Ql baker
, ...
.Ta
interns
.El
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Machine Name(s)
.Ta
Description
.It
.Ta
.Ql war
,
.Ql death
,
.Ql famine
,
.Ql pollution
.Ta
Only IT employees are allowed to log onto these servers.
.It
.Ta
.Ql pride
,
.Ql greed
,
.Ql envy
,
.Ql wrath
,
.Ql lust
,
.Ql sloth
.Ta
All members of the IT department are allowed to login onto these servers.
.It
.Ta
.Ql one
,
.Ql two
,
.Ql three
,
.Ql four
, ...
.Ta
Ordinary workstations used by employees.
.It
.Ta
.Ql trashcan
.Ta
A very old machine without any critical data.
Even interns are allowed to use this system.
.El
.Pp
When using netgroups to configure this scenario, each user is assigned to one
or more netgroups and logins are then allowed or forbidden for all members of
the netgroup.
When adding a new machine, login restrictions must be defined for all
netgroups.
When a new user is added, the account must be added to one or more netgroups.
If the NIS setup is planned carefully, only one central configuration file needs
modification to grant or deny access to machines.
.Pp
The first step is the initialization of the NIS
.Ql netgroup
map.
In FreeBSD, this map is not created by default.
On the NIS master server, use an editor to create a map named
.Pa /var/yp/netgroup
.
.Pp
This example creates four netgroups to represent IT employees, IT apprentices,
employees, and interns:
.Bd -literal -offset indent
IT_EMP  (,alpha,test-domain)    (,beta,test-domain)
IT_APP  (,charlie,test-domain)  (,delta,test-domain)
USERS   (,echo,test-domain)     (,foxtrott,test-domain) \
        (,golf,test-domain)
INTERNS (,able,test-domain)     (,baker,test-domain)
.Ed
.Pp
Each entry configures a netgroup.
The first column in an entry is the name of the netgroup.
Each set of brackets represents either a group of one or more users or the name
of another netgroup.
When specifying a user, the three comma-delimited fields inside each group
represent:
.Bl -enum -offset -compact
.It
The name of the host(s) where the other fields representing the user are valid.
If a hostname is not specified, the entry is valid on all hosts.
.It
The name of the account that belongs to this netgroup.
.It
The NIS domain for the account.
Accounts may be imported from other NIS domains into a netgroup.
.El
.Pp
If a group contains multiple users, separate each user with whitespace.
Additionally, each field may contain wildcards.
See
.Xr netgroup 5 for details.
.Pp
Netgroup names longer than 8 characters should not be used.
The names are case sensitive and using capital letters for netgroup names is an
easy way to distinguish between user, machine and netgroup names.
.Pp
Some non-FreeBSD NIS clients cannot handle netgroups containing more than 15 entries.
This limit may be circumvented by creating several sub-netgroups with 15 users
or fewer and a real netgroup consisting of the sub-netgroups, as seen in this
example:
.Bd -literal -offset indent
BIGGRP1  (,joe1,domain)  (,joe2,domain)  (,joe3,domain) [...]
BIGGRP2  (,joe16,domain)  (,joe17,domain) [...]
BIGGRP3  (,joe31,domain)  (,joe32,domain)
BIGGROUP  BIGGRP1 BIGGRP2 BIGGRP3
.Ed
.Pp
Repeat this process if more than 225 (15 times 15) users exist within a single
netgroup.
.Pp
To activate and distribute the new NIS map:
.Bd -literal -offset indent
ellington# cd /var/yp
ellington# make
.Ed
.Pp
This will generate the three NIS maps
.Pa netgroup
,
.Pa netgroup.byhost
and
.Pa netgroup.byuser
.
Use the map key option of
.Xr ypcat 1 to check if the new NIS maps are available:
.Bd -literal -offset indent
ellington% ypcat -k netgroup
ellington% ypcat -k netgroup.byhost
ellington% ypcat -k netgroup.byuser
.Ed
.Pp
The output of the first command should resemble the contents of
.Pa /var/yp/netgroup
.
The second command only produces output if host-specific netgroups were
created.
The third command is used to get the list of netgroups for a user.
.Pp
To configure a client, use
.Xr vipw 8 to specify the name of the netgroup.
For example, on the server named
.Ql war
, replace this line:
.Bd -literal -offset indent
+:::::::::
.Ed
.Pp
with
.Bd -literal -offset indent
+@IT_EMP:::::::::
.Ed
.Pp
This specifies that only the users defined in the netgroup
.Ql IT_EMP
will be imported into this system's password database and only those users are
allowed to login to this system.
.Pp
This configuration also applies to the
.Ql ~
function of the shell and all routines which convert between user names and
numerical user IDs.
In other words,
.Cm cd ~user
will not work,
.Cm ls -l
will show the numerical ID instead of the username, and
.Cm find .
-user joe -print
will fail with the message
.Er No such user
.
To fix this, import all user entries without allowing them to login into the
servers.
This can be achieved by adding an extra line:
.Bd -literal -offset indent
+:::::::::/sbin/nologin
.Ed
.Pp
This line configures the client to import all entries but to replace the shell
in those entries with
.Pa /sbin/nologin
.
.Pp
Make sure that extra line is placed after
.Ql +@IT_EMP:::::::::
.
Otherwise, all user accounts imported from NIS will have
.Pa /sbin/nologin
as their login shell and no one will be able to login to the system.
.Pp
To configure the less important servers, replace the old
.Ql +:::::::::
on the servers with these lines:
.Bd -literal -offset indent
+@IT_EMP:::::::::
+@IT_APP:::::::::
+:::::::::/sbin/nologin
.Ed
.Pp
The corresponding lines for the workstations would be:
.Bd -literal -offset indent
+@IT_EMP:::::::::
+@USERS:::::::::
+:::::::::/sbin/nologin
.Ed
.Pp
NIS supports the creation of netgroups from other netgroups which can be useful
if the policy regarding user access changes.
One possibility is the creation of role-based netgroups.
For example, one might create a netgroup called
.Ql BIGSRV
to define the login restrictions for the important servers, another netgroup
called
.Ql SMALLSRV
for the less important servers, and a third netgroup called
.Ql USERBOX
for the workstations.
Each of these netgroups contains the netgroups that are allowed to login onto
these machines.
The new entries for the NIS
.Ql netgroup
map would look like this:
.Bd -literal -offset indent
BIGSRV    IT_EMP  IT_APP
SMALLSRV  IT_EMP  IT_APP  ITINTERN
USERBOX   IT_EMP  ITINTERN USERS
.Ed
.Pp
This method of defining login restrictions works reasonably well when it is
possible to define groups of machines with identical restrictions.
Unfortunately, this is the exception and not the rule.
Most of the time, the ability to define login restrictions on a per-machine
basis is required.
.Pp
Machine-specific netgroup definitions are another possibility to deal with the
policy changes.
In this scenario, the
.Pa /etc/master.passwd
of each system contains two lines starting with
.Do
+
.Dc
.
The first line adds a netgroup with the accounts allowed to login onto this
machine and the second line adds all other accounts with
.Pa /sbin/nologin
as shell.
It is recommended to use the
.Do
ALL-CAPS
.Dc
version of the hostname as the name of the netgroup:
.Bd -literal -offset indent
+@BOXNAME:::::::::
+:::::::::/sbin/nologin
.Ed
.Pp
Once this task is completed on all the machines, there is no longer a need to
modify the local versions of
.Pa /etc/master.passwd
ever again.
All further changes can be handled by modifying the NIS map.
Here is an example of a possible
.Ql netgroup
map for this scenario:
.Bd -literal -offset indent
# Define groups of users first
IT_EMP    (,alpha,test-domain)    (,beta,test-domain)
IT_APP    (,charlie,test-domain)  (,delta,test-domain)
DEPT1     (,echo,test-domain)     (,foxtrott,test-domain)
DEPT2     (,golf,test-domain)     (,hotel,test-domain)
DEPT3     (,india,test-domain)    (,juliet,test-domain)
ITINTERN  (,kilo,test-domain)     (,lima,test-domain)
D_INTERNS (,able,test-domain)     (,baker,test-domain)
#
# Now, define some groups based on roles
USERS     DEPT1   DEPT2     DEPT3
BIGSRV    IT_EMP  IT_APP
SMALLSRV  IT_EMP  IT_APP    ITINTERN
USERBOX   IT_EMP  ITINTERN  USERS
#
# And a groups for a special tasks
# Allow echo and golf to access our anti-virus-machine
SECURITY  IT_EMP  (,echo,test-domain)  (,golf,test-domain)
#
# machine-based netgroups
# Our main servers
WAR       BIGSRV
FAMINE    BIGSRV
# User india needs access to this server
POLLUTION  BIGSRV  (,india,test-domain)
#
# This one is really important and needs more access restrictions
DEATH     IT_EMP
#
# The anti-virus-machine mentioned above
ONE       SECURITY
#
# Restrict a machine to a single user
TWO       (,hotel,test-domain)
# [...more groups to follow]
.Ed
.Pp
It may not always be advisable to use machine-based netgroups.
When deploying a couple of dozen or hundreds of systems, role-based netgroups
instead of machine-based netgroups may be used to keep the size of the NIS map within reasonable limits.
.Ss PASSWORD FORMATS
.Pp
NIS requires that all hosts within an NIS domain use the same format for encrypting passwords.
If users have trouble authenticating on an NIS client, it may be due to a differing password format.
In a heterogeneous network, the format must be supported by all operating
systems, where DES is the lowest common standard.
.Pp
To check which format a server or client is using, look at this section of
.Pa /etc/login.conf
:
.Bd -literal -offset indent
default:\
	:passwd_format=des:\
	:copyright=/etc/COPYRIGHT:\
	[Further entries elided]
.Ed
.Pp
In this example, the system is using the DES format.
Other possible values are
.Ql blf
for Blowfish and
.Ql md5
for MD5 encrypted passwords.
.Pp
If the format on a host needs to be edited to match the one being used in the NIS domain, the login capability database must be rebuilt after saving the change:
.Bd -literal -offset indent
# cap_mkdb /etc/login.conf
.Ed
.Pp
The format of passwords for existing user accounts will not be updated until
each user changes their password after the login capability database is rebuilt.
.Pp
The Lightweight Directory Access Protocol (LDAP) is an application layer protocol used to access, modify, and authenticate
objects using a distributed directory information service.
Think of it as a phone or record book which stores several levels of
hierarchical, homogeneous information.
It is used in Active Directory and OpenLDAP networks and allows users to access to several levels of internal information
utilizing a single account.
For example, email authentication, pulling employee contact information, and
internal website authentication might all make use of a single user account in
the LDAP server's record base.
.Pp
This section provides a quick start guide for configuring an LDAP server on a FreeBSD system.
It assumes that the administrator already has a design plan which includes the
type of information to store, what that information will be used for, which
users should have access to that information, and how to secure this
information from unauthorized access.
.Ss LDAP TERMINOLOGY AND STRUCTURE
.Pp
LDAP uses several terms which should be understood before starting the
configuration.
All directory entries consist of a group of
.Ql attributes
.
Each of these attribute sets contains a unique identifier known as a
.Ql Distinguished Name
(DN) which is normally built from several other attributes such as the common or
.Ql Relative Distinguished Name
(RDN).
Similar to how directories have absolute and relative paths, consider a DN as an absolute path and the RDN as the relative path.
.Pp
An example LDAP entry looks like the following.
This example searches for the entry for the specified user account (
.Ql uid
), organizational unit (
.Ql ou
), and organization (
.Ql o
):
.Bd -literal -offset indent
% ldapsearch -xb "uid=trhodes,ou=users,o=example.com"
# extended LDIF
#
# LDAPv3
# base <uid=trhodes,ou=users,o=example.com> with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

# trhodes, users, example.com
dn: uid=trhodes,ou=users,o=example.com
mail: trhodes@example.com
cn: Tom Rhodes
uid: trhodes
telephoneNumber: (123) 456-7890

# search result
search: 2
result: 0 Success

# numResponses: 2
# numEntries: 1
.Ed
.Pp
This example entry shows the values for the
.Ql dn
,
.Ql mail
,
.Ql cn
,
.Ql uid
, and
.Ql telephoneNumber
attributes.
The cn attribute is the RDN.
.Pp
More information about LDAP and its terminology can be found at
.Lk http://www.openldap.org/doc/admin24/intro.html
.
.Ss CONFIGURING AN LDAP SERVER
.Pp
FreeBSD does not provide a built-in LDAP server.
Begin the configuration by installing the
.Ql net/openldap24-server
package or port.
Since the port has many configurable options, it is recommended that the
default options are reviewed to see if the package is sufficient, and to
instead compile the port if any options should be changed.
In most cases, the defaults are fine.
However, if SQL support is needed, this option must be enabled and the port
compiled using the instructions in .
.Pp
Next, create the directories to hold the data and to store the certificates:
.Bd -literal -offset indent
# mkdir /var/db/openldap-data
# mkdir /usr/local/etc/openldap/private
.Ed
.Pp
Copy over the database configuration file:
.Bd -literal -offset indent
# cp /usr/local/etc/openldap/DB_CONFIG.example /var/db/openldap-data/DB_CONFIG
.Ed
.Pp
The next phase is to configure the certificate authority.
The following commands must be executed from
.Pa /usr/local/etc/openldap/private
.
This is important as the file permissions need to be restrictive and users
should not have access to these files.
To create the certificate authority, start with this command and follow the
prompts:
.Bd -literal -offset indent
# openssl req -days 365 -nodes -new -x509 -keyout ca.key -out ../ca.crt
.Ed
.Pp
The entries for the prompts may be generic except for the
.Ql Common Name
.
This entry must be different than the system hostname.
If this will be a self signed certificate, prefix the hostname with
.Ql CA
for certificate authority.
.Pp
The next task is to create a certificate signing request and a private key.
Input this command and follow the prompts:
.Bd -literal -offset indent
# openssl req -days 365 -nodes -new -keyout server.key -out server.csr
.Ed
.Pp
During the certificate generation process, be sure to correctly set the
.Ql Common Name
attribute.
Once complete, sign the key:
.Bd -literal -offset indent
# openssl x509 -req -days 365 -in server.csr -out ../server.crt -CA ../ca.crt -CAkey ca.key -CAcreateserial
.Ed
.Pp
The final part of the certificate generation process is to generate and sign
the client certificates:
.Bd -literal -offset indent
# openssl req -days 365 -nodes -new -keyout client.key -out client.csr
# openssl x509 -req -days 3650 -in client.csr -out ../client.crt -CA ../ca.crt
-CAkey ca.key
.Ed
.Pp
Remember to use the same
.Ql Common Name
attribute when prompted.
When finished, ensure that a total of eight (8) new files have been generated
through the proceeding commands.
If so, the next step is to edit
.Pa /usr/local/etc/openldap/slapd.conf
and add the following options:
.Bd -literal -offset indent
TLSCipherSuite HIGH:MEDIUM:+SSLv3
TLSCertificateFile /usr/local/etc/openldap/server.crt
TLSCertificateKeyFile /usr/local/etc/openldap/private/server.key
TLSCACertificateFile /usr/local/etc/openldap/ca.crt
.Ed
.Pp
Then, edit
.Pa /usr/local/etc/openldap/ldap.conf
and add the following lines:
.Bd -literal -offset indent
TLS_CACERT /usr/local/etc/openldap/ca.crt
TLS_CIPHER_SUITE HIGH:MEDIUM:+SSLv3
.Ed
.Pp
While editing this file, uncomment the following entries and set them to the
desired values:
.Ar BASE
,
.Ar URI
,
.Ar SIZELIMIT
and
.Ar TIMELIMIT
.
Set the
.Ar URI
to contain
.Ar ldap://
and
.Ar ldaps://
.
Then, add two entries pointing to the certificate authority.
When finished, the entries should look similar to the following:
.Bd -literal -offset indent
BASE    dc=example,dc=com
URI     ldap:// ldaps://

SIZELIMIT       12
TIMELIMIT       15

TLS_CACERT /usr/local/etc/openldap/ca.crt
TLS_CIPHER_SUITE HIGH:MEDIUM:+SSLv3
.Ed
.Pp
The default password for the server should then be changed:
.Bd -literal -offset indent
# slappasswd -h "{SHA}" >> /usr/local/etc/openldap/slapd.conf
.Ed
.Pp
This command will prompt for the password and, if the process does not fail, a
password hash will be added to the end of
.Pa slapd.conf
.
Several hashing formats are supported.
Refer to the manual page for
.Cm slappasswd
for more information.
.Pp
Next, edit
.Pa /usr/local/etc/openldap/slapd.conf
and add the following lines:
.Bd -literal -offset indent
password-hash {sha}
allow bind_v2
.Ed
.Pp
The
.Ar suffix
in this file must be updated to match the
.Ar BASE
used in
.Pa /usr/local/etc/openldap/ldap.conf
and
.Ar rootdn
should also be set.
A recommended value for
.Ar rootdn
is something like
.Ar cn=Manager
.
Before saving this file, place the
.Ar rootpw
in front of the password output from
.Cm slappasswd
and delete the old
.Ar rootpw
.
The end result should look similar to this:
.Bd -literal -offset indent
TLSCipherSuite HIGH:MEDIUM:+SSLv3
TLSCertificateFile /usr/local/etc/openldap/server.crt
TLSCertificateKeyFile /usr/local/etc/openldap/private/server.key
TLSCACertificateFile /usr/local/etc/openldap/ca.crt
rootpw  {SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g=
.Ed
.Pp
Finally, enable the OpenLDAP service in
.Pa /etc/rc.conf
and set the URI:
.Bd -literal -offset indent
slapd_enable="YES"
slapd_flags="-4 -h ldaps:///"
.Ed
.Pp
At this point the server can be started and tested:
.Bd -literal -offset indent
# service slapd start
.Ed
.Pp
If everything is configured correctly, a search of the directory should show a
successful connection with a single response as in this example:
.Bd -literal -offset indent
# ldapsearch -Z
# extended LDIF
#
# LDAPv3
# base <dc=example,dc=com> (default) with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

# search result
search: 3
result: 32 No such object

# numResponses: 1
.Ed
.Pp
If the command fails and the configuration looks correct, stop the
.Cm slapd
service and restart it with debugging options:
.Bd -literal -offset indent
# service slapd stop
# /usr/local/libexec/slapd -d -1
.Ed
.Pp
Once the service is responding, the directory can be populated using
.Cm ldapadd
.
In this example, a file containing this list of users is first created.
Each user should use the following format:
.Bd -literal -offset indent
dn: dc=example,dc=com
objectclass: dcObject
objectclass: organization
o: Example
dc: Example

dn: cn=Manager,dc=example,dc=com
objectclass: organizationalRole
cn: Manager
.Ed
.Pp
To import this file, specify the file name.
The following command will prompt for the password specified earlier and the
output should look something like this:
.Bd -literal -offset indent
# ldapadd -Z -D "cn=Manager,dc=example,dc=com" -W -f import.ldif
Enter LDAP Password:
adding new entry "dc=example,dc=com"

adding new entry "cn=Manager,dc=example,dc=com"
.Ed
.Pp
Verify the data was added by issuing a search on the server using
.Cm ldapsearch
:
.Bd -literal -offset indent
% ldapsearch -Z
# extended LDIF
#
# LDAPv3
# base <dc=example,dc=com> (default) with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

# example.com
dn: dc=example,dc=com
objectClass: dcObject
objectClass: organization
o: Example
dc: Example

# Manager, example.com
dn: cn=Manager,dc=example,dc=com
objectClass: organizationalRole
cn: Manager

# search result
search: 3
result: 0 Success

# numResponses: 3
# numEntries: 2
.Ed
.Pp
At this point, the server should be configured and functioning properly.
.Ss DYNAMIC HOST CONFIGURATION PROTOCOL (DHCP)
.Pp
The Dynamic Host Configuration Protocol (DHCP) allows a system to connect to a network in order to be assigned the necessary
addressing information for communication on that network.
FreeBSD includes the OpenBSD version of
.Cm dhclient
which is used by the client to obtain the addressing information.
FreeBSD does not install a DHCP server, but several servers are available in the FreeBSD Ports Collection.
The DHCP protocol is fully described in RFC 2131.
Informational resources are also available at isc.org/downloads/dhcp/.
.Pp
This section describes how to use the built-in DHCP client.
It then describes how to install and configure a DHCP server.
.Pp
In FreeBSD, the
.Xr bpf 4 device is needed by both the DHCP server and DHCP client.
This device is included in the
.Pa GENERIC
kernel that is installed with FreeBSD.
Users who prefer to create a custom kernel need to keep this device if DHCP is used.
.Pp
It should be noted that
.Pa bpf
also allows privileged users to run network packet sniffers on that system.
.Ss CONFIGURING A DHCP CLIENT
.Pp
DHCP client support is included in the FreeBSD installer, making it easy to
configure a newly installed system to automatically receive its networking
addressing information from an existing DHCP server.
Refer to for examples of network configuration.
.Pp
When
.Cm dhclient
is executed on the client machine, it begins broadcasting requests for
configuration information.
By default, these requests use UDP port 68.
The server replies on UDP port 67, giving the client an IP address and other relevant network information such as a subnet mask, default
gateway, and DNS server addresses.
This information is in the form of a DHCP
.Do
lease
.Dc
and is valid for a configurable time.
This allows stale IP addresses for clients no longer connected to the network to automatically be
reused.
 DHCP clients can obtain a great deal of information from the server.
An exhaustive list may be found in
.Xr dhcp-options 5 .
.Pp
By default, when a FreeBSD system boots, its DHCP client runs in the background, or
.Ql asynchronously
.
Other startup scripts continue to run while the DHCP process completes, which speeds up system startup.
.Pp
Background DHCP works well when the DHCP server responds quickly to the client's requests.
However, DHCP may take a long time to complete on some systems.
If network services attempt to run before DHCP has assigned the network addressing information, they will fail.
Using DHCP in
.Ql synchronous
mode prevents this problem as it pauses startup until the DHCP configuration has completed.
.Pp
This line in
.Pa /etc/rc.conf
is used to configure background or asynchronous mode:
.Bd -literal -offset indent
ifconfig_fxp0="DHCP"
.Ed
.Pp
This line may already exist if the system was configured to use DHCP during installation.
Replace the fxp0 shown in these examples with the name of the interface to be dynamically
configured, as described in .
.Pp
To instead configure the system to use synchronous mode, and to pause during
startup while DHCP completes, use
.Do
.Ql SYNCDHCP
.Dc
:
.Bd -literal -offset indent
ifconfig_fxp0="SYNCDHCP"
.Ed
.Pp
Additional client options are available.
Search for
.Ql dhclient
in
.Xr rc.conf 5 for details.
.Pp
The DHCP client uses the following files:
.Bl -bullet -offset -compact
.It
.Pa /etc/dhclient.conf
The configuration file used by
.Cm dhclient
.
Typically, this file contains only comments as the defaults are suitable for
most clients.
This configuration file is described in
.Xr dhclient.conf 5 .
.It
.Pa /sbin/dhclient
More information about the command itself can be found in
.Xr dhclient 8 .
.It
.Pa /sbin/dhclient-script
The FreeBSD-specific DHCP client configuration script.
It is described in
.Xr dhclient-script 8 , but should not need any user modification to function properly.
.It
.Pa /var/db/dhclient.leases.
interface
The DHCP client keeps a database of valid leases in this file, which is written as a log
and is described in
.Xr dhclient.leases 5 .
.El
.Ss INSTALLING AND CONFIGURING A DHCP SERVER
.Pp
This section demonstrates how to configure a FreeBSD system to act as a DHCP server using the Internet Systems Consortium (ISC) implementation of the DHCP server.
This implementation and its documentation can be installed using the
.Ql net/isc-dhcp43-server
package or port.
.Pp
The installation of
.Ql net/isc-dhcp43-server
installs a sample configuration file.
Copy
.Pa /usr/local/etc/dhcpd.conf.example
to
.Pa /usr/local/etc/dhcpd.conf
and make any edits to this new file.
.Pp
The configuration file is comprised of declarations for subnets and hosts which
define the information that is provided to DHCP clients.
For example, these lines configure the following:
.Bd -literal -offset indent
option domain-name "example.org";
option domain-name-servers ns1.example.org;
option subnet-mask 255.255.255.0;

default-lease-time 600;
max-lease-time 72400;
ddns-update-style none;

subnet 10.254.239.0 netmask 255.255.255.224 {
  range 10.254.239.10 10.254.239.20;
  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
}

host fantasia {
  hardware ethernet 08:00:07:26:c0:a5;
  fixed-address fantasia.fugue.com;
}
.Ed
.Pp
This option specifies the default search domain that will be provided to
clients.
Refer to
.Xr resolv.conf 5 for more information.
.Pp
This option specifies a comma separated list of DNS servers that the client should use.
They can be listed by their Fully Qualified Domain Names (FQDN), as seen in the example, or by their IP addresses.
.Pp
The subnet mask that will be provided to clients.
.Pp
The default lease expiry time in seconds.
A client can be configured to override this value.
.Pp
The maximum allowed length of time, in seconds, for a lease.
Should a client request a longer lease, a lease will still be issued, but it
will only be valid for
.Ql max-lease-time
.
.Pp
The default of
.Ar none
disables dynamic DNS updates.
Changing this to
.Ar interim
configures the DHCP server to update a DNS server whenever it hands out a lease so that the DNS server knows which IP addresses are associated with which computers in the network.
Do not change the default setting unless the DNS server has been configured to support dynamic DNS.
.Pp
This line creates a pool of available IP addresses which are reserved for allocation to DHCP clients.
The range of addresses must be valid for the network or subnet specified in the
previous line.
.Pp
Declares the default gateway that is valid for the network or subnet specified
before the opening
.Ql {
bracket.
.Pp
Specifies the hardware MAC address of a client so that the DHCP server can recognize the client when it makes a request.
.Pp
Specifies that this host should always be given the same IP address.
Using the hostname is correct, since the DHCP server will resolve the hostname before returning the lease information.
.Pp
This configuration file supports many more options.
Refer to dhcpd.conf(5), installed with the server, for details and examples.
.Pp
Once the configuration of
.Pa dhcpd.conf
is complete, enable the DHCP server in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
dhcpd_enable="YES"
dhcpd_ifaces="dc0"
.Ed
.Pp
Replace the
.Ql dc0
with the interface (or interfaces, separated by whitespace) that the DHCP server should listen on for DHCP client requests.
.Pp
Start the server by issuing the following command:
.Bd -literal -offset indent
# service isc-dhcpd start
.Ed
.Pp
Any future changes to the configuration of the server will require the dhcpd service to be stopped and then started using
.Xr service 8 .
.Pp
The DHCP server uses the following files.
Note that the manual pages are installed with the server software.
.Bl -bullet -offset -compact
.It
.Pa /usr/local/sbin/dhcpd
More information about the dhcpd server can be found in dhcpd(8).
.It
.Pa /usr/local/etc/dhcpd.conf
The server configuration file needs to contain all the information that should
be provided to clients, along with information regarding the operation of the
server.
This configuration file is described in dhcpd.conf(5).
.It
.Pa /var/db/dhcpd.leases
The DHCP server keeps a database of leases it has issued in this file, which is written
as a log.
Refer to dhcpd.leases(5), which gives a slightly longer description.
.It
.Pa /usr/local/sbin/dhcrelay
This daemon is used in advanced environments where one DHCP server forwards a request from a client to another DHCP server on a separate network.
If this functionality is required, install the
.Ql net/isc-dhcp43-relay
package or port.
The installation includes dhcrelay(8) which provides more detail.
.El
.Ss DOMAIN NAME SYSTEM (DNS)
.Pp
Domain Name System (DNS) is the protocol through which domain names are mapped to IP addresses, and vice versa.
 DNS is coordinated across the Internet through a somewhat complex system of
authoritative root, Top Level Domain (TLD), and other smaller-scale name servers, which host and cache individual domain
information.
It is not necessary to run a name server to perform DNS lookups on a system.
.Pp
The following table describes some of the terms associated with DNS:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Term
.Ta
Definition
.It
.Ta
Forward DNS
.Ta
Mapping of hostnames to IP addresses.
.It
.Ta
Origin
.Ta
Refers to the domain covered in a particular zone file.
.It
.Ta
Resolver
.Ta
A system process through which a machine queries a name server for zone
information.
.It
.Ta
Reverse DNS
.Ta
Mapping of IP addresses to hostnames.
.It
.Ta
Root zone
.Ta
The beginning of the Internet zone hierarchy.
All zones fall under the root zone, similar to how all files in a file system
fall under the root directory.
.It
.Ta
Zone
.Ta
An individual domain, subdomain, or portion of the DNS administered by the same authority.
.El
.Pp
Examples of zones:
.Bl -bullet -offset -compact
.It
.Ql .
is how the root zone is usually referred to in documentation.
.It
.Ql org.
is a Top Level Domain (TLD) under the root zone.
.It
.Ql example.org.
is a zone under the
.Ql org.
TLD.
.It
.Ql 1.168.192.in-addr.arpa
is a zone referencing all IP addresses which fall under the
.Ql 192.168.1.*
IP address space.
.El
.Pp
As one can see, the more specific part of a hostname appears to its left.
For example,
.Ql example.org.
is more specific than
.Ql org.
, as
.Ql org.
is more specific than the root zone.
The layout of each part of a hostname is much like a file system: the
.Pa /dev
directory falls within the root, and so on.
.Ss REASONS TO RUN A NAME SERVER
.Pp
Name servers generally come in two forms: authoritative name servers, and
caching (also known as resolving) name servers.
.Pp
An authoritative name server is needed when:
.Bl -bullet -offset -compact
.It
One wants to serve DNS information to the world, replying authoritatively to queries.
.It
A domain, such as
.Ql example.org
, is registered and IP addresses need to be assigned to hostnames under it.
.It
An IP address block requires reverse DNS entries (IP to hostname).
.It
A backup or second name server, called a slave, will reply to queries.
.El
.Pp
A caching name server is needed when:
.Bl -bullet -offset -compact
.It
A local DNS server may cache and respond more quickly than querying an outside name server.
.El
.Pp
When one queries for
.Ql www.FreeBSD.org
, the resolver usually queries the uplink ISP's name server, and retrieves the reply.
With a local, caching DNS server, the query only has to be made once to the outside world by the caching DNS server.
Additional queries will not have to go outside the local network, since the
information is cached locally.
.Ss DNS SERVER CONFIGURATION
.Pp
Unbound is provided in the FreeBSD base system.
By default, it will provide DNS resolution to the local machine only.
While the base system package can be configured to provide resolution services
beyond the local machine, it is recommended that such requirements be addressed
by installing Unbound from the FreeBSD Ports Collection.
.Pp
To enable Unbound, add the following to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
local_unbound_enable="YES"
.Ed
.Pp
Any existing nameservers in
.Pa /etc/resolv.conf
will be configured as forwarders in the new Unbound configuration.
.Pp
If any of the listed nameservers do not support DNSSEC, local DNS resolution will fail.
Be sure to test each nameserver and remove any that fail the test.
The following command will show the trust tree or a failure for a nameserver
running on
.Ql 192.168.1.1
:
.Bd -literal -offset indent
% drill -S FreeBSD.org @192.168.1.1
.Ed
.Pp
Once each nameserver is confirmed to support DNSSEC, start Unbound:
.Bd -literal -offset indent
# service local_unbound onestart
.Ed
.Pp
This will take care of updating
.Pa /etc/resolv.conf
so that queries for DNSSEC secured domains will now work.
For example, run the following to validate the FreeBSD.org DNSSEC trust tree:
.Bd -literal -offset indent
% drill -S FreeBSD.org
;; Number of trusted keys: 1
;; Chasing: freebsd.org. A

DNSSEC Trust tree:
freebsd.org. (A)
|---freebsd.org. (DNSKEY keytag: 36786 alg: 8 flags: 256)
    |---freebsd.org. (DNSKEY keytag: 32659 alg: 8 flags: 257)
    |---freebsd.org. (DS keytag: 32659 digest type: 2)
        |---org. (DNSKEY keytag: 49587 alg: 7 flags: 256)
            |---org. (DNSKEY keytag: 9795 alg: 7 flags: 257)
            |---org. (DNSKEY keytag: 21366 alg: 7 flags: 257)
            |---org. (DS keytag: 21366 digest type: 1)
            |   |---. (DNSKEY keytag: 40926 alg: 8 flags: 256)
            |       |---. (DNSKEY keytag: 19036 alg: 8 flags: 257)
            |---org. (DS keytag: 21366 digest type: 2)
                |---. (DNSKEY keytag: 40926 alg: 8 flags: 256)
                    |---. (DNSKEY keytag: 19036 alg: 8 flags: 257)
;; Chase successful
.Ed
.Pp
The open source Apache HTTP Server is the most widely used web server.
FreeBSD does not install this web server by default, but it can be installed
from the
.Ql www/apache24
package or port.
.Pp
This section summarizes how to configure and start version 2.
x of the Apache HTTP Server on FreeBSD.
For more detailed information about Apache2.X and its configuration directives, refer to httpd.apache.org.
.Ss CONFIGURING AND STARTING APACHE
.Pp
In FreeBSD, the main Apache HTTP Server configuration file is installed as
.Pa /usr/local/etc/apache2x/httpd.conf
, where x represents the version number.
This ASCII text file begins comment lines with a
.Ql #
.
The most frequently modified directives are:
.Bl -tag -offset -compact
.It
.Ql ServerRoot "/usr/local"
Specifies the default directory hierarchy for the Apache installation.
Binaries are stored in the
.Pa bin
and
.Pa sbin
subdirectories of the server root and configuration files are stored in the
.Pa etc/apache2x
subdirectory.
.It
.Ql ServerAdmin you@example.com
Change this to the email address to receive problems with the server.
This address also appears on some server-generated pages, such as error
documents.
.It
.Ql ServerName www.example.com:80
Allows an administrator to set a hostname which is sent back to clients for the
server.
For example,
.Ql www
can be used instead of the actual hostname.
If the system does not have a registered DNS name, enter its IP address instead.
If the server will listen on an alternate report, change
.Ql 80
to the alternate port number.
.It
.Ql DocumentRoot "/usr/local/www/apache2x/data"
The directory where documents will be served from.
By default, all requests are taken from this directory, but symbolic links and
aliases may be used to point to other locations.
.El
.Pp
It is always a good idea to make a backup copy of the default Apache configuration file before making changes.
When the configuration of Apache is complete, save the file and verify the configuration using
.Cm apachectl
.
Running
.Cm apachectl configtest
should return
.Ql Syntax OK
.
.Pp
To launch Apache at system startup, add the following line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
apache24_enable="YES"
.Ed
.Pp
If Apache should be started with non-default options, the following line may be added to
.Pa /etc/rc.conf
to specify the needed flags:
.Bd -literal -offset indent
apache24_flags=""
.Ed
.Pp
If apachectl does not report configuration errors, start
.Cm httpd
now:
.Bd -literal -offset indent
# service apache24 start
.Ed
.Pp
The
.Cm httpd
service can be tested by entering
.Ql http://localhost
in a web browser, replacing localhost with the fully-qualified domain name of the machine running
.Cm httpd
.
The default web page that is displayed is
.Pa /usr/local/www/apache24/data/index.html
.
.Pp
The Apache configuration can be tested for errors after making subsequent configuration
changes while
.Cm httpd
is running using the following command:
.Bd -literal -offset indent
# service apache24 configtest
.Ed
.Pp
It is important to note that
.Ql configtest
is not an
.Xr rc 8 standard, and should not be expected to work for all startup scripts.
.Ss VIRTUAL HOSTING
.Pp
Virtual hosting allows multiple websites to run on one Apache server.
The virtual hosts can be
.Ql IP-based
or
.Ql name-based
.
 IP-based virtual hosting uses a different IP address for each website.
Name-based virtual hosting uses the clients HTTP/1.1 headers to figure out the
hostname, which allows the websites to share the same IP address.
.Pp
To setup Apache to use name-based virtual hosting, add a
.Ql VirtualHost
block for each website.
For example, for the webserver named
.Ql www.domain.tld
with a virtual domain of
.Ql www.someotherdomain.tld
, add the following entries to
.Pa httpd.conf
:
.Bd -literal -offset indent
<VirtualHost *>
    ServerName www.domain.tld
    DocumentRoot /www/domain.tld
</VirtualHost>

<VirtualHost *>
    ServerName www.someotherdomain.tld
    DocumentRoot /www/someotherdomain.tld
</VirtualHost>
.Ed
.Pp
For each virtual host, replace the values for
.Ql ServerName
and
.Ql DocumentRoot
with the values to be used.
.Pp
For more information about setting up virtual hosts, consult the official Apache documentation at:
.Lk http://httpd.apache.org/docs/vhosts/
.
.Ss APACHE MODULES
.Pp
Apache uses modules to augment the functionality provided by the basic server.
Refer to
.Lk http://httpd.apache.org/docs/current/mod/
for a complete listing of and the configuration details for the available
modules.
.Pp
In FreeBSD, some modules can be compiled with the
.Ql www/apache24
port.
Type
.Cm make config
within
.Pa /usr/ports/www/apache24
to see which modules are available and which are enabled by default.
If the module is not compiled with the port, the FreeBSD Ports Collection
provides an easy way to install many modules.
This section describes three of the most commonly used modules.
.Ss MOD_SSL
.Pp
The
.Pa mod_ssl
module uses the OpenSSL library to provide strong cryptography via the Secure Sockets Layer (SSLv3) and Transport Layer Security (TLSv1) protocols.
This module provides everything necessary to request a signed certificate from
a trusted certificate signing authority to run a secure web server on FreeBSD.
.Pp
In FreeBSD,
.Pa mod_ssl
module is enabled by default in both the package and the port.
The available configuration directives are explained at
.Lk http://httpd.apache.org/docs/current/mod/mod_ssl.html
.
.Ss MOD_PERL
.Pp
The
.Pa mod_perl
module makes it possible to write Apache modules in Perl.
In addition, the persistent interpreter embedded in the server avoids the
overhead of starting an external interpreter and the penalty of Perl start-up time.
.Pp
The
.Pa mod_perl
can be installed using the
.Ql www/mod_perl2
package or port.
Documentation for using this module can be found at
.Lk http://perl.apache.org/docs/2.0/index.html
.
.Pp
.Ql PHP: Hypertext Preprocessor
(PHP) is a general-purpose scripting language that is especially suited for web
development.
Capable of being embedded into HTML, its syntax draws upon C, Java, and Perl with the intention of allowing web developers to write dynamically generated
webpages quickly.
.Pp
To gain support for PHP5 for the Apache web server, install the
.Ql www/mod_php56
package or port.
This will install and configure the modules required to support dynamic PHP applications.
The installation will automatically add this line to
.Pa /usr/local/etc/apache24/httpd.conf
:
.Bd -literal -offset indent
LoadModule php5_module        libexec/apache24/libphp5.so
.Ed
.Pp
Then, perform a graceful restart to load the PHP module:
.Bd -literal -offset indent
# apachectl graceful
.Ed
.Pp
The PHP support provided by
.Ql www/mod_php56
is limited.
Additional support can be installed using the
.Ql lang/php56-extensions
port which provides a menu driven interface to the available PHP extensions.
.Pp
Alternatively, individual extensions can be installed using the appropriate
port.
For instance, to add PHP support for the MySQL database server, install
.Ql databases/php56-mysql
.
.Pp
After installing an extension, the Apache server must be reloaded to pick up the new configuration changes:
.Bd -literal -offset indent
# apachectl graceful
.Ed
.Ss DYNAMIC WEBSITES
.Pp
In addition to mod_perl and mod_php, other languages are available for creating dynamic web content.
These include Django and Ruby on Rails.
.Ss DJANGO
.Pp
Django is a BSD-licensed framework designed to allow developers to write high
performance, elegant web applications quickly.
It provides an object-relational mapper so that data types are developed as Python objects.
A rich dynamic database-access API is provided for those objects without the developer ever having to write SQL.
It also provides an extensible template system so that the logic of the
application is separated from the HTML presentation.
.Pp
Django depends on
.Pa mod_python
, and an SQL database engine.
In FreeBSD, the
.Ql www/py-django
port automatically installs
.Pa mod_python
and supports the PostgreSQL, MySQL, or SQLite databases, with the default being SQLite.
To change the database engine, type
.Cm make config
within
.Pa /usr/ports/www/py-django
, then install the port.
.Pp
Once Django is installed, the application will need a project directory along with the Apache configuration in order to use the embedded Python interpreter.
This interpreter is used to call the application for specific URLs on the site.
.Pp
To configure Apache to pass requests for certain URLs to the web application, add the following to
.Pa httpd.conf
, specifying the full path to the project directory:
.Bd -literal -offset indent
<Location "/">
    SetHandler python-program
    PythonPath "['/dir/to/the/django/packages/'] + sys.path"
    PythonHandler django.core.handlers.modpython
    SetEnv DJANGO_SETTINGS_MODULE mysite.settings
    PythonAutoReload On
    PythonDebug On
</Location>
.Ed
.Pp
Refer to
.Lk https://docs.djangoproject.com
for more information on how to use Django.
.Ss RUBY ON RAILS
.Pp
Ruby on Rails is another open source web framework that provides a full development stack.
It is optimized to make web developers more productive and capable of writing
powerful applications quickly.
On FreeBSD, it can be installed using the
.Ql www/rubygem-rails
package or port.
.Pp
Refer to
.Lk http://guides.rubyonrails.org
for more information on how to use Ruby on Rails.
.Ss FILE TRANSFER PROTOCOL (FTP)
.Pp
The File Transfer Protocol (FTP) provides users with a simple way to transfer files to and from an FTP server.
FreeBSD includes FTP server software, ftpd, in the base system.
.Pp
FreeBSD provides several configuration files for controlling access to the FTP server.
This section summarizes these files.
Refer to
.Xr ftpd 8 for more details about the built-in FTP server.
.Ss CONFIGURATION
.Pp
The most important configuration step is deciding which accounts will be
allowed access to the FTP server.
A FreeBSD system has a number of system accounts which should not be allowed FTP access.
The list of users disallowed any FTP access can be found in
.Pa /etc/ftpusers
.
By default, it includes system accounts.
Additional users that should not be allowed access to FTP can be added.
.Pp
In some cases it may be desirable to restrict the access of some users without
preventing them completely from using FTP.
This can be accomplished be creating
.Pa /etc/ftpchroot
as described in
.Xr ftpchroot 5 .
This file lists users and groups subject to FTP access restrictions.
.Pp
To enable anonymous FTP access to the server, create a user named
.Ql ftp
on the FreeBSD system.
Users will then be able to log on to the FTP server with a username of
.Ql ftp
or
.Ql anonymous
.
When prompted for the password, any input will be accepted, but by convention,
an email address should be used as the password.
The FTP server will call
.Xr chroot 2 when an anonymous user logs in, to restrict access to only the home directory
of the
.Ql ftp
user.
.Pp
There are two text files that can be created to specify welcome messages to be
displayed to FTP clients.
The contents of
.Pa /etc/ftpwelcome
will be displayed to users before they reach the login prompt.
After a successful login, the contents of
.Pa /etc/ftpmotd
will be displayed.
Note that the path to this file is relative to the login environment, so the
contents of
.Pa ~ftp/etc/ftpmotd
would be displayed for anonymous users.
.Pp
Once the FTP server has been configured, set the appropriate variable in
.Pa /etc/rc.conf
to start the service during boot:
.Bd -literal -offset indent
ftpd_enable="YES"
.Ed
.Pp
To start the service now:
.Bd -literal -offset indent
# service ftpd start
.Ed
.Pp
Test the connection to the FTP server by typing:
.Bd -literal -offset indent
% ftp localhost
.Ed
.Pp
The ftpd daemon uses
.Xr syslog 3 to log messages.
By default, the system log daemon will write messages related to FTP in
.Pa /var/log/xferlog
.
The location of the FTP log can be modified by changing the following line in
.Pa /etc/syslog.conf
:
.Bd -literal -offset indent
ftp.info      /var/log/xferlog
.Ed
.Pp
Be aware of the potential problems involved with running an anonymous FTP server.
In particular, think twice about allowing anonymous users to upload files.
It may turn out that the FTP site becomes a forum for the trade of unlicensed commercial software or worse.
If anonymous FTP uploads are required, then verify the permissions so that these files cannot be
read by other anonymous users until they have been reviewed by an
administrator.
.Ss FILE AND PRINT SERVICES FOR MICROSOFTWINDOWS CLIENTS (SAMBA)
.Pp
Samba is a popular open source software package that provides file and print services
using the SMB/CIFS protocol.
This protocol is built into MicrosoftWindows systems.
It can be added to non-MicrosoftWindows systems by installing the Samba client libraries.
The protocol allows clients to access shared data and printers.
These shares can be mapped as a local disk drive and shared printers can be
used as if they were local printers.
.Pp
On FreeBSD, the Samba client libraries can be installed using the
.Ql net/samba-smbclient
port or package.
The client provides the ability for a FreeBSD system to access SMB/CIFS shares in a MicrosoftWindows network.
.Pp
A FreeBSD system can also be configured to act as a Samba server by installing the
.Ql net/samba46
port or package.
This allows the administrator to create SMB/CIFS shares on the FreeBSD system which can be accessed by clients running MicrosoftWindows or the Samba client libraries.
.Ss SERVER CONFIGURATION
.Pp
Samba is configured in
.Pa /usr/local/etc/smb4.conf
.
This file must be created before Samba can be used.
.Pp
A simple
.Pa smb4.conf
to share directories and printers with Windows clients in a workgroup is shown here.
For more complex setups involving LDAP or Active Directory, it is easier to use
.Xr samba-tool 8 to create the initial
.Pa smb4.conf
.
.Bd -literal -offset indent
[global]
workgroup = WORKGROUP
server string = Samba Server Version %v
netbios name = ExampleMachine
wins support = Yes
security = user
passdb backend = tdbsam

# Example: share /usr/src accessible only to 'developer' user
[src]
path = /usr/src
valid users = developer
writable  = yes
browsable = yes
read only = no
guest ok = no
public = no
create mask = 0666
directory mask = 0755
.Ed
.Ss GLOBAL SETTINGS
.Pp
Settings that describe the network are added in
.Pa /usr/local/etc/smb4.conf
:
.Bl -tag -offset -compact
.It
.Ql workgroup
The name of the workgroup to be served.
.It
.Ql netbios name
The NetBIOS name by which a Samba server is known.
By default, it is the same as the first component of the host's DNS name.
.It
.Ql server string
The string that will be displayed in the output of
.Cm net view
and some other networking tools that seek to display descriptive text about the
server.
.It
.Ql wins support
Whether Samba will act as a WINS server.
Do not enable support for WINS on more than one server on the network.
.El
.Ss SECURITY SETTINGS
.Pp
The most important settings in
.Pa /usr/local/etc/smb4.conf
are the security model and the backend password format.
These directives control the options:
.Bl -tag -offset -compact
.It
.Ql security
The most common settings are
.Ql security = share
and
.Ql security = user
.
If the clients use usernames that are the same as their usernames on the
FreeBSD machine, user level security should be used.
This is the default security policy and it requires clients to first log on
before they can access shared resources.
In share level security, clients do not need to log onto the server with a
valid username and password before attempting to connect to a shared resource.
This was the default security model for older versions of Samba.
.It
.Ql passdb backend
Samba has several different backend authentication models.
Clients may be authenticated with LDAP, NIS+, an SQL database, or a modified
password file.
The recommended authentication method,
.Ql tdbsam
, is ideal for simple networks and is covered here.
For larger or more complex networks,
.Ql ldapsam
is recommended.
.Ql smbpasswd
was the former default and is now obsolete.
.El
.Ss SAMBA USERS
.Pp
FreeBSD user accounts must be mapped to the
.Ql SambaSAMAccount
database for Windows clients to access the share.
Map existing FreeBSD user accounts using
.Xr pdbedit 8 :
.Bd -literal -offset indent
# pdbedit -a username
.Ed
.Pp
This section has only mentioned the most commonly used settings.
Refer to the Official Samba HOWTO for additional information about the available configuration options.
.Ss STARTING SAMBA
.Pp
To enable Samba at boot time, add the following line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
samba_server_enable="YES"
.Ed
.Pp
To start Samba now:
.Bd -literal -offset indent
# service samba_server start
Performing sanity check on Samba configuration: OK
Starting nmbd.
Starting smbd.
.Ed
.Pp
Samba consists of three separate daemons.
Both the nmbd and smbd daemons are started by
.Ev samba_enable
.
If winbind name resolution is also required, set:
.Bd -literal -offset indent
winbindd_enable="YES"
.Ed
.Pp
Samba can be stopped at any time by typing:
.Bd -literal -offset indent
# service samba_server stop
.Ed
.Pp
Samba is a complex software suite with functionality that allows broad integration
with MicrosoftWindows networks.
For more information about functionality beyond the basic configuration
described here, refer to
.Lk http://www.samba.org
.
.Ss CLOCK SYNCHRONIZATION WITH NTP
.Pp
Over time, a computer's clock is prone to drift.
This is problematic as many network services require the computers on a network
to share the same accurate time.
Accurate time is also needed to ensure that file timestamps stay consistent.
The Network Time Protocol (NTP) is one way to provide clock accuracy in a network.
.Pp
FreeBSD includes
.Xr ntpd 8 which can be configured to query other NTP servers in order to synchronize the clock on that machine or to provide time
services to other computers in the network.
The servers which are queried can be local to the network or provided by an ISP.
In addition, an online list of publicly accessible NTP servers is available.
When choosing a public NTP server, select one that is geographically close and review its usage policy.
.Pp
Choosing several NTP servers is recommended in case one of the servers becomes unreachable or its
clock proves unreliable.
As ntpd receives responses, it favors reliable servers over the less reliable ones.
.Pp
This section describes how to configure ntpd on FreeBSD.
Further documentation can be found in
.Pa /usr/share/doc/ntp/
in HTML format.
.Ss NTP CONFIGURATION
.Pp
On FreeBSD, the built-in ntpd can be used to synchronize a system's clock.
To enable ntpd at boot time, add
.Ql ntpd_enable="YES"
to
.Pa /etc/rc.conf
.
Additional variables can be specified in
.Pa /etc/rc.conf
.
Refer to
.Xr rc.conf 5 and
.Xr ntpd 8 for details.
.Pp
This application reads
.Pa /etc/ntp.conf
to determine which NTP servers to query.
Here is a simple example of an
.Pa /etc/ntp.conf
:
.Bd -literal -offset indent
server ntplocal.example.com prefer
server timeserver.example.org
server ntp2a.example.net

driftfile /var/db/ntp.drift
.Ed
.Pp
The format of this file is described in
.Xr ntp.conf 5 .
The
.Ql server
option specifies which servers to query, with one server listed on each line.
If a server entry includes
.Ql prefer
, that server is preferred over other servers.
A response from a preferred server will be discarded if it differs
significantly from other servers' responses; otherwise it will be used.
The
.Ql prefer
argument should only be used for NTP servers that are known to be highly accurate, such as those with special time
monitoring hardware.
.Pp
The
.Ql driftfile
entry specifies which file is used to store the system clock's frequency
offset.
 ntpd uses this to automatically compensate for the clock's natural drift, allowing
it to maintain a reasonably correct setting even if it is cut off from all
external time sources for a period of time.
This file also stores information about previous responses from NTP servers.
Since this file contains internal information for NTP, it should not be modified.
.Pp
By default, an NTP server is accessible to any network host.
The
.Ql restrict
option in
.Pa /etc/ntp.conf
can be used to control which systems can access the server.
For example, to deny all machines from accessing the NTP server, add the following line to
.Pa /etc/ntp.conf
:
.Bd -literal -offset indent
restrict default ignore
.Ed
.Pp
This will also prevent access from other NTP servers.
If there is a need to synchronize with an external NTP server, allow only that specific server.
Refer to
.Xr ntp.conf 5 for more information.
.Pp
To allow machines within the network to synchronize their clocks with the
server, but ensure they are not allowed to configure the server or be used as
peers to synchronize against, instead use:
.Bd -literal -offset indent
restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap
.Ed
.Pp
where
.Ql 192.168.1.0
is the local network address and
.Ql 255.255.255.0
is the network's subnet mask.
.Pp
Multiple
.Ql restrict
entries are supported.
For more details, refer to the
.Ql Access Control Support
subsection of
.Xr ntp.conf 5 .
.Pp
Once
.Ql ntpd_enable="YES"
has been added to
.Pa /etc/rc.conf
, ntpd can be started now without rebooting the system by typing:
.Bd -literal -offset indent
# service ntpd start
.Ed
.Ss USING NTP WITH A PPP CONNECTION
.Pp
ntpd does not need a permanent connection to the Internet to function properly.
However, if a PPP connection is configured to dial out on demand, NTP traffic should be prevented from triggering a dial out or keeping the
connection alive.
This can be configured with
.Ql filter
directives in
.Pa /etc/ppp/ppp.conf
.
For example:
.Bd -literal -offset indent
 set filter dial 0 deny udp src eq 123
 # Prevent NTP traffic from initiating dial out
 set filter dial 1 permit 0 0
 set filter alive 0 deny udp src eq 123
 # Prevent incoming NTP traffic from keeping the connection open
 set filter alive 1 deny udp dst eq 123
 # Prevent outgoing NTP traffic from keeping the connection open
 set filter alive 2 permit 0/0 0/0
.Ed
.Pp
For more details, refer to the
.Ql PACKET FILTERING
section in
.Xr ppp 8 and the examples in
.Pa /usr/share/examples/ppp/
.
.Pp
Some Internet access providers block low-numbered ports, preventing NTP from
functioning since replies never reach the machine.
.Ss ISCSI INITIATOR AND TARGET CONFIGURATION
.Pp
iSCSI is a way to share storage over a network.
Unlike NFS, which works at the file system level, iSCSI works at the block device level.
.Pp
In iSCSI terminology, the system that shares the storage is known as the target.
The storage can be a physical disk, or an area representing multiple disks or a
portion of a physical disk.
For example, if the disk(s) are formatted with ZFS, a zvol can be created to use as the iSCSI storage.
.Pp
The clients which access the iSCSI storage are called initiators.
To initiators, the storage available through iSCSI appears as a raw, unformatted disk known as a LUN.
Device nodes for the disk appear in
.Pa /dev/
and the device must be separately formatted and mounted.
.Pp
FreeBSD provides a native, kernel-based iSCSI target and initiator.
This section describes how to configure a FreeBSD system as a target or an
initiator.
.Ss CONFIGURING AN ISCSI TARGET
.Pp
To configure an iSCSI target, create the
.Pa /etc/ctl.conf
configuration file, add a line to
.Pa /etc/rc.conf
to make sure the
.Xr ctld 8 daemon is automatically started at boot, and then start the daemon.
.Pp
The following is an example of a simple
.Pa /etc/ctl.conf
configuration file.
Refer to
.Xr ctl.conf 5 for a more complete description of this file's available options.
.Bd -literal -offset indent
portal-group pg0 {
	discovery-auth-group no-authentication
	listen 0.0.0.0
	listen [::]
}

target iqn.2012-06.com.example:target0 {
	auth-group no-authentication
	portal-group pg0

	lun 0 {
		path /data/target0-0
		size 4G
	}
}
.Ed
.Pp
The first entry defines the
.Ql pg0
portal group.
Portal groups define which network addresses the
.Xr ctld 8 daemon will listen on.
The
.Ql discovery-auth-group no-authentication
entry indicates that any initiator is allowed to perform iSCSI target discovery without authentication.
Lines three and four configure
.Xr ctld 8 to listen on all IPv4 (
.Ql listen 0.0.0.0
) and IPv6 (
.Ql listen [::]
) addresses on the default port of 3260.
.Pp
It is not necessary to define a portal group as there is a built-in portal
group called
.Ql default
.
In this case, the difference between
.Ql default
and
.Ql pg0
is that with
.Ql default
, target discovery is always denied, while with
.Ql pg0
, it is always allowed.
.Pp
The second entry defines a single target.
Target has two possible meanings: a machine serving iSCSI or a named group of LUNs.
This example uses the latter meaning, where
.Ql iqn.2012-06.com.example:target0
is the target name.
This target name is suitable for testing purposes.
For actual use, change
.Ql com.example
to the real domain name, reversed.
The
.Ql 2012-06
represents the year and month of acquiring control of that domain name, and
.Ql target0
can be any value.
Any number of targets can be defined in this configuration file.
.Pp
The
.Ql auth-group no-authentication
line allows all initiators to connect to the specified target and
.Ql portal-group pg0
makes the target reachable through the
.Ql pg0
portal group.
.Pp
The next section defines the LUN.
To the initiator, each LUN will be visible as a separate disk device.
Multiple LUNs can be defined for each target.
Each LUN is identified by a number, where LUN 0 is mandatory.
The
.Ql path /data/target0-0
line defines the full path to a file or zvol backing the LUN.
That path must exist before starting
.Xr ctld 8 .
The second line is optional and specifies the size of the LUN.
.Pp
Next, to make sure the
.Xr ctld 8 daemon is started at boot, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
ctld_enable="YES"
.Ed
.Pp
To start
.Xr ctld 8 now, run this command:
.Bd -literal -offset indent
# service ctld start
.Ed
.Pp
As the
.Xr ctld 8 daemon is started, it reads
.Pa /etc/ctl.conf
.
If this file is edited after the daemon starts, use this command so that the
changes take effect immediately:
.Bd -literal -offset indent
# service ctld reload
.Ed
.Ss AUTHENTICATION
.Pp
The previous example is inherently insecure as it uses no authentication,
granting anyone full access to all targets.
To require a username and password to access targets, modify the configuration
as follows:
.Bd -literal -offset indent
auth-group ag0 {
	chap username1 secretsecret
	chap username2 anothersecret
}

portal-group pg0 {
	discovery-auth-group no-authentication
	listen 0.0.0.0
	listen [::]
}

target iqn.2012-06.com.example:target0 {
	auth-group ag0
	portal-group pg0
	lun 0 {
		path /data/target0-0
		size 4G
	}
}
.Ed
.Pp
The
.Ql auth-group
section defines username and password pairs.
An initiator trying to connect to
.Ql iqn.2012-06.com.example:target0
must first specify a defined username and secret.
However, target discovery is still permitted without authentication.
To require target discovery authentication, set
.Ql discovery-auth-group
to a defined
.Ql auth-group
name instead of
.Ql no-authentication
.
.Pp
It is common to define a single exported target for every initiator.
As a shorthand for the syntax above, the username and password can be specified
directly in the target entry:
.Bd -literal -offset indent
target iqn.2012-06.com.example:target0 {
	portal-group pg0
	chap username1 secretsecret

	lun 0 {
		path /data/target0-0
		size 4G
	}
}
.Ed
.Ss CONFIGURING AN ISCSI INITIATOR
.Pp
The iSCSI initiator described in this section is supported starting with FreeBSD
10.0-RELEASE.
To use the iSCSI initiator available in older versions, refer to
.Xr iscontrol 8 .
.Pp
The iSCSI initiator requires that the
.Xr iscsid 8 daemon is running.
This daemon does not use a configuration file.
To start it automatically at boot, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
iscsid_enable="YES"
.Ed
.Pp
To start
.Xr iscsid 8 now, run this command:
.Bd -literal -offset indent
# service iscsid start
.Ed
.Pp
Connecting to a target can be done with or without an
.Pa /etc/iscsi.conf
configuration file.
This section demonstrates both types of connections.
.Ss CONNECTING TO A TARGET WITHOUT A CONFIGURATION FILE
.Pp
To connect an initiator to a single target, specify the IP address of the portal and the name of the target:
.Bd -literal -offset indent
# iscsictl -A -p 10.10.10.10 -t iqn.2012-06.com.example:target0
.Ed
.Pp
To verify if the connection succeeded, run
.Cm iscsictl
without any arguments.
The output should look similar to this:
.Bd -literal -offset indent
Target name                                     Target portal   State
iqn.2012-06.com.example:target0                 10.10.10.10     Connected: da0
.Ed
.Pp
In this example, the iSCSI session was successfully established, with
.Pa /dev/da0
representing the attached LUN.
If the
.Ql iqn.2012-06.com.example:target0
target exports more than one LUN, multiple device nodes will be shown in that section of the output:
.Bd -literal -offset indent
Connected: da0 da1 da2.
.Ed
.Pp
Any errors will be reported in the output, as well as the system logs.
For example, this message usually means that the
.Xr iscsid 8 daemon is not running:
.Bd -literal -offset indent
Target name                                     Target portal   State
iqn.2012-06.com.example:target0                 10.10.10.10     Waiting for iscsid(8)
.Ed
.Pp
The following message suggests a networking problem, such as a wrong IP address or port:
.Bd -literal -offset indent
Target name                                     Target portal   State
iqn.2012-06.com.example:target0                 10.10.10.11     Connection refused
.Ed
.Pp
This message means that the specified target name is wrong:
.Bd -literal -offset indent
Target name                                     Target portal   State
iqn.2012-06.com.example:target0                 10.10.10.10     Not found
.Ed
.Pp
This message means that the target requires authentication:
.Bd -literal -offset indent
Target name                                     Target portal   State
iqn.2012-06.com.example:target0                 10.10.10.10     Authentication failed
.Ed
.Pp
To specify a CHAP username and secret, use this syntax:
.Bd -literal -offset indent
# iscsictl -A -p 10.10.10.10 -t iqn.2012-06.com.example:target0 -u user -s secretsecret
.Ed
.Ss CONNECTING TO A TARGET WITH A CONFIGURATION FILE
.Pp
To connect using a configuration file, create
.Pa /etc/iscsi.conf
with contents like this:
.Bd -literal -offset indent
t0 {
	TargetAddress   = 10.10.10.10
	TargetName      = iqn.2012-06.com.example:target0
	AuthMethod      = CHAP
	chapIName       = user
	chapSecret      = secretsecret
}
.Ed
.Pp
The
.Ql t0
specifies a nickname for the configuration file section.
It will be used by the initiator to specify which configuration to use.
The other lines specify the parameters to use during connection.
The
.Ql TargetAddress
and
.Ql TargetName
are mandatory, whereas the other options are optional.
In this example, the CHAP username and secret are shown.
.Pp
To connect to the defined target, specify the nickname:
.Bd -literal -offset indent
# iscsictl -An t0
.Ed
.Pp
Alternately, to connect to all targets defined in the configuration file, use:
.Bd -literal -offset indent
# iscsictl -Aa
.Ed
.Pp
To make the initiator automatically connect to all targets in
.Pa /etc/iscsi.conf
, add the following to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
iscsictl_enable="YES"
iscsictl_flags="-Aa"
.Ed
.Ss SYNOPSIS
.Pp
Firewalls make it possible to filter the incoming and outgoing traffic that
flows through a system.
A firewall can use one or more sets of
.Do
rules
.Dc
to inspect network packets as they come in or go out of network connections and
either allows the traffic through or blocks it.
The rules of a firewall can inspect one or more characteristics of the packets
such as the protocol type, source or destination host address, and source or
destination port.
.Pp
Firewalls can enhance the security of a host or a network.
They can be used to do one or more of the following:
.Bl -bullet -offset -compact
.It
Protect and insulate the applications, services, and machines of an internal
network from unwanted traffic from the public Internet.
.It
Limit or disable access from hosts of the internal network to services of the
public Internet.
.It
Support network address translation (NAT), which allows an internal network to use private IP addresses and share a single connection to the public Internet using either a
single IP address or a shared pool of automatically assigned public addresses.
.El
.Pp
FreeBSD has three firewalls built into the base system: PF, IPFW, and IPFILTER, also known as IPF.
FreeBSD also provides two traffic shapers for controlling bandwidth usage:
.Xr altq 4 and
.Xr dummynet 4 .
 ALTQ has traditionally been closely tied with PF and dummynet with IPFW.
Each firewall uses rules to control the access of packets to and from a FreeBSD
system, although they go about it in different ways and each has a different
rule syntax.
.Pp
FreeBSD provides multiple firewalls in order to meet the different requirements
and preferences for a wide variety of users.
Each user should evaluate which firewall best meets their needs.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
How to define packet filtering rules.
.It
The differences between the firewalls built into FreeBSD.
.It
How to use and configure the PF firewall.
.It
How to use and configure the IPFW firewall.
.It
How to use and configure the IPFILTER firewall.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Understand basic FreeBSD and Internet concepts.
.El
.Pp
Since all firewalls are based on inspecting the values of selected packet
control fields, the creator of the firewall ruleset must have an understanding
of how TCP/IP works, what the different values in the packet control fields are, and how
these values are used in a normal session conversation.
For a good introduction, refer to Daryl's TCP/IP Primer.
.Ss FIREWALL CONCEPTS
.Pp
A ruleset contains a group of rules which pass or block packets based on the
values contained in the packet.
The bi-directional exchange of packets between hosts comprises a session
conversation.
The firewall ruleset processes both the packets arriving from the public
Internet, as well as the packets produced by the system as a response to them.
Each TCP/IP service is predefined by its protocol and listening port.
Packets destined for a specific service originate from the source address using
an unprivileged port and target the specific service port on the destination
address.
All the above parameters can be used as selection criteria to create rules
which will pass or block services.
.Pp
To lookup unknown port numbers, refer to
.Pa /etc/services
.
Alternatively, visit
.Lk http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
and do a port number lookup to find the purpose of a particular port number.
.Pp
Check out this link for port numbers used by Trojans
.Lk http://www.sans.org/security-resources/idfaq/oddports.php
.
.Pp
FTP has two modes: active mode and passive mode.
The difference is in how the data channel is acquired.
Passive mode is more secure as the data channel is acquired by the ordinal ftp
session requester.
For a good explanation of FTP and the different modes, see
.Lk http://www.slacksite.com/other/ftp.html
.
.Pp
A firewall ruleset can be either
.Do
exclusive
.Dc
or
.Do
inclusive
.Dc
.
An exclusive firewall allows all traffic through except for the traffic
matching the ruleset.
An inclusive firewall does the reverse as it only allows traffic matching the
rules through and blocks everything else.
.Pp
An inclusive firewall offers better control of the outgoing traffic, making it
a better choice for systems that offer services to the public Internet.
It also controls the type of traffic originating from the public Internet that
can gain access to a private network.
All traffic that does not match the rules is blocked and logged.
Inclusive firewalls are generally safer than exclusive firewalls because they
significantly reduce the risk of allowing unwanted traffic.
.Pp
Unless noted otherwise, all configuration and example rulesets in this chapter
create inclusive firewall rulesets.
.Pp
Security can be tightened further using a
.Do
stateful firewall
.Dc
.
This type of firewall keeps track of open connections and only allows traffic
which either matches an existing connection or opens a new, allowed connection.
.Pp
Stateful filtering treats traffic as a bi-directional exchange of packets
comprising a session.
When state is specified on a matching rule the firewall dynamically generates
internal rules for each anticipated packet being exchanged during the session.
It has sufficient matching capabilities to determine if a packet is valid for a
session.
Any packets that do not properly fit the session template are automatically
rejected.
.Pp
When the session completes, it is removed from the dynamic state table.
.Pp
Stateful filtering allows one to focus on blocking/passing new sessions.
If the new session is passed, all its subsequent packets are allowed
automatically and any impostor packets are automatically rejected.
If a new session is blocked, none of its subsequent packets are allowed.
Stateful filtering provides advanced matching abilities capable of defending
against the flood of different attack methods employed by attackers.
.Pp
NAT stands for Network Address Translation.
 NAT function enables the private LAN behind the firewall to share a single
ISP-assigned IP address, even if that address is dynamically assigned.
NAT allows each computer in the LAN to have Internet access, without having to
pay the ISP for multiple Internet accounts or IP addresses.
.Pp
NAT will automatically translate the private LAN IP address for each system on the
LAN to the single public IP address as packets exit the firewall bound for the
public Internet.
It also performs the reverse translation for returning packets.
.Pp
According to RFC 1918, the following IP address ranges are reserved for private
networks which will never be routed directly to the public Internet, and
therefore are available for use with NAT:
.Bl -bullet -offset -compact
.It
.Ql 10.0.0.0/8
.
.It
.Ql 172.16.0.0/12
.
.It
.Ql 192.168.0.0/16
.
.El
.Pp
When working with the firewall rules, be very careful.
Some configurations can lock the administrator out of the server.
To be on the safe side, consider performing the initial firewall configuration
from the local console rather than doing it remotely over ssh.
.Pp
Since FreeBSD 5.3, a ported version of OpenBSD's PF firewall has been included as an integrated part of the base system.
 PF is a complete, full-featured firewall that has optional support for ALTQ (Alternate Queuing), which provides Quality of Service (QoS).
.Pp
The OpenBSD Project maintains the definitive reference for PF in the PF FAQ.
Peter Hansteen maintains a thorough PF tutorial at http://home.nuug.no/~peter/pf/.
.Pp
When reading the PF FAQ, keep in mind that FreeBSD uses the same version of PF as OpenBSD 4.5.
.Pp
The FreeBSD packet filter mailing list is a good place to ask questions about configuring and running the PF firewall.
Check the mailing list archives before asking a question as it may have already
been answered.
.Pp
More information about porting PF to FreeBSD can be found at
.Lk http://pf4freebsd.love2party.net/
.
.Pp
This section of the Handbook focuses on PF as it pertains to FreeBSD.
It demonstrates how to enable PF and ALTQ.
It then provides several examples for creating rulesets on a FreeBSD system.
.Ss ENABLING PF
.Pp
In order to use PF, its kernel module must be first loaded.
This section describes the entries that can be added to
.Pa /etc/rc.conf
in order to enable PF.
.Pp
Start by adding the following line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
pf_enable="YES"
.Ed
.Pp
Additional options, described in
.Xr pfctl 8 , can be passed to PF when it is started.
Add this entry to
.Pa /etc/rc.conf
and specify any required flags between the two quotes (
.Ql ""
):
.Bd -literal -offset indent
pf_flags=""                     # additional flags for pfctl startup
.Ed
.Pp
PF will not start if it cannot find its ruleset configuration file.
The default ruleset is already created and is named
.Pa /etc/pf.conf
.
If a custom ruleset has been saved somewhere else, add a line to
.Pa /etc/rc.conf
which specifies the full path to the file:
.Bd -literal -offset indent
pf_rules="/path/to/pf.conf"
.Ed
.Pp
Logging support for PF is provided by
.Xr pflog 4 .
To enable logging support, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
pflog_enable="YES"
.Ed
.Pp
The following lines can also be added in order to change the default location
of the log file or to specify any additional flags to pass to
.Xr pflog 4 when it is started:
.Bd -literal -offset indent
pflog_logfile="/var/log/pflog"  # where pflogd should store the logfile
pflog_flags=""                  # additional flags for pflogd startup
.Ed
.Pp
Finally, if there is a LAN behind the firewall and packets need to be forwarded for the computers on the LAN, or NAT is required, add the following option:
.Bd -literal -offset indent
gateway_enable="YES"            # Enable as LAN gateway
.Ed
.Pp
After saving the needed edits, PF can be started with logging support by typing:
.Bd -literal -offset indent
# service pf start
# service pflog start
.Ed
.Pp
By default, PF reads its configuration rules from
.Pa /etc/pf.conf
and modifies, drops, or passes packets according to the rules or definitions
specified in this file.
The FreeBSD installation includes several sample files located in
.Pa /usr/share/examples/pf/
.
Refer to the PF FAQ for complete coverage of PF rulesets.
.Pp
To control PF, use
.Cm pfctl
.
 summarizes some useful options to this command.
Refer to
.Xr pfctl 8 for a description of all available options:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Command
.Ta
Purpose
.It
.Ta
.Cm pfctl -e
.Ta
Enable PF.
.It
.Ta
.Cm pfctl -d
.Ta
Disable PF.
.It
.Ta
.Cm pfctl -F all -f /etc/pf.conf
.Ta
Flush all NAT, filter, state, and table rules and reload
.Pa /etc/pf.conf
.
.It
.Ta
.Cm pfctl -s [ rules | nat | states ]
.Ta
Report on the filter rules, NAT rules, or state table.
.It
.Ta
.Cm pfctl -vnf /etc/pf.conf
.Ta
Check
.Pa /etc/pf.conf
for errors, but do not load ruleset.
.El
.Pp
.Ql security/sudo
is useful for running commands like
.Cm pfctl
that require elevated privileges.
It can be installed from the Ports Collection.
.Pp
To keep an eye on the traffic that passes through the PF firewall, consider installing the
.Ql sysutils/pftop
package or port.
Once installed, pftop can be run to view a running snapshot of traffic in a format which is similar
to
.Xr top 1 .
.Ss ENABLING ALTQ
.Pp
On FreeBSD, ALTQ can be used with PF to provide Quality of Service (QOS).
Once ALTQ is enabled, queues can be defined in the ruleset which determine the processing
priority of outbound packets.
.Pp
Before enabling ALTQ, refer to
.Xr altq 4 to determine if the drivers for the network cards installed on the system
support it.
.Pp
ALTQ is not available as a loadable kernel module.
If the system's interfaces support ALTQ, create a custom kernel using the instructions in .
The following kernel options are available.
The first is needed to enable ALTQ.
At least one of the other options is necessary to specify the queueing
scheduler algorithm:
.Bd -literal -offset indent
options         ALTQ
options         ALTQ_CBQ        # Class Based Queuing (CBQ)
options         ALTQ_RED        # Random Early Detection (RED)
options         ALTQ_RIO        # RED In/Out
options         ALTQ_HFSC       # Hierarchical Packet Scheduler (HFSC)
options         ALTQ_PRIQ       # Priority Queuing (PRIQ)
.Ed
.Pp
The following scheduler algorithms are available:
.Bl -tag -offset -compact
.It CBQ
Class Based Queuing (CBQ) is used to divide a connection's bandwidth into different classes or queues
to prioritize traffic based on filter rules.
.It RED
Random Early Detection (RED) is used to avoid network congestion by measuring the length of the queue and
comparing it to the minimum and maximum thresholds for the queue.
When the queue is over the maximum, all new packets are randomly dropped.
.It RIO
In Random Early Detection In and Out (RIO) mode, RED maintains multiple average queue lengths and multiple threshold values, one for
each QOS level.
.It HFSC
Hierarchical Fair Service Curve Packet Scheduler (HFSC) is described in
.Lk http://www-2.cs.cmu.edu/~hzhang/HFSC/main.html
.
.It PRIQ
Priority Queuing (PRIQ) always passes traffic that is in a higher queue first.
.El
.Pp
More information about the scheduling algorithms and example rulesets are
available at
.Lk http://www.openbsd.org/faq/pf/queueing.html
.
.Pp
This section demonstrates how to create a customized ruleset.
It starts with the simplest of rulesets and builds upon its concepts using
several examples to demonstrate real-world usage of PF's many features.
.Pp
The simplest possible ruleset is for a single machine that does not run any
services and which needs access to one network, which may be the Internet.
To create this minimal ruleset, edit
.Pa /etc/pf.conf
so it looks like this:
.Bd -literal -offset indent
block in all
pass out all keep state
.Ed
.Pp
The first rule denies all incoming traffic by default.
The second rule allows connections created by this system to pass out, while
retaining state information on those connections.
This state information allows return traffic for those connections to pass back
and should only be used on machines that can be trusted.
The ruleset can be loaded with:
.Bd -literal -offset indent
# pfctl -e ; pfctl -f /etc/pf.conf
.Ed
.Pp
In addition to keeping state, PF provides
.Ql lists
and
.Ql macros
which can be defined for use when creating rules.
Macros can include lists and need to be defined before use.
As an example, insert these lines at the very top of the ruleset:
.Bd -literal -offset indent
tcp_services = "{ ssh, smtp, domain, www, pop3, auth, pop3s }"
udp_services = "{ domain }"
.Ed
.Pp
PF understands port names as well as port numbers, as long as the names are listed
in
.Pa /etc/services
.
This example creates two macros.
The first is a list of seven TCP port names and the second is one UDP port name.
Once defined, macros can be used in rules.
In this example, all traffic is blocked except for the connections initiated by
this system for the seven specified TCP services and the one specified UDP service:
.Bd -literal -offset indent
tcp_services = "{ ssh, smtp, domain, www, pop3, auth, pop3s }"
udp_services = "{ domain }"
block all
pass out proto tcp to any port $tcp_services keep state
pass proto udp to any port $udp_services keep state
.Ed
.Pp
Even though UDP is considered to be a stateless protocol, PF is able to track some state information.
For example, when a UDP request is passed which asks a name server about a domain name, PF will watch for the response in order to pass it back.
.Pp
Whenever an edit is made to a ruleset, the new rules must be loaded so they can
be used:
.Bd -literal -offset indent
# pfctl -f /etc/pf.conf
.Ed
.Pp
If there are no syntax errors,
.Cm pfctl
will not output any messages during the rule load.
Rules can also be tested before attempting to load them:
.Bd -literal -offset indent
# pfctl -nf /etc/pf.conf
.Ed
.Pp
Including
.Ar -n
causes the rules to be interpreted only, but not loaded.
This provides an opportunity to correct any errors.
At all times, the last valid ruleset loaded will be enforced until either PF is disabled or a new ruleset is loaded.
.Pp
Adding
.Ar -v
to a
.Cm pfctl
ruleset verify or load will display the fully parsed rules exactly the way they
will be loaded.
This is extremely useful when debugging rules.
.Ss A SIMPLE GATEWAY WITH NAT
.Pp
This section demonstrates how to configure a FreeBSD system running PF to act as a gateway for at least one other machine.
The gateway needs at least two network interfaces, each connected to a separate
network.
In this example,
.Pa xl1
is connected to the Internet and
.Pa xl0
is connected to the internal network.
.Pp
First, enable the gateway in order to let the machine forward the network
traffic it receives on one interface to another interface.
This sysctl setting will forward IPv4 packets:
.Bd -literal -offset indent
# sysctl net.inet.ip.forwarding=1
.Ed
.Pp
To forward IPv6 traffic, use:
.Bd -literal -offset indent
# sysctl net.inet6.ip6.forwarding=1
.Ed
.Pp
To enable these settings at system boot, add the following to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
gateway_enable="YES"		#for ipv4
ipv6_gateway_enable="YES"	#for ipv6
.Ed
.Pp
Verify with
.Cm ifconfig
that both of the interfaces are up and running.
.Pp
Next, create the PF rules to allow the gateway to pass traffic.
While the following rule allows stateful traffic to pass from the Internet to
hosts on the network, the
.Ql to
keyword does not guarantee passage all the way from source to destination:
.Bd -literal -offset indent
pass in on xl1 from xl1:network to xl0:network port $ports keep state
.Ed
.Pp
That rule only lets the traffic pass in to the gateway on the internal
interface.
To let the packets go further, a matching rule is needed:
.Bd -literal -offset indent
pass out on xl0 from xl1:network to xl0:network port $ports keep state
.Ed
.Pp
While these two rules will work, rules this specific are rarely needed.
For a busy network admin, a readable ruleset is a safer ruleset.
The remainder of this section demonstrates how to keep the rules as simple as
possible for readability.
For example, those two rules could be replaced with one rule:
.Bd -literal -offset indent
pass from xl1:network to any port $ports keep state
.Ed
.Pp
The
.Ql interface:network
notation can be replaced with a macro to make the ruleset even more readable.
For example, a
.Ql $localnet
macro could be defined as the network directly attached to the internal
interface (
.Ql $xl1:network
).
Alternatively, the definition of
.Ql $localnet
could be changed to an IP address/netmask notation to denote a network, such as
.Ql 192.168.100.1/24
for a subnet of private addresses.
.Pp
If required,
.Ql $localnet
could even be defined as a list of networks.
Whatever the specific needs, a sensible
.Ql $localnet
definition could be used in a typical pass rule as follows:
.Bd -literal -offset indent
pass from $localnet to any port $ports keep state
.Ed
.Pp
The following sample ruleset allows all traffic initiated by machines on the
internal network.
It first defines two macros to represent the external and internal 3COM
interfaces of the gateway.
.Pp
For dialup users, the external interface will use
.Pa tun0
.
For an ADSL connection, specifically those using PPP over Ethernet (PPPoE), the correct external interface is
.Pa tun0
, not the physical Ethernet interface.
.Bd -literal -offset indent
ext_if = "xl0"	# macro for external interface - use tun0 for PPPoE
int_if = "xl1"	# macro for internal interface
localnet = $int_if:network
# ext_if IP address could be dynamic, hence ($ext_if)
nat on $ext_if from $localnet to any -> ($ext_if)
block all
pass from { lo0, $localnet } to any keep state
.Ed
.Pp
This ruleset introduces the
.Ql nat
rule which is used to handle the network address translation from the
non-routable addresses inside the internal network to the IP address assigned to the external interface.
The parentheses surrounding the last part of the nat rule
.Ql ($ext_if)
is included when the IP address of the external interface is dynamically assigned.
It ensures that network traffic runs without serious interruptions even if the
external IP address changes.
.Pp
Note that this ruleset probably allows more traffic to pass out of the network
than is needed.
One reasonable setup could create this macro:
.Bd -literal -offset indent
client_out = "{ ftp-data, ftp, ssh, domain, pop3, auth, nntp, http, \
    https, cvspserver, 2628, 5999, 8000, 8080 }"
.Ed
.Pp
to use in the main pass rule:
.Bd -literal -offset indent
pass inet proto tcp from $localnet to any port $client_out \
    flags S/SA keep state
.Ed
.Pp
A few other pass rules may be needed.
This one enables SSH on the external interface::
.Bd -literal -offset indent
pass in inet proto tcp to $ext_if port ssh
.Ed
.Pp
This macro definition and rule allows DNS and NTP for internal clients:
.Bd -literal -offset indent
udp_services = "{ domain, ntp }"
pass quick inet proto { tcp, udp } to any port $udp_services keep state
.Ed
.Pp
Note the
.Ql quick
keyword in this rule.
Since the ruleset consists of several rules, it is important to understand the
relationships between the rules in a ruleset.
Rules are evaluated from top to bottom, in the sequence they are written.
For each packet or connection evaluated by PF, the last matching rule in the ruleset is the one which is applied.
However, when a packet matches a rule which contains the
.Ql quick
keyword, the rule processing stops and the packet is treated according to that
rule.
This is very useful when an exception to the general rules is needed.
.Ss CREATING AN FTP PROXY
.Pp
Configuring working FTP rules can be problematic due to the nature of the FTP protocol.
 FTP pre-dates firewalls by several decades and is insecure in its design.
The most common points against using FTP include:
.Bl -bullet -offset -compact
.It
Passwords are transferred in the clear.
.It
The protocol demands the use of at least two TCP connections (control and data) on separate ports.
.It
When a session is established, data is communicated using randomly selected
ports.
.El
.Pp
All of these points present security challenges, even before considering any
potential security weaknesses in client or server software.
More secure alternatives for file transfer exist, such as
.Xr sftp 1 or
.Xr scp 1 , which both feature authentication and data transfer over encrypted
connections..
.Pp
For those situations when FTP is required, PF provides redirection of FTP traffic to a small proxy program called
.Xr ftp-proxy 8 , which is included in the base system of FreeBSD.
The role of the proxy is to dynamically insert and delete rules in the ruleset,
using a set of anchors, in order to correctly handle FTP traffic.
.Pp
To enable the FTP proxy, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
ftpproxy_enable="YES"
.Ed
.Pp
Then start the proxy by running
.Cm service ftp-proxy start
.
.Pp
For a basic configuration, three elements need to be added to
.Pa /etc/pf.conf
.
First, the anchors which the proxy will use to insert the rules it generates
for the FTP sessions:
.Bd -literal -offset indent
nat-anchor "ftp-proxy/*"
rdr-anchor "ftp-proxy/*"
.Ed
.Pp
Second, a pass rule is needed to allow FTP traffic in to the proxy.
.Pp
Third, redirection and NAT rules need to be defined before the filtering rules.
Insert this
.Ql rdr
rule immediately after the
.Ql nat
rule:
.Bd -literal -offset indent
rdr pass on $int_if proto tcp from any to any port ftp -> 127.0.0.1 port 8021
.Ed
.Pp
Finally, allow the redirected traffic to pass:
.Bd -literal -offset indent
pass out proto tcp from $proxy to any port ftp
.Ed
.Pp
where
.Ql $proxy
expands to the address the proxy daemon is bound to.
.Pp
Save
.Pa /etc/pf.conf
, load the new rules, and verify from a client that FTP connections are working:
.Bd -literal -offset indent
# pfctl -f /etc/pf.conf
.Ed
.Pp
This example covers a basic setup where the clients in the local network need
to contact FTP servers elsewhere.
This basic configuration should work well with most combinations of FTP clients and servers.
As shown in
.Xr ftp-proxy 8 , the proxy's behavior can be changed in various ways by adding options to the
.Ql ftpproxy_flags=
line.
Some clients or servers may have specific quirks that must be compensated for
in the configuration, or there may be a need to integrate the proxy in specific
ways such as assigning FTP traffic to a specific queue.
.Pp
For ways to run an FTP server protected by PF and
.Xr ftp-proxy 8 , configure a separate
.Cm ftp-proxy
in reverse mode, using
.Ar -R
, on a separate port with its own redirecting pass rule.
.Ss MANAGING ICMP
.Pp
Many of the tools used for debugging or troubleshooting a TCP/IP network rely on the Internet Control Message Protocol (ICMP), which was designed specifically with debugging in mind.
.Pp
The ICMP protocol sends and receives control messages between hosts and gateways, mainly to provide feedback to a sender about any
unusual or difficult conditions enroute to the target host.
Routers use ICMP to negotiate packet sizes and other transmission parameters in a process often
referred to as path MTU discovery.
.Pp
From a firewall perspective, some ICMP control messages are vulnerable to known attack vectors.
Also, letting all diagnostic traffic pass unconditionally makes debugging
easier, but it also makes it easier for others to extract information about the
network.
For these reasons, the following rule may not be optimal:
.Bd -literal -offset indent
pass inet proto icmp from any to any
.Ed
.Pp
One solution is to let all ICMP traffic from the local network through while stopping all probes from outside
the network:
.Bd -literal -offset indent
pass inet proto icmp from $localnet to any keep state
pass inet proto icmp from any to $ext_if keep state
.Ed
.Pp
Additional options are available which demonstrate some of PF's flexibility.
For example, rather than allowing all ICMP messages, one can specify the messages used by
.Xr ping 8 and
.Xr traceroute 8 .
Start by defining a macro for that type of message:
.Bd -literal -offset indent
icmp_types = "echoreq"
.Ed
.Pp
and a rule which uses the macro:
.Bd -literal -offset indent
pass inet proto icmp all icmp-type $icmp_types keep state
.Ed
.Pp
If other types of ICMP packets are needed, expand
.Ql icmp_types
to a list of those packet types.
Type
.Cm more /usr/src/contrib/pf/pfctl/pfctl_parser.c
to see the list of ICMP message types supported by PF.
Refer to http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml for an explanation of each message type.
.Pp
Since Unix
.Cm traceroute
uses UDP by default, another rule is needed to allow Unix
.Cm traceroute
:
.Bd -literal -offset indent
# allow out the default range for traceroute(8):
pass out on $ext_if inet proto udp from any to any port 33433 >< 33626 keep state
.Ed
.Pp
Since
.Cm TRACERT.EXE
on Microsoft Windows systems uses ICMP echo request messages, only the first rule is needed to allow network traces
from those systems.
Unix
.Cm traceroute
can be instructed to use other protocols as well, and will use ICMP echo request messages if
.Ar -I
is used.
Check the
.Xr traceroute 8 man page for details.
.Ss PATH MTU DISCOVERY
.Pp
Internet protocols are designed to be device independent, and one consequence
of device independence is that the optimal packet size for a given connection
cannot always be predicted reliably.
The main constraint on packet size is the
.Ql Maximum Transmission Unit
(MTU) which sets the upper limit on the packet size for an interface.
Type
.Cm ifconfig
to view the MTUs for a system's network interfaces.
.Pp
TCP/IP uses a process known as path MTU discovery to determine the right packet size for a connection.
This process sends packets of varying sizes with the
.Do
Do not fragment
.Dc
flag set, expecting an ICMP return packet of
.Do
type 3, code 4
.Dc
when the upper limit has been reached.
Type 3 means
.Do
destination unreachable
.Dc
, and code 4 is short for
.Do
fragmentation needed, but the do-not-fragment flag is set
.Dc
.
To allow path MTU discovery in order to support connections to other MTUs, add the
.Ql destination unreachable
type to the
.Ql icmp_types
macro:
.Bd -literal -offset indent
icmp_types = "{ echoreq, unreach }"
.Ed
.Pp
Since the pass rule already uses that macro, it does not need to be modified in
order to support the new ICMP type:
.Bd -literal -offset indent
pass inet proto icmp all icmp-type $icmp_types keep state
.Ed
.Pp
PF allows filtering on all variations of ICMP types and codes.
The list of possible types and codes are documented in
.Xr icmp 4 and
.Xr icmp6 4 .
.Ss USING TABLES
.Pp
Some types of data are relevant to filtering and redirection at a given time,
but their definition is too long to be included in the ruleset file.
 PF supports the use of tables, which are defined lists that can be manipulated
without needing to reload the entire ruleset, and which can provide fast
lookups.
Table names are always enclosed within
.Ql < >
, like this:
.Bd -literal -offset indent
table <clients> { 192.168.2.0/24, !192.168.2.5 }
.Ed
.Pp
In this example, the
.Ql 192.168.2.0/24
network is part of the table, except for the address
.Ql 192.168.2.5
, which is excluded using the
.Ql !
operator.
It is also possible to load tables from files where each item is on a separate
line, as seen in this example
.Pa /etc/clients
:
.Bd -literal -offset indent
192.168.2.0/24
!192.168.2.5
.Ed
.Pp
To refer to the file, define the table like this:
.Bd -literal -offset indent
table <clients> persist file "/etc/clients"
.Ed
.Pp
Once the table is defined, it can be referenced by a rule:
.Bd -literal -offset indent
pass inet proto tcp from <clients> to any port $client_out flags S/SA keep state
.Ed
.Pp
A table's contents can be manipulated live, using
.Cm pfctl
.
This example adds another network to the table:
.Bd -literal -offset indent
# pfctl -t clients -T add 192.168.1.0/16
.Ed
.Pp
Note that any changes made this way will take affect now, making them ideal for
testing, but will not survive a power failure or reboot.
To make the changes permanent, modify the definition of the table in the
ruleset or edit the file that the table refers to.
One can maintain the on-disk copy of the table using a
.Xr cron 8 job which dumps the table's contents to disk at regular intervals, using a
command such as
.Cm pfctl -t clients -T show >/etc/clients
.
Alternatively,
.Pa /etc/clients
can be updated with the in-memory table contents:
.Bd -literal -offset indent
# pfctl -t clients -T replace -f /etc/clients
.Ed
.Ss USING OVERLOAD TABLES TO PROTECT SSH
.Pp
Those who run SSH on an external interface have probably seen something like this in the
authentication logs:
.Bd -literal -offset indent
Sep 26 03:12:34 skapet sshd[25771]: Failed password for root from 200.72.41.31 port 40992 ssh2
Sep 26 03:12:34 skapet sshd[5279]: Failed password for root from 200.72.41.31 port 40992 ssh2
Sep 26 03:12:35 skapet sshd[5279]: Received disconnect from 200.72.41.31: 11: Bye Bye
Sep 26 03:12:44 skapet sshd[29635]: Invalid user admin from 200.72.41.31
Sep 26 03:12:44 skapet sshd[24703]: input_userauth_request: invalid user admin
Sep 26 03:12:44 skapet sshd[24703]: Failed password for invalid user admin from 200.72.41.31 port 41484 ssh2
.Ed
.Pp
This is indicative of a brute force attack where somebody or some program is
trying to discover the user name and password which will let them into the
system.
.Pp
If external SSH access is needed for legitimate users, changing the default port used by SSH can offer some protection.
However, PF provides a more elegant solution.
Pass rules can contain limits on what connecting hosts can do and violators can
be banished to a table of addresses which are denied some or all access.
It is even possible to drop all existing connections from machines which
overreach the limits.
.Pp
To configure this, create this table in the tables section of the ruleset:
.Bd -literal -offset indent
table <bruteforce> persist
.Ed
.Pp
Then, somewhere early in the ruleset, add rules to block brute access while
allowing legitimate access:
.Bd -literal -offset indent
block quick from <bruteforce>
pass inet proto tcp from any to $localnet port $tcp_services \
    flags S/SA keep state \
    (max-src-conn 100, max-src-conn-rate 15/5, \
    overload <bruteforce> flush global)
.Ed
.Pp
The part in parentheses defines the limits and the numbers should be changed to
meet local requirements.
It can be read as follows:
.Pp
.Ql max-src-conn
is the number of simultaneous connections allowed from one host.
.Pp
.Ql max-src-conn-rate
is the rate of new connections allowed from any single host (15) per number of seconds (5).
.Pp
.Ql overload <bruteforce>
means that any host which exceeds these limits gets its address added to the
.Ql bruteforce
table.
The ruleset blocks all traffic from addresses in the
.Ql bruteforce
table.
.Pp
Finally,
.Ql flush global
says that when a host reaches the limit, that all (
.Ql global
) of that host's connections will be terminated (
.Ql flush
).
.Pp
These rules will not block slow bruteforcers, as described in http://home.nuug.no/~peter/hailmary2013/.
.Pp
This example ruleset is intended mainly as an illustration.
For example, if a generous number of connections in general are wanted, but the
desire is to be more restrictive when it comes to ssh, supplement the rule above with something like the one below, early on in the
rule set:
.Bd -literal -offset indent
pass quick proto { tcp, udp } from any to any port ssh \
    flags S/SA keep state \
    (max-src-conn 15, max-src-conn-rate 5/3, \
    overload <bruteforce> flush global)
.Ed
.Ss IT MAY NOT BE NECESSARY TO BLOCK ALL OVERLOADERS
.Pp
It is worth noting that the overload mechanism is a general technique which
does not apply exclusively to SSH, and it is not always optimal to entirely block all traffic from offenders.
.Pp
For example, an overload rule could be used to protect a mail service or a web
service, and the overload table could be used in a rule to assign offenders to
a queue with a minimal bandwidth allocation or to redirect to a specific web
page.
.Pp
Over time, tables will be filled by overload rules and their size will grow
incrementally, taking up more memory.
Sometimes an IP address that is blocked is a dynamically assigned one, which has since been
assigned to a host who has a legitimate reason to communicate with hosts in the
local network.
.Pp
For situations like these, pfctl provides the ability to expire table entries.
For example, this command will remove
.Ql <bruteforce>
table entries which have not been referenced for
.Ql 86400
seconds:
.Bd -literal -offset indent
# pfctl -t bruteforce -T expire 86400
.Ed
.Pp
Similar functionality is provided by
.Ql security/expiretable
, which removes table entries which have not been accessed for a specified
period of time.
.Pp
Once installed, expiretable can be run to remove
.Ql <bruteforce>
table entries older than a specified age.
This example removes all entries older than 24 hours:
.Bd -literal -offset indent
/usr/local/sbin/expiretable -v -d -t 24h bruteforce
.Ed
.Ss PROTECTING AGAINST SPAM
.Pp
Not to be confused with the spamd daemon which comes bundled with spamassassin,
.Ql mail/spamd
can be configured with PF to provide an outer defense against SPAM.
This spamd hooks into the PF configuration using a set of redirections.
.Pp
Spammers tend to send a large number of messages, and SPAM is mainly sent from a few spammer friendly networks and a large number of
hijacked machines, both of which are reported to
.Ql blacklists
fairly quickly.
.Pp
When an SMTP connection from an address in a blacklist is received, spamd presents its banner and immediately switches to a mode where it answers SMTP traffic one byte at a time.
This technique, which is intended to waste as much time as possible on the
spammer's end, is called
.Ql tarpitting
.
The specific implementation which uses one byte SMTP replies is often referred to as
.Ql stuttering
.
.Pp
This example demonstrates the basic procedure for setting up spamd with automatically updated blacklists.
Refer to the man pages which are installed with
.Ql mail/spamd
for more information.
.Ss CONFIGURING SPAMD
.Pp
Install the
.Ql mail/spamd
package or port.
In order to use spamd's greylisting features,
.Xr fdescfs 5 must be mounted at
.Pa /dev/fd
.
Add the following line to
.Pa /etc/fstab
:
.Bd -literal -offset indent
 fdescfs /dev/fd fdescfs rw 0 0
.Ed
.Pp
Then, mount the filesystem:
.Bd -literal -offset indent
# mount fdescfs
.Ed
.Pp
Next, edit the PF ruleset to include:
.Bd -literal -offset indent
table <spamd> persist
table <spamd-white> persist
rdr pass on $ext_if inet proto tcp from <spamd> to \
    { $ext_if, $localnet } port smtp -> 127.0.0.1 port 8025
rdr pass on $ext_if inet proto tcp from !<spamd-white> to \
    { $ext_if, $localnet } port smtp -> 127.0.0.1 port 8025
.Ed
.Pp
The two tables
.Ql <spamd>
and
.Ql <spamd-white>
are essential.
 SMTP traffic from an address listed in
.Ql <spamd>
but not in
.Ql <spamd-white>
is redirected to the spamd daemon listening at port 8025.
.Pp
The next step is to configure spamd in
.Pa /usr/local/etc/spamd.conf
and to add some
.Pa rc.conf
parameters.
.Pp
The installation of
.Ql mail/spamd
includes a sample configuration file (
.Pa /usr/local/etc/spamd.conf.sample
) and a man page for
.Pa spamd.conf
.
Refer to these for additional configuration options beyond those shown in this
example.
.Pp
One of the first lines in the configuration file that does not begin with a
.Ql #
comment sign contains the block which defines the
.Ql all
list, which specifies the lists to use:
.Bd -literal -offset indent
all:\
    :traplist:whitelist:
.Ed
.Pp
This entry adds the desired blacklists, separated by colons (
.Ql :
).
To use a whitelist to subtract addresses from a blacklist, add the name of the
whitelist immediately after the name of that blacklist.
For example:
.Ql :blacklist:whitelist:
.
.Pp
This is followed by the specified blacklist's definition:
.Bd -literal -offset indent
traplist:\
    :black:\
    :msg="SPAM. Your address %A has sent spam within the last 24 hours":\
    :method=http:\
    :file=www.openbsd.org/spamd/traplist.gz
.Ed
.Pp
where the first line is the name of the blacklist and the second line specifies
the list type.
The
.Ql msg
field contains the message to display to blacklisted senders during the SMTP dialogue.
The
.Ql method
field specifies how spamd-setup fetches the list data; supported methods are
.Ql http
,
.Ql ftp
, from a
.Ql file
in a mounted file system, and via
.Ql exec
of an external program.
Finally, the
.Ql file
field specifies the name of the file spamd expects to receive.
.Pp
The definition of the specified whitelist is similar, but omits the
.Ql msg
field since a message is not needed:
.Bd -literal -offset indent
whitelist:\
    :white:\
    :method=file:\
    :file=/var/mail/whitelist.txt
.Ed
.Ss CHOOSE DATA SOURCES WITH CARE
.Pp
Using all the blacklists in the sample
.Pa spamd.conf
will blacklist large blocks of the Internet.
Administrators need to edit the file to create an optimal configuration which
uses applicable data sources and, when necessary, uses custom lists.
.Pp
Next, add this entry to
.Pa /etc/rc.conf
.
Additional flags are described in the man page specified by the comment:
.Bd -literal -offset indent
spamd_flags="-v" # use "" and see spamd-setup(8) for flags
.Ed
.Pp
When finished, reload the ruleset, start spamd by typing
.Cm service start obspamd
, and complete the configuration using
.Cm spamd-setup
.
Finally, create a
.Xr cron 8 job which calls
.Cm spamd-setup
to update the tables at reasonable intervals.
.Pp
On a typical gateway in front of a mail server, hosts will soon start getting
trapped within a few seconds to several minutes.
.Pp
PF also supports
.Ql greylisting
, which temporarily rejects messages from unknown hosts with 45n codes.
Messages from greylisted hosts which try again within a reasonable time are let
through.
Traffic from senders which are set up to behave within the limits set by RFC
1123 and RFC 2821 are immediately let through.
.Pp
More information about greylisting as a technique can be found at the greylisting.org web site.
The most amazing thing about greylisting, apart from its simplicity, is that it
still works.
Spammers and malware writers have been very slow to adapt in order to bypass
this technique.
.Pp
The basic procedure for configuring greylisting is as follows:
.Ss CONFIGURING GREYLISTING
.Pp
Make sure that
.Xr fdescfs 5 is mounted as described in Step 1 of the previous Procedure.
.Pp
To run spamd in greylisting mode, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
spamd_grey="YES"  # use spamd greylisting if YES
.Ed
.Pp
Refer to the spamd man page for descriptions of additional related parameters.
.Pp
To complete the greylisting setup:
.Bd -literal -offset indent
# service restart obspamd
# service start spamlogd
.Ed
.Pp
Behind the scenes, the spamdb database tool and the spamlogd whitelist updater perform essential functions for the greylisting feature.
 spamdb is the administrator's main interface to managing the black, grey, and white
lists via the contents of the
.Pa /var/db/spamdb
database.
.Ss NETWORK HYGIENE
.Pp
This section describes how
.Ql block-policy
,
.Ql scrub
, and
.Ql antispoof
can be used to make the ruleset behave sanely.
.Pp
The
.Ql block-policy
is an option which can be set in the
.Ql options
part of the ruleset, which precedes the redirection and filtering rules.
This option determines which feedback, if any, PF sends to hosts that are blocked by a rule.
The option has two possible values:
.Ql drop
drops blocked packets with no feedback, and
.Ql return
returns a status code such as
.Ql Connection refused
.
.Pp
If not set, the default policy is
.Ql drop
.
To change the
.Ql block-policy
, specify the desired value:
.Bd -literal -offset indent
set block-policy return
.Ed
.Pp
In PF,
.Ql scrub
is a keyword which enables network packet normalization.
This process reassembles fragmented packets and drops TCP packets that have
invalid flag combinations.
Enabling
.Ql scrub
provides a measure of protection against certain kinds of attacks based on
incorrect handling of packet fragments.
A number of options are available, but the simplest form is suitable for most
configurations:
.Bd -literal -offset indent
scrub in all
.Ed
.Pp
Some services, such as NFS, require specific fragment handling options.
Refer to https://home.nuug.no/~peter/pf/en/scrub.html for more information.
.Pp
This example reassembles fragments, clears the
.Do
do not fragment
.Dc
bit, and sets the maximum segment size to 1440 bytes:
.Bd -literal -offset indent
scrub in all fragment reassemble no-df max-mss 1440
.Ed
.Pp
The
.Ql antispoof
mechanism protects against activity from spoofed or forged IP addresses, mainly by blocking packets appearing on interfaces and in directions
which are logically not possible.
.Pp
These rules weed out spoofed traffic coming in from the rest of the world as
well as any spoofed packets which originate in the local network:
.Bd -literal -offset indent
antispoof for $ext_if
antispoof for $int_if
.Ed
.Ss HANDLING NON-ROUTABLE ADDRESSES
.Pp
Even with a properly configured gateway to handle network address translation,
one may have to compensate for other people's misconfigurations.
A common misconfiguration is to let traffic with non-routable addresses out to
the Internet.
Since traffic from non-routeable addresses can play a part in several DoS attack techniques, consider explicitly blocking traffic from non-routeable
addresses from entering the network through the external interface.
.Pp
In this example, a macro containing non-routable addresses is defined, then
used in blocking rules.
Traffic to and from these addresses is quietly dropped on the gateway's
external interface.
.Bd -literal -offset indent
martians = "{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, \
	      10.0.0.0/8, 169.254.0.0/16, 192.0.2.0/24, \
	      0.0.0.0/8, 240.0.0.0/4 }"

block drop in quick on $ext_if from $martians to any
block drop out quick on $ext_if from any to $martians
.Ed
.Ss IPFW
.Pp
IPFW is a stateful firewall written for FreeBSD which supports both IPv4 and IPv6.
It is comprised of several components: the kernel firewall filter rule
processor and its integrated packet accounting facility, the logging facility, NAT, the
.Xr dummynet 4 traffic shaper, a forward facility, a bridge facility, and an ipstealth
facility.
.Pp
FreeBSD provides a sample ruleset in
.Pa /etc/rc.firewall
which defines several firewall types for common scenarios to assist novice
users in generating an appropriate ruleset.
 IPFW provides a powerful syntax which advanced users can use to craft customized
rulesets that meet the security requirements of a given environment.
.Pp
This section describes how to enable IPFW, provides an overview of its rule syntax, and demonstrates several rulesets
for common configuration scenarios.
.Ss ENABLING IPFW
.Pp
IPFW is included in the basic FreeBSD install as a kernel loadable module, meaning
that a custom kernel is not needed in order to enable IPFW.
.Pp
For those users who wish to statically compile IPFW support into a custom kernel, refer to the instructions in .
The following options are available for the custom kernel configuration file:
.Bd -literal -offset indent
options    IPFIREWALL			# enables IPFW
options    IPFIREWALL_VERBOSE		# enables logging for rules with log keyword
options    IPFIREWALL_VERBOSE_LIMIT=5	# limits number of logged packets per-entry
options    IPFIREWALL_DEFAULT_TO_ACCEPT # sets default policy to pass what is not explicitly denied
options    IPDIVERT			# enables NAT
.Ed
.Pp
To configure the system to enable IPFW at boot time, add the following entry to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
firewall_enable="YES"
.Ed
.Pp
To use one of the default firewall types provided by FreeBSD, add another line
which specifies the type:
.Bd -literal -offset indent
firewall_type="open"
.Ed
.Pp
The available types are:
.Bl -bullet -offset -compact
.It
.Ql open
: passes all traffic.
.It
.Ql client
: protects only this machine.
.It
.Ql simple
: protects the whole network.
.It
.Ql closed
: entirely disables IP traffic except for the loopback interface.
.It
.Ql workstation
: protects only this machine using stateful rules.
.It
.Ql UNKNOWN
: disables the loading of firewall rules.
.It
.Pa filename
: full path of the file containing the firewall ruleset.
.El
.Pp
If
.Ql firewall_type
is set to either
.Ql client
or
.Ql simple
, modify the default rules found in
.Pa /etc/rc.firewall
to fit the configuration of the system.
.Pp
Note that the
.Ql filename
type is used to load a custom ruleset.
.Pp
An alternate way to load a custom ruleset is to set the
.Ql firewall_script
variable to the absolute path of an executable script that includes IPFW commands.
The examples used in this section assume that the
.Ql firewall_script
is set to
.Pa /etc/ipfw.rules
:
.Bd -literal -offset indent
firewall_script="/etc/ipfw.rules"
.Ed
.Pp
To enable logging, include this line:
.Bd -literal -offset indent
firewall_logging="YES"
.Ed
.Pp
There is no
.Pa /etc/rc.conf
variable to set logging limits.
To limit the number of times a rule is logged per connection attempt, specify
the number using this line in
.Pa /etc/sysctl.conf
:
.Bd -literal -offset indent
net.inet.ip.fw.verbose_limit=5
.Ed
.Pp
After saving the needed edits, start the firewall.
To enable logging limits now, also set the
.Cm sysctl
value specified above:
.Bd -literal -offset indent
# service ipfw start
# sysctl net.inet.ip.fw.verbose_limit=5
.Ed
.Ss IPFW RULE SYNTAX
.Pp
When a packet enters the IPFW firewall, it is compared against the first rule in the ruleset and progresses
one rule at a time, moving from top to bottom in sequence.
When the packet matches the selection parameters of a rule, the rule's action
is executed and the search of the ruleset terminates for that packet.
This is referred to as
.Do
first match wins
.Dc
.
If the packet does not match any of the rules, it gets caught by the mandatory IPFW default rule number 65535, which denies all packets and silently discards them.
However, if the packet matches a rule that contains the
.Ql count
,
.Ql skipto
, or
.Ql tee
keywords, the search continues.
Refer to
.Xr ipfw 8 for details on how these keywords affect rule processing.
.Pp
When creating an IPFW rule, keywords must be written in the following order.
Some keywords are mandatory while other keywords are optional.
The words shown in uppercase represent a variable and the words shown in
lowercase must precede the variable that follows it.
The
.Ql #
symbol is used to mark the start of a comment and may appear at the end of a
rule or on its own line.
Blank lines are ignored.
.Pp
CMD RULE_NUMBER set SET_NUMBER ACTION log LOG_AMOUNT PROTO from SRC SRC_PORT to
DST DST_PORT OPTIONS
.Pp
This section provides an overview of these keywords and their options.
It is not an exhaustive list of every possible option.
Refer to
.Xr ipfw 8 for a complete description of the rule syntax that can be used when creating IPFW rules.
.Bl -tag -offset -compact
.It CMD
Every rule must start with
.Ar ipfw add
.
.It RULE_NUMBER
Each rule is associated with a number from
.Ql 1
to
.Ql 65534
.
The number is used to indicate the order of rule processing.
Multiple rules can have the same number, in which case they are applied
according to the order in which they have been added.
.It SET_NUMBER
Each rule is associated with a set number from
.Ql 0
to
.Ql 31
.
Sets can be individually disabled or enabled, making it possible to quickly add
or delete a set of rules.
If a SET_NUMBER is not specified, the rule will be added to set
.Ql 0
.
.It ACTION
A rule can be associated with one of the following actions.
The specified action will be executed when the packet matches the selection
criterion of the rule.
.Ar allow | accept | pass | permit
: these keywords are equivalent and allow packets that match the rule.
.Ar check-state
: checks the packet against the dynamic state table.
If a match is found, execute the action associated with the rule which
generated this dynamic rule, otherwise move to the next rule.
A
.Ql check-state
rule does not have selection criterion.
If no
.Ql check-state
rule is present in the ruleset, the dynamic rules table is checked at the first
.Ql keep-state
or
.Ql limit
rule.
.Ar count
: updates counters for all packets that match the rule.
The search continues with the next rule.
.Ar deny | drop
: either word silently discards packets that match this rule.
Additional actions are available.
Refer to
.Xr ipfw 8 for details.
.It LOG_AMOUNT
When a packet matches a rule with the
.Ql log
keyword, a message will be logged to
.Xr syslogd 8 with a facility name of
.Ql SECURITY
.
Logging only occurs if the number of packets logged for that particular rule
does not exceed a specified LOG_AMOUNT.
If no LOG_AMOUNT is specified, the limit is taken from the value of
.Ev net.inet.ip.fw.verbose_limit
.
A value of zero removes the logging limit.
Once the limit is reached, logging can be re-enabled by clearing the logging
counter or the packet counter for that rule, using
.Cm ipfw resetlog
.
Logging is done after all other packet matching conditions have been met, and
before performing the final action on the packet.
The administrator decides which rules to enable logging on.
.It PROTO
This optional value can be used to specify any protocol name or number found in
.Pa /etc/protocols
.
.It SRC
The
.Ql from
keyword must be followed by the source address or a keyword that represents the
source address.
An address can be represented by
.Ql any
,
.Ql me
(any address configured on an interface on this system),
.Ql me6
, (any IPv6 address configured on an interface on this system), or
.Ql table
followed by the number of a lookup table which contains a list of addresses.
When specifying an IP address, it can be optionally followed by its CIDR mask or subnet mask.
For example,
.Ql 1.2.3.4/25
or
.Ql 1.2.3.4:255.255.255.128
.
.It SRC_PORT
An optional source port can be specified using the port number or name from
.Pa /etc/services
.
.It DST
The
.Ql to
keyword must be followed by the destination address or a keyword that
represents the destination address.
The same keywords and addresses described in the SRC section can be used to
describe the destination.
.It DST_PORT
An optional destination port can be specified using the port number or name
from
.Pa /etc/services
.
.It OPTIONS
Several keywords can follow the source and destination.
As the name suggests, OPTIONS are optional.
Commonly used options include
.Ql in
or
.Ql out
, which specify the direction of packet flow,
.Ql icmptypes
followed by the type of ICMP message, and
.Ql keep-state
.
When a
.Ar keep-state
rule is matched, the firewall will create a dynamic rule which matches
bidirectional traffic between the source and destination addresses and ports
using the same protocol.
The dynamic rules facility is vulnerable to resource depletion from a SYN-flood
attack which would open a huge number of dynamic rules.
To counter this type of attack with IPFW, use
.Ql limit
.
This option limits the number of simultaneous sessions by checking the open
dynamic rules, counting the number of times this rule and IP address combination occurred.
If this count is greater than the value specified by
.Ql limit
, the packet is discarded.
Dozens of OPTIONS are available.
Refer to
.Xr ipfw 8 for a description of each available option.
.El
.Ss EXAMPLE RULESET
.Pp
This section demonstrates how to create an example stateful firewall ruleset
script named
.Pa /etc/ipfw.rules
.
In this example, all connection rules use
.Ql in
or
.Ql out
to clarify the direction.
They also use
.Ql via
interface-name to specify the interface the packet is traveling over.
.Pp
When first creating or testing a firewall ruleset, consider temporarily setting
this tunable:
.Bd -literal -offset indent
net.inet.ip.fw.default_to_accept="1"
.Ed
.Pp
This sets the default policy of
.Xr ipfw 8 to be more permissive than the default
.Ql deny ip from any to any
, making it slightly more difficult to get locked out of the system right after
a reboot.
.Pp
The firewall script begins by indicating that it is a Bourne shell script and
flushes any existing rules.
It then creates the
.Ql cmd
variable so that
.Ql ipfw add
does not have to be typed at the beginning of every rule.
It also defines the
.Ql pif
variable which represents the name of the interface that is attached to the
Internet.
.Bd -literal -offset indent
#!/bin/sh
# Flush out the list before we begin.
ipfw -q -f flush

# Set rules command prefix
cmd="ipfw -q add"
pif="dc0"     # interface name of NIC attached to Internet
.Ed
.Pp
The first two rules allow all traffic on the trusted internal interface and on
the loopback interface:
.Bd -literal -offset indent
# Change xl0 to LAN NIC interface name
$cmd 00005 allow all from any to any via xl0

# No restrictions on Loopback Interface
$cmd 00010 allow all from any to any via lo0
.Ed
.Pp
The next rule allows the packet through if it matches an existing entry in the
dynamic rules table:
.Bd -literal -offset indent
$cmd 00101 check-state
.Ed
.Pp
The next set of rules defines which stateful connections internal systems can
create to hosts on the Internet:
.Bd -literal -offset indent
# Allow access to public DNS
# Replace x.x.x.x with the IP address of a public DNS server
# and repeat for each DNS server in /etc/resolv.conf
$cmd 00110 allow tcp from any to x.x.x.x 53 out via $pif setup keep-state
$cmd 00111 allow udp from any to x.x.x.x 53 out via $pif keep-state

# Allow access to ISP's DHCP server for cable/DSL configurations.
# Use the first rule and check log for IP address.
# Then, uncomment the second rule, input the IP address, and delete the first rule
$cmd 00120 allow log udp from any to any 67 out via $pif keep-state
#$cmd 00120 allow udp from any to x.x.x.x 67 out via $pif keep-state

# Allow outbound HTTP and HTTPS connections
$cmd 00200 allow tcp from any to any 80 out via $pif setup keep-state
$cmd 00220 allow tcp from any to any 443 out via $pif setup keep-state

# Allow outbound email connections
$cmd 00230 allow tcp from any to any 25 out via $pif setup keep-state
$cmd 00231 allow tcp from any to any 110 out via $pif setup keep-state

# Allow outbound ping
$cmd 00250 allow icmp from any to any out via $pif keep-state

# Allow outbound NTP
$cmd 00260 allow udp from any to any 123 out via $pif keep-state

# Allow outbound SSH
$cmd 00280 allow tcp from any to any 22 out via $pif setup keep-state

# deny and log all other outbound connections
$cmd 00299 deny log all from any to any out via $pif
.Ed
.Pp
The next set of rules controls connections from Internet hosts to the internal
network.
It starts by denying packets typically associated with attacks and then
explicitly allows specific types of connections.
All the authorized services that originate from the Internet use
.Ql limit
to prevent flooding.
.Bd -literal -offset indent
# Deny all inbound traffic from non-routable reserved address spaces
$cmd 00300 deny all from 192.168.0.0/16 to any in via $pif     #RFC 1918 private IP
$cmd 00301 deny all from 172.16.0.0/12 to any in via $pif      #RFC 1918 private IP
$cmd 00302 deny all from 10.0.0.0/8 to any in via $pif         #RFC 1918 private IP
$cmd 00303 deny all from 127.0.0.0/8 to any in via $pif        #loopback
$cmd 00304 deny all from 0.0.0.0/8 to any in via $pif          #loopback
$cmd 00305 deny all from 169.254.0.0/16 to any in via $pif     #DHCP auto-config
$cmd 00306 deny all from 192.0.2.0/24 to any in via $pif       #reserved for docs
$cmd 00307 deny all from 204.152.64.0/23 to any in via $pif    #Sun cluster interconnect
$cmd 00308 deny all from 224.0.0.0/3 to any in via $pif        #Class D & E multicast

# Deny public pings
$cmd 00310 deny icmp from any to any in via $pif

# Deny ident
$cmd 00315 deny tcp from any to any 113 in via $pif

# Deny all Netbios services.
$cmd 00320 deny tcp from any to any 137 in via $pif
$cmd 00321 deny tcp from any to any 138 in via $pif
$cmd 00322 deny tcp from any to any 139 in via $pif
$cmd 00323 deny tcp from any to any 81 in via $pif

# Deny fragments
$cmd 00330 deny all from any to any frag in via $pif

# Deny ACK packets that did not match the dynamic rule table
$cmd 00332 deny tcp from any to any established in via $pif

# Allow traffic from ISP's DHCP server.
# Replace x.x.x.x with the same IP address used in rule 00120.
#$cmd 00360 allow udp from any to x.x.x.x 67 in via $pif keep-state

# Allow HTTP connections to internal web server
$cmd 00400 allow tcp from any to me 80 in via $pif setup limit src-addr 2

# Allow inbound SSH connections
$cmd 00410 allow tcp from any to me 22 in via $pif setup limit src-addr 2

# Reject and log all other incoming connections
$cmd 00499 deny log all from any to any in via $pif
.Ed
.Pp
The last rule logs all packets that do not match any of the rules in the
ruleset:
.Bd -literal -offset indent
# Everything else is denied and logged
$cmd 00999 deny log all from any to any
.Ed
.Pp
FreeBSD's built-in NAT daemon,
.Xr natd 8 , works in conjunction with IPFW to provide network address translation.
This can be used to provide an Internet Connection Sharing solution so that
several internal computers can connect to the Internet using a single IP address.
.Pp
To do this, the FreeBSD machine connected to the Internet must act as a
gateway.
This system must have two NICs, where one is connected to the Internet and the other is connected to the
internal LAN.
Each machine connected to the LAN should be assigned an IP address in the private network space, as defined by RFC 1918, and have the default gateway set to the
.Xr natd 8 system's internal IP address.
.Pp
Some additional configuration is needed in order to activate the NAT function of IPFW.
If the system has a custom kernel, the kernel configuration file needs to
include
.Ql option IPDIVERT
along with the other
.Ql IPFIREWALL
options described in .
.Pp
To enable NAT support at boot time, the following must be in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
gateway_enable="YES"		# enables the gateway
natd_enable="YES"		# enables NAT
natd_interface="rl0"		# specify interface name of NIC attached to Internet
natd_flags="-dynamic -m"	# -m = preserve port numbers; additional options are listed in
.Xr natd 8
.Ed
.Pp
It is also possible to specify a configuration file which contains the options
to pass to
.Xr natd 8 :
.Bd -literal -offset indent
natd_flags="-f /etc/natd.conf"
.Ed
.Pp
The specified file must contain a list of configuration options, one per line.
For example:
.Bd -literal -offset indent
redirect_port tcp 192.168.0.2:6667 6667
redirect_port tcp 192.168.0.3:80 80
.Ed
.Pp
For more information about this configuration file, consult
.Xr natd 8 .
.Pp
Next, add the NAT rules to the firewall ruleset.
When the rulest contains stateful rules, the positioning of the NAT rules is critical and the
.Ql skipto
action is used.
The
.Ql skipto
action requires a rule number so that it knows which rule to jump to.
.Pp
The following example builds upon the firewall ruleset shown in the previous
section.
It adds some additional entries and modifies some existing rules in order to
configure the firewall for NAT.
It starts by adding some additional variables which represent the rule number
to skip to, the
.Ql keep-state
option, and a list of TCP ports which will be used to reduce the number of rules:
.Bd -literal -offset indent
#!/bin/sh
ipfw -q -f flush
cmd="ipfw -q add"
skip="skipto 500"
pif=dc0
ks="keep-state"
good_tcpo="22,25,37,53,80,443,110"
.Ed
.Pp
The inbound NAT rule is inserted after the two rules which allow all traffic on the trusted internal interface and on
the loopback interface and before the
.Ql check-state
rule.
It is important that the rule number selected for this NAT rule, in this example
.Ql 100
, is higher than the first two rules and lower than the
.Ql check-state
rule:
.Bd -literal -offset indent
$cmd 005 allow all from any to any via xl0  # exclude LAN traffic
$cmd 010 allow all from any to any via lo0  # exclude loopback traffic
$cmd 100 divert natd ip from any to any in via $pif # NAT any inbound packets
# Allow the packet through if it has an existing entry in the dynamic rules table
$cmd 101 check-state
.Ed
.Pp
The outbound rules are modified to replace the
.Ql allow
action with the
.Ql $skip
variable, indicating that rule processing will continue at rule
.Ql 500
.
The seven
.Ql tcp
rules have been replaced by rule
.Ql 125
as the
.Ql $good_tcpo
variable contains the seven allowed outbound ports.
.Bd -literal -offset indent
# Authorized outbound packets
$cmd 120 $skip udp from any to x.x.x.x 53 out via $pif $ks
$cmd 121 $skip udp from any to x.x.x.x 67 out via $pif $ks
$cmd 125 $skip tcp from any to any $good_tcpo out via $pif setup $ks
$cmd 130 $skip icmp from any to any out via $pif $ks
.Ed
.Pp
The inbound rules remain the same, except for the very last rule which removes
the
.Ql via $pif
in order to catch both inbound and outbound rules.
The NAT rule must follow this last outbound rule, must have a higher number than that
last rule, and the rule number must be referenced by the
.Ql skipto
action.
In this ruleset, rule number
.Ql 500
diverts all packets which match the outbound rules to
.Xr natd 8 for NAT processing.
The next rule allows any packet which has undergone NAT processing to pass.
.Bd -literal -offset indent
$cmd 499 deny log all from any to any
$cmd 500 divert natd ip from any to any out via $pif # skipto location for outbound stateful rules
$cmd 510 allow ip from any to any
.Ed
.Pp
In this example, rules
.Ql 100
,
.Ql 101
,
.Ql 125
,
.Ql 500
, and
.Ql 510
control the address translation of the outbound and inbound packets so that the
entries in the dynamic state table always register the private LAN  IP address.
.Pp
Consider an internal web browser which initializes a new outbound HTTP session over port 80.
When the first outbound packet enters the firewall, it does not match rule
.Ql 100
because it is headed out rather than in.
It passes rule
.Ql 101
because this is the first packet and it has not been posted to the dynamic
state table yet.
The packet finally matches rule
.Ql 125
as it is outbound on an allowed port and has a source IP address from the internal LAN.
On matching this rule, two actions take place.
First, the
.Ql keep-state
action adds an entry to the dynamic state table and the specified action,
.Ql skipto rule 500
, is executed.
Next, the packet undergoes NAT and is sent out to the Internet.
This packet makes its way to the destination web server, where a response
packet is generated and sent back.
This new packet enters the top of the ruleset.
It matches rule
.Ql 100
and has its destination IP address mapped back to the original internal address.
It then is processed by the
.Ql check-state
rule, is found in the table as an existing session, and is released to the LAN.
.Pp
On the inbound side, the ruleset has to deny bad packets and allow only
authorized services.
A packet which matches an inbound rule is posted to the dynamic state table and
the packet is released to the LAN.
The packet generated as a response is recognized by the
.Ql check-state
rule as belonging to an existing session.
It is then sent to rule
.Ql 500
to undergo NAT before being released to the outbound interface.
.Ss PORT REDIRECTION
.Pp
The drawback with
.Xr natd 8 is that the LAN clients are not accessible from the Internet.
Clients on the LAN can make outgoing connections to the world but cannot receive incoming ones.
This presents a problem if trying to run Internet services on one of the LAN client machines.
A simple way around this is to redirect selected Internet ports on the
.Xr natd 8 machine to a LAN client.
.Pp
For example, an IRC server runs on client
.Ql A
and a web server runs on client
.Ql B
.
For this to work properly, connections received on ports 6667 (IRC) and 80 (HTTP) must be redirected to the respective machines.
.Pp
The syntax for
.Ar -redirect_port
is as follows:
.Bd -literal -offset indent
     -redirect_port proto targetIP:targetPORT[-targetPORT]
                 [aliasIP:]aliasPORT[-aliasPORT]
                 [remoteIP[:remotePORT[-remotePORT]]]
.Ed
.Pp
In the above example, the argument should be:
.Bd -literal -offset indent
    -redirect_port tcp 192.168.0.2:6667 6667
    -redirect_port tcp 192.168.0.3:80 80
.Ed
.Pp
This redirects the proper TCP ports to the LAN client machines.
.Pp
Port ranges over individual ports can be indicated with
.Ar -redirect_port
.
For example, tcp 192.168.0.2:2000-3000 2000-3000 would redirect all connections received on ports 2000 to 3000 to ports 2000 to
3000 on client
.Ql A
.
.Pp
These options can be used when directly running
.Xr natd 8 , placed within the
.Ql natd_flags=""
option in
.Pa /etc/rc.conf
, or passed via a configuration file.
.Pp
For further configuration options, consult
.Xr natd 8
.Ss ADDRESS REDIRECTION
.Pp
Address redirection is useful if more than one IP address is available.
Each LAN client can be assigned its own external IP address by
.Xr natd 8 , which will then rewrite outgoing packets from the LAN clients with the proper external IP address and redirects all traffic incoming on that particular IP address back to the specific LAN client.
This is also known as static NAT.
For example, if IP addresses
.Ql 128.1.1.1
,
.Ql 128.1.1.2
, and
.Ql 128.1.1.3
are available,
.Ql 128.1.1.1
can be used as the
.Xr natd 8 machine's external IP address, while
.Ql 128.1.1.2
and
.Ql 128.1.1.3
are forwarded back to LAN clients
.Ql A
and
.Ql B
.
.Pp
The
.Ar -redirect_address
syntax is as follows:
.Bd -literal -offset indent
-redirect_address localIP publicIP
.Ed
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
localIP
.Ta
The internal IP address of the LAN client.
.It
.Ta
publicIP
.Ta
The external IP address corresponding to the LAN client.
.El
.Pp
In the example, this argument would read:
.Bd -literal -offset indent
-redirect_address 192.168.0.2 128.1.1.2
-redirect_address 192.168.0.3 128.1.1.3
.Ed
.Pp
Like
.Ar -redirect_port
, these arguments are placed within the
.Ql natd_flags=""
option of
.Pa /etc/rc.conf
, or passed via a configuration file.
With address redirection, there is no need for port redirection since all data
received on a particular IP address is redirected.
.Pp
The external IP addresses on the
.Xr natd 8 machine must be active and aliased to the external interface.
Refer to
.Xr rc.conf 5 for details.
.Ss THE IPFW COMMAND
.Pp
.Cm ipfw
can be used to make manual, single rule additions or deletions to the active
firewall while it is running.
The problem with using this method is that all the changes are lost when the
system reboots.
It is recommended to instead write all the rules in a file and to use that file
to load the rules at boot time and to replace the currently running firewall
rules whenever that file changes.
.Pp
.Cm ipfw
is a useful way to display the running firewall rules to the console screen.
The IPFW accounting facility dynamically creates a counter for each rule that counts
each packet that matches the rule.
During the process of testing a rule, listing the rule with its counter is one
way to determine if the rule is functioning as expected.
.Pp
To list all the running rules in sequence:
.Bd -literal -offset indent
# ipfw list
.Ed
.Pp
To list all the running rules with a time stamp of when the last time the rule
was matched:
.Bd -literal -offset indent
# ipfw -t list
.Ed
.Pp
The next example lists accounting information and the packet count for matched
rules along with the rules themselves.
The first column is the rule number, followed by the number of matched packets
and bytes, followed by the rule itself.
.Bd -literal -offset indent
# ipfw -a list
.Ed
.Pp
To list dynamic rules in addition to static rules:
.Bd -literal -offset indent
# ipfw -d list
.Ed
.Pp
To also show the expired dynamic rules:
.Bd -literal -offset indent
# ipfw -d -e list
.Ed
.Pp
To zero the counters:
.Bd -literal -offset indent
# ipfw zero
.Ed
.Pp
To zero the counters for just the rule with number NUM:
.Bd -literal -offset indent
# ipfw zero NUM
.Ed
.Ss LOGGING FIREWALL MESSAGES
.Pp
Even with the logging facility enabled, IPFW will not generate any rule logging on its own.
The firewall administrator decides which rules in the ruleset will be logged,
and adds the
.Ql log
keyword to those rules.
Normally only deny rules are logged.
It is customary to duplicate the
.Do
ipfw default deny everything
.Dc
rule with the
.Ql log
keyword included as the last rule in the ruleset.
This way, it is possible to see all the packets that did not match any of the
rules in the ruleset.
.Pp
Logging is a two edged sword.
If one is not careful, an over abundance of log data or a DoS attack can fill
the disk with log files.
Log messages are not only written to syslogd, but also are displayed on the root console screen and soon become annoying.
.Pp
The
.Ql IPFIREWALL_VERBOSE_LIMIT=5
kernel option limits the number of consecutive messages sent to
.Xr syslogd 8 , concerning the packet matching of a given rule.
When this option is enabled in the kernel, the number of consecutive messages
concerning a particular rule is capped at the number specified.
There is nothing to be gained from 200 identical log messages.
With this option set to five, five consecutive messages concerning a particular
rule would be logged to syslogd and the remainder identical consecutive messages would be counted and posted to syslogd with a phrase like the following:
.Bd -literal -offset indent
last message repeated 45 times
.Ed
.Pp
All logged packets messages are written by default to
.Pa /var/log/security
, which is defined in
.Pa /etc/syslog.conf
.
.Ss BUILDING A RULE SCRIPT
.Pp
Most experienced IPFW users create a file containing the rules and code them in a manner compatible
with running them as a script.
The major benefit of doing this is the firewall rules can be refreshed in mass
without the need of rebooting the system to activate them.
This method is convenient in testing new rules as the procedure can be executed
as many times as needed.
Being a script, symbolic substitution can be used for frequently used values to
be substituted into multiple rules.
.Pp
This example script is compatible with the syntax used by the
.Xr sh 1 ,
.Xr csh 1 , and
.Xr tcsh 1 shells.
Symbolic substitution fields are prefixed with a dollar sign ($).
Symbolic fields do not have the $ prefix.
The value to populate the symbolic field must be enclosed in double quotes
("").
.Pp
Start the rules file like this:
.Bd -literal -offset indent
############### start of example ipfw rules script #############
#
ipfw -q -f flush       # Delete all rules
# Set defaults
oif="tun0"             # out interface
odns="192.0.2.11"      # ISP's DNS server IP address
cmd="ipfw -q add "     # build rule prefix
ks="keep-state"        # just too lazy to key this each time
$cmd 00500 check-state
$cmd 00502 deny all from any to any frag
$cmd 00501 deny tcp from any to any established
$cmd 00600 allow tcp from any to any 80 out via $oif setup $ks
$cmd 00610 allow tcp from any to $odns 53 out via $oif setup $ks
$cmd 00611 allow udp from any to $odns 53 out via $oif $ks
################### End of example ipfw rules script ############
.Ed
.Pp
The rules are not important as the focus of this example is how the symbolic
substitution fields are populated.
.Pp
If the above example was in
.Pa /etc/ipfw.rules
, the rules could be reloaded by the following command:
.Bd -literal -offset indent
# sh /etc/ipfw.rules
.Ed
.Pp
.Pa /etc/ipfw.rules
can be located anywhere and the file can have any name.
.Pp
The same thing could be accomplished by running these commands by hand:
.Bd -literal -offset indent
# ipfw -q -f flush
# ipfw -q add check-state
# ipfw -q add deny all from any to any frag
# ipfw -q add deny tcp from any to any established
# ipfw -q add allow tcp from any to any 80 out via tun0 setup keep-state
# ipfw -q add allow tcp from any to 192.0.2.11 53 out via tun0 setup keep-state
# ipfw -q add 00611 allow udp from any to 192.0.2.11 53 out via tun0 keep-state
.Ed
.Ss IPFILTER (IPF)
.Pp
IPFILTER, also known as IPF, is a cross-platform, open source firewall which has been ported to several
operating systems, including FreeBSD, NetBSD, OpenBSD, and Solaris.
.Pp
IPFILTER is a kernel-side firewall and NAT mechanism that can be controlled and monitored by userland programs.
Firewall rules can be set or deleted using ipf, NAT rules can be set or deleted using ipnat, run-time statistics for the kernel parts of IPFILTER can be printed using ipfstat, and ipmon can be used to log IPFILTER actions to the system log files.
.Pp
IPF was originally written using a rule processing logic of
.Do
the last matching rule wins
.Dc
and only used stateless rules.
Since then, IPF has been enhanced to include the
.Ql quick
and
.Ql keep state
options.
.Pp
The IPF FAQ is at
.Lk http://www.phildev.net/ipf/index.html
.
A searchable archive of the IPFilter mailing list is available at
.Lk http://marc.info/?l=ipfilter
.
.Pp
This section of the Handbook focuses on IPF as it pertains to FreeBSD.
It provides examples of rules that contain the
.Ql quick
and
.Ql keep state
options.
.Ss ENABLING IPF
.Pp
IPF is included in the basic FreeBSD install as a kernel loadable module, meaning
that a custom kernel is not needed in order to enable IPF.
.Pp
For users who prefer to statically compile IPF support into a custom kernel, refer to the instructions in .
The following kernel options are available:
.Bd -literal -offset indent
options IPFILTER
options IPFILTER_LOG
options IPFILTER_LOOKUP
options IPFILTER_DEFAULT_BLOCK
.Ed
.Pp
where
.Ql options IPFILTER
enables support for IPFILTER,
.Ql options IPFILTER_LOG
enables IPF logging using the
.Pa ipl
packet logging pseudo-device for every rule that has the
.Ql log
keyword,
.Ql IPFILTER_LOOKUP
enables IP pools in order to speed up IP lookups, and
.Ql options IPFILTER_DEFAULT_BLOCK
changes the default behavior so that any packet not matching a firewall
.Ql pass
rule gets blocked.
.Pp
To configure the system to enable IPF at boot time, add the following entries to
.Pa /etc/rc.conf
.
These entries will also enable logging and
.Ql default pass all
.
To change the default policy to
.Ql block all
without compiling a custom kernel, remember to add a
.Ql block all
rule at the end of the ruleset.
.Bd -literal -offset indent
ipfilter_enable="YES"             # Start ipf firewall
ipfilter_rules="/etc/ipf.rules"   # loads rules definition text file
ipmon_enable="YES"                # Start IP monitor log
ipmon_flags="-Ds"                 # D = start as daemon
                                  # s = log to syslog
                                  # v = log tcp window, ack, seq
                                  # n = map IP & port to names
.Ed
.Pp
If NAT functionality is needed, also add these lines:
.Bd -literal -offset indent
gateway_enable="YES"              # Enable as LAN gateway
ipnat_enable="YES"                # Start ipnat function
ipnat_rules="/etc/ipnat.rules"    # rules definition file for ipnat
.Ed
.Pp
Then, to start IPF now:
.Bd -literal -offset indent
# service ipfilter start
.Ed
.Pp
To load the firewall rules, specify the name of the ruleset file using
.Cm ipf
.
The following command can be used to replace the currently running firewall
rules:
.Bd -literal -offset indent
# ipf -Fa -f /etc/ipf.rules
.Ed
.Pp
where
.Ar -Fa
flushes all the internal rules tables and
.Ar -f
specifies the file containing the rules to load.
.Pp
This provides the ability to make changes to a custom ruleset and update the
running firewall with a fresh copy of the rules without having to reboot the
system.
This method is convenient for testing new rules as the procedure can be
executed as many times as needed.
.Pp
Refer to
.Xr ipf 8 for details on the other flags available with this command.
.Ss IPF RULE SYNTAX
.Pp
This section describes the IPF rule syntax used to create stateful rules.
When creating rules, keep in mind that unless the
.Ql quick
keyword appears in a rule, every rule is read in order, with the last matching rule being the one that is applied.
This means that even if the first rule to match a packet is a
.Ql pass
, if there is a later matching rule that is a
.Ql block
, the packet will be dropped.
Sample rulesets can be found in
.Pa /usr/share/examples/ipfilter
.
.Pp
When creating rules, a
.Ql #
character is used to mark the start of a comment and may appear at the end of a
rule, to explain that rule's function, or on its own line.
Any blank lines are ignored.
.Pp
The keywords which are used in rules must be written in a specific order, from
left to right.
Some keywords are mandatory while others are optional.
Some keywords have sub-options which may be keywords themselves and also
include more sub-options.
The keyword order is as follows, where the words shown in uppercase represent a
variable and the words shown in lowercase must precede the variable that
follows it:
.Pp
ACTION DIRECTION OPTIONS proto PROTO_TYPE from SRC_ADDR SRC_PORT to DST_ADDR
DST_PORT TCP_FLAG|ICMP_TYPE keep state STATE
.Pp
This section describes each of these keywords and their options.
It is not an exhaustive list of every possible option.
Refer to
.Xr ipf 5 for a complete description of the rule syntax that can be used when creating IPF rules and examples for using each keyword.
.Bl -tag -offset -compact
.It ACTION
The action keyword indicates what to do with the packet if it matches that
rule.
Every rule must have an action.
The following actions are recognized:
.Ql block
: drops the packet.
.Ql pass
: allows the packet.
.Ql log
: generates a log record.
.Ql count
: counts the number of packets and bytes which can provide an indication of how
often a rule is used.
.Ql auth
: queues the packet for further processing by another program.
.Ql call
: provides access to functions built into IPF that allow more complex actions.
.Ql decapsulate
: removes any headers in order to process the contents of the packet.
.It DIRECTION
Next, each rule must explicitly state the direction of traffic using one of
these keywords:
.Ql in
: the rule is applied against an inbound packet.
.Ql out
: the rule is applied against an outbound packet.
.Ql all
: the rule applies to either direction.
If the system has multiple interfaces, the interface can be specified along
with the direction.
An example would be
.Ql in on fxp0
.
.It OPTIONS
Options are optional.
However, if multiple options are specified, they must be used in the order
shown here.
.Ql log
: when performing the specified ACTION, the contents of the packet's headers
will be written to the
.Xr ipl 4 packet log pseudo-device.
.Ql quick
: if a packet matches this rule, the ACTION specified by the rule occurs and no
further processing of any following rules will occur for this packet.
.Ql on
: must be followed by the interface name as displayed by
.Xr ifconfig 8 .
The rule will only match if the packet is going through the specified interface
in the specified direction.
When using the
.Ql log
keyword, the following qualifiers may be used in this order:
.Ql body
: indicates that the first 128 bytes of the packet contents will be logged
after the headers.
.Ql first
: if the
.Ql log
keyword is being used in conjunction with a
.Ql keep state
option, this option is recommended so that only the triggering packet is logged
and not every packet which matches the stateful connection.
Additional options are available to specify error return messages.
Refer to
.Xr ipf 5 for more details.
.It PROTO_TYPE
The protocol type is optional.
However, it is mandatory if the rule needs to specify a SRC_PORT or a DST_PORT
as it defines the type of protocol.
When specifying the type of protocol, use the
.Ql proto
keyword followed by either a protocol number or name from
.Pa /etc/protocols
.
Example protocol names include
.Ql tcp
,
.Ql udp
, or
.Ql icmp
.
If PROTO_TYPE is specified but no SRC_PORT or DST_PORT is specified, all port
numbers for that protocol will match that rule.
.It SRC_ADDR
The
.Ql from
keyword is mandatory and is followed by a keyword which represents the source
of the packet.
The source can be a hostname, an IP address followed by the CIDR mask, an address pool, or the keyword
.Ql all
.
Refer to
.Xr ipf 5 for examples.
There is no way to match ranges of IP addresses which do not express themselves easily using the dotted numeric form
/ mask-length notation.
The
.Ql net-mgmt/ipcalc
package or port may be used to ease the calculation of the CIDR mask.
Additional information is available at the utility's web page:
.Lk http://jodies.de/ipcalc
.
.It SRC_PORT
The port number of the source is optional.
However, if it is used, it requires PROTO_TYPE to be first defined in the rule.
The port number must also be preceded by the
.Ql proto
keyword.
A number of different comparison operators are supported:
.Ql =
(equal to),
.Ql !=
(not equal to),
.Ql <
(less than),
.Ql >
(greater than),
.Ql <=
(less than or equal to), and
.Ql >=
(greater than or equal to).
To specify port ranges, place the two port numbers between
.Ql <>
(less than and greater than ),
.Ql ><
(greater than and less than ), or
.Ql :
(greater than or equal to and less than or equal to).
.It DST_ADDR
The
.Ql to
keyword is mandatory and is followed by a keyword which represents the
destination of the packet.
Similar to SRC_ADDR, it can be a hostname, an IP address followed by the CIDR mask, an address pool, or the keyword
.Ql all
.
.It DST_PORT
Similar to SRC_PORT, the port number of the destination is optional.
However, if it is used, it requires PROTO_TYPE to be first defined in the rule.
The port number must also be preceded by the
.Ql proto
keyword.
.It TCP_FLAG|ICMP_TYPE
If
.Ql tcp
is specified as the PROTO_TYPE, flags can be specified as letters, where each
letter represents one of the possible TCP flags used to determine the state of a connection.
Possible values are:
.Ql S
(SYN),
.Ql A
(ACK),
.Ql P
(PSH),
.Ql F
(FIN),
.Ql U
(URG),
.Ql R
(RST),
.Ql C
(CWN), and
.Ql E
(ECN).
If
.Ql icmp
is specified as the PROTO_TYPE, the ICMP type to match can be specified.
Refer to
.Xr ipf 5 for the allowable types.
.It STATE
If a
.Ql pass
rule contains
.Ql keep state
, IPF will add an entry to its dynamic state table and allow subsequent packets that
match the connection.
 IPF can track state for TCP, UDP, and ICMP sessions.
Any packet that IPF can be certain is part of an active session, even if it is a different
protocol, will be allowed.
In IPF, packets destined to go out through the interface connected to the public
Internet are first checked against the dynamic state table.
If the packet matches the next expected packet comprising an active session
conversation, it exits the firewall and the state of the session conversation
flow is updated in the dynamic state table.
Packets that do not belong to an already active session are checked against the
outbound ruleset.
Packets coming in from the interface connected to the public Internet are first
checked against the dynamic state table.
If the packet matches the next expected packet comprising an active session, it
exits the firewall and the state of the session conversation flow is updated in
the dynamic state table.
Packets that do not belong to an already active session are checked against the
inbound ruleset.
Several keywords can be added after
.Ql keep state
.
If used, these keywords set various options that control stateful filtering,
such as setting connection limits or connection age.
Refer to
.Xr ipf 5 for the list of available options and their descriptions.
.El
.Ss EXAMPLE RULESET
.Pp
This section demonstrates how to create an example ruleset which only allows
services matching
.Ql pass
rules and blocks all others.
.Pp
FreeBSD uses the loopback interface (
.Pa lo0
) and the IP address
.Ql 127.0.0.1
for internal communication.
The firewall ruleset must contain rules to allow free movement of these
internally used packets:
.Bd -literal -offset indent
# no restrictions on loopback interface
pass in quick on lo0 all
pass out quick on lo0 all
.Ed
.Pp
The public interface connected to the Internet is used to authorize and control
access of all outbound and inbound connections.
If one or more interfaces are cabled to private networks, those internal
interfaces may require rules to allow packets originating from the LAN to flow between the internal networks or to the interface attached to the
Internet.
The ruleset should be organized into three major sections: any trusted internal
interfaces, outbound connections through the public interface, and inbound
connections through the public interface.
.Pp
These two rules allow all traffic to pass through a trusted LAN interface named
.Pa xl0
:
.Bd -literal -offset indent
# no restrictions on inside LAN interface for private network
pass out quick on xl0 all
pass in quick on xl0 all
.Ed
.Pp
The rules for the public interface's outbound and inbound sections should have
the most frequently matched rules placed before less commonly matched rules,
with the last rule in the section blocking and logging all packets for that
interface and direction.
.Pp
This set of rules defines the outbound section of the public interface named
.Pa dc0
.
These rules keep state and identify the specific services that internal systems
are authorized for public Internet access.
All the rules use
.Ql quick
and specify the appropriate port numbers and, where applicable, destination
addresses.
.Bd -literal -offset indent
# interface facing Internet (outbound)
# Matches session start requests originating from or behind the
# firewall, destined for the Internet.

# Allow outbound access to public DNS servers.
# Replace x.x.x. with address listed in /etc/resolv.conf.
# Repeat for each DNS server.
pass out quick on dc0 proto tcp from any to x.x.x. port = 53 flags S keep state
pass out quick on dc0 proto udp from any to xxx port = 53 keep state

# Allow access to ISP's specified DHCP server for cable or DSL networks.
# Use the first rule, then check log for the IP address of DHCP server.
# Then, uncomment the second rule, replace z.z.z.z with the IP address,
# and comment out the first rule
pass out log quick on dc0 proto udp from any to any port = 67 keep state
#pass out quick on dc0 proto udp from any to z.z.z.z port = 67 keep state

# Allow HTTP and HTTPS
pass out quick on dc0 proto tcp from any to any port = 80 flags S keep state
pass out quick on dc0 proto tcp from any to any port = 443 flags S keep state

# Allow email
pass out quick on dc0 proto tcp from any to any port = 110 flags S keep state
pass out quick on dc0 proto tcp from any to any port = 25 flags S keep state

# Allow NTP
pass out quick on dc0 proto tcp from any to any port = 37 flags S keep state

# Allow FTP
pass out quick on dc0 proto tcp from any to any port = 21 flags S keep state

# Allow SSH
pass out quick on dc0 proto tcp from any to any port = 22 flags S keep state

# Allow ping
pass out quick on dc0 proto icmp from any to any icmp-type 8 keep state

# Block and log everything else
block out log first quick on dc0 all
.Ed
.Pp
This example of the rules in the inbound section of the public interface blocks
all undesirable packets first.
This reduces the number of packets that are logged by the last rule.
.Bd -literal -offset indent
# interface facing Internet (inbound)
# Block all inbound traffic from non-routable or reserved address spaces
block in quick on dc0 from 192.168.0.0/16 to any    #RFC 1918 private IP
block in quick on dc0 from 172.16.0.0/12 to any     #RFC 1918 private IP
block in quick on dc0 from 10.0.0.0/8 to any        #RFC 1918 private IP
block in quick on dc0 from 127.0.0.0/8 to any       #loopback
block in quick on dc0 from 0.0.0.0/8 to any         #loopback
block in quick on dc0 from 169.254.0.0/16 to any    #DHCP auto-config
block in quick on dc0 from 192.0.2.0/24 to any      #reserved for docs
block in quick on dc0 from 204.152.64.0/23 to any   #Sun cluster interconnect
block in quick on dc0 from 224.0.0.0/3 to any       #Class D & E multicast

# Block fragments and too short tcp packets
block in quick on dc0 all with frags
block in quick on dc0 proto tcp all with short

# block source routed packets
block in quick on dc0 all with opt lsrr
block in quick on dc0 all with opt ssrr

# Block OS fingerprint attempts and log first occurrence
block in log first quick on dc0 proto tcp from any to any flags FUP

# Block anything with special options
block in quick on dc0 all with ipopts

# Block public pings and ident
block in quick on dc0 proto icmp all icmp-type 8
block in quick on dc0 proto tcp from any to any port = 113

# Block incoming Netbios services
block in log first quick on dc0 proto tcp/udp from any to any port = 137
block in log first quick on dc0 proto tcp/udp from any to any port = 138
block in log first quick on dc0 proto tcp/udp from any to any port = 139
block in log first quick on dc0 proto tcp/udp from any to any port = 81
.Ed
.Pp
Any time there are logged messages on a rule with the
.Ql log first
option, run
.Cm ipfstat -hio
to evaluate how many times the rule has been matched.
A large number of matches may indicate that the system is under attack.
.Pp
The rest of the rules in the inbound section define which connections are
allowed to be initiated from the Internet.
The last rule denies all connections which were not explicitly allowed by
previous rules in this section.
.Bd -literal -offset indent
# Allow traffic in from ISP's DHCP server. Replace z.z.z.z with
# the same IP address used in the outbound section.
pass in quick on dc0 proto udp from z.z.z.z to any port = 68 keep state

# Allow public connections to specified internal web server
pass in quick on dc0 proto tcp from any to x.x.x.x port = 80 flags S keep state

# Block and log only first occurrence of all remaining traffic.
block in log first quick on dc0 all
.Ed
.Ss CONFIGURING NAT
.Pp
To enable NAT, add these statements to
.Pa /etc/rc.conf
and specify the name of the file containing the NAT rules:
.Bd -literal -offset indent
gateway_enable="YES"
ipnat_enable="YES"
ipnat_rules="/etc/ipnat.rules"
.Ed
.Pp
NAT rules are flexible and can accomplish many different things to fit the needs of
both commercial and home users.
The rule syntax presented here has been simplified to demonstrate common usage.
For a complete rule syntax description, refer to
.Xr ipnat 5 .
.Pp
The basic syntax for a NAT rule is as follows, where
.Ql map
starts the rule and IF should be replaced with the name of the external interface:
.Bd -literal -offset indent
map IF LAN_IP_RANGE -> PUBLIC_ADDRESS
.Ed
.Pp
The LAN_IP_RANGE is the range of IP addresses used by internal clients.
Usually, it is a private address range such as
.Ql 192.168.1.0/24
.
The PUBLIC_ADDRESS can either be the static external IP address or the keyword
.Ql 0/32
which represents the IP address assigned to IF.
.Pp
In IPF, when a packet arrives at the firewall from the LAN with a public destination, it first passes through the outbound rules of the
firewall ruleset.
Then, the packet is passed to the NAT ruleset which is read from the top down, where the first matching rule wins.
 IPF tests each NAT rule against the packet's interface name and source IP address.
When a packet's interface name matches a NAT rule, the packet's source IP address in the private LAN is checked to see if it falls within the IP address range specified in LAN_IP_RANGE.
On a match, the packet has its source IP address rewritten with the public IP address specified by PUBLIC_ADDRESS.
 IPF posts an entry in its internal NAT table so that when the packet returns from the Internet, it can be mapped back
to its original private IP address before being passed to the firewall rules for further processing.
.Pp
For networks that have large numbers of internal systems or multiple subnets,
the process of funneling every private IP address into a single public IP address becomes a resource problem.
Two methods are available to relieve this issue.
.Pp
The first method is to assign a range of ports to use as source ports.
By adding the
.Ql portmap
keyword, NAT can be directed to only use source ports in the specified range:
.Bd -literal -offset indent
map dc0 192.168.1.0/24 -> 0/32 portmap tcp/udp 20000:60000
.Ed
.Pp
Alternately, use the
.Ql auto
keyword which tells NAT to determine the ports that are available for use:
.Bd -literal -offset indent
map dc0 192.168.1.0/24 -> 0/32 portmap tcp/udp auto
.Ed
.Pp
The second method is to use a pool of public addresses.
This is useful when there are too many LAN addresses to fit into a single public address and a block of public IP addresses is available.
These public addresses can be used as a pool from which NAT selects an IP address as a packet's address is mapped on its way out.
.Pp
The range of public IP addresses can be specified using a netmask or CIDR notation.
These two rules are equivalent:
.Bd -literal -offset indent
map dc0 192.168.1.0/24 -> 204.134.75.0/255.255.255.0
map dc0 192.168.1.0/24 -> 204.134.75.0/24
.Ed
.Pp
A common practice is to have a publically accessible web server or mail server
segregated to an internal network segment.
The traffic from these servers still has to undergo NAT, but port redirection is needed to direct inbound traffic to the correct
server.
For example, to map a web server using the internal address
.Ql 10.0.10.25
to its public IP address of
.Ql 20.20.20.5
, use this rule:
.Bd -literal -offset indent
rdr dc0 20.20.20.5/32 port 80 -> 10.0.10.25 port 80
.Ed
.Pp
If it is the only web server, this rule would also work as it redirects all
external HTTP requests to
.Ql 10.0.10.25
:
.Bd -literal -offset indent
rdr dc0 0.0.0.0/0 port 80 -> 10.0.10.25 port 80
.Ed
.Pp
IPF has a built in FTP proxy which can be used with NAT.
It monitors all outbound traffic for active or passive FTP connection requests and dynamically creates temporary filter rules containing
the port number used by the FTP data channel.
This eliminates the need to open large ranges of high order ports for FTP connections.
.Pp
In this example, the first rule calls the proxy for outbound FTP traffic from the internal LAN.
The second rule passes the FTP traffic from the firewall to the Internet, and the third rule handles all non-FTP traffic from the internal LAN:
.Bd -literal -offset indent
map dc0 10.0.10.0/29 -> 0/32 proxy port 21 ftp/tcp
map dc0 0.0.0.0/0 -> 0/32 proxy port 21 ftp/tcp
map dc0 10.0.10.0/29 -> 0/32
.Ed
.Pp
The FTP
.Ql map
rules go before the NAT rule so that when a packet matches an FTP rule, the FTP proxy creates temporary filter rules to let the FTP session packets pass and undergo NAT.
All LAN packets that are not FTP will not match the FTP rules but will undergo NAT if they match the third rule.
.Pp
Without the FTP proxy, the following firewall rules would instead be needed.
Note that without the proxy, all ports above
.Ql 1024
need to be allowed:
.Bd -literal -offset indent
# Allow out LAN PC client FTP to public Internet
# Active and passive modes
pass out quick on rl0 proto tcp from any to any port = 21 flags S keep state

# Allow out passive mode data channel high order port numbers
pass out quick on rl0 proto tcp from any to any port > 1024 flags S keep state

# Active mode let data channel in from FTP server
pass in quick on rl0 proto tcp from any to any port = 20 flags S keep state
.Ed
.Pp
Whenever the file containing the NAT rules is edited, run
.Cm ipnat
with
.Ar -CF
to delete the current NAT rules and flush the contents of the dynamic translation table.
Include
.Ar -f
and specify the name of the NAT ruleset to load:
.Bd -literal -offset indent
# ipnat -CF -f /etc/ipnat.rules
.Ed
.Pp
To display the NAT statistics:
.Bd -literal -offset indent
# ipnat -s
.Ed
.Pp
To list the NAT table's current mappings:
.Bd -literal -offset indent
# ipnat -l
.Ed
.Pp
To turn verbose mode on and display information relating to rule processing and
active rules and table entries:
.Bd -literal -offset indent
# ipnat -v
.Ed
.Ss VIEWING IPF STATISTICS
.Pp
IPF includes
.Xr ipfstat 8 which can be used to retrieve and display statistics which are gathered as
packets match rules as they go through the firewall.
Statistics are accumulated since the firewall was last started or since the
last time they were reset to zero using
.Cm ipf -Z
.
.Pp
The default
.Cm ipfstat
output looks like this:
.Bd -literal -offset indent
input packets: blocked 99286 passed 1255609 nomatch 14686 counted 0
 output packets: blocked 4200 passed 1284345 nomatch 14687 counted 0
 input packets logged: blocked 99286 passed 0
 output packets logged: blocked 0 passed 0
 packets logged: input 0 output 0
 log failures: input 3898 output 0
 fragment state(in): kept 0 lost 0
 fragment state(out): kept 0 lost 0
 packet state(in): kept 169364 lost 0
 packet state(out): kept 431395 lost 0
 ICMP replies: 0 TCP RSTs sent: 0
 Result cache hits(in): 1215208 (out): 1098963
 IN Pullups succeeded: 2 failed: 0
 OUT Pullups succeeded: 0 failed: 0
 Fastroute successes: 0 failures: 0
 TCP cksum fails(in): 0 (out): 0
 Packet log flags set: (0)
.Ed
.Pp
Several options are available.
When supplied with either
.Ar -i
for inbound or
.Ar -o
for outbound, the command will retrieve and display the appropriate list of
filter rules currently installed and in use by the kernel.
To also see the rule numbers, include
.Ar -n
.
For example,
.Cm ipfstat -on
displays the outbound rules table with rule numbers:
.Bd -literal -offset indent
@1 pass out on xl0 from any to any
@2 block out on dc0 from any to any
@3 pass out quick on dc0 proto tcp/udp from any to any keep state
.Ed
.Pp
Include
.Ar -h
to prefix each rule with a count of how many times the rule was matched.
For example,
.Cm ipfstat -oh
displays the outbound internal rules table, prefixing each rule with its usage
count:
.Bd -literal -offset indent
2451423 pass out on xl0 from any to any
354727 block out on dc0 from any to any
430918 pass out quick on dc0 proto tcp/udp from any to any keep state
.Ed
.Pp
To display the state table in a format similar to
.Xr top 1 , use
.Cm ipfstat -t
.
When the firewall is under attack, this option provides the ability to identify
and see the attacking packets.
The optional sub-flags give the ability to select the destination or source IP, port, or protocol to be monitored in real time.
Refer to
.Xr ipfstat 8 for details.
.Ss IPF LOGGING
.Pp
IPF provides
.Cm ipmon
, which can be used to write the firewall's logging information in a human
readable format.
It requires that
.Ql options IPFILTER_LOG
be first added to a custom kernel using the instructions in .
.Pp
This command is typically run in daemon mode in order to provide a continuous
system log file so that logging of past events may be reviewed.
Since FreeBSD has a built in
.Xr syslogd 8 facility to automatically rotate system logs, the default
.Pa rc.conf
.Ql ipmon_flags
statement uses
.Ar -Ds
:
.Bd -literal -offset indent
ipmon_flags="-Ds" # D = start as daemon
                  # s = log to syslog
                  # v = log tcp window, ack, seq
                  # n = map IP & port to names
.Ed
.Pp
Logging provides the ability to review, after the fact, information such as
which packets were dropped, what addresses they came from, and where they were
going.
This information is useful in tracking down attackers.
.Pp
Once the logging facility is enabled in
.Pa rc.conf
and started with
.Cm service ipmon start
, IPF will only log the rules which contain the
.Ql log
keyword.
The firewall administrator decides which rules in the ruleset should be logged
and normally only deny rules are logged.
It is customary to include the
.Ql log
keyword in the last rule in the ruleset.
This makes it possible to see all the packets that did not match any of the
rules in the ruleset.
.Pp
By default,
.Cm ipmon -Ds
mode uses
.Ql local0
as the logging facility.
The following logging levels can be used to further segregate the logged data:
.Bd -literal -offset indent
LOG_INFO - packets logged using the "log" keyword as the action rather than pass or block.
LOG_NOTICE - packets logged which are also passed
LOG_WARNING - packets logged which are also blocked
LOG_ERR - packets which have been logged and which can be considered short due to an incomplete header
.Ed
.Pp
In order to setup IPF to log all data to
.Pa /var/log/ipfilter.log
, first create the empty file:
.Bd -literal -offset indent
# touch /var/log/ipfilter.log
.Ed
.Pp
Then, to write all logged messages to the specified file, add the following
statement to
.Pa /etc/syslog.conf
:
.Bd -literal -offset indent
local0.* /var/log/ipfilter.log
.Ed
.Pp
To activate the changes and instruct
.Xr syslogd 8 to read the modified
.Pa /etc/syslog.conf
, run
.Cm service syslogd reload
.
.Pp
Do not forget to edit
.Pa /etc/newsyslog.conf
to rotate the new log file.
.Pp
Messages generated by
.Cm ipmon
consist of data fields separated by white space.
Fields common to all messages are:
.Bl -enum -offset -compact
.It
The date of packet receipt.
.It
The time of packet receipt.
This is in the form HH:MM:SS.F, for hours, minutes, seconds, and fractions of a
second.
.It
The name of the interface that processed the packet.
.It
The group and rule number of the rule in the format
.Ql @0:17
.
.It
The action:
.Ql p
for passed,
.Ql b
for blocked,
.Ql S
for a short packet,
.Ql n
did not match any rules, and
.Ql L
for a log rule.
.It
The addresses written as three fields: the source address and port separated by
a comma, the -> symbol, and the destination address and port.
For example:
.Ql 209.53.17.22,80 -> 198.73.220.17,1722
.
.It
.Ql PR
followed by the protocol name or number: for example,
.Ql PR tcp
.
.It
.Ql len
followed by the header length and total length of the packet: for example,
.Ql len 20 40
.
.El
.Pp
If the packet is a TCP packet, there will be an additional field starting with a hyphen followed by
letters corresponding to any flags that were set.
Refer to
.Xr ipf 5 for a list of letters and their flags.
.Pp
If the packet is an ICMP packet, there will be two fields at the end: the first always being
.Do
icmp
.Dc
and the next being the ICMP message and sub-message type, separated by a slash.
For example:
.Ql icmp 3/3
for a port unreachable message.
.Sh ADVANCED NETWORKING
.Ss SYNOPSIS
.Pp
This chapter covers a number of advanced networking topics.
.Pp
After reading this chapter, you will know:
.Bl -bullet -offset -compact
.It
The basics of gateways and routes.
.It
How to set up USB tethering.
.It
How to set up IEEE 802.11 and Bluetooth devices.
.It
How to make FreeBSD act as a bridge.
.It
How to set up network PXE booting.
.It
How to set up IPv6 on a FreeBSD machine.
.It
How to enable and utilize the features of the Common Address Redundancy
Protocol (CARP) in FreeBSD.
.It
How to configure multiple VLANs on FreeBSD.
.El
.Pp
Before reading this chapter, you should:
.Bl -bullet -offset -compact
.It
Understand the basics of the
.Pa /etc/rc
scripts.
.It
Be familiar with basic network terminology.
.It
Know how to configure and install a new FreeBSD kernel ().
.It
Know how to install additional third-party software ().
.El
.Pp
.Ql Routing
is the mechanism that allows a system to find the network path to another
system.
A
.Ql route
is a defined pair of addresses which represent the
.Do
destination
.Dc
and a
.Do
gateway
.Dc
.
The route indicates that when trying to get to the specified destination, send
the packets through the specified gateway.
There are three types of destinations: individual hosts, subnets, and
.Do
default
.Dc
.
The
.Do
default route
.Dc
is used if no other routes apply.
There are also three types of gateways: individual hosts, interfaces, also
called links, and Ethernet hardware (MAC) addresses.
Known routes are stored in a routing table.
.Pp
This section provides an overview of routing basics.
It then demonstrates how to configure a FreeBSD system as a router and offers
some troubleshooting tips.
.Ss ROUTING BASICS
.Pp
To view the routing table of a FreeBSD system, use
.Xr netstat 1 :
.Bd -literal -offset indent
% netstat -r
Routing tables

Internet:
Destination      Gateway            Flags     Refs     Use     Netif Expire
default          outside-gw         UGS        37      418       em0
localhost        localhost          UH          0      181       lo0
test0            0:e0:b5:36:cf:4f   UHLW        5    63288       re0     77
10.20.30.255     link#1             UHLW        1     2421
example.com      link#1             UC          0        0
host1            0:e0:a8:37:8:1e    UHLW        3     4601       lo0
host2            0:e0:a8:37:8:1e    UHLW        0        5       lo0 =>
host2.example.com link#1            UC          0        0
224              link#1             UC          0        0
.Ed
.Pp
The entries in this example are as follows:
.Bl -tag -offset -compact
.It default
The first route in this table specifies the
.Ql default
route.
When the local system needs to make a connection to a remote host, it checks
the routing table to determine if a known path exists.
If the remote host matches an entry in the table, the system checks to see if
it can connect using the interface specified in that entry.
If the destination does not match an entry, or if all known paths fail, the
system uses the entry for the default route.
For hosts on a local area network, the
.Ql Gateway
field in the default route is set to the system which has a direct connection
to the Internet.
When reading this entry, verify that the
.Ql Flags
column indicates that the gateway is usable (
.Ql UG
).
The default route for a machine which itself is functioning as the gateway to
the outside world will be the gateway machine at the Internet Service Provider
(ISP).
.It localhost
The second route is the
.Ql localhost
route.
The interface specified in the
.Ql Netif
column for
.Ql localhost
is
.Pa lo0
, also known as the loopback device.
This indicates that all traffic for this destination should be internal, rather
than sending it out over the network.
.It MAC address
The addresses beginning with
.Ql 0:e0:
are MAC addresses.
FreeBSD will automatically identify any hosts,
.Ql test0
in the example, on the local Ethernet and add a route for that host over the
Ethernet interface,
.Pa re0
.
This type of route has a timeout, seen in the
.Ql Expire
column, which is used if the host does not respond in a specific amount of
time.
When this happens, the route to this host will be automatically deleted.
These hosts are identified using the Routing Information Protocol (RIP), which calculates routes to local hosts based upon a shortest path
determination.
.It subnet
FreeBSD will automatically add subnet routes for the local subnet.
In this example,
.Ql 10.20.30.255
is the broadcast address for the subnet
.Ql 10.20.30
and
.Ql example.com
is the domain name associated with that subnet.
The designation
.Ql link#1
refers to the first Ethernet card in the machine.
Local network hosts and local subnets have their routes automatically
configured by a daemon called
.Xr routed 8 .
If it is not running, only routes which are statically defined by the
administrator will exist.
.It host
The
.Ql host1
line refers to the host by its Ethernet address.
Since it is the sending host, FreeBSD knows to use the loopback interface (
.Pa lo0
) rather than the Ethernet interface.
The two
.Ql host2
lines represent aliases which were created using
.Xr ifconfig 8 .
The
.Ql =>
symbol after the
.Pa lo0
interface says that an alias has been set in addition to the loopback address.
Such routes only show up on the host that supports the alias and all other
hosts on the local network will have a
.Ql link#1
line for such routes.
.It 224
The final line (destination subnet
.Ql 224
) deals with multicasting.
.El
.Pp
Various attributes of each route can be seen in the
.Ql Flags
column.
 summarizes some of these flags and their meanings:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Command
.Ta
Purpose
.It
.Ta
U
.Ta
The route is active (up).
.It
.Ta
H
.Ta
The route destination is a single host.
.It
.Ta
G
.Ta
Send anything for this destination on to this gateway, which will figure out
from there where to send it.
.It
.Ta
S
.Ta
This route was statically configured.
.It
.Ta
C
.Ta
Clones a new route based upon this route for machines to connect to.
This type of route is normally used for local networks.
.It
.Ta
W
.Ta
The route was auto-configured based upon a local area network (clone) route.
.It
.Ta
L
.Ta
Route involves references to Ethernet (link) hardware.
.El
.Pp
On a FreeBSD system, the default route can defined in
.Pa /etc/rc.conf
by specifying the IP address of the default gateway:
.Bd -literal -offset indent
defaultrouter="10.20.30.1"
.Ed
.Pp
It is also possible to manually add the route using
.Cm route
:
.Bd -literal -offset indent
# route add default 10.20.30.1
.Ed
.Pp
Note that manually added routes will not survive a reboot.
For more information on manual manipulation of network routing tables, refer to
.Xr route 8 .
.Pp
A FreeBSD system can be configured as the default gateway, or router, for a
network if it is a dual-homed system.
A dual-homed system is a host which resides on at least two different networks.
Typically, each network is connected to a separate network interface, though IP aliasing can be used to bind multiple addresses, each on a different subnet, to
one physical interface.
.Pp
In order for the system to forward packets between interfaces, FreeBSD must be
configured as a router.
Internet standards and good engineering practice prevent the FreeBSD Project
from enabling this feature by default, but it can be configured to start at
boot by adding this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
gateway_enable="YES"          # Set to YES if this host will be a gateway
.Ed
.Pp
To enable routing now, set the
.Xr sysctl 8 variable
.Ev net.inet.ip.forwarding
to
.Ql 1
.
To stop routing, reset this variable to
.Ql 0
.
.Pp
The routing table of a router needs additional routes so it knows how to reach
other networks.
Routes can be either added manually using static routes or routes can be
automatically learned using a routing protocol.
Static routes are appropriate for small networks and this section describes how
to add a static routing entry for a small network.
.Pp
For large networks, static routes quickly become unscalable.
FreeBSD comes with the standard BSD routing daemon
.Xr routed 8 , which provides the routing protocols RIP, versions 1 and 2, and IRDP.
Support for the BGP and OSPF routing protocols can be installed using the
.Ql net/zebra
package or port.
.Pp
Consider the following network:
.Bd -literal -offset indent

    INTERNET
      | (10.0.0.1/24) Default Router to Internet
      |
      |Interface xl0
      |10.0.0.10/24
   +------+
   |      | RouterA
   |      | (FreeBSD gateway)
   +------+
      | Interface xl1
      | 192.168.1.1/24
      |
  +--------------------------------+
   Internal Net 1      | 192.168.1.2/24
                       |
                   +------+
                   |      | RouterB
                   |      |
                   +------+
                       | 192.168.2.1/24
                       |
                     Internal Net 2
.Ed
.Pp
In this scenario,
.Ql RouterA
is a FreeBSD machine that is acting as a router to the rest of the Internet.
It has a default route set to
.Ql 10.0.0.1
which allows it to connect with the outside world.
.Ql RouterB
is already configured to use
.Ql 192.168.1.1
as its default gateway.
.Pp
Before adding any static routes, the routing table on
.Ql RouterA
looks like this:
.Bd -literal -offset indent
% netstat -nr
Routing tables

Internet:
Destination        Gateway            Flags    Refs      Use  Netif  Expire
default            10.0.0.1           UGS         0    49378    xl0
127.0.0.1          127.0.0.1          UH          0        6    lo0
10.0.0.0/24        link#1             UC          0        0    xl0
192.168.1.0/24     link#2             UC          0        0    xl1
.Ed
.Pp
With the current routing table,
.Ql RouterA
does not have a route to the
.Ql 192.168.2.0/24
network.
The following command adds the
.Ql Internal Net 2
network to
.Ql RouterA
's routing table using
.Ql 192.168.1.2
as the next hop:
.Bd -literal -offset indent
# route add -net 192.168.2.0/24 192.168.1.2
.Ed
.Pp
Now,
.Ql RouterA
can reach any host on the
.Ql 192.168.2.0/24
network.
However, the routing information will not persist if the FreeBSD system
reboots.
If a static route needs to be persistent, add it to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
# Add Internal Net 2 as a persistent static route
static_routes="internalnet2"
route_internalnet2="-net 192.168.2.0/24 192.168.1.2"
.Ed
.Pp
The
.Ql static_routes
configuration variable is a list of strings separated by a space, where each
string references a route name.
The variable
.Ql route_internalnet2
contains the static route for that route name.
.Pp
Using more than one string in
.Ql static_routes
creates multiple static routes.
The following shows an example of adding static routes for the
.Ql 192.168.0.0/24
and
.Ql 192.168.1.0/24
networks:
.Bd -literal -offset indent
static_routes="net1 net2"
route_net1="-net 192.168.0.0/24 192.168.0.1"
route_net2="-net 192.168.1.0/24 192.168.1.1"
.Ed
.Ss TROUBLESHOOTING
.Pp
When an address space is assigned to a network, the service provider configures
their routing tables so that all traffic for the network will be sent to the
link for the site.
But how do external sites know to send their packets to the network's ISP?
.Pp
There is a system that keeps track of all assigned address spaces and defines
their point of connection to the Internet backbone, or the main trunk lines
that carry Internet traffic across the country and around the world.
Each backbone machine has a copy of a master set of tables, which direct
traffic for a particular network to a specific backbone carrier, and from there
down the chain of service providers until it reaches a particular network.
.Pp
It is the task of the service provider to advertise to the backbone sites that
they are the point of connection, and thus the path inward, for a site.
This is known as route propagation.
.Pp
Sometimes, there is a problem with route propagation and some sites are unable
to connect.
Perhaps the most useful command for trying to figure out where routing is
breaking down is
.Cm traceroute
.
It is useful when
.Cm ping
fails.
.Pp
When using
.Cm traceroute
, include the address of the remote host to connect to.
The output will show the gateway hosts along the path of the attempt,
eventually either reaching the target host, or terminating because of a lack of
connection.
For more information, refer to
.Xr traceroute 8 .
.Ss MULTICAST CONSIDERATIONS
.Pp
FreeBSD natively supports both multicast applications and multicast routing.
Multicast applications do not require any special configuration in order to run
on FreeBSD.
Support for multicast routing requires that the following option be compiled
into a custom kernel:
.Bd -literal -offset indent
options MROUTING
.Ed
.Pp
The multicast routing daemon, mrouted can be installed using the
.Ql net/mrouted
package or port.
This daemon implements the DVMRP multicast routing protocol and is configured by editing
.Pa /usr/local/etc/mrouted.conf
in order to set up the tunnels and DVMRP.
The installation of mrouted also installs map-mbone and mrinfo, as well as their associated man pages.
Refer to these for configuration examples.
.Pp
DVMRP has largely been replaced by the PIM protocol in many multicast installations.
Refer to
.Xr pim 4 for more information.
.Ss WIRELESS NETWORKING BASICS
.Pp
Most wireless networks are based on the IEEE 802.11 standards.
A basic wireless network consists of multiple stations communicating with
radios that broadcast in either the 2.4GHz or 5GHz band, though this varies
according to the locale and is also changing to enable communication in the
2.3GHz and 4.9GHz ranges.
.Pp
802.11 networks are organized in two ways.
In infrastructure mode, one station acts as a master with all the other stations associating to it,
the network is known as a BSS, and the master station is termed an access point (AP).
In a BSS, all communication passes through the AP; even when one station wants to communicate with another wireless station,
messages must go through the AP.
In the second form of network, there is no master and stations communicate
directly.
This form of network is termed an IBSS and is commonly known as an ad-hoc network.
.Pp
802.11 networks were first deployed in the 2.4GHz band using protocols defined
by the IEEE 802.11 and 802.11b standard.
These specifications include the operating frequencies and the MAC layer characteristics, including framing and transmission rates, as
communication can occur at various rates.
Later, the 802.11a standard defined operation in the 5GHz band, including
different signaling mechanisms and higher transmission rates.
Still later, the 802.11g standard defined the use of 802.11a signaling and
transmission mechanisms in the 2.4GHz band in such a way as to be backwards
compatible with 802.11b networks.
.Pp
Separate from the underlying transmission techniques, 802.11 networks have a
variety of security mechanisms.
The original 802.11 specifications defined a simple security protocol called WEP.
This protocol uses a fixed pre-shared key and the RC4 cryptographic cipher to
encode data transmitted on a network.
Stations must all agree on the fixed key in order to communicate.
This scheme was shown to be easily broken and is now rarely used except to
discourage transient users from joining networks.
Current security practice is given by the IEEE 802.11i specification that defines new cryptographic ciphers and an additional
protocol to authenticate stations to an access point and exchange keys for data
communication.
Cryptographic keys are periodically refreshed and there are mechanisms for
detecting and countering intrusion attempts.
Another security protocol specification commonly used in wireless networks is
termed WPA, which was a precursor to 802.11i.
 WPA specifies a subset of the requirements found in 802.11i and is designed for
implementation on legacy hardware.
Specifically, WPA requires only the TKIP cipher that is derived from the original WEP cipher.
802.11i permits use of TKIP but also requires support for a stronger cipher, AES-CCM, for encrypting data.
The AES cipher was not required in WPA because it was deemed too computationally costly to be implemented on legacy
hardware.
.Pp
The other standard to be aware of is 802.11e.
It defines protocols for deploying multimedia applications, such as streaming
video and voice over IP (VoIP), in an 802.11 network.
Like 802.11i, 802.11e also has a precursor specification termed WME (later renamed WMM) that has been defined by an industry group as a subset of 802.11e that can be
deployed now to enable multimedia applications while waiting for the final
ratification of 802.11e.
The most important thing to know about 802.11e and WME/WMM is that it enables prioritized traffic over a wireless network through Quality
of Service (QoS) protocols and enhanced media access protocols.
Proper implementation of these protocols enables high speed bursting of data
and prioritized traffic flow.
.Pp
FreeBSD supports networks that operate using 802.11a, 802.11b, and 802.11g.
The WPA and 802.11i security protocols are likewise supported (in conjunction with any
of 11a, 11b, and 11g) and QoS and traffic prioritization required by the WME/WMM protocols are supported for a limited set of wireless devices.
.Ss QUICK START
.Pp
Connecting a computer to an existing wireless network is a very common
situation.
This procedure shows the steps required.
.Pp
Obtain the SSID (Service Set Identifier) and PSK (Pre-Shared Key) for the wireless network from the network administrator.
.Pp
Identify the wireless adapter.
The FreeBSD
.Pa GENERIC
kernel includes drivers for many common wireless adapters.
If the wireless adapter is one of those models, it will be shown in the output
from
.Xr ifconfig 8 :
.Bd -literal -offset indent
% ifconfig | grep -B3 -i wireless
.Ed
.Pp
On FreeBSD 11 or higher, use this command instead:
.Bd -literal -offset indent
% sysctl net.wlan.devices
.Ed
.Pp
If a wireless adapter is not listed, an additional kernel module might be
required, or it might be a model not supported by FreeBSD.
.Pp
This example shows the Atheros
.Ql ath0
wireless adapter.
.Pp
Add an entry for this network to
.Pa /etc/wpa_supplicant.conf
.
If the file does not exist, create it.
Replace myssid and mypsk with the SSID and PSK provided by the network administrator.
.Bd -literal -offset indent
network={
	ssid="myssid"
	psk="mypsk"
}
.Ed
.Pp
Add entries to
.Pa /etc/rc.conf
to configure the network on startup:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="WPA SYNCDHCP"
.Ed
.Pp
Restart the computer, or restart the network service to connect to the network:
.Bd -literal -offset indent
# service netif restart
.Ed
.Ss BASIC SETUP
.Ss KERNEL CONFIGURATION
.Pp
To use wireless networking, a wireless networking card is needed and the kernel
needs to be configured with the appropriate wireless networking support.
The kernel is separated into multiple modules so that only the required support
needs to be configured.
.Pp
The most commonly used wireless devices are those that use parts made by
Atheros.
These devices are supported by
.Xr ath 4 and require the following line to be added to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
if_ath_load="YES"
.Ed
.Pp
The Atheros driver is split up into three separate pieces: the driver (
.Xr ath 4 ), the hardware support layer that handles chip-specific functions (
.Xr ath_hal 4 ), and an algorithm for selecting the rate for transmitting frames.
When this support is loaded as kernel modules, any dependencies are
automatically handled.
To load support for a different type of wireless device, specify the module for
that device.
This example is for devices based on the Intersil Prism parts (
.Xr wi 4 ) driver:
.Bd -literal -offset indent
if_wi_load="YES"
.Ed
.Pp
The examples in this section use an
.Xr ath 4 device and the device name in the examples must be changed according to the
configuration.
A list of available wireless drivers and supported adapters can be found in the
FreeBSD Hardware Notes, available on the Release Information page of the FreeBSD website.
If a native FreeBSD driver for the wireless device does not exist, it may be
possible to use the Windows driver with the help of the NDIS driver wrapper.
.Pp
In addition, the modules that implement cryptographic support for the security
protocols to use must be loaded.
These are intended to be dynamically loaded on demand by the
.Xr wlan 4 module, but for now they must be manually configured.
The following modules are available:
.Xr wlan_wep 4 ,
.Xr wlan_ccmp 4 , and
.Xr wlan_tkip 4 .
The
.Xr wlan_ccmp 4 and
.Xr wlan_tkip 4 drivers are only needed when using the WPA or 802.11i security protocols.
If the network does not use encryption,
.Xr wlan_wep 4 support is not needed.
To load these modules at boot time, add the following lines to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
wlan_wep_load="YES"
wlan_ccmp_load="YES"
wlan_tkip_load="YES"
.Ed
.Pp
Once this information has been added to
.Pa /boot/loader.conf
, reboot the FreeBSD box.
Alternately, load the modules by hand using
.Xr kldload 8 .
.Pp
For users who do not want to use modules, it is possible to compile these
drivers into the kernel by adding the following lines to a custom kernel
configuration file:
.Bd -literal -offset indent
device wlan              # 802.11 support
device wlan_wep          # 802.11 WEP support
device wlan_ccmp         # 802.11 CCMP support
device wlan_tkip         # 802.11 TKIP support
device wlan_amrr         # AMRR transmit rate control algorithm
device ath               # Atheros pci/cardbus NIC's
device ath_hal           # pci/cardbus chip support
options AH_SUPPORT_AR5416 # enable AR5416 tx/rx descriptors
device ath_rate_sample   # SampleRate tx rate control for ath
.Ed
.Pp
With this information in the kernel configuration file, recompile the kernel
and reboot the FreeBSD machine.
.Pp
Information about the wireless device should appear in the boot messages, like
this:
.Bd -literal -offset indent
ath0: <Atheros 5212> mem 0x88000000-0x8800ffff irq 11 at device 0.0 on cardbus1
ath0: [ITHREAD]
ath0: AR2413 mac 7.9 RF2413 phy 4.5
.Ed
.Ss INFRASTRUCTURE MODE
.Pp
Infrastructure (BSS) mode is the mode that is typically used.
In this mode, a number of wireless access points are connected to a wired
network.
Each wireless network has its own name, called the SSID.
Wireless clients connect to the wireless access points.
.Ss FREEBSD CLIENTS
.Ss HOW TO FIND ACCESS POINTS
.Pp
To scan for available networks, use
.Xr ifconfig 8 .
This request may take a few moments to complete as it requires the system to
switch to each available wireless frequency and probe for available access
points.
Only the superuser can initiate a scan:
.Bd -literal -offset indent
# ifconfig wlan0 create wlandev ath0
# ifconfig wlan0 up scan
SSID/MESH ID    BSSID              CHAN RATE   S:N     INT CAPS
dlinkap         00:13:46:49:41:76   11   54M -90:96   100 EPS  WPA WME
freebsdap       00:11:95:c3:0d:ac    1   54M -83:96   100 EPS  WPA
.Ed
.Pp
The interface must be
.Ar up
before it can scan.
Subsequent scan requests do not require the interface to be marked as up again.
.Pp
The output of a scan request lists each BSS/IBSS network found.
Besides listing the name of the network, the
.Ql SSID
, the output also shows the
.Ql BSSID
, which is the MAC address of the access point.
The
.Ql CAPS
field identifies the type of each network and the capabilities of the stations
operating there:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
Capability Code
.Ta
Meaning
.It
.Ta
.Ql E
.Ta
Extended Service Set (ESS).
Indicates that the station is part of an infrastructure network rather than an IBSS/ad-hoc network.
.It
.Ta
.Ql I
.Ta
IBSS/ad-hoc network.
Indicates that the station is part of an ad-hoc network rather than an ESS network.
.It
.Ta
.Ql P
.Ta
Privacy.
Encryption is required for all data frames exchanged within the BSS using cryptographic means such as WEP, TKIP or AES-CCMP.
.It
.Ta
.Ql S
.Ta
Short Preamble.
Indicates that the network is using short preambles, defined in 802.11b High
Rate/DSSS PHY, and utilizes a 56 bit sync field rather than the 128 bit field
used in long preamble mode.
.It
.Ta
.Ql s
.Ta
Short slot time.
Indicates that the 802.11g network is using a short slot time because there are
no legacy (802.11b) stations present.
.El
.Pp
One can also display the current list of known networks with:
.Bd -literal -offset indent
# ifconfig wlan0 list scan
.Ed
.Pp
This information may be updated automatically by the adapter or manually with a
.Ar scan
request.
Old data is automatically removed from the cache, so over time this list may
shrink unless more scans are done.
.Ss BASIC SETTINGS
.Pp
This section provides a simple example of how to make the wireless network
adapter work in FreeBSD without encryption.
Once familiar with these concepts, it is strongly recommend to use WPA to set up the wireless network.
.Pp
There are three basic steps to configure a wireless network: select an access
point, authenticate the station, and configure an IP address.
The following sections discuss each step.
.Ss SELECTING AN ACCESS POINT
.Pp
Most of the time, it is sufficient to let the system choose an access point
using the builtin heuristics.
This is the default behavior when an interface is marked as up or it is listed
in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="DHCP"
.Ed
.Pp
If there are multiple access points, a specific one can be selected by its SSID:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="ssid your_ssid_here DHCP"
.Ed
.Pp
In an environment where there are multiple access points with the same SSID, which is often done to simplify roaming, it may be necessary to associate to
one specific device.
In this case, the BSSID of the access point can be specified, with or without the SSID:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="ssid your_ssid_here bssid xx:xx:xx:xx:xx:xx DHCP"
.Ed
.Pp
There are other ways to constrain the choice of an access point, such as
limiting the set of frequencies the system will scan on.
This may be useful for a multi-band wireless card as scanning all the possible
channels can be time-consuming.
To limit operation to a specific band, use the
.Ar mode
parameter:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="mode 11g ssid your_ssid_here DHCP"
.Ed
.Pp
This example will force the card to operate in 802.11g, which is defined only
for 2.4GHz frequencies so any 5GHz channels will not be considered.
This can also be achieved with the
.Ar channel
parameter, which locks operation to one specific frequency, and the
.Ar chanlist
parameter, to specify a list of channels for scanning.
More information about these parameters can be found in
.Xr ifconfig 8 .
.Ss AUTHENTICATION
.Pp
Once an access point is selected, the station needs to authenticate before it
can pass data.
Authentication can happen in several ways.
The most common scheme, open authentication, allows any station to join the
network and communicate.
This is the authentication to use for test purposes the first time a wireless
network is setup.
Other schemes require cryptographic handshakes to be completed before data
traffic can flow, either using pre-shared keys or secrets, or more complex
schemes that involve backend services such as RADIUS.
Open authentication is the default setting.
The next most common setup is WPA-PSK, also known as WPA Personal, which is described in .
.Pp
If using an Apple  AirPort Extreme base station for an access point, shared-key authentication together
with a WEP key needs to be configured.
This can be configured in
.Pa /etc/rc.conf
or by using
.Xr wpa_supplicant 8 .
For a single AirPort base station, access can be configured with:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="authmode shared wepmode on weptxkey 1 wepkey 01234567 DHCP"
.Ed
.Pp
In general, shared key authentication should be avoided because it uses the WEP key material in a highly-constrained manner, making it even easier to crack the
key.
If WEP must be used for compatibility with legacy devices, it is better to use WEP with
.Ql open
authentication.
More information regarding WEP can be found in .
.Ss GETTING AN IP ADDRESS WITH DHCP
.Pp
Once an access point is selected and the authentication parameters are set, an IP address must be obtained in order to communicate.
Most of the time, the IP address is obtained via DHCP.
To achieve that, edit
.Pa /etc/rc.conf
and add
.Ql DHCP
to the configuration for the device:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="DHCP"
.Ed
.Pp
The wireless interface is now ready to bring up:
.Bd -literal -offset indent
# service netif start
.Ed
.Pp
Once the interface is running, use
.Xr ifconfig 8 to see the status of the interface
.Pa ath0
:
.Bd -literal -offset indent
# ifconfig wlan0
wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
        ether 00:11:95:d5:43:62
        inet 192.168.1.100 netmask 0xffffff00 broadcast 192.168.1.255
        media: IEEE 802.11 Wireless Ethernet OFDM/54Mbps mode 11g
        status: associated
        ssid dlinkap channel 11 (2462 Mhz 11g) bssid 00:13:46:49:41:76
        country US ecm authmode OPEN privacy OFF txpower 21.5 bmiss 7
        scanvalid 60 bgscan bgscanintvl 300 bgscanidle 250 roam:rssi 7
        roam:rate 5 protmode CTS wme burst
.Ed
.Pp
The
.Ql status: associated
line means that it is connected to the wireless network.
The
.Ql bssid 00:13:46:49:41:76
is the MAC address of the access point and
.Ql authmode OPEN
indicates that the communication is not encrypted.
.Ss STATIC IP ADDRESS
.Pp
If an IP address cannot be obtained from a DHCP server, set a fixed IP address.
Replace the
.Ql DHCP
keyword shown above with the address information.
Be sure to retain any other parameters for selecting the access point:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="inet 192.168.1.100 netmask 255.255.255.0 ssid your_ssid_here"
.Ed
.Ss WPA
.Pp
Wi-Fi Protected Access (WPA) is a security protocol used together with 802.11 networks to address the lack
of proper authentication and the weakness of WEP.
WPA leverages the 802.1X authentication protocol and uses one of several
ciphers instead of WEP for data integrity.
The only cipher required by WPA is the Temporary Key Integrity Protocol (TKIP).
 TKIP is a cipher that extends the basic RC4 cipher used by WEP by adding integrity checking, tamper detection, and measures for responding to
detected intrusions.
 TKIP is designed to work on legacy hardware with only software modification.
It represents a compromise that improves security but is still not entirely
immune to attack.
 WPA also specifies the AES-CCMP cipher as an alternative to TKIP, and that is preferred when possible.
For this specification, the term WPA2 or RSN is commonly used.
.Pp
WPA defines authentication and encryption protocols.
Authentication is most commonly done using one of two techniques: by 802.1X and
a backend authentication service such as RADIUS, or by a minimal handshake between the station and the access point using a
pre-shared secret.
The former is commonly termed WPA Enterprise and the latter is known as WPA Personal.
Since most people will not set up a RADIUS backend server for their wireless network, WPA-PSK is by far the most commonly encountered configuration for WPA.
.Pp
The control of the wireless connection and the key negotiation or
authentication with a server is done using
.Xr wpa_supplicant 8 .
This program requires a configuration file,
.Pa /etc/wpa_supplicant.conf
, to run.
More information regarding this file can be found in
.Xr wpa_supplicant.conf 5 .
.Ss WPA-PSK
.Pp
WPA-PSK, also known as WPA Personal, is based on a pre-shared key (PSK) which is generated from a given password and used as the master key in the
wireless network.
This means every wireless user will share the same key.
 WPA-PSK is intended for small networks where the use of an authentication server is not
possible or desired.
.Pp
Always use strong passwords that are sufficiently long and made from a rich
alphabet so that they will not be easily guessed or attacked.
.Pp
The first step is the configuration of
.Pa /etc/wpa_supplicant.conf
with the SSID and the pre-shared key of the network:
.Bd -literal -offset indent
network={
  ssid="freebsdap"
  psk="freebsdmall"
}
.Ed
.Pp
Then, in
.Pa /etc/rc.conf
, indicate that the wireless device configuration will be done with WPA and the IP address will be obtained with DHCP:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="WPA DHCP"
.Ed
.Pp
Then, bring up the interface:
.Bd -literal -offset indent
# service netif start
Starting wpa_supplicant.
DHCPDISCOVER on wlan0 to 255.255.255.255 port 67 interval 5
DHCPDISCOVER on wlan0 to 255.255.255.255 port 67 interval 6
DHCPOFFER from 192.168.0.1
DHCPREQUEST on wlan0 to 255.255.255.255 port 67
DHCPACK from 192.168.0.1
bound to 192.168.0.254 -- renewal in 300 seconds.
wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
      ether 00:11:95:d5:43:62
      inet 192.168.0.254 netmask 0xffffff00 broadcast 192.168.0.255
      media: IEEE 802.11 Wireless Ethernet OFDM/36Mbps mode 11g
      status: associated
      ssid freebsdap channel 1 (2412 Mhz 11g) bssid 00:11:95:c3:0d:ac
      country US ecm authmode WPA2/802.11i privacy ON deftxkey UNDEF
      AES-CCM 3:128-bit txpower 21.5 bmiss 7 scanvalid 450 bgscan
      bgscanintvl 300 bgscanidle 250 roam:rssi 7 roam:rate 5 protmode CTS
      wme burst roaming MANUAL
.Ed
.Pp
Or, try to configure the interface manually using the information in
.Pa /etc/wpa_supplicant.conf
:
.Bd -literal -offset indent
# wpa_supplicant -i wlan0 -c /etc/wpa_supplicant.conf
Trying to associate with 00:11:95:c3:0d:ac (SSID='freebsdap' freq=2412 MHz)
Associated with 00:11:95:c3:0d:ac
WPA: Key negotiation completed with 00:11:95:c3:0d:ac [PTK=CCMP GTK=CCMP]
CTRL-EVENT-CONNECTED - Connection to 00:11:95:c3:0d:ac completed (auth) [id=0 id_str=]
.Ed
.Pp
The next operation is to launch
.Xr dhclient 8 to get the IP address from the DHCP server:
.Bd -literal -offset indent
# dhclient wlan0
DHCPREQUEST on wlan0 to 255.255.255.255 port 67
DHCPACK from 192.168.0.1
bound to 192.168.0.254 -- renewal in 300 seconds.
# ifconfig wlan0
wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
      ether 00:11:95:d5:43:62
      inet 192.168.0.254 netmask 0xffffff00 broadcast 192.168.0.255
      media: IEEE 802.11 Wireless Ethernet OFDM/36Mbps mode 11g
      status: associated
      ssid freebsdap channel 1 (2412 Mhz 11g) bssid 00:11:95:c3:0d:ac
      country US ecm authmode WPA2/802.11i privacy ON deftxkey UNDEF
      AES-CCM 3:128-bit txpower 21.5 bmiss 7 scanvalid 450 bgscan
      bgscanintvl 300 bgscanidle 250 roam:rssi 7 roam:rate 5 protmode CTS
      wme burst roaming MANUAL
.Ed
.Pp
If
.Pa /etc/rc.conf
has an
.Ql ifconfig_wlan0="DHCP"
entry,
.Xr dhclient 8 will be launched automatically after
.Xr wpa_supplicant 8 associates with the access point.
.Pp
If DHCP is not possible or desired, set a static IP address after
.Xr wpa_supplicant 8 has authenticated the station:
.Bd -literal -offset indent
# ifconfig wlan0 inet 192.168.0.100 netmask 255.255.255.0
# ifconfig wlan0
wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
      ether 00:11:95:d5:43:62
      inet 192.168.0.100 netmask 0xffffff00 broadcast 192.168.0.255
      media: IEEE 802.11 Wireless Ethernet OFDM/36Mbps mode 11g
      status: associated
      ssid freebsdap channel 1 (2412 Mhz 11g) bssid 00:11:95:c3:0d:ac
      country US ecm authmode WPA2/802.11i privacy ON deftxkey UNDEF
      AES-CCM 3:128-bit txpower 21.5 bmiss 7 scanvalid 450 bgscan
      bgscanintvl 300 bgscanidle 250 roam:rssi 7 roam:rate 5 protmode CTS
      wme burst roaming MANUAL
.Ed
.Pp
When DHCP is not used, the default gateway and the nameserver also have to be manually
set:
.Bd -literal -offset indent
# route add default your_default_router
# echo "nameserver your_DNS_server" >> /etc/resolv.conf
.Ed
.Ss WPA WITH EAP-TLS
.Pp
The second way to use WPA is with an 802.1X backend authentication server.
In this case, WPA is called WPA Enterprise to differentiate it from the less secure WPA Personal.
Authentication in WPA Enterprise is based on the Extensible Authentication Protocol (EAP).
.Pp
EAP does not come with an encryption method.
Instead, EAP is embedded inside an encrypted tunnel.
There are many EAP authentication methods, but EAP-TLS, EAP-TTLS, and EAP-PEAP are the most common.
.Pp
EAP with Transport Layer Security (EAP-TLS) is a well-supported wireless authentication protocol since it was the first EAP method to be certified by the Wi-Fi Alliance.
 EAP-TLS requires three certificates to run: the certificate of the Certificate
Authority (CA) installed on all machines, the server certificate for the authentication
server, and one client certificate for each wireless client.
In this EAP method, both the authentication server and wireless client authenticate each
other by presenting their respective certificates, and then verify that these
certificates were signed by the organization's CA.
.Pp
As previously, the configuration is done via
.Pa /etc/wpa_supplicant.conf
:
.Bd -literal -offset indent
network={
  ssid="freebsdap" 
  proto=RSN  
  key_mgmt=WPA-EAP 
  eap=TLS 
  identity="loader" 
  ca_cert="/etc/certs/cacert.pem" 
  client_cert="/etc/certs/clientcert.pem" 
  private_key="/etc/certs/clientkey.pem" 
  private_key_passwd="freebsdmallclient" 
}
.Ed
.Pp
This field indicates the network name (SSID).
.Pp
This example uses the RSN  IEEE 802.11i protocol, also known as WPA2.
.Pp
The
.Ql key_mgmt
line refers to the key management protocol to use.
In this example, it is WPA using EAP authentication.
.Pp
This field indicates the EAP method for the connection.
.Pp
The
.Ql identity
field contains the identity string for EAP.
.Pp
The
.Ql ca_cert
field indicates the pathname of the CA certificate file.
This file is needed to verify the server certificate.
.Pp
The
.Ql client_cert
line gives the pathname to the client certificate file.
This certificate is unique to each wireless client of the network.
.Pp
The
.Ql private_key
field is the pathname to the client certificate private key file.
.Pp
The
.Ql private_key_passwd
field contains the passphrase for the private key.
.Pp
Then, add the following lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="WPA DHCP"
.Ed
.Pp
The next step is to bring up the interface:
.Bd -literal -offset indent
# service netif start
Starting wpa_supplicant.
DHCPREQUEST on wlan0 to 255.255.255.255 port 67 interval 7
DHCPREQUEST on wlan0 to 255.255.255.255 port 67 interval 15
DHCPACK from 192.168.0.20
bound to 192.168.0.254 -- renewal in 300 seconds.
wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
      ether 00:11:95:d5:43:62
      inet 192.168.0.254 netmask 0xffffff00 broadcast 192.168.0.255
      media: IEEE 802.11 Wireless Ethernet DS/11Mbps mode 11g
      status: associated
      ssid freebsdap channel 1 (2412 Mhz 11g) bssid 00:11:95:c3:0d:ac
      country US ecm authmode WPA2/802.11i privacy ON deftxkey UNDEF
      AES-CCM 3:128-bit txpower 21.5 bmiss 7 scanvalid 450 bgscan
      bgscanintvl 300 bgscanidle 250 roam:rssi 7 roam:rate 5 protmode CTS
      wme burst roaming MANUAL
.Ed
.Pp
It is also possible to bring up the interface manually using
.Xr wpa_supplicant 8 and
.Xr ifconfig 8 .
.Ss WPA WITH EAP-TTLS
.Pp
With EAP-TLS, both the authentication server and the client need a certificate.
With EAP-TTLS, a client certificate is optional.
This method is similar to a web server which creates a secure SSL tunnel even if visitors do not have client-side certificates.
 EAP-TTLS uses an encrypted TLS tunnel for safe transport of the authentication data.
.Pp
The required configuration can be added to
.Pa /etc/wpa_supplicant.conf
:
.Bd -literal -offset indent
network={
  ssid="freebsdap"
  proto=RSN
  key_mgmt=WPA-EAP
  eap=TTLS 
  identity="test" 
  password="test" 
  ca_cert="/etc/certs/cacert.pem" 
  phase2="auth=MD5" 
}
.Ed
.Pp
This field specifies the EAP method for the connection.
.Pp
The
.Ql identity
field contains the identity string for EAP authentication inside the encrypted TLS tunnel.
.Pp
The
.Ql password
field contains the passphrase for the EAP authentication.
.Pp
The
.Ql ca_cert
field indicates the pathname of the CA certificate file.
This file is needed to verify the server certificate.
.Pp
This field specifies the authentication method used in the encrypted TLS tunnel.
In this example, EAP with MD5-Challenge is used.
The
.Do
inner authentication
.Dc
phase is often called
.Do
phase2
.Dc
.
.Pp
Next, add the following lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="WPA DHCP"
.Ed
.Pp
The next step is to bring up the interface:
.Bd -literal -offset indent
# service netif start
Starting wpa_supplicant.
DHCPREQUEST on wlan0 to 255.255.255.255 port 67 interval 7
DHCPREQUEST on wlan0 to 255.255.255.255 port 67 interval 15
DHCPREQUEST on wlan0 to 255.255.255.255 port 67 interval 21
DHCPACK from 192.168.0.20
bound to 192.168.0.254 -- renewal in 300 seconds.
wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
      ether 00:11:95:d5:43:62
      inet 192.168.0.254 netmask 0xffffff00 broadcast 192.168.0.255
      media: IEEE 802.11 Wireless Ethernet DS/11Mbps mode 11g
      status: associated
      ssid freebsdap channel 1 (2412 Mhz 11g) bssid 00:11:95:c3:0d:ac
      country US ecm authmode WPA2/802.11i privacy ON deftxkey UNDEF
      AES-CCM 3:128-bit txpower 21.5 bmiss 7 scanvalid 450 bgscan
      bgscanintvl 300 bgscanidle 250 roam:rssi 7 roam:rate 5 protmode CTS
      wme burst roaming MANUAL
.Ed
.Ss WPA WITH EAP-PEAP
.Pp
PEAPv0/EAP-MSCHAPv2 is the most common PEAP method.
In this chapter, the term PEAP is used to refer to that method.
.Pp
Protected EAP (PEAP) is designed as an alternative to EAP-TTLS and is the most used EAP standard after EAP-TLS.
In a network with mixed operating systems, PEAP should be the most supported standard after EAP-TLS.
.Pp
PEAP is similar to EAP-TTLS as it uses a server-side certificate to authenticate clients by creating an
encrypted TLS tunnel between the client and the authentication server, which protects the
ensuing exchange of authentication information.
 PEAP authentication differs from EAP-TTLS as it broadcasts the username in the clear and only the password is sent in the
encrypted TLS tunnel.
 EAP-TTLS will use the TLS tunnel for both the username and password.
.Pp
Add the following lines to
.Pa /etc/wpa_supplicant.conf
to configure the EAP-PEAP related settings:
.Bd -literal -offset indent
network={
  ssid="freebsdap"
  proto=RSN
  key_mgmt=WPA-EAP
  eap=PEAP 
  identity="test" 
  password="test" 
  ca_cert="/etc/certs/cacert.pem" 
  phase1="peaplabel=0" 
  phase2="auth=MSCHAPV2" 
}
.Ed
.Pp
This field specifies the EAP method for the connection.
.Pp
The
.Ql identity
field contains the identity string for EAP authentication inside the encrypted TLS tunnel.
.Pp
The
.Ql password
field contains the passphrase for the EAP authentication.
.Pp
The
.Ql ca_cert
field indicates the pathname of the CA certificate file.
This file is needed to verify the server certificate.
.Pp
This field contains the parameters for the first phase of authentication, the TLS tunnel.
According to the authentication server used, specify a specific label for
authentication.
Most of the time, the label will be
.Do
client EAP encryption
.Dc
which is set by using
.Ql peaplabel=0
.
More information can be found in
.Xr wpa_supplicant.conf 5 .
.Pp
This field specifies the authentication protocol used in the encrypted TLS tunnel.
In the case of PEAP, it is
.Ql auth=MSCHAPV2
.
.Pp
Add the following to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
wlans_ath0="wlan0"
ifconfig_wlan0="WPA DHCP"
.Ed
.Pp
Then, bring up the interface:
.Bd -literal -offset indent
# service netif start
Starting wpa_supplicant.
DHCPREQUEST on wlan0 to 255.255.255.255 port 67 interval 7
DHCPREQUEST on wlan0 to 255.255.255.255 port 67 interval 15
DHCPREQUEST on wlan0 to 255.255.255.255 port 67 interval 21
DHCPACK from 192.168.0.20
bound to 192.168.0.254 -- renewal in 300 seconds.
wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
      ether 00:11:95:d5:43:62
      inet 192.168.0.254 netmask 0xffffff00 broadcast 192.168.0.255
      media: IEEE 802.11 Wireless Ethernet DS/11Mbps mode 11g
      status: associated
      ssid freebsdap channel 1 (2412 Mhz 11g) bssid 00:11:95:c3:0d:ac
      country US ecm authmode WPA2/802.11i privacy ON deftxkey UNDEF
      AES-CCM 3:128-bit txpower 21.5 bmiss 7 scanvalid 450 bgscan
      bgscanintvl 300 bgscanidle 250 roam:rssi 7 roam:rate 5 protmode CTS
      wme burst roaming MANUAL
.Ed
.Ss WEP
.Pp
Wired Equivalent Privacy (WEP) is part of the original 802.11 standard.
There is no authentication mechanism, only a weak form of access control which
is easily cracked.
.Pp
WEP can be set up using
.Xr ifconfig 8 :
.Bd -literal -offset indent
# ifconfig wlan0 create wlandev ath0
# ifconfig wlan0 inet 192.168.1.100 netmask 255.255.255.0 \ ssid my_net wepmode on weptxkey 3 wepkey 3:0x3456789012
.Ed
.Bl -bullet -offset -compact
.It
The
.Ql weptxkey
specifies which WEP key will be used in the transmission.
This example uses the third key.
This must match the setting on the access point.
When unsure which key is used by the access point, try
.Ql 1
(the first key) for this value.
.It
The
.Ql wepkey
selects one of the WEP keys.
It should be in the format index:key.
Key
.Ql 1
is used by default; the index only needs to be set when using a key other than
the first key.
Replace the
.Ql 0x3456789012
with the key configured for use on the access point.
.El
.Pp
Refer to
.Xr ifconfig 8 for further information.
.Pp
The
.Xr wpa_supplicant 8 facility can be used to configure a wireless interface with WEP.
The example above can be set up by adding the following lines to
.Pa /etc/wpa_supplicant.conf
:
.Bd -literal -offset indent
network={
  ssid="my_net"
  key_mgmt=NONE
  wep_key3=3456789012
  wep_tx_keyidx=3
}
.Ed
.Pp
Then:
.Bd -literal -offset indent
# wpa_supplicant -i wlan0 -c /etc/wpa_supplicant.conf
Trying to associate with 00:13:46:49:41:76 (SSID='dlinkap' freq=2437 MHz)
Associated with 00:13:46:49:41:76
.Ed
.Ss AD-HOC MODE
.Pp
IBSS mode, also called ad-hoc mode, is designed for point to point connections.
For example, to establish an ad-hoc network between the machines
.Ql A
and
.Ql B
, choose two IP addresses and a SSID.
.Pp
On
.Ql A
:
.Bd -literal -offset indent
# ifconfig wlan0 create wlandev ath0 wlanmode adhoc
# ifconfig wlan0 inet 192.168.0.1 netmask 255.255.255.0 ssid freebsdap
# ifconfig wlan0
  wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
	  ether 00:11:95:c3:0d:ac
	  inet 192.168.0.1 netmask 0xffffff00 broadcast 192.168.0.255
	  media: IEEE 802.11 Wireless Ethernet autoselect mode 11g <adhoc>
	  status: running
	  ssid freebsdap channel 2 (2417 Mhz 11g) bssid 02:11:95:c3:0d:ac
	  country US ecm authmode OPEN privacy OFF txpower 21.5 scanvalid 60
	  protmode CTS wme burst
.Ed
.Pp
The
.Ql adhoc
parameter indicates that the interface is running in IBSS mode.
.Pp
.Ql B
should now be able to detect
.Ql A
:
.Bd -literal -offset indent
# ifconfig wlan0 create wlandev ath0 wlanmode adhoc
# ifconfig wlan0 up scan
  SSID/MESH ID    BSSID              CHAN RATE   S:N     INT CAPS
  freebsdap       02:11:95:c3:0d:ac    2   54M -64:-96  100 IS   WME
.Ed
.Pp
The
.Ql I
in the output confirms that
.Ql A
is in ad-hoc mode.
Now, configure
.Ql B
with a different IP address:
.Bd -literal -offset indent
# ifconfig wlan0 inet 192.168.0.2 netmask 255.255.255.0 ssid freebsdap
# ifconfig wlan0
  wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
	  ether 00:11:95:d5:43:62
	  inet 192.168.0.2 netmask 0xffffff00 broadcast 192.168.0.255
	  media: IEEE 802.11 Wireless Ethernet autoselect mode 11g <adhoc>
	  status: running
	  ssid freebsdap channel 2 (2417 Mhz 11g) bssid 02:11:95:c3:0d:ac
	  country US ecm authmode OPEN privacy OFF txpower 21.5 scanvalid 60
	  protmode CTS wme burst
.Ed
.Pp
Both
.Ql A
and
.Ql B
are now ready to exchange information.
.Ss FREEBSD HOST ACCESS POINTS
.Pp
FreeBSD can act as an Access Point (AP) which eliminates the need to buy a hardware AP or run an ad-hoc network.
This can be particularly useful when a FreeBSD machine is acting as a gateway
to another network such as the Internet.
.Ss BASIC SETTINGS
.Pp
Before configuring a FreeBSD machine as an AP, the kernel must be configured with the appropriate networking support for the
wireless card as well as the security protocols being used.
For more details, see .
.Pp
The NDIS driver wrapper for Windows drivers does not currently support AP operation.
Only native FreeBSD wireless drivers support AP mode.
.Pp
Once wireless networking support is loaded, check if the wireless device
supports the host-based access point mode, also known as hostap mode:
.Bd -literal -offset indent
# ifconfig wlan0 create wlandev ath0
# ifconfig wlan0 list caps
drivercaps=6f85edc1<STA,FF,TURBOP,IBSS,HOSTAP,AHDEMO,TXPMGT,SHSLOT,SHPREAMBLE,MONITOR,MBSS,WPA1,WPA2,BURST,WME,WDS,BGSCAN,TXFRAG>
cryptocaps=1f<WEP,TKIP,AES,AES_CCM,TKIPMIC>
.Ed
.Pp
This output displays the card's capabilities.
The
.Ql HOSTAP
word confirms that this wireless card can act as an AP.
Various supported ciphers are also listed: WEP, TKIP, and AES.
This information indicates which security protocols can be used on the AP.
.Pp
The wireless device can only be put into hostap mode during the creation of the
network pseudo-device, so a previously created device must be destroyed first:
.Bd -literal -offset indent
# ifconfig wlan0 destroy
.Ed
.Pp
then regenerated with the correct option before setting the other parameters:
.Bd -literal -offset indent
# ifconfig wlan0 create wlandev ath0 wlanmode hostap
# ifconfig wlan0 inet 192.168.0.1 netmask 255.255.255.0 ssid freebsdap mode 11g channel 1
.Ed
.Pp
Use
.Xr ifconfig 8 again to see the status of the
.Pa wlan0
interface:
.Bd -literal -offset indent
# ifconfig wlan0
  wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
	  ether 00:11:95:c3:0d:ac
	  inet 192.168.0.1 netmask 0xffffff00 broadcast 192.168.0.255
	  media: IEEE 802.11 Wireless Ethernet autoselect mode 11g <hostap>
	  status: running
	  ssid freebsdap channel 1 (2412 Mhz 11g) bssid 00:11:95:c3:0d:ac
	  country US ecm authmode OPEN privacy OFF txpower 21.5 scanvalid 60
	  protmode CTS wme burst dtimperiod 1 -dfs
.Ed
.Pp
The
.Ql hostap
parameter indicates the interface is running in the host-based access point
mode.
.Pp
The interface configuration can be done automatically at boot time by adding
the following lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
wlans_ath0="wlan0"
create_args_wlan0="wlanmode hostap"
ifconfig_wlan0="inet 192.168.0.1 netmask 255.255.255.0 ssid freebsdap mode 11g channel 1"
.Ed
.Ss HOST-BASED ACCESS POINT WITHOUT AUTHENTICATION OR ENCRYPTION
.Pp
Although it is not recommended to run an AP without any authentication or encryption, this is a simple way to check if the AP is working.
This configuration is also important for debugging client issues.
.Pp
Once the AP is configured, initiate a scan from another wireless machine to find the AP:
.Bd -literal -offset indent
# ifconfig wlan0 create wlandev ath0
# ifconfig wlan0 up scan
SSID/MESH ID    BSSID              CHAN RATE   S:N     INT CAPS
freebsdap       00:11:95:c3:0d:ac    1   54M -66:-96  100 ES   WME
.Ed
.Pp
The client machine found the AP and can be associated with it:
.Bd -literal -offset indent
# ifconfig wlan0 inet 192.168.0.2 netmask 255.255.255.0 ssid freebsdap
# ifconfig wlan0
  wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
	  ether 00:11:95:d5:43:62
	  inet 192.168.0.2 netmask 0xffffff00 broadcast 192.168.0.255
	  media: IEEE 802.11 Wireless Ethernet OFDM/54Mbps mode 11g
	  status: associated
	  ssid freebsdap channel 1 (2412 Mhz 11g) bssid 00:11:95:c3:0d:ac
	  country US ecm authmode OPEN privacy OFF txpower 21.5 bmiss 7
	  scanvalid 60 bgscan bgscanintvl 300 bgscanidle 250 roam:rssi 7
	  roam:rate 5 protmode CTS wme burst
.Ed
.Ss WPA2 HOST-BASED ACCESS POINT
.Pp
This section focuses on setting up a FreeBSD access point using the WPA2 security protocol.
More details regarding WPA and the configuration of WPA-based wireless clients can be found in .
.Pp
The
.Xr hostapd 8 daemon is used to deal with client authentication and key management on the WPA2-enabled AP.
.Pp
The following configuration operations are performed on the FreeBSD machine
acting as the AP.
Once the AP is correctly working,
.Xr hostapd 8 can be automatically started at boot with this line in
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
hostapd_enable="YES"
.Ed
.Pp
Before trying to configure
.Xr hostapd 8 , first configure the basic settings introduced in .
.Ss WPA2-PSK
.Pp
WPA2-PSK is intended for small networks where the use of a backend authentication server
is not possible or desired.
.Pp
The configuration is done in
.Pa /etc/hostapd.conf
:
.Bd -literal -offset indent
interface=wlan0                  
debug=1                          
ctrl_interface=/var/run/hostapd  
ctrl_interface_group=wheel       
ssid=freebsdap                   
wpa=2                            
wpa_passphrase=freebsdmall       
wpa_key_mgmt=WPA-PSK             
wpa_pairwise=CCMP
.Ed
.Pp
Wireless interface used for the access point.
.Pp
Level of verbosity used during the execution of
.Xr hostapd 8 .
A value of
.Ql 1
represents the minimal level.
.Pp
Pathname of the directory used by
.Xr hostapd 8 to store domain socket files for communication with external programs such as
.Xr hostapd_cli 8 .
The default value is used in this example.
.Pp
The group allowed to access the control interface files.
.Pp
The wireless network name, or SSID, that will appear in wireless scans.
.Pp
Enable WPA and specify which WPA authentication protocol will be required.
A value of
.Ql 2
configures the AP for WPA2 and is recommended.
Set to
.Ql 1
only if the obsolete WPA is required.
.Pp
ASCII passphrase for WPA authentication.
.Pp
Always use strong passwords that are at least 8 characters long and made from a
rich alphabet so that they will not be easily guessed or attacked.
.Pp
The key management protocol to use.
This example sets WPA-PSK.
.Pp
Encryption algorithms accepted by the access point.
In this example, only the CCMP (AES) cipher is accepted.
 CCMP is an alternative to TKIP and is strongly preferred when possible.
 TKIP should be allowed only when there are stations incapable of using CCMP.
.Pp
The next step is to start
.Xr hostapd 8 :
.Bd -literal -offset indent
# service hostapd forcestart
.Ed
.Bd -literal -offset indent
# ifconfig wlan0
wlan0: flags=8943<UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST> metric 0 mtu 1500
	ether 04:f0:21:16:8e:10
	inet6 fe80::6f0:21ff:fe16:8e10%wlan0 prefixlen 64 scopeid 0x9
	nd6 options=21<PERFORMNUD,AUTO_LINKLOCAL>
	media: IEEE 802.11 Wireless Ethernet autoselect mode 11na <hostap>
	status: running
	ssid No5ignal channel 36 (5180 MHz 11a ht/40+) bssid 04:f0:21:16:8e:10
	country US ecm authmode WPA2/802.11i privacy MIXED deftxkey 2
	AES-CCM 2:128-bit AES-CCM 3:128-bit txpower 17 mcastrate 6 mgmtrate 6
	scanvalid 60 ampdulimit 64k ampdudensity 8 shortgi wme burst
	dtimperiod 1 -dfs
	groups: wlan
.Ed
.Pp
Once the AP is running, the clients can associate with it.
See for more details.
It is possible to see the stations associated with the AP using
.Cm ifconfig wlan0 list sta
.
.Ss WEP HOST-BASED ACCESS POINT
.Pp
It is not recommended to use WEP for setting up an AP since there is no authentication mechanism and the encryption is easily
cracked.
Some legacy wireless cards only support WEP and these cards will only support an AP without authentication or encryption.
.Pp
The wireless device can now be put into hostap mode and configured with the
correct SSID and IP address:
.Bd -literal -offset indent
# ifconfig wlan0 create wlandev ath0 wlanmode hostap
# ifconfig wlan0 inet 192.168.0.1 netmask 255.255.255.0 \ ssid freebsdap wepmode on weptxkey 3 wepkey 3:0x3456789012 mode 11g
.Ed
.Bl -bullet -offset -compact
.It
The
.Ql weptxkey
indicates which WEP key will be used in the transmission.
This example uses the third key as key numbering starts with
.Ql 1
.
This parameter must be specified in order to encrypt the data.
.It
The
.Ql wepkey
sets the selected WEP key.
It should be in the format index:key.
If the index is not given, key
.Ql 1
is set.
The index needs to be set when using keys other than the first key.
.El
.Pp
Use
.Xr ifconfig 8 to see the status of the
.Pa wlan0
interface:
.Bd -literal -offset indent
# ifconfig wlan0
  wlan0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
	  ether 00:11:95:c3:0d:ac
	  inet 192.168.0.1 netmask 0xffffff00 broadcast 192.168.0.255
	  media: IEEE 802.11 Wireless Ethernet autoselect mode 11g <hostap>
	  status: running
	  ssid freebsdap channel 4 (2427 Mhz 11g) bssid 00:11:95:c3:0d:ac
	  country US ecm authmode OPEN privacy ON deftxkey 3 wepkey 3:40-bit
	  txpower 21.5 scanvalid 60 protmode CTS wme burst dtimperiod 1 -dfs
.Ed
.Pp
From another wireless machine, it is now possible to initiate a scan to find
the AP:
.Bd -literal -offset indent
# ifconfig wlan0 create wlandev ath0
# ifconfig wlan0 up scan
SSID            BSSID              CHAN RATE  S:N   INT CAPS
freebsdap       00:11:95:c3:0d:ac    1   54M 22:1   100 EPS
.Ed
.Pp
In this example, the client machine found the AP and can associate with it using the correct parameters.
See for more details.
.Ss USING BOTH WIRED AND WIRELESS CONNECTIONS
.Pp
A wired connection provides better performance and reliability, while a
wireless connection provides flexibility and mobility.
Laptop users typically want to roam seamlessly between the two types of
connections.
.Pp
On FreeBSD, it is possible to combine two or even more network interfaces
together in a
.Do
failover
.Dc
fashion.
This type of configuration uses the most preferred and available connection
from a group of network interfaces, and the operating system switches
automatically when the link state changes.
.Pp
Link aggregation and failover is covered in and an example for using both wired and wireless connections is provided at .
.Ss TROUBLESHOOTING
.Pp
This section describes a number of steps to help troubleshoot common wireless
networking problems.
.Bl -bullet -offset -compact
.It
If the access point is not listed when scanning, check that the configuration
has not limited the wireless device to a limited set of channels.
.It
If the device cannot associate with an access point, verify that the
configuration matches the settings on the access point.
This includes the authentication scheme and any security protocols.
Simplify the configuration as much as possible.
If using a security protocol such as WPA or WEP, configure the access point for open authentication and no security to see if
traffic will pass.
Debugging support is provided by
.Xr wpa_supplicant 8 .
Try running this utility manually with
.Ar -dd
and look at the system logs.
.It
Once the system can associate with the access point, diagnose the network
configuration using tools like
.Xr ping 8 .
.It
There are many lower-level debugging tools.
Debugging messages can be enabled in the 802.11 protocol support layer using
.Xr wlandebug 8 .
For example, to enable console messages related to scanning for access points
and the 802.11 protocol handshakes required to arrange communication:
.Bd -literal -offset indent
# wlandebug -i wlan0 +scan+auth+debug+assoc
  net.wlan.0.debug: 0 => 0xc80000<assoc,auth,scan>
.Ed
Many useful statistics are maintained by the 802.11 layer and
.Cm wlanstats
, found in
.Pa /usr/src/tools/tools/net80211
, will dump this information.
These statistics should display all errors identified by the 802.11 layer.
However, some errors are identified in the device drivers that lie below the
802.11 layer so they may not show up.
To diagnose device-specific problems, refer to the drivers' documentation.
.El
.Pp
If the above information does not help to clarify the problem, submit a problem
report and include output from the above tools.
.Pp
Many cellphones provide the option to share their data connection over USB
(often called "tethering").
This feature uses either the RNDIS, CDC or a custom Apple  iPhone/iPad protocol.
.Bl -bullet -offset -compact
.It
Android devices generally use the
.Xr urndis 4 driver.
.It
Apple devices use the
.Xr ipheth 4 driver.
.It
Older devices will often use the
.Xr cdce 4 driver.
.El
.Pp
Before attaching a device, load the appropriate driver into the kernel:
.Bd -literal -offset indent
# kldload if_urndis # kldload if_cdce # kldload if_ipheth
.Ed
.Pp
Once the device is attached
.Ql ue
0 will be available for use like a normal network device.
Be sure that the
.Do
USB tethering
.Dc
option is enabled on the device.
.Pp
Bluetooth is a wireless technology for creating personal networks operating in
the 2.4 GHz unlicensed band, with a range of 10 meters.
Networks are usually formed ad-hoc from portable devices such as cellular
phones, handhelds, and laptops.
Unlike Wi-Fi wireless technology, Bluetooth offers higher level service
profiles, such as FTP-like file servers, file pushing, voice transport, serial line emulation, and
more.
.Pp
This section describes the use of a USB Bluetooth dongle on a FreeBSD system.
It then describes the various Bluetooth protocols and utilities.
.Ss LOADING BLUETOOTH SUPPORT
.Pp
The Bluetooth stack in FreeBSD is implemented using the
.Xr netgraph 4 framework.
A broad variety of Bluetooth USB dongles is supported by
.Xr ng_ubt 4 .
Broadcom BCM2033 based Bluetooth devices are supported by the
.Xr ubtbcmfw 4 and
.Xr ng_ubt 4 drivers.
The 3Com Bluetooth PC Card 3CRWB60-A is supported by the
.Xr ng_bt3c 4 driver.
Serial and UART based Bluetooth devices are supported by
.Xr sio 4 ,
.Xr ng_h4 4 , and
.Xr hcseriald 8 .
.Pp
Before attaching a device, determine which of the above drivers it uses, then
load the driver.
For example, if the device uses the
.Xr ng_ubt 4 driver:
.Bd -literal -offset indent
# kldload ng_ubt
.Ed
.Pp
If the Bluetooth device will be attached to the system during system startup,
the system can be configured to load the module at boot time by adding the
driver to
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
ng_ubt_load="YES"
.Ed
.Pp
Once the driver is loaded, plug in the USB dongle.
If the driver load was successful, output similar to the following should
appear on the console and in
.Pa /var/log/messages
:
.Bd -literal -offset indent
ubt0: vendor 0x0a12 product 0x0001, rev 1.10/5.25, addr 2
ubt0: Interface 0 endpoints: interrupt=0x81, bulk-in=0x82, bulk-out=0x2
ubt0: Interface 1 (alt.config 5) endpoints: isoc-in=0x83, isoc-out=0x3,
      wMaxPacketSize=49, nframes=6, buffer size=294
.Ed
.Pp
To start and stop the Bluetooth stack, use its startup script.
It is a good idea to stop the stack before unplugging the device.
When starting the stack, the output should be similar to the following:
.Bd -literal -offset indent
# service bluetooth start ubt0
BD_ADDR: 00:02:72:00:d4:1a
Features: 0xff 0xff 0xf 00 00 00 00 00
<3-Slot> <5-Slot> <Encryption> <Slot offset>
<Timing accuracy> <Switch> <Hold mode> <Sniff mode>
<Park mode> <RSSI> <Channel quality> <SCO link>
<HV2 packets> <HV3 packets> <u-law log> <A-law log> <CVSD>
<Paging scheme> <Power control> <Transparent SCO data>
Max. ACL packet size: 192 bytes
Number of ACL packets: 8
Max. SCO packet size: 64 bytes
Number of SCO packets: 8
.Ed
.Ss FINDING OTHER BLUETOOTH DEVICES
.Pp
The Host Controller Interface (HCI) provides a uniform method for accessing Bluetooth baseband capabilities.
In FreeBSD, a netgraph HCI node is created for each Bluetooth device.
For more details, refer to
.Xr ng_hci 4 .
.Pp
One of the most common tasks is discovery of Bluetooth devices within RF proximity.
This operation is called inquiry.
Inquiry and other HCI related operations are done using
.Xr hccontrol 8 .
The example below shows how to find out which Bluetooth devices are in range.
The list of devices should be displayed in a few seconds.
Note that a remote device will only answer the inquiry if it is set to discoverable mode.
.Bd -literal -offset indent
% hccontrol -n ubt0hci inquiry
Inquiry result, num_responses=1
Inquiry result #0
       BD_ADDR: 00:80:37:29:19:a4
       Page Scan Rep. Mode: 0x1
       Page Scan Period Mode: 00
       Page Scan Mode: 00
       Class: 52:02:04
       Clock offset: 0x78ef
Inquiry complete. Status: No error [00]
.Ed
.Pp
The
.Ql BD_ADDR
is the unique address of a Bluetooth device, similar to the MAC address of a network card.
This address is needed for further communication with a device and it is
possible to assign a human readable name to a BD_ADDR.
Information regarding the known Bluetooth hosts is contained in
.Pa /etc/bluetooth/hosts
.
The following example shows how to obtain the human readable name that was
assigned to the remote device:
.Bd -literal -offset indent
% hccontrol -n ubt0hci remote_name_request 00:80:37:29:19:a4
BD_ADDR: 00:80:37:29:19:a4
Name: Pav's T39
.Ed
.Pp
If an inquiry is performed on a remote Bluetooth device, it will find the
computer as
.Do
your.host.name (ubt0)
.Dc
.
The name assigned to the local device can be changed at any time.
.Pp
The Bluetooth system provides a point-to-point connection between two Bluetooth
units, or a point-to-multipoint connection which is shared among several
Bluetooth devices.
The following example shows how to obtain the list of active baseband
connections for the local device:
.Bd -literal -offset indent
% hccontrol -n ubt0hci read_connection_list
Remote BD_ADDR    Handle Type Mode Role Encrypt Pending Queue State
00:80:37:29:19:a4     41  ACL    0 MAST    NONE       0     0 OPEN
.Ed
.Pp
A connection handle is useful when termination of the baseband connection is required, though it is
normally not required to do this by hand.
The stack will automatically terminate inactive baseband connections.
.Bd -literal -offset indent
# hccontrol -n ubt0hci disconnect 41
Connection handle: 41
Reason: Connection terminated by local host [0x16]
.Ed
.Pp
Type
.Cm hccontrol help
for a complete listing of available HCI commands.
Most of the HCI commands do not require superuser privileges.
.Ss DEVICE PAIRING
.Pp
By default, Bluetooth communication is not authenticated, and any device can
talk to any other device.
A Bluetooth device, such as a cellular phone, may choose to require
authentication to provide a particular service.
Bluetooth authentication is normally done with a PIN code, an ASCII string up to 16 characters in length.
The user is required to enter the same PIN code on both devices.
Once the user has entered the PIN code, both devices will generate a link key.
After that, the link key can be stored either in the devices or in a persistent
storage.
Next time, both devices will use the previously generated link key.
This procedure is called pairing.
Note that if the link key is lost by either device, the pairing must be
repeated.
.Pp
The
.Xr hcsecd 8 daemon is responsible for handling Bluetooth authentication requests.
The default configuration file is
.Pa /etc/bluetooth/hcsecd.conf
.
An example section for a cellular phone with the PIN code set to
.Ql 1234
is shown below:
.Bd -literal -offset indent
device {
        bdaddr  00:80:37:29:19:a4;
        name    "Pav's T39";
        key     nokey;
        pin     "1234";
      }
.Ed
.Pp
The only limitation on PIN codes is length.
Some devices, such as Bluetooth headsets, may have a fixed PIN code built in.
The
.Ar -d
switch forces
.Xr hcsecd 8 to stay in the foreground, so it is easy to see what is happening.
Set the remote device to receive pairing and initiate the Bluetooth connection
to the remote device.
The remote device should indicate that pairing was accepted and request the PIN code.
Enter the same PIN code listed in
.Pa hcsecd.conf
.
Now the computer and the remote device are paired.
Alternatively, pairing can be initiated on the remote device.
.Pp
The following line can be added to
.Pa /etc/rc.conf
to configure
.Xr hcsecd 8 to start automatically on system start:
.Bd -literal -offset indent
hcsecd_enable="YES"
.Ed
.Pp
The following is a sample of the
.Xr hcsecd 8 daemon output:
.Bd -literal -offset indent
hcsecd[16484]: Got Link_Key_Request event from 'ubt0hci', remote bdaddr 0:80:37:29:19:a4
hcsecd[16484]: Found matching entry, remote bdaddr 0:80:37:29:19:a4, name 'Pav's T39', link key doesn't exist
hcsecd[16484]: Sending Link_Key_Negative_Reply to 'ubt0hci' for remote bdaddr 0:80:37:29:19:a4
hcsecd[16484]: Got PIN_Code_Request event from 'ubt0hci', remote bdaddr 0:80:37:29:19:a4
hcsecd[16484]: Found matching entry, remote bdaddr 0:80:37:29:19:a4, name 'Pav's T39', PIN code exists
hcsecd[16484]: Sending PIN_Code_Reply to 'ubt0hci' for remote bdaddr 0:80:37:29:19:a4
.Ed
.Ss NETWORK ACCESS WITH PPP PROFILES
.Pp
A Dial-Up Networking (DUN) profile can be used to configure a cellular phone as a wireless modem for
connecting to a dial-up Internet access server.
It can also be used to configure a computer to receive data calls from a
cellular phone.
.Pp
Network access with a PPP profile can be used to provide LAN access for a single Bluetooth device or multiple Bluetooth devices.
It can also provide PC to PC connection using PPP networking over serial cable emulation.
.Pp
In FreeBSD, these profiles are implemented with
.Xr ppp 8 and the
.Xr rfcomm_pppd 8 wrapper which converts a Bluetooth connection into something PPP can use.
Before a profile can be used, a new PPP label must be created in
.Pa /etc/ppp/ppp.conf
.
Consult
.Xr rfcomm_pppd 8 for examples.
.Pp
In this example,
.Xr rfcomm_pppd 8 is used to open a connection to a remote device with a
.Ql BD_ADDR
of
.Ql 00:80:37:29:19:a4
on a DUN  RFCOMM channel:
.Bd -literal -offset indent
# rfcomm_pppd -a 00:80:37:29:19:a4 -c -C dun -l rfcomm-dialup
.Ed
.Pp
The actual channel number will be obtained from the remote device using the SDP protocol.
It is possible to specify the RFCOMM channel by hand, and in this case
.Xr rfcomm_pppd 8 will not perform the SDP query.
Use
.Xr sdpcontrol 8 to find out the RFCOMM channel on the remote device.
.Pp
In order to provide network access with the PPP  LAN service,
.Xr sdpd 8 must be running and a new entry for LAN clients must be created in
.Pa /etc/ppp/ppp.conf
.
Consult
.Xr rfcomm_pppd 8 for examples.
Finally, start the RFCOMM  PPP server on a valid RFCOMM channel number.
The RFCOMM  PPP server will automatically register the Bluetooth LAN service with the local SDP daemon.
The example below shows how to start the RFCOMM  PPP server.
.Bd -literal -offset indent
# rfcomm_pppd -s -C 7 -l rfcomm-server
.Ed
.Ss BLUETOOTH PROTOCOLS
.Pp
This section provides an overview of the various Bluetooth protocols, their
function, and associated utilities.
.Ss LOGICAL LINK CONTROL AND ADAPTATION PROTOCOL (L2CAP)
.Pp
The Logical Link Control and Adaptation Protocol (L2CAP) provides connection-oriented and connectionless data services to upper layer
protocols.
 L2CAP permits higher level protocols and applications to transmit and receive L2CAP data packets up to 64 kilobytes in length.
.Pp
L2CAP is based around the concept of channels.
A channel is a logical connection on top of a baseband connection, where each
channel is bound to a single protocol in a many-to-one fashion.
Multiple channels can be bound to the same protocol, but a channel cannot be
bound to multiple protocols.
Each L2CAP packet received on a channel is directed to the appropriate higher level
protocol.
Multiple channels can share the same baseband connection.
.Pp
In FreeBSD, a netgraph L2CAP node is created for each Bluetooth device.
This node is normally connected to the downstream Bluetooth HCI node and upstream Bluetooth socket nodes.
The default name for the L2CAP node is
.Do
devicel2cap
.Dc
.
For more details refer to
.Xr ng_l2cap 4 .
.Pp
A useful command is
.Xr l2ping 8 , which can be used to ping other devices.
Some Bluetooth implementations might not return all of the data sent to them,
so
.Ql 0 bytes
in the following example is normal.
.Bd -literal -offset indent
# l2ping -a 00:80:37:29:19:a4
0 bytes from 0:80:37:29:19:a4 seq_no=0 time=48.633 ms result=0
0 bytes from 0:80:37:29:19:a4 seq_no=1 time=37.551 ms result=0
0 bytes from 0:80:37:29:19:a4 seq_no=2 time=28.324 ms result=0
0 bytes from 0:80:37:29:19:a4 seq_no=3 time=46.150 ms result=0
.Ed
.Pp
The
.Xr l2control 8 utility is used to perform various operations on L2CAP nodes.
This example shows how to obtain the list of logical connections (channels) and
the list of baseband connections for the local device:
.Bd -literal -offset indent
% l2control -a 00:02:72:00:d4:1a read_channel_list
L2CAP channels:
Remote BD_ADDR     SCID/ DCID   PSM  IMTU/ OMTU State
00:07:e0:00:0b:ca    66/   64     3   132/  672 OPEN
% l2control -a 00:02:72:00:d4:1a read_connection_list
L2CAP connections:
Remote BD_ADDR    Handle Flags Pending State
00:07:e0:00:0b:ca     41 O           0 OPEN
.Ed
.Pp
Another diagnostic tool is
.Xr btsockstat 1 .
It is similar to
.Xr netstat 1 , but for Bluetooth network-related data structures.
The example below shows the same logical connection as
.Xr l2control 8 above.
.Bd -literal -offset indent
% btsockstat
Active L2CAP sockets
PCB      Recv-Q Send-Q Local address/PSM       Foreign address   CID   State
c2afe900      0      0 00:02:72:00:d4:1a/3     00:07:e0:00:0b:ca 66    OPEN
Active RFCOMM sessions
L2PCB    PCB      Flag MTU   Out-Q DLCs State
c2afe900 c2b53380 1    127   0     Yes  OPEN
Active RFCOMM sockets
PCB      Recv-Q Send-Q Local address     Foreign address   Chan DLCI State
c2e8bc80      0    250 00:02:72:00:d4:1a 00:07:e0:00:0b:ca 3    6    OPEN
.Ed
.Ss RADIO FREQUENCY COMMUNICATION (RFCOMM)
.Pp
The RFCOMM protocol provides emulation of serial ports over the L2CAP protocol.
 RFCOMM is a simple transport protocol, with additional provisions for emulating the 9
circuits of RS-232 (EIATIA-232-E) serial ports.
It supports up to 60 simultaneous connections (RFCOMM channels) between two Bluetooth devices.
.Pp
For the purposes of RFCOMM, a complete communication path involves two applications running on the
communication endpoints with a communication segment between them.
 RFCOMM is intended to cover applications that make use of the serial ports of the
devices in which they reside.
The communication segment is a direct connect Bluetooth link from one device to
another.
.Pp
RFCOMM is only concerned with the connection between the devices in the direct connect
case, or between the device and a modem in the network case.
 RFCOMM can support other configurations, such as modules that communicate via
Bluetooth wireless technology on one side and provide a wired interface on the
other side.
.Pp
In FreeBSD, RFCOMM is implemented at the Bluetooth sockets layer.
.Ss SERVICE DISCOVERY PROTOCOL (SDP)
.Pp
The Service Discovery Protocol (SDP) provides the means for client applications to discover the existence of
services provided by server applications as well as the attributes of those
services.
The attributes of a service include the type or class of service offered and
the mechanism or protocol information needed to utilize the service.
.Pp
SDP involves communication between a SDP server and a SDP client.
The server maintains a list of service records that describe the
characteristics of services associated with the server.
Each service record contains information about a single service.
A client may retrieve information from a service record maintained by the SDP server by issuing a SDP request.
If the client, or an application associated with the client, decides to use a
service, it must open a separate connection to the service provider in order to
utilize the service.
 SDP provides a mechanism for discovering services and their attributes, but it does
not provide a mechanism for utilizing those services.
.Pp
Normally, a SDP client searches for services based on some desired characteristics of the
services.
However, there are times when it is desirable to discover which types of
services are described by an SDP server's service records without any prior information about the services.
This process of looking for any offered services is called browsing.
.Pp
The Bluetooth SDP server,
.Xr sdpd 8 , and command line client,
.Xr sdpcontrol 8 , are included in the standard FreeBSD installation.
The following example shows how to perform a SDP browse query.
.Bd -literal -offset indent
% sdpcontrol -a 00:01:03:fc:6e:ec browse
Record Handle: 00000000
Service Class ID List:
        Service Discovery Server (0x1000)
Protocol Descriptor List:
        L2CAP (0x0100)
                Protocol specific parameter #1: u/int/uuid16 1
                Protocol specific parameter #2: u/int/uuid16 1

Record Handle: 0x00000001
Service Class ID List:
        Browse Group Descriptor (0x1001)

Record Handle: 0x00000002
Service Class ID List:
        LAN Access Using PPP (0x1102)
Protocol Descriptor List:
        L2CAP (0x0100)
        RFCOMM (0x0003)
                Protocol specific parameter #1: u/int8/bool 1
Bluetooth Profile Descriptor List:
        LAN Access Using PPP (0x1102) ver. 1.0
.Ed
.Pp
Note that each service has a list of attributes, such as the RFCOMM channel.
Depending on the service, the user might need to make note of some of the
attributes.
Some Bluetooth implementations do not support service browsing and may return
an empty list.
In this case, it is possible to search for the specific service.
The example below shows how to search for the OBEX Object Push (OPUSH) service:
.Bd -literal -offset indent
% sdpcontrol -a 00:01:03:fc:6e:ec search OPUSH
.Ed
.Pp
Offering services on FreeBSD to Bluetooth clients is done with the
.Xr sdpd 8 server.
The following line can be added to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
sdpd_enable="YES"
.Ed
.Pp
Then the
.Xr sdpd 8 daemon can be started with:
.Bd -literal -offset indent
# service sdpd start
.Ed
.Pp
The local server application that wants to provide a Bluetooth service to
remote clients will register the service with the local SDP daemon.
An example of such an application is
.Xr rfcomm_pppd 8 .
Once started, it will register the Bluetooth LAN service with the local SDP daemon.
.Pp
The list of services registered with the local SDP server can be obtained by issuing a SDP browse query via the local control channel:
.Bd -literal -offset indent
# sdpcontrol -l browse
.Ed
.Ss OBEX OBJECT PUSH (OPUSH)
.Pp
Object Exchange (OBEX) is a widely used protocol for simple file transfers between mobile devices.
Its main use is in infrared communication, where it is used for generic file
transfers between notebooks or PDAs, and for sending business cards or calendar entries between cellular phones
and other devices with Personal Information Manager (PIM) applications.
.Pp
The OBEX server and client are implemented by obexapp, which can be installed using the
.Ql comms/obexapp
package or port.
.Pp
The OBEX client is used to push and/or pull objects from the OBEX server.
An example object is a business card or an appointment.
The OBEX client can obtain the RFCOMM channel number from the remote device via SDP.
This can be done by specifying the service name instead of the RFCOMM channel number.
Supported service names are:
.Ql IrMC
,
.Ql FTRN
, and
.Ql OPUSH
.
It is also possible to specify the RFCOMM channel as a number.
Below is an example of an OBEX session where the device information object is pulled from the cellular phone,
and a new object, the business card, is pushed into the phone's directory.
.Bd -literal -offset indent
% obexapp -a 00:80:37:29:19:a4 -C IrMC
obex> get telecom/devinfo.txt devinfo-t39.txt
Success, response: OK, Success (0x20)
obex> put new.vcf
Success, response: OK, Success (0x20)
obex> di
Success, response: OK, Success (0x20)
.Ed
.Pp
In order to provide the OPUSH service,
.Xr sdpd 8 must be running and a root folder, where all incoming objects will be stored,
must be created.
The default path to the root folder is
.Pa /var/spool/obex
.
Finally, start the OBEX server on a valid RFCOMM channel number.
The OBEX server will automatically register the OPUSH service with the local SDP daemon.
The example below shows how to start the OBEX server.
.Bd -literal -offset indent
# obexapp -s -C 10
.Ed
.Ss SERIAL PORT PROFILE (SPP)
.Pp
The Serial Port Profile (SPP) allows Bluetooth devices to perform serial cable emulation.
This profile allows legacy applications to use Bluetooth as a cable
replacement, through a virtual serial port abstraction.
.Pp
In FreeBSD,
.Xr rfcomm_sppd 1 implements SPP and a pseudo tty is used as a virtual serial port abstraction.
The example below shows how to connect to a remote device's serial port
service.
A RFCOMM channel does not have to be specified as
.Xr rfcomm_sppd 1 can obtain it from the remote device via SDP.
To override this, specify a RFCOMM channel on the command line.
.Bd -literal -offset indent
# rfcomm_sppd -a 00:07:E0:00:0B:CA -t
rfcomm_sppd[94692]: Starting on /dev/pts/6...
/dev/pts/6
.Ed
.Pp
Once connected, the pseudo tty can be used as serial port:
.Bd -literal -offset indent
# cu -l /dev/pts/6
.Ed
.Pp
The pseudo tty is printed on stdout and can be read by wrapper scripts:
.Bd -literal -offset indent
PTS=`rfcomm_sppd -a 00:07:E0:00:0B:CA -t`
cu -l $PTS
.Ed
.Ss TROUBLESHOOTING
.Pp
By default, when FreeBSD is accepting a new connection, it tries to perform a
role switch and become master.
Some older Bluetooth devices which do not support role switching will not be
able to connect.
Since role switching is performed when a new connection is being established,
it is not possible to ask the remote device if it supports role switching.
However, there is a HCI option to disable role switching on the local side:
.Bd -literal -offset indent
# hccontrol -n ubt0hci write_node_role_switch 0
.Ed
.Pp
To display Bluetooth packets, use the third-party package hcidump, which can be installed using the
.Ql comms/hcidump
package or port.
This utility is similar to
.Xr tcpdump 1 and can be used to display the contents of Bluetooth packets on the terminal
and to dump the Bluetooth packets to a file.
.Pp
It is sometimes useful to divide a network, such as an Ethernet segment, into
network segments without having to create IP subnets and use a router to connect the segments together.
A device that connects two networks together in this fashion is called a
.Do
bridge
.Dc
.
.Pp
A bridge works by learning the MAC addresses of the devices on each of its network interfaces.
It forwards traffic between networks only when the source and destination MAC addresses are on different networks.
In many respects, a bridge is like an Ethernet switch with very few ports.
A FreeBSD system with multiple network interfaces can be configured to act as a
bridge.
.Pp
Bridging can be useful in the following situations:
.Bl -tag -offset -compact
.It Connecting Networks
The basic operation of a bridge is to join two or more network segments.
There are many reasons to use a host-based bridge instead of networking
equipment, such as cabling constraints or firewalling.
A bridge can also connect a wireless interface running in hostap mode to a
wired network and act as an access point.
.It Filtering/Traffic Shaping Firewall
A bridge can be used when firewall functionality is needed without routing or
Network Address Translation (NAT).
An example is a small company that is connected via DSL or ISDN to an ISP.
There are thirteen public IP addresses from the ISP and ten computers on the network.
In this situation, using a router-based firewall is difficult because of
subnetting issues.
A bridge-based firewall can be configured without any IP addressing issues.
.It Network Tap
A bridge can join two network segments in order to inspect all Ethernet frames
that pass between them using
.Xr bpf 4 and
.Xr tcpdump 1 on the bridge interface or by sending a copy of all frames out an additional
interface known as a span port.
.It Layer 2 VPN
Two Ethernet networks can be joined across an IP link by bridging the networks to an EtherIP tunnel or a
.Xr tap 4 based solution such as OpenVPN.
.It Layer 2 Redundancy
A network can be connected together with multiple links and use the Spanning
Tree Protocol (STP) to block redundant paths.
.El
.Pp
This section describes how to configure a FreeBSD system as a bridge using
.Xr if_bridge 4 .
A netgraph bridging driver is also available, and is described in
.Xr ng_bridge 4 .
.Pp
Packet filtering can be used with any firewall package that hooks into the
.Xr pfil 9 framework.
The bridge can be used as a traffic shaper with
.Xr altq 4 or
.Xr dummynet 4 .
.Ss ENABLING THE BRIDGE
.Pp
In FreeBSD,
.Xr if_bridge 4 is a kernel module which is automatically loaded by
.Xr ifconfig 8 when creating a bridge interface.
It is also possible to compile bridge support into a custom kernel by adding
.Ql device if_bridge
to the custom kernel configuration file.
.Pp
The bridge is created using interface cloning.
To create the bridge interface:
.Bd -literal -offset indent
# ifconfig bridge create
bridge0
# ifconfig bridge0
bridge0: flags=8802<BROADCAST,SIMPLEX,MULTICAST> metric 0 mtu 1500
        ether 96:3d:4b:f1:79:7a
        id 00:00:00:00:00:00 priority 32768 hellotime 2 fwddelay 15
        maxage 20 holdcnt 6 proto rstp maxaddr 100 timeout 1200
        root id 00:00:00:00:00:00 priority 0 ifcost 0 port 0
.Ed
.Pp
When a bridge interface is created, it is automatically assigned a randomly
generated Ethernet address.
The
.Ql maxaddr
and
.Ql timeout
parameters control how many MAC addresses the bridge will keep in its forwarding table and how many seconds
before each entry is removed after it is last seen.
The other parameters control how STP operates.
.Pp
Next, specify which network interfaces to add as members of the bridge.
For the bridge to forward packets, all member interfaces and the bridge need to
be up:
.Bd -literal -offset indent
# ifconfig bridge0 addm fxp0 addm fxp1 up
# ifconfig fxp0 up
# ifconfig fxp1 up
.Ed
.Pp
The bridge can now forward Ethernet frames between
.Pa fxp0
and
.Pa fxp1
.
Add the following lines to
.Pa /etc/rc.conf
so the bridge is created at startup:
.Bd -literal -offset indent
cloned_interfaces="bridge0"
ifconfig_bridge0="addm fxp0 addm fxp1 up"
ifconfig_fxp0="up"
ifconfig_fxp1="up"
.Ed
.Pp
If the bridge host needs an IP address, set it on the bridge interface, not on the member interfaces.
The address can be set statically or via DHCP.
This example sets a static IP address:
.Bd -literal -offset indent
# ifconfig bridge0 inet 192.168.0.1/24
.Ed
.Pp
It is also possible to assign an IPv6 address to a bridge interface.
To make the changes permanent, add the addressing information to
.Pa /etc/rc.conf
.
.Pp
When packet filtering is enabled, bridged packets will pass through the filter
inbound on the originating interface on the bridge interface, and outbound on
the appropriate interfaces.
Either stage can be disabled.
When direction of the packet flow is important, it is best to firewall on the
member interfaces rather than the bridge itself.
.Pp
The bridge has several configurable settings for passing non-IP and IP packets, and layer2 firewalling with
.Xr ipfw 8 .
See
.Xr if_bridge 4 for more information.
.Ss ENABLING SPANNING TREE
.Pp
For an Ethernet network to function properly, only one active path can exist
between two devices.
The STP protocol detects loops and puts redundant links into a blocked state.
Should one of the active links fail, STP calculates a different tree and enables one of the blocked paths to restore
connectivity to all points in the network.
.Pp
The Rapid Spanning Tree Protocol (RSTP or 802.1w) provides backwards compatibility with legacy STP.
 RSTP provides faster convergence and exchanges information with neighboring switches
to quickly transition to forwarding mode without creating loops.
FreeBSD supports RSTP and STP as operating modes, with RSTP being the default mode.
.Pp
STP can be enabled on member interfaces using
.Xr ifconfig 8 .
For a bridge with
.Pa fxp0
and
.Pa fxp1
as the current interfaces, enable STP with:
.Bd -literal -offset indent
# ifconfig bridge0 stp fxp0 stp fxp1
bridge0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
        ether d6:cf:d5:a0:94:6d
        id 00:01:02:4b:d4:50 priority 32768 hellotime 2 fwddelay 15
        maxage 20 holdcnt 6 proto rstp maxaddr 100 timeout 1200
        root id 00:01:02:4b:d4:50 priority 32768 ifcost 0 port 0
        member: fxp0 flags=1c7<LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP>
                port 3 priority 128 path cost 200000 proto rstp
                role designated state forwarding
        member: fxp1 flags=1c7<LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP>
                port 4 priority 128 path cost 200000 proto rstp
                role designated state forwarding
.Ed
.Pp
This bridge has a spanning tree ID of
.Ql 00:01:02:4b:d4:50
and a priority of
.Ql 32768
.
As the
.Ql root id
is the same, it indicates that this is the root bridge for the tree.
.Pp
Another bridge on the network also has STP enabled:
.Bd -literal -offset indent
bridge0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
        ether 96:3d:4b:f1:79:7a
        id 00:13:d4:9a:06:7a priority 32768 hellotime 2 fwddelay 15
        maxage 20 holdcnt 6 proto rstp maxaddr 100 timeout 1200
        root id 00:01:02:4b:d4:50 priority 32768 ifcost 400000 port 4
        member: fxp0 flags=1c7<LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP>
                port 4 priority 128 path cost 200000 proto rstp
                role root state forwarding
        member: fxp1 flags=1c7<LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP>
                port 5 priority 128 path cost 200000 proto rstp
                role designated state forwarding
.Ed
.Pp
The line
.Ql root id 00:01:02:4b:d4:50 priority 32768 ifcost 400000 port 4
shows that the root bridge is
.Ql 00:01:02:4b:d4:50
and has a path cost of
.Ql 400000
from this bridge.
The path to the root bridge is via
.Ql port 4
which is
.Pa fxp0
.
.Ss BRIDGE INTERFACE PARAMETERS
.Pp
Several
.Cm ifconfig
parameters are unique to bridge interfaces.
This section summarizes some common uses for these parameters.
The complete list of available parameters is described in
.Xr ifconfig 8 .
.Bl -tag -offset -compact
.It private
A private interface does not forward any traffic to any other port that is also
designated as a private interface.
The traffic is blocked unconditionally so no Ethernet frames will be forwarded,
including ARP packets.
If traffic needs to be selectively blocked, a firewall should be used instead.
.It span
A span port transmits a copy of every Ethernet frame received by the bridge.
The number of span ports configured on a bridge is unlimited, but if an
interface is designated as a span port, it cannot also be used as a regular
bridge port.
This is most useful for snooping a bridged network passively on another host
connected to one of the span ports of the bridge.
For example, to send a copy of all frames out the interface named
.Pa fxp4
:
.Bd -literal -offset indent
# ifconfig bridge0 span fxp4
.Ed
.It sticky
If a bridge member interface is marked as sticky, dynamically learned address
entries are treated as static entries in the forwarding cache.
Sticky entries are never aged out of the cache or replaced, even if the address
is seen on a different interface.
This gives the benefit of static address entries without the need to
pre-populate the forwarding table.
Clients learned on a particular segment of the bridge cannot roam to another
segment.
An example of using sticky addresses is to combine the bridge with VLANs in order to isolate customer networks without wasting IP address space.
Consider that
.Ql CustomerA
is on
.Ql vlan100
,
.Ql CustomerB
is on
.Ql vlan101
, and the bridge has the address
.Ql 192.168.0.1
:
.Bd -literal -offset indent
# ifconfig bridge0 addm vlan100 sticky vlan100 addm vlan101 sticky vlan101
# ifconfig bridge0 inet 192.168.0.1/24
.Ed
In this example, both clients see
.Ql 192.168.0.1
as their default gateway.
Since the bridge cache is sticky, one host cannot spoof the MAC address of the other customer in order to intercept their traffic.
Any communication between the VLANs can be blocked using a firewall or, as seen in this example, private
interfaces:
.Bd -literal -offset indent
# ifconfig bridge0 private vlan100 private vlan101
.Ed
The customers are completely isolated from each other and the full
.Ql /24
address range can be allocated without subnetting.
The number of unique source MAC addresses behind an interface can be limited.
Once the limit is reached, packets with unknown source addresses are dropped
until an existing host cache entry expires or is removed.
The following example sets the maximum number of Ethernet devices for
.Ql CustomerA
on
.Ql vlan100
to 10:
.Bd -literal -offset indent
# ifconfig bridge0 ifmaxaddr vlan100 10
.Ed
.El
.Pp
Bridge interfaces also support monitor mode, where the packets are discarded
after
.Xr bpf 4 processing and are not processed or forwarded further.
This can be used to multiplex the input of two or more interfaces into a single
.Xr bpf 4 stream.
This is useful for reconstructing the traffic for network taps that transmit
the RX/TX signals out through two separate interfaces.
For example, to read the input from four network interfaces as one stream:
.Bd -literal -offset indent
# ifconfig bridge0 addm fxp0 addm fxp1 addm fxp2 addm fxp3 monitor up
# tcpdump -i bridge0
.Ed
.Ss SNMP MONITORING
.Pp
The bridge interface and STP parameters can be monitored via
.Xr bsnmpd 1 which is included in the FreeBSD base system.
The exported bridge MIBs conform to IETF standards so any SNMP client or monitoring package can be used to retrieve the data.
.Pp
To enable monitoring on the bridge, uncomment this line in
.Pa /etc/snmpd.config
by removing the beginning
.Ql #
symbol:
.Bd -literal -offset indent
begemotSnmpdModulePath."bridge" = "/usr/lib/snmp_bridge.so"
.Ed
.Pp
Other configuration settings, such as community names and access lists, may
need to be modified in this file.
See
.Xr bsnmpd 1 and
.Xr snmp_bridge 3 for more information.
Once these edits are saved, add this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
bsnmpd_enable="YES"
.Ed
.Pp
Then, start
.Xr bsnmpd 1 :
.Bd -literal -offset indent
# service bsnmpd start
.Ed
.Pp
The following examples use the Net-SNMP software (
.Ql net-mgmt/net-snmp
) to query a bridge from a client system.
The
.Ql net-mgmt/bsnmptools
port can also be used.
From the SNMP client which is running Net-SNMP, add the following lines to
.Pa $HOME/.snmp/snmp.conf
in order to import the bridge MIB definitions:
.Bd -literal -offset indent
mibdirs +/usr/share/snmp/mibs
mibs +BRIDGE-MIB:RSTP-MIB:BEGEMOT-MIB:BEGEMOT-BRIDGE-MIB
.Ed
.Pp
To monitor a single bridge using the IETF BRIDGE-MIB (RFC4188):
.Bd -literal -offset indent
% snmpwalk -v 2c -c public bridge1.example.com mib-2.dot1dBridge
BRIDGE-MIB::dot1dBaseBridgeAddress.0 = STRING: 66:fb:9b:6e:5c:44
BRIDGE-MIB::dot1dBaseNumPorts.0 = INTEGER: 1 ports
BRIDGE-MIB::dot1dStpTimeSinceTopologyChange.0 = Timeticks: (189959) 0:31:39.59 centi-seconds
BRIDGE-MIB::dot1dStpTopChanges.0 = Counter32: 2
BRIDGE-MIB::dot1dStpDesignatedRoot.0 = Hex-STRING: 80 00 00 01 02 4B D4 50
...
BRIDGE-MIB::dot1dStpPortState.3 = INTEGER: forwarding(5)
BRIDGE-MIB::dot1dStpPortEnable.3 = INTEGER: enabled(1)
BRIDGE-MIB::dot1dStpPortPathCost.3 = INTEGER: 200000
BRIDGE-MIB::dot1dStpPortDesignatedRoot.3 = Hex-STRING: 80 00 00 01 02 4B D4 50
BRIDGE-MIB::dot1dStpPortDesignatedCost.3 = INTEGER: 0
BRIDGE-MIB::dot1dStpPortDesignatedBridge.3 = Hex-STRING: 80 00 00 01 02 4B D4 50
BRIDGE-MIB::dot1dStpPortDesignatedPort.3 = Hex-STRING: 03 80
BRIDGE-MIB::dot1dStpPortForwardTransitions.3 = Counter32: 1
RSTP-MIB::dot1dStpVersion.0 = INTEGER: rstp(2)
.Ed
.Pp
The
.Ql dot1dStpTopChanges.0
value is two, indicating that the STP bridge topology has changed twice.
A topology change means that one or more links in the network have changed or
failed and a new tree has been calculated.
The
.Ql dot1dStpTimeSinceTopologyChange.0
value will show when this happened.
.Pp
To monitor multiple bridge interfaces, the private BEGEMOT-BRIDGE-MIB can be
used:
.Bd -literal -offset indent
% snmpwalk -v 2c -c public bridge1.example.com
enterprises.fokus.begemot.begemotBridge
BEGEMOT-BRIDGE-MIB::begemotBridgeBaseName."bridge0" = STRING: bridge0
BEGEMOT-BRIDGE-MIB::begemotBridgeBaseName."bridge2" = STRING: bridge2
BEGEMOT-BRIDGE-MIB::begemotBridgeBaseAddress."bridge0" = STRING: e:ce:3b:5a:9e:13
BEGEMOT-BRIDGE-MIB::begemotBridgeBaseAddress."bridge2" = STRING: 12:5e:4d:74:d:fc
BEGEMOT-BRIDGE-MIB::begemotBridgeBaseNumPorts."bridge0" = INTEGER: 1
BEGEMOT-BRIDGE-MIB::begemotBridgeBaseNumPorts."bridge2" = INTEGER: 1
...
BEGEMOT-BRIDGE-MIB::begemotBridgeStpTimeSinceTopologyChange."bridge0" = Timeticks: (116927) 0:19:29.27 centi-seconds
BEGEMOT-BRIDGE-MIB::begemotBridgeStpTimeSinceTopologyChange."bridge2" = Timeticks: (82773) 0:13:47.73 centi-seconds
BEGEMOT-BRIDGE-MIB::begemotBridgeStpTopChanges."bridge0" = Counter32: 1
BEGEMOT-BRIDGE-MIB::begemotBridgeStpTopChanges."bridge2" = Counter32: 1
BEGEMOT-BRIDGE-MIB::begemotBridgeStpDesignatedRoot."bridge0" = Hex-STRING: 80 00 00 40 95 30 5E 31
BEGEMOT-BRIDGE-MIB::begemotBridgeStpDesignatedRoot."bridge2" = Hex-STRING: 80 00 00 50 8B B8 C6 A9
.Ed
.Pp
To change the bridge interface being monitored via the
.Ql mib-2.dot1dBridge
subtree:
.Bd -literal -offset indent
% snmpset -v 2c -c private bridge1.example.com
BEGEMOT-BRIDGE-MIB::begemotBridgeDefaultBridgeIf.0 s bridge2
.Ed
.Pp
FreeBSD provides the
.Xr lagg 4 interface which can be used to aggregate multiple network interfaces into one
virtual interface in order to provide failover and link aggregation.
Failover allows traffic to continue to flow as long as at least one aggregated
network interface has an established link.
Link aggregation works best on switches which support LACP, as this protocol distributes traffic bi-directionally while responding to the
failure of individual links.
.Pp
The aggregation protocols supported by the lagg interface determine which ports
are used for outgoing traffic and whether or not a specific port accepts
incoming traffic.
The following protocols are supported by
.Xr lagg 4 :
.Bl -tag -offset -compact
.It failover
This mode sends and receives traffic only through the master port.
If the master port becomes unavailable, the next active port is used.
The first interface added to the virtual interface is the master port and all
subsequently added interfaces are used as failover devices.
If failover to a non-master port occurs, the original port becomes master once
it becomes available again.
.It fec / loadbalance
Cisco Fast EtherChannel (FEC) is found on older Cisco switches.
It provides a static setup and does not negotiate aggregation with the peer or
exchange frames to monitor the link.
If the switch supports LACP, that should be used instead.
.It lacp
The IEEE 802.3ad Link Aggregation Control Protocol (LACP) negotiates a set of aggregable links with the peer into one or more Link
Aggregated Groups (LAGs).
Each LAG is composed of ports of the same speed, set to full-duplex operation, and
traffic is balanced across the ports in the LAG with the greatest total speed.
Typically, there is only one LAG which contains all the ports.
In the event of changes in physical connectivity, LACP will quickly converge to a new configuration.
LACP balances outgoing traffic across the active ports based on hashed protocol
header information and accepts incoming traffic from any active port.
The hash includes the Ethernet source and destination address and, if
available, the VLAN tag, and the IPv4 or IPv6 source and destination address.
.It roundrobin
This mode distributes outgoing traffic using a round-robin scheduler through
all active ports and accepts incoming traffic from any active port.
Since this mode violates Ethernet frame ordering, it should be used with
caution.
.El
.Ss CONFIGURATION EXAMPLES
.Pp
This section demonstrates how to configure a Cisco switch and a FreeBSD system for LACP load balancing.
It then shows how to configure two Ethernet interfaces in failover mode as well
as how to configure failover mode between an Ethernet and a wireless interface.
.Pp
This example connects two
.Xr fxp 4 Ethernet interfaces on a FreeBSD machine to the first two Ethernet ports on a Cisco switch as a single load balanced and fault tolerant link.
More interfaces can be added to increase throughput and fault tolerance.
Replace the names of the Cisco ports, Ethernet devices, channel group number, and IP address shown in the example to match the local configuration.
.Pp
Frame ordering is mandatory on Ethernet links and any traffic between two
stations always flows over the same physical link, limiting the maximum speed
to that of one interface.
The transmit algorithm attempts to use as much information as it can to
distinguish different traffic flows and balance the flows across the available
interfaces.
.Pp
On the Cisco switch, add the FastEthernet0/1 and FastEthernet0/2 interfaces to channel group 1:
.Bd -literal -offset indent
interface FastEthernet0/1 channel-group 1 mode active channel-protocol lacp
!
interface FastEthernet0/2 channel-group 1 mode active channel-protocol lacp
.Ed
.Pp
On the FreeBSD system, create the
.Xr lagg 4 interface using the physical interfaces fxp0 and fxp1 and bring the interfaces up with an IP address of 10.0.0.3/24:
.Bd -literal -offset indent
# ifconfig fxp0 up
# ifconfig fxp1 up
# ifconfig
.Ql lagg0
create 
# ifconfig
.Ql lagg0
up laggproto lacp laggport fxp0 laggport fxp1  10.0.0.3/24
.Ed
.Pp
Next, verify the status of the virtual interface:
.Bd -literal -offset indent
# ifconfig
.Ql lagg0

lagg0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
        options=8<VLAN_MTU>
        ether 00:05:5d:71:8d:b8
        inet 10.0.0.3 netmask 0xffffff00 broadcast 10.0.0.255
        media: Ethernet autoselect
        status: active
        laggproto lacp
        laggport: fxp1 flags=1c<ACTIVE,COLLECTING,DISTRIBUTING>
        laggport: fxp0 flags=1c<ACTIVE,COLLECTING,DISTRIBUTING>
.Ed
.Pp
Ports marked as
.Ql ACTIVE
are part of the LAG that has been negotiated with the remote switch.
Traffic will be transmitted and received through these active ports.
Add
.Ar -v
to the above command to view the LAG identifiers.
.Pp
To see the port status on the Cisco switch:
.Bd -literal -offset indent
switch# show lacp neighbor
Flags:  S - Device is requesting Slow LACPDUs
        F - Device is requesting Fast LACPDUs
        A - Device is in Active mode       P - Device is in Passive mode

Channel group 1 neighbors

Partner's information:

                  LACP port                        Oper    Port     Port
Port      Flags   Priority  Dev ID         Age     Key     Number   State
Fa0/1     SA      32768     0005.5d71.8db8  29s    0x146   0x3      0x3D
Fa0/2     SA      32768     0005.5d71.8db8  29s    0x146   0x4      0x3D
.Ed
.Pp
For more detail, type show lacp neighbor detail.
.Pp
To retain this configuration across reboots, add the following entries to
.Pa /etc/rc.conf
on the FreeBSD system:
.Bd -literal -offset indent
ifconfig_fxp0="up"
ifconfig_fxp1="up"
cloned_interfaces="
.Ql lagg0
"
ifconfig_
.Ql lagg0
="laggproto lacp laggport fxp0 laggport fxp1 10.0.0.3/24"
.Ed
.Pp
Failover mode can be used to switch over to a secondary interface if the link
is lost on the master interface.
To configure failover, make sure that the underlying physical interfaces are
up, then create the
.Xr lagg 4 interface.
In this example, fxp0 is the master interface, fxp1 is the secondary interface, and the virtual interface is assigned an IP address of 10.0.0.15/24:
.Bd -literal -offset indent
# ifconfig fxp0 up
# ifconfig fxp1 up
# ifconfig
.Ql lagg0
create
# ifconfig
.Ql lagg0
up laggproto failover laggport fxp0 laggport fxp1  10.0.0.15/24
.Ed
.Pp
The virtual interface should look something like this:
.Bd -literal -offset indent
# ifconfig
.Ql lagg0

lagg0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
        options=8<VLAN_MTU>
        ether 00:05:5d:71:8d:b8
        inet 10.0.0.15 netmask 0xffffff00 broadcast 10.0.0.255
        media: Ethernet autoselect
        status: active
        laggproto failover
        laggport: fxp1 flags=0<>
        laggport: fxp0 flags=5<MASTER,ACTIVE>
.Ed
.Pp
Traffic will be transmitted and received on fxp0.
If the link is lost on fxp0, fxp1 will become the active link.
If the link is restored on the master interface, it will once again become the
active link.
.Pp
To retain this configuration across reboots, add the following entries to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
ifconfig_fxp0="up"
ifconfig_fxp1="up"
cloned_interfaces="
.Ql lagg0
"
ifconfig_
.Ql lagg0
="laggproto failover laggport fxp0 laggport fxp1 10.0.0.15/24"
.Ed
.Pp
For laptop users, it is usually desirable to configure the wireless device as a
secondary which is only used when the Ethernet connection is not available.
With
.Xr lagg 4 , it is possible to configure a failover which prefers the Ethernet connection
for both performance and security reasons, while maintaining the ability to
transfer data over the wireless connection.
.Pp
This is achieved by overriding the physical wireless interface's MAC address with that of the Ethernet interface.
.Pp
In this example, the Ethernet interface, bge0, is the master and the wireless interface, wlan0, is the failover.
The wlan0 device was created from iwn0 wireless interface, which will be configured with the MAC address of the Ethernet interface.
First, determine the MAC address of the Ethernet interface:
.Bd -literal -offset indent
# ifconfig bge0
bge0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
	options=19b<RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM,TSO4>
	ether 00:21:70:da:ae:37
	inet6 fe80::221:70ff:feda:ae37%bge0 prefixlen 64 scopeid 0x2
	nd6 options=29<PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL>
	media: Ethernet autoselect (1000baseT <full-duplex>)
	status: active
.Ed
.Pp
Replace bge0 to match the system's Ethernet interface name.
The
.Ql ether
line will contain the MAC address of the specified interface.
Now, change the MAC address of the underlying wireless interface:
.Bd -literal -offset indent
# ifconfig iwn0 ether 00:21:70:da:ae:37
.Ed
.Pp
Bring the wireless interface up, but do not set an IP address:
.Bd -literal -offset indent
# ifconfig wlan0 create wlandev iwn0 ssid my_router up
.Ed
.Pp
Make sure the bge0 interface is up, then create the
.Xr lagg 4 interface with bge0 as master with failover to wlan0:
.Bd -literal -offset indent
# ifconfig bge0 up
# ifconfig
.Ql lagg0
create
# ifconfig
.Ql lagg0
up laggproto failover laggport bge0 laggport wlan0
.Ed
.Pp
The virtual interface should look something like this:
.Bd -literal -offset indent
# ifconfig
.Ql lagg0

lagg0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> metric 0 mtu 1500
        options=8<VLAN_MTU>
        ether 00:21:70:da:ae:37
        media: Ethernet autoselect
        status: active
        laggproto failover
        laggport: wlan0 flags=0<>
        laggport: bge0 flags=5<MASTER,ACTIVE>
.Ed
.Pp
Then, start the DHCP client to obtain an IP address:
.Bd -literal -offset indent
# dhclient
.Ql lagg0
.Ed
.Pp
To retain this configuration across reboots, add the following entries to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
ifconfig_bge0="up"
wlans_iwn0="wlan0"
ifconfig_wlan0="WPA"
create_args_wlan0="wlanaddr 00:21:70:da:ae:37"
cloned_interfaces="
.Ql lagg0
"
ifconfig_
.Ql lagg0
="up laggproto failover laggport bge0 laggport wlan0 DHCP"
.Ed
.Pp
The Intel Preboot eXecution Environment (PXE) allows an operating system to boot over the network.
For example, a FreeBSD system can boot over the network and operate without a
local disk, using file systems mounted from an NFS server.
 PXE support is usually available in the BIOS.
To use PXE when the machine starts, select the
.Ql Boot from network
option in the BIOS setup or type a function key during system initialization.
.Pp
In order to provide the files needed for an operating system to boot over the
network, a PXE setup also requires properly configured DHCP, TFTP, and NFS servers, where:
.Bl -bullet -offset -compact
.It
Initial parameters, such as an IP address, executable boot filename and location, server name, and root path are
obtained from the DHCP server.
.It
The operating system loader file is booted using TFTP.
.It
The file systems are loaded using NFS.
.El
.Pp
When a computer PXE boots, it receives information over DHCP about where to obtain the initial boot loader file.
After the host computer receives this information, it downloads the boot loader
via TFTP and then executes the boot loader.
In FreeBSD, the boot loader file is
.Pa /boot/pxeboot
.
After
.Pa /boot/pxeboot
executes, the FreeBSD kernel is loaded and the rest of the FreeBSD bootup
sequence proceeds, as described in .
.Pp
This section describes how to configure these services on a FreeBSD system so
that other systems can PXE boot into FreeBSD.
Refer to
.Xr diskless 8 for more information.
.Pp
As described, the system providing these services is insecure.
It should live in a protected area of a network and be untrusted by other
hosts.
.Pp
The steps shown in this section configure the built-in NFS and TFTP servers.
The next section demonstrates how to install and configure the DHCP server.
In this example, the directory which will contain the files used by PXE users is
.Pa /b/tftpboot/FreeBSD/install
.
It is important that this directory exists and that the same directory name is
set in both
.Pa /etc/inetd.conf
and
.Pa /usr/local/etc/dhcpd.conf
.
.Pp
Create the root directory which will contain a FreeBSD installation to be NFS mounted:
.Bd -literal -offset indent
# export NFSROOTDIR=/b/tftpboot/FreeBSD/install
# mkdir -p ${NFSROOTDIR}
.Ed
.Pp
Enable the NFS server by adding this line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
nfs_server_enable="YES"
.Ed
.Pp
Export the diskless root directory via NFS by adding the following to
.Pa /etc/exports
:
.Bd -literal -offset indent
/b -ro -alldirs -maproot=root
.Ed
.Pp
Start the NFS server:
.Bd -literal -offset indent
# service nfsd start
.Ed
.Pp
Enable
.Xr inetd 8 by adding the following line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
inetd_enable="YES"
.Ed
.Pp
Uncomment the following line in
.Pa /etc/inetd.conf
by making sure it does not start with a
.Ql #
symbol:
.Bd -literal -offset indent
tftp dgram udp wait root /usr/libexec/tftpd tftpd -l -s /b/tftpboot
.Ed
.Pp
Some PXE versions require the TCP version of TFTP.
In this case, uncomment the second
.Ql tftp
line which contains
.Ql stream tcp
.
.Pp
Start
.Xr inetd 8 :
.Bd -literal -offset indent
# service inetd start
.Ed
.Pp
Install the base system into
.Pa ${NFSROOTDIR}
, either by decompressing the official archives or by rebuilding the FreeBSD
kernel and userland (refer to for more detailed instructions, but do not forget to add
.Ar DESTDIR=${NFSROOTDIR}
when running the
.Cm make installkernel
and
.Cm make installworld
commands.
.Pp
Test that the TFTP server works and can download the boot loader which will be obtained via PXE:
.Bd -literal -offset indent
# tftp localhost
tftp> get FreeBSD/install/boot/pxeboot
Received 264951 bytes in 0.1 seconds
.Ed
.Pp
Edit
.Pa ${NFSROOTDIR}/etc/fstab
and create an entry to mount the root file system over NFS:
.Bd -literal -offset indent
# Device                                         Mountpoint    FSType   Options  Dump Pass
myhost.example.com:/b/tftpboot/FreeBSD/install       /         nfs      ro        0    0
.Ed
.Pp
Replace myhost.example.com with the hostname or IP address of the NFS server.
In this example, the root file system is mounted read-only in order to prevent NFS clients from potentially deleting the contents of the root file system.
.Pp
Set the root password in the PXE environment for client machines which are PXE booting :
.Bd -literal -offset indent
# chroot ${NFSROOTDIR}
# passwd
.Ed
.Pp
If needed, enable
.Xr ssh 1 root logins for client machines which are PXE booting by editing
.Pa ${NFSROOTDIR}/etc/ssh/sshd_config
and enabling
.Ql PermitRootLogin
.
This option is documented in
.Xr sshd_config 5 .
.Pp
Perform any other needed customizations of the PXE environment in
.Pa ${NFSROOTDIR}
.
These customizations could include things like installing packages or editing
the password file with
.Xr vipw 8 .
.Pp
When booting from an NFS root volume,
.Pa /etc/rc
detects the NFS boot and runs
.Pa /etc/rc.initdiskless
.
In this case,
.Pa /etc
and
.Pa /var
need to be memory backed file systems so that these directories are writable
but the NFS root directory is read-only:
.Bd -literal -offset indent
# chroot ${NFSROOTDIR}
# mkdir -p conf/base
# tar -c -v -f conf/base/etc.cpio.gz --format cpio --gzip etc
# tar -c -v -f conf/base/var.cpio.gz --format cpio --gzip var
.Ed
.Pp
When the system boots, memory file systems for
.Pa /etc
and
.Pa /var
will be created and mounted and the contents of the
.Pa cpio.gz
files will be copied into them.
By default, these file systems have a maximum capacity of 5 megabytes.
If your archives do not fit, which is usually the case for
.Pa /var
when binary packages have been installed, request a larger size by putting the
number of 512 byte sectors needed (e.g., 5 megabytes is 10240 sectors) in
.Pa ${NFSROOTDIR}/conf/base/etc/md_size
and
.Pa ${NFSROOTDIR}/conf/base/var/md_size
files for
.Pa /etc
and
.Pa /var
file systems respectively.
.Ss CONFIGURING THE DHCP SERVER
.Pp
The DHCP server does not need to be the same machine as the TFTP and NFS server, but it needs to be accessible in the network.
.Pp
DHCP is not part of the FreeBSD base system but can be installed using the
.Ql net/isc-dhcp43-server
port or package.
.Pp
Once installed, edit the configuration file,
.Pa /usr/local/etc/dhcpd.conf
.
Configure the
.Ql next-server
,
.Ql filename
, and
.Ql root-path
settings as seen in this example:
.Bd -literal -offset indent
subnet 192.168.0.0 netmask 255.255.255.0 {
   range 192.168.0.2 192.168.0.3 ;
   option subnet-mask 255.255.255.0 ;
   option routers 192.168.0.1 ;
   option broadcast-address 192.168.0.255 ;
   option domain-name-servers 192.168.35.35, 192.168.35.36 ;
   option domain-name "example.com";

   # IP address of TFTP server
   next-server 192.168.0.1 ;

   # path of boot loader obtained via tftp
   filename "FreeBSD/install/boot/pxeboot" ;

   # pxeboot boot loader will try to NFS mount this directory for root FS
   option root-path "192.168.0.1:/b/tftpboot/FreeBSD/install/" ;

}
.Ed
.Pp
The
.Ql next-server
directive is used to specify the IP address of the TFTP server.
.Pp
The
.Ql filename
directive defines the path to
.Pa /boot/pxeboot
.
A relative filename is used, meaning that
.Pa /b/tftpboot
is not included in the path.
.Pp
The
.Ql root-path
option defines the path to the NFS root file system.
.Pp
Once the edits are saved, enable DHCP at boot time by adding the following line to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
dhcpd_enable="YES"
.Ed
.Pp
Then start the DHCP service:
.Bd -literal -offset indent
# service isc-dhcpd start
.Ed
.Ss DEBUGGING PXE PROBLEMS
.Pp
Once all of the services are configured and started, PXE clients should be able to automatically load FreeBSD over the network.
If a particular client is unable to connect, when that client machine boots up,
enter the BIOS configuration menu and confirm that it is set to boot from the network.
.Pp
This section describes some troubleshooting tips for isolating the source of
the configuration problem should no clients be able to PXE boot.
.Pp
Use the
.Ql net/wireshark
package or port to debug the network traffic involved during the PXE booting process, which is illustrated in the diagram below.
.Pp
On the TFTP server, read
.Pa /var/log/xferlog
to ensure that
.Pa pxeboot
is being retrieved from the correct location.
To test this example configuration:
.Bd -literal -offset indent
# tftp 192.168.0.1
tftp> get FreeBSD/install/boot/pxeboot
Received 264951 bytes in 0.1 seconds
.Ed
.Pp
The
.Ql BUGS
sections in
.Xr tftpd 8 and
.Xr tftp 1 document some limitations with TFTP.
.Pp
Make sure that the root file system can be mounted via NFS.
To test this example configuration:
.Bd -literal -offset indent
# mount -t nfs 192.168.0.1:/b/tftpboot/FreeBSD/install /mnt
.Ed
.Pp
IPv6 is the new version of the well known IP protocol, also known as IPv4.
 IPv6 provides several advantages over IPv4 as well as many new features:
.Bl -bullet -offset -compact
.It
Its 128-bit address space allows for
340,282,366,920,938,463,463,374,607,431,768,211,456 addresses.
This addresses the IPv4 address shortage and eventual IPv4 address exhaustion.
.It
Routers only store network aggregation addresses in their routing tables, thus
reducing the average space of a routing table to 8192 entries.
This addresses the scalability issues associated with IPv4, which required every allocated block of IPv4 addresses to be exchanged between Internet routers, causing their routing
tables to become too large to allow efficient routing.
.El
.Bl -bullet -offset -compact
.It
Address autoconfiguration (RFC2462).
.It
Mandatory multicast addresses.
.It
Built-in IPsec (IP security).
.It
Simplified header structure.
.It
Support for mobile IP.
.It
IPv6-to-IPv4 transition mechanisms.
.El
.Pp
FreeBSD includes the http://www.kame.net/  IPv6 reference implementation and comes with everything needed to use IPv6.
This section focuses on getting IPv6 configured and running.
.Ss BACKGROUND ON IPV6 ADDRESSES
.Pp
There are three different types of IPv6 addresses:
.Bl -tag -offset -compact
.It Unicast
A packet sent to a unicast address arrives at the interface belonging to the
address.
.It Anycast
These addresses are syntactically indistinguishable from unicast addresses but
they address a group of interfaces.
The packet destined for an anycast address will arrive at the nearest router
interface.
Anycast addresses are only used by routers.
.It Multicast
These addresses identify a group of interfaces.
A packet destined for a multicast address will arrive at all interfaces
belonging to the multicast group.
The IPv4 broadcast address, usually
.Ql xxx.xxx.xxx.255
, is expressed by multicast addresses in IPv6.
.El
.Pp
When reading an IPv6 address, the canonical form is represented as
.Ql x:x:x:x:x:x:x:x
, where each
.Ql x
represents a 16 bit hex value.
An example is
.Ql FEBC:A574:382B:23C1:AA49:4592:4EFE:9982
.
.Pp
Often, an address will have long substrings of all zeros.
A
.Ql ::
(double colon) can be used to replace one substring per address.
Also, up to three leading
.Ql 0
s per hex value can be omitted.
For example,
.Ql fe80::1
corresponds to the canonical form
.Ql fe80:0000:0000:0000:0000:0000:0000:0001
.
.Pp
A third form is to write the last 32 bits using the well known IPv4 notation.
For example,
.Ql 2002::10.0.0.1
corresponds to the hexadecimal canonical representation
.Ql 2002:0000:0000:0000:0000:0000:0a00:0001
, which in turn is equivalent to
.Ql 2002::a00:1
.
.Pp
To view a FreeBSD system's IPv6 address, use
.Xr ifconfig 8 :
.Bd -literal -offset indent
# ifconfig
.Ed
.Bd -literal -offset indent
rl0: flags=8943<UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST> mtu 1500
         inet 10.0.0.10 netmask 0xffffff00 broadcast 10.0.0.255
         inet6 fe80::200:21ff:fe03:8e1%rl0 prefixlen 64 scopeid 0x1
         ether 00:00:21:03:08:e1
         media: Ethernet autoselect (100baseTX )
         status: active
.Ed
.Pp
In this example, the
.Pa rl0
interface is using
.Ql fe80::200:21ff:fe03:8e1%rl0
, an auto-configured link-local address which was automatically generated from
the MAC address.
.Pp
Some IPv6 addresses are reserved.
A summary of these reserved addresses is seen in :
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
IPv6 address
.Ta
Prefixlength (Bits)
.Ta
Description
.Ta
Notes
.It
.Ta
.Ql ::
.Ta
128 bits
.Ta
unspecified
.Ta
Equivalent to
.Ql 0.0.0.0
in IPv4.
.It
.Ta
.Ql ::1
.Ta
128 bits
.Ta
loopback address
.Ta
Equivalent to
.Ql 127.0.0.1
in IPv4.
.It
.Ta
.Ql ::00:xx:xx:xx:xx
.Ta
96 bits
.Ta
embedded IPv4
.Ta
The lower 32 bits are the compatible IPv4 address.
.It
.Ta
.Ql ::ff:xx:xx:xx:xx
.Ta
96 bits
.Ta
IPv4 mapped IPv6 address
.Ta
The lower 32 bits are the IPv4 address for hosts which do not support IPv6.
.It
.Ta
.Ql fe80::/10
.Ta
10 bits
.Ta
link-local
.Ta
Equivalent to 169.254.0.0/16 in IPv4.
.It
.Ta
.Ql fc00::/7
.Ta
7 bits
.Ta
unique-local
.Ta
Unique local addresses are intended for local communication and are only
routable within a set of cooperating sites.
.It
.Ta
.Ql ff00::
.Ta
8 bits
.Ta
multicast
.Ta
.It
.Ta
.Ql 2000::-3fff::
.Ta
3 bits
.Ta
global unicast
.Ta
All global unicast addresses are assigned from this pool.
The first 3 bits are
.Ql 001
.
.El
.Pp
For further information on the structure of IPv6 addresses, refer to RFC3513.
.Ss CONFIGURING IPV6
.Pp
To configure a FreeBSD system as an IPv6 client, add these two lines to
.Pa rc.conf
:
.Bd -literal -offset indent
ifconfig_rl0_ipv6="inet6 accept_rtadv"
rtsold_enable="YES"
.Ed
.Pp
The first line enables the specified interface to receive router solicitation
messages.
The second line enables the router solicitation daemon,
.Xr rtsol 8 .
.Pp
If the interface needs a statically assigned IPv6 address, add an entry to specify the static address and associated prefix
length:
.Bd -literal -offset indent
ifconfig_rl0_ipv6="inet6 2001:db8:4672:6565:2026:5043:2d42:5344 prefixlen 64"
.Ed
.Pp
To assign a default router, specify its address:
.Bd -literal -offset indent
ipv6_defaultrouter="2001:db8:4672:6565::1"
.Ed
.Ss CONNECTING TO A PROVIDER
.Pp
In order to connect to other IPv6 networks, one must have a provider or a tunnel that supports IPv6:
.Bl -bullet -offset -compact
.It
Contact an Internet Service Provider to see if they offer IPv6.
.It
Hurricane Electric offers tunnels with end-points all around the globe.
.El
.Pp
Install the
.Ql net/freenet6
package or port for a dial-up connection.
.Pp
This section demonstrates how to take the directions from a tunnel provider and
convert them into
.Pa /etc/rc.conf
settings that will persist through reboots.
.Pp
The first
.Pa /etc/rc.conf
entry creates the generic tunneling interface
.Pa gif0
:
.Bd -literal -offset indent
cloned_interfaces="gif0"
.Ed
.Pp
Next, configure that interface with the IPv4 addresses of the local and remote endpoints.
Replace MY_IPv4_ADDR and REMOTE_IPv4_ADDR with the actual IPv4 addresses:
.Bd -literal -offset indent
create_args_gif0="tunnel MY_IPv4_ADDR REMOTE_IPv4_ADDR"
.Ed
.Pp
To apply the IPv6 address that has been assigned for use as the IPv6 tunnel endpoint, add this line, replacing MY_ASSIGNED_IPv6_TUNNEL_ENDPOINT_ADDR with the assigned address:
.Bd -literal -offset indent
ifconfig_gif0_ipv6="inet6 MY_ASSIGNED_IPv6_TUNNEL_ENDPOINT_ADDR"
.Ed
.Pp
Then, set the default route for the other side of the IPv6 tunnel.
Replace MY_IPv6_REMOTE_TUNNEL_ENDPOINT_ADDR with the default gateway address assigned by the provider:
.Bd -literal -offset indent
ipv6_defaultrouter="MY_IPv6_REMOTE_TUNNEL_ENDPOINT_ADDR"
.Ed
.Pp
If the FreeBSD system will route IPv6 packets between the rest of the network and the world, enable the gateway using
this line:
.Bd -literal -offset indent
ipv6_gateway_enable="YES"
.Ed
.Ss ROUTER ADVERTISEMENT AND HOST AUTO CONFIGURATION
.Pp
This section demonstrates how to setup
.Xr rtadvd 8 to advertise the IPv6 default route.
.Pp
To enable
.Xr rtadvd 8 , add the following to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
rtadvd_enable="YES"
.Ed
.Pp
It is important to specify the interface on which to do IPv6 router solicitation.
For example, to tell
.Xr rtadvd 8 to use
.Pa rl0
:
.Bd -literal -offset indent
rtadvd_interfaces="rl0"
.Ed
.Pp
Next, create the configuration file,
.Pa /etc/rtadvd.conf
as seen in this example:
.Bd -literal -offset indent
rl0:\
	:addrs#1:addr="2001:db8:1f11:246::":prefixlen#64:tc=ether:
.Ed
.Pp
Replace
.Pa rl0
with the interface to be used and
.Ql 2001:db8:1f11:246::
with the prefix of the allocation.
.Pp
For a dedicated
.Ql /64
subnet, nothing else needs to be changed.
Otherwise, change the
.Ql prefixlen#
to the correct value.
.Ss IPV6 AND IPV6 ADDRESS MAPPING
.Pp
When IPv6 is enabled on a server, there may be a need to enable IPv4 mapped IPv6 address communication.
This compatibility option allows for IPv4 addresses to be represented as IPv6 addresses.
Permitting IPv6 applications to communicate with IPv4 and vice versa may be a security issue.
.Pp
This option may not be required in most cases and is available only for
compatibility.
This option will allow IPv6-only applications to work with IPv4 in a dual stack environment.
This is most useful for third party applications which may not support an IPv6-only environment.
To enable this feature, add the following to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
ipv6_ipv4mapping="YES"
.Ed
.Pp
Reviewing the information in RFC 3493, section 3.6 and 3.7 as well as RFC 4038 section 4.2 may be useful to some administrators.
.Pp
The Common Address Redundancy Protocol (CARP) allows multiple hosts to share the same IP address and Virtual Host ID (VHID) in order to provide
.Ql high availability
for one or more services.
This means that one or more hosts can fail, and the other hosts will
transparently take over so that users do not see a service failure.
.Pp
In addition to the shared IP address, each host has its own IP address for management and configuration.
All of the machines that share an IP address have the same VHID.
The VHID for each virtual IP address must be unique across the broadcast domain of the network interface.
.Pp
High availability using CARP is built into FreeBSD, though the steps to configure it vary slightly depending
upon the FreeBSD version.
This section provides the same example configuration for versions before and
equal to or after FreeBSD 10.
.Pp
This example configures failover support with three hosts, all with unique IP addresses, but providing the same web content.
It has two different masters named
.Ql hosta.example.org
and
.Ql hostb.example.org
, with a shared backup named
.Ql hostc.example.org
.
.Pp
These machines are load balanced with a Round Robin DNS configuration.
The master and backup machines are configured identically except for their
hostnames and management IP addresses.
These servers must have the same configuration and run the same services.
When the failover occurs, requests to the service on the shared IP address can only be answered correctly if the backup server has access to the
same content.
The backup machine has two additional CARP interfaces, one for each of the master content server's IP addresses.
When a failure occurs, the backup server will pick up the failed master
machine's IP address.
.Ss USING CARP ON FREEBSD 10 AND LATER
.Pp
Enable boot-time support for CARP by adding an entry for the
.Pa carp.ko
kernel module in
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
carp_load="YES"
.Ed
.Pp
To load the module now without rebooting:
.Bd -literal -offset indent
# kldload carp
.Ed
.Pp
For users who prefer to use a custom kernel, include the following line in the
custom kernel configuration file and compile the kernel as described in :
.Bd -literal -offset indent
device	carp
.Ed
.Pp
The hostname, management IP address and subnet mask, shared IP address, and VHID are all set by adding entries to
.Pa /etc/rc.conf
.
This example is for
.Ql hosta.example.org
:
.Bd -literal -offset indent
hostname="hosta.example.org"
ifconfig_em0="inet 192.168.1.3 netmask 255.255.255.0"
ifconfig_em0_alias0="inet vhid 1 pass testpass alias 192.168.1.50/32"
.Ed
.Pp
The next set of entries are for
.Ql hostb.example.org
.
Since it represents a second master, it uses a different shared IP address and VHID.
However, the passwords specified with
.Ar pass
must be identical as CARP will only listen to and accept advertisements from machines with the correct
password.
.Bd -literal -offset indent
hostname="hostb.example.org"
ifconfig_em0="inet 192.168.1.4 netmask 255.255.255.0"
ifconfig_em0_alias0="inet vhid 2 pass testpass alias 192.168.1.51/32"
.Ed
.Pp
The third machine,
.Ql hostc.example.org
, is configured to handle failover from either master.
This machine is configured with two CARP  VHIDs, one to handle the virtual IP address for each of the master hosts.
The CARP advertising skew,
.Ar advskew
, is set to ensure that the backup host advertises later than the master, since
.Ar advskew
controls the order of precedence when there are multiple backup servers.
.Bd -literal -offset indent
hostname="hostc.example.org"
ifconfig_em0="inet 192.168.1.5 netmask 255.255.255.0"
ifconfig_em0_alias0="inet vhid 1 advskew 100 pass testpass alias 192.168.1.50/32"
ifconfig_em0_alias1="inet vhid 2 advskew 100 pass testpass alias 192.168.1.51/32"
.Ed
.Pp
Having two CARP  VHIDs configured means that
.Ql hostc.example.org
will notice if either of the master servers becomes unavailable.
If a master fails to advertise before the backup server, the backup server will
pick up the shared IP address until the master becomes available again.
.Pp
If the original master server becomes available again,
.Ql hostc.example.org
will not release the virtual IP address back to it automatically.
For this to happen, preemption has to be enabled.
The feature is disabled by default, it is controlled via the
.Xr sysctl 8 variable
.Ev net.inet.carp.preempt
.
The administrator can force the backup server to return the IP address to the master:
.Bd -literal -offset indent
# ifconfig em0 vhid 1 state backup
.Ed
.Pp
Once the configuration is complete, either restart networking or reboot each
system.
High availability is now enabled.
.Pp
CARP functionality can be controlled via several
.Xr sysctl 8 variables documented in the
.Xr carp 4 manual pages.
Other actions can be triggered from CARP events by using
.Xr devd 8 .
.Ss USING CARP ON FREEBSD 9 AND EARLIER
.Pp
The configuration for these versions of FreeBSD is similar to the one described
in the previous section, except that a CARP device must first be created and referred to in the configuration.
.Pp
Enable boot-time support for CARP by loading the
.Pa if_carp.ko
kernel module in
.Pa /boot/loader.conf
:
.Bd -literal -offset indent
if_carp_load="YES"
.Ed
.Pp
To load the module now without rebooting:
.Bd -literal -offset indent
# kldload carp
.Ed
.Pp
For users who prefer to use a custom kernel, include the following line in the
custom kernel configuration file and compile the kernel as described in :
.Bd -literal -offset indent
device	carp
.Ed
.Pp
Next, on each host, create a CARP device:
.Bd -literal -offset indent
# ifconfig carp0 create
.Ed
.Pp
Set the hostname, management IP address, the shared IP address, and VHID by adding the required lines to
.Pa /etc/rc.conf
.
Since a virtual CARP device is used instead of an alias, the actual subnet mask of
.Ql /24
is used instead of
.Ql /32
.
Here are the entries for
.Ql hosta.example.org
:
.Bd -literal -offset indent
hostname="hosta.example.org"
ifconfig_fxp0="inet 192.168.1.3 netmask 255.255.255.0"
cloned_interfaces="carp0"
ifconfig_carp0="vhid 1 pass testpass 192.168.1.50/24"
.Ed
.Pp
On
.Ql hostb.example.org
:
.Bd -literal -offset indent
hostname="hostb.example.org"
ifconfig_fxp0="inet 192.168.1.4 netmask 255.255.255.0"
cloned_interfaces="carp0"
ifconfig_carp0="vhid 2 pass testpass 192.168.1.51/24"
.Ed
.Pp
The third machine,
.Ql hostc.example.org
, is configured to handle failover from either of the master hosts:
.Bd -literal -offset indent
hostname="hostc.example.org"
ifconfig_fxp0="inet 192.168.1.5 netmask 255.255.255.0"
cloned_interfaces="carp0 carp1"
ifconfig_carp0="vhid 1 advskew 100 pass testpass 192.168.1.50/24"
ifconfig_carp1="vhid 2 advskew 100 pass testpass 192.168.1.51/24"
.Ed
.Pp
Preemption is disabled in the
.Pa GENERIC
FreeBSD kernel.
If preemption has been enabled with a custom kernel,
.Ql hostc.example.org
may not release the IP address back to the original content server.
The administrator can force the backup server to return the IP address to the master with the command:
.Bd -literal -offset indent
# ifconfig carp0 down && ifconfig carp0 up
.Ed
.Pp
This should be done on the
.Pa carp
interface which corresponds to the correct host.
.Pp
Once the configuration is complete, either restart networking or reboot each
system.
High availability is now enabled.
.Pp
VLANs are a way of virtually dividing up a network into many different subnetworks,
also referred to as segmenting.
Each segment will have its own broadcast domain and be isolated from other VLANs.
.Pp
On FreeBSD, VLANs must be supported by the network card driver.
To see which drivers support vlans, refer to the
.Xr vlan 4 manual page.
.Pp
When configuring a VLAN, a couple pieces of information must be known.
First, which network interface?
Second, what is the VLAN tag?
.Pp
To configure VLANs at run time, with a NIC of
.Ql em0
and a VLAN tag of
.Ql 5
the command would look like this:
.Bd -literal -offset indent
# ifconfig em0.5 create vlan 5 vlandev em0 inet 192.168.20.20/24
.Ed
.Pp
See how the interface name includes the NIC driver name and the VLAN tag, separated by a period?
This is a best practice to make maintaining the VLAN configuration easy when many VLANs are present on a machine.
.Pp
To configure VLANs at boot time,
.Pa /etc/rc.conf
must be updated.
To duplicate the configuration above, the following will need to be added:
.Bd -literal -offset indent
vlans_em0="5"
ifconfig_em0_5="inet 192.168.20.20/24"
.Ed
.Pp
Additional VLANs may be added, by simply adding the tag to the
.Ql vlans_em0
field and adding an additional line configuring the network on that VLAN tag's interface.
.Pp
It is useful to assign a symbolic name to an interface so that when the
associated hardware is changed, only a few configuration variables need to be
updated.
For example, security cameras need to be run over VLAN 1 on
.Ql em0
.
Later, if the
.Ql em0
card is replaced with a card that uses the
.Xr ixgb 4 driver, all references to
.Ql em0.1
will not have to change to
.Ql ixgb0.1
.
.Pp
To configure VLAN
.Ql 5
, on the NIC
.Ql em0
, assign the interface name
.Ql cameras
, and assign the interface an IP address of
.Ql 192.168.20.20
with a
.Ql 24
-bit prefix, use this command:
.Bd -literal -offset indent
# ifconfig em0.5 create vlan 5 vlandev em0 name cameras inet 192.168.20.20/24
.Ed
.Pp
For an interface named
.Ql video
, use the following:
.Bd -literal -offset indent
# ifconfig video.5 create vlan 5 vlandev video name cameras inet 192.168.20.20/24
.Ed
.Pp
To apply the changes at boot time, add the following lines to
.Pa /etc/rc.conf
:
.Bd -literal -offset indent
vlans_video="camera"
create_args_camera="vlan 5"
ifconfig_camera="inet 192.168.20.20/24"
.Ed
.Sh APPENDICES
.Sh OBTAINING FREEBSD
.Ss CD AND DVD SETS
.Pp
FreeBSD CD and DVD sets are available from several online retailers:
.Bl -bullet -offset -compact
.It
FreeBSD Mall, Inc.
 2420 Sand Creek Rd C-1 #347  Brentwood, CA  94513  USA Phone: +1 925 240-6652 Fax: +1 925 674-0821 Email:
.Mt info@freebsdmall.com
WWW: https://www.freebsdmall.com
.It
Getlinux 78 Rue de la Croix Rochopt  Épinay-sous-Sénart  91860  France Email:
.Mt contact@getlinux.fr
WWW: http://www.getlinux.fr/
.It
Dr.
Hinner EDV Kochelseestr.
11  D-81371  München  Germany Phone: (0177) 428 419 0 Email:
.Mt infow@hinner.de
WWW: http://www.hinner.de/linux/freebsd.html
.It
Linux Center Galernaya Street, 55  Saint-Petersburg  190000  Russia Phone: +7-812-309-06-86 Email:
.Mt info@linuxcenter.ru
WWW: http://linuxcenter.ru/shop/freebsd
.El
.Ss FTP SITES
.Pp
The official sources for FreeBSD are available via anonymous FTP from a worldwide set of mirror sites.
The site
.Lk ftp://ftp.FreeBSD.org/pub/FreeBSD/
is available via HTTP and FTP.
It is made up of many machines operated by the project cluster administrators
and behind GeoDNS to direct users to the closest available mirror.
.Pp
Additionally, FreeBSD is available via anonymous FTP from the following mirror sites.
When obtaining FreeBSD via anonymous FTP, please try to use a nearby site.
The mirror sites listed as
.Do
Primary Mirror Sites
.Dc
typically have the entire FreeBSD archive (all the currently available versions
for each of the architectures) but faster download speeds are probably
available from a site that is in your country or region.
The regional sites carry the most recent versions for the most popular
architecture(s) but might not carry the entire FreeBSD archive.
All sites provide access via anonymous FTP but some sites also provide access via other methods.
The access methods available for each site are provided in parentheses after
the hostname.
.Pp
Central Servers, Primary Mirror Sites, Armenia, Australia, Austria, Brazil, China, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hong Kong, Ireland, Japan, Korea, Latvia, Lithuania, Netherlands, New Zealand, Norway, Poland, Russia, Saudi Arabia, Slovenia, South Africa, Spain, Sweden, Switzerland, Taiwan, Ukraine, United Kingdom, USA.
.Pp
(as of UTC)
.Bl -tag -offset -compact
.It Central Servers
.Bl -bullet -offset -compact
ftp://ftp.FreeBSD.org/pub/FreeBSD/ (ftp / ftpv6 / http://ftp.FreeBSD.org/pub/FreeBSD/ / http://ftp.FreeBSD.org/pub/FreeBSD/)
.El
.It Primary Mirror Sites
In case of problems, please contact the hostmaster
.Mt mirror-admin@FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp1.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp2.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp3.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp4.FreeBSD.org/pub/FreeBSD/ (ftp / ftpv6 / http://ftp4.FreeBSD.org/pub/FreeBSD/ / http://ftp4.FreeBSD.org/pub/FreeBSD/) ftp://ftp5.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp6.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp7.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp10.FreeBSD.org/pub/FreeBSD/ (ftp / ftpv6 / http://ftp10.FreeBSD.org/pub/FreeBSD/ / http://ftp10.FreeBSD.org/pub/FreeBSD/) ftp://ftp11.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp13.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp14.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp14.FreeBSD.org/pub/FreeBSD/)
.El
.It Armenia
In case of problems, please contact the hostmaster
.Mt hostmaster@am.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp1.am.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp1.am.FreeBSD.org/pub/FreeBSD/ / rsync)
.El
.It Australia
In case of problems, please contact the hostmaster
.Mt hostmaster@au.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.au.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp2.au.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp3.au.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Austria
In case of problems, please contact the hostmaster
.Mt hostmaster@at.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.at.FreeBSD.org/pub/FreeBSD/ (ftp / ftpv6 / http://ftp.at.FreeBSD.org/pub/FreeBSD/ / http://ftp.at.FreeBSD.org/pub/FreeBSD/)
.El
.It Brazil
In case of problems, please contact the hostmaster
.Mt hostmaster@br.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp2.br.FreeBSD.org/FreeBSD/ (ftp / http://ftp2.br.FreeBSD.org/) ftp://ftp3.br.FreeBSD.org/pub/FreeBSD/ (ftp / rsync) ftp://ftp4.br.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It China
In case of problems, please contact the hostmaster
.Mt hostmaster@cn.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.cn.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Czech Republic
In case of problems, please contact the hostmaster
.Mt hostmaster@cz.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.cz.FreeBSD.org/pub/FreeBSD/ (ftp / ftp://ftp.cz.FreeBSD.org/pub/FreeBSD/ / http://ftp.cz.FreeBSD.org/pub/FreeBSD/ / http://ftp.cz.FreeBSD.org/pub/FreeBSD/ / rsync / rsyncv6) ftp://ftp2.cz.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp2.cz.FreeBSD.org/pub/FreeBSD/)
.El
.It Denmark
In case of problems, please contact the hostmaster
.Mt hostmaster@dk.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.dk.FreeBSD.org/pub/FreeBSD/ (ftp / ftpv6 / http://ftp.dk.FreeBSD.org/pub/FreeBSD/ / http://ftp.dk.FreeBSD.org/pub/FreeBSD/)
.El
.It Estonia
In case of problems, please contact the hostmaster
.Mt hostmaster@ee.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.ee.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Finland
In case of problems, please contact the hostmaster
.Mt hostmaster@fi.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.fi.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It France
In case of problems, please contact the hostmaster
.Mt hostmaster@fr.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.fr.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp1.fr.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp1.fr.FreeBSD.org/pub/FreeBSD/ / rsync) ftp://ftp3.fr.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp5.fr.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp6.fr.FreeBSD.org/pub/FreeBSD/ (ftp / rsync) ftp://ftp7.fr.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp8.fr.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Germany
In case of problems, please contact the hostmaster
.Mt de-bsd-hubs@de.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.de.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp1.de.FreeBSD.org/freebsd/ (ftp / http://www1.de.FreeBSD.org/freebsd/ / rsync://rsync3.de.FreeBSD.org/freebsd/) ftp://ftp2.de.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp2.de.FreeBSD.org/pub/FreeBSD/ / rsync) ftp://ftp4.de.FreeBSD.org/FreeBSD/ (ftp / http://ftp4.de.FreeBSD.org/pub/FreeBSD/) ftp://ftp5.de.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp7.de.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp7.de.FreeBSD.org/pub/FreeBSD/) ftp://ftp8.de.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Greece
In case of problems, please contact the hostmaster
.Mt hostmaster@gr.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.gr.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp2.gr.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Hong Kong
.Bl -bullet -offset -compact
ftp://ftp.hk.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Ireland
In case of problems, please contact the hostmaster
.Mt hostmaster@ie.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp3.ie.FreeBSD.org/pub/FreeBSD/ (ftp / rsync)
.El
.It Japan
In case of problems, please contact the hostmaster
.Mt hostmaster@jp.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.jp.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp2.jp.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp3.jp.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp4.jp.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp5.jp.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp6.jp.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp7.jp.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp8.jp.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp9.jp.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Korea
In case of problems, please contact the hostmaster
.Mt hostmaster@kr.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.kr.FreeBSD.org/pub/FreeBSD/ (ftp / rsync) ftp://ftp2.kr.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp2.kr.FreeBSD.org/pub/FreeBSD/)
.El
.It Latvia
In case of problems, please contact the hostmaster
.Mt hostmaster@lv.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.lv.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp.lv.FreeBSD.org/pub/FreeBSD/)
.El
.It Lithuania
In case of problems, please contact the hostmaster
.Mt hostmaster@lt.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.lt.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp.lt.FreeBSD.org/pub/FreeBSD/)
.El
.It Netherlands
In case of problems, please contact the hostmaster
.Mt hostmaster@nl.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.nl.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp.nl.FreeBSD.org/os/FreeBSD/ / rsync) ftp://ftp2.nl.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It New Zealand
.Bl -bullet -offset -compact
ftp://ftp.nz.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp.nz.FreeBSD.org/pub/FreeBSD/)
.El
.It Norway
In case of problems, please contact the hostmaster
.Mt hostmaster@no.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.no.FreeBSD.org/pub/FreeBSD/ (ftp / rsync)
.El
.It Poland
In case of problems, please contact the hostmaster
.Mt hostmaster@pl.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.pl.FreeBSD.org/pub/FreeBSD/ (ftp) ftp2.pl.FreeBSD.org
.El
.It Russia
In case of problems, please contact the hostmaster
.Mt hostmaster@ru.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.ru.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp.ru.FreeBSD.org/FreeBSD/ / rsync) ftp://ftp2.ru.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp2.ru.FreeBSD.org/pub/FreeBSD/ / rsync) ftp://ftp4.ru.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp5.ru.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp5.ru.FreeBSD.org/pub/FreeBSD/ / rsync) ftp://ftp6.ru.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Saudi Arabia
In case of problems, please contact the hostmaster
.Mt ftpadmin@isu.net.sa
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.isu.net.sa/pub/ftp.freebsd.org/ (ftp)
.El
.It Slovenia
In case of problems, please contact the hostmaster
.Mt hostmaster@si.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.si.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It South Africa
In case of problems, please contact the hostmaster
.Mt hostmaster@za.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.za.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp2.za.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp4.za.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Spain
In case of problems, please contact the hostmaster
.Mt hostmaster@es.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.es.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp.es.FreeBSD.org/pub/FreeBSD/) ftp://ftp3.es.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Sweden
In case of problems, please contact the hostmaster
.Mt hostmaster@se.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.se.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp2.se.FreeBSD.org/pub/FreeBSD/ (ftp / rsync://ftp2.se.FreeBSD.org/) ftp://ftp3.se.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp4.se.FreeBSD.org/pub/FreeBSD/ (ftp / ftp://ftp4.se.FreeBSD.org/pub/FreeBSD/ / http://ftp4.se.FreeBSD.org/pub/FreeBSD/ / http://ftp4.se.FreeBSD.org/pub/FreeBSD/ / rsync://ftp4.se.FreeBSD.org/pub/FreeBSD/ / rsync://ftp4.se.FreeBSD.org/pub/FreeBSD/) ftp://ftp6.se.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp6.se.FreeBSD.org/pub/FreeBSD/)
.El
.It Switzerland
In case of problems, please contact the hostmaster
.Mt hostmaster@ch.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.ch.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp.ch.FreeBSD.org/pub/FreeBSD/)
.El
.It Taiwan
In case of problems, please contact the hostmaster
.Mt hostmaster@tw.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.tw.FreeBSD.org/pub/FreeBSD/ (ftp / ftp://ftp.tw.FreeBSD.org/pub/FreeBSD/ / rsync / rsyncv6) ftp://ftp2.tw.FreeBSD.org/pub/FreeBSD/ (ftp / ftp://ftp2.tw.FreeBSD.org/pub/FreeBSD/ / http://ftp2.tw.FreeBSD.org/pub/FreeBSD/ / http://ftp2.tw.FreeBSD.org/pub/FreeBSD/ / rsync / rsyncv6) ftp://ftp4.tw.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp5.tw.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp6.tw.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp6.tw.FreeBSD.org/ / rsync) ftp://ftp7.tw.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp8.tw.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp11.tw.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp11.tw.FreeBSD.org/FreeBSD/) ftp://ftp12.tw.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp13.tw.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp14.tw.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp15.tw.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It Ukraine
.Bl -bullet -offset -compact
ftp://ftp.ua.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp.ua.FreeBSD.org/pub/FreeBSD/) ftp://ftp6.ua.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp6.ua.FreeBSD.org/pub/FreeBSD / rsync://ftp6.ua.FreeBSD.org/FreeBSD/) ftp://ftp7.ua.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It United Kingdom
In case of problems, please contact the hostmaster
.Mt hostmaster@uk.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp.uk.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp2.uk.FreeBSD.org/pub/FreeBSD/ (ftp / rsync://ftp2.uk.FreeBSD.org/ftp.freebsd.org/pub/FreeBSD/) ftp://ftp3.uk.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp4.uk.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp5.uk.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.It USA
In case of problems, please contact the hostmaster
.Mt hostmaster@us.FreeBSD.org
for this domain.
.Bl -bullet -offset -compact
ftp://ftp1.us.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp2.us.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp3.us.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp4.us.FreeBSD.org/pub/FreeBSD/ (ftp / ftpv6 / http://ftp4.us.FreeBSD.org/pub/FreeBSD/ / http://ftp4.us.FreeBSD.org/pub/FreeBSD/) ftp://ftp5.us.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp6.us.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp8.us.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp10.us.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp11.us.FreeBSD.org/pub/FreeBSD/ (ftp) ftp://ftp13.us.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp13.us.FreeBSD.org/pub/FreeBSD/ / rsync) ftp://ftp14.us.FreeBSD.org/pub/FreeBSD/ (ftp / http://ftp14.us.FreeBSD.org/pub/FreeBSD/) ftp://ftp15.us.FreeBSD.org/pub/FreeBSD/ (ftp)
.El
.El
.Ss USING SUBVERSION
.Ss INTRODUCTION
.Pp
As of July 2012, FreeBSD uses Subversion as the only version control system for storing all of FreeBSD's source code,
documentation, and the Ports Collection.
.Pp
Subversion is generally a developer tool.
Users may prefer to use
.Cm freebsd-update
() to update the FreeBSD base system, and
.Cm portsnap
() to update the FreeBSD Ports Collection.
.Pp
This section demonstrates how to install Subversion on a FreeBSD system and use it to create a local copy of a FreeBSD repository.
Additional information on the use of Subversion is included.
.Ss ROOT SSL CERTIFICATES
.Pp
Installing
.Ql security/ca_root_nss
allows Subversion to verify the identity of HTTPS repository servers.
The root SSL certificates can be installed from a port:
.Bd -literal -offset indent
# cd /usr/ports/security/ca_root_nss
# make install clean
.Ed
.Pp
or as a package:
.Bd -literal -offset indent
# pkg install ca_root_nss
.Ed
.Ss SVNLITE
.Pp
A lightweight version of Subversion is already installed on FreeBSD as
.Cm svnlite
.
The port or package version of Subversion is only needed if the Python or Perl API is needed, or if a later version of Subversion is desired.
.Pp
The only difference from normal Subversion use is that the command name is
.Ql svnlite
.
.Ss INSTALLATION
.Pp
If
.Cm svnlite
is unavailable or the full version of Subversion is needed, then it must be installed.
.Pp
Subversion can be installed from the Ports Collection:
.Bd -literal -offset indent
# cd /usr/ports/devel/subversion
# make install clean
.Ed
.Pp
Subversion can also be installed as a package:
.Bd -literal -offset indent
# pkg install subversion
.Ed
.Ss RUNNING SUBVERSION
.Pp
To fetch a clean copy of the sources into a local directory, use
.Cm svn
.
The files in this directory are called a local working copy.
.Pp
Move or delete an existing destination directory before using
.Cm checkout
for the first time.
.Pp
Checkout over an existing non-
.Cm svn
directory can cause conflicts between the existing files and those brought in
from the repository.
.Pp
Subversion uses URLs to designate a repository, taking the form of protocol://hostname/path.
The first component of the path is the FreeBSD repository to access.
There are three different repositories,
.Ql base
for the FreeBSD base system source code,
.Ql ports
for the Ports Collection, and
.Ql doc
for documentation.
For example, the URL
.Ql https://svn.FreeBSD.org/ports/head/
specifies the main branch of the ports repository, using the
.Ql https
protocol.
.Pp
A checkout from a given repository is performed with a command like this:
.Bd -literal -offset indent
# svn checkout https://svn.FreeBSD.org/repository/branch  lwcdir
.Ed
.Pp
where:
.Bl -bullet -offset -compact
.It
repository is one of the Project repositories:
.Ql base
,
.Ql ports
, or
.Ql doc
.
.It
branch depends on the repository used.
.Ql ports
and
.Ql doc
are mostly updated in the
.Ql head
branch, while
.Ql base
maintains the latest version of -CURRENT under
.Ql head
and the respective latest versions of the -STABLE branches under
.Ql stable/9
(9.
x) and
.Ql stable/10
(10.
x).
.It
lwcdir is the target directory where the contents of the specified branch should be
placed.
This is usually
.Pa /usr/ports
for
.Ql ports
,
.Pa /usr/src
for
.Ql base
, and
.Pa /usr/doc
for
.Ql doc
.
.El
.Pp
This example checks out the Ports Collection from the FreeBSD repository using
the HTTPS protocol, placing the local working copy in
.Pa /usr/ports
.
If
.Pa /usr/ports
is already present but was not created by
.Cm svn
, remember to rename or delete it before the checkout.
.Bd -literal -offset indent
# svn checkout https://svn.FreeBSD.org/ports/head /usr/ports
.Ed
.Pp
Because the initial checkout must download the full branch of the remote
repository, it can take a while.
Please be patient.
.Pp
After the initial checkout, the local working copy can be updated by running:
.Bd -literal -offset indent
# svn update lwcdir
.Ed
.Pp
To update
.Pa /usr/ports
created in the example above, use:
.Bd -literal -offset indent
# svn update /usr/ports
.Ed
.Pp
The update is much quicker than a checkout, only transferring files that have
changed.
.Pp
An alternate way of updating the local working copy after checkout is provided
by the
.Pa Makefile
in the
.Pa /usr/ports
,
.Pa /usr/src
, and
.Pa /usr/doc
directories.
Set
.Ev SVN_UPDATE
and use the
.Ql update
target.
For example, to update
.Pa /usr/src
:
.Bd -literal -offset indent
# cd /usr/src
# make update SVN_UPDATE=yes
.Ed
.Ss SUBVERSION MIRROR SITES
.Pp
The FreeBSD Subversion repository is:
.Bd -literal -offset indent
svn.FreeBSD.org
.Ed
.Pp
This is a publicly accessible mirror network that uses GeoDNS to select an
appropriate back end server.
To view the FreeBSD Subversion repositories through a browser, use https://svnweb.FreeBSD.org/.
.Pp
HTTPS is the preferred protocol, but the
.Pa security/ca_root_nss
package will need to be installed in order to automatically validate
certificates.
.Ss FOR MORE INFORMATION
.Pp
For other information about using Subversion, please see the
.Do
Subversion Book
.Dc
, titled Version Control with Subversion, or the Subversion Documentation.
.Ss USING RSYNC
.Pp
These sites make FreeBSD available through the rsync protocol.
The rsync utility transfers only the differences between two sets of files.
This is useful for mirror sites of the FreeBSD FTP server.
The rsync suite is available for many operating systems, on FreeBSD, see the
.Ql net/rsync
port or use the package.
.Bl -tag -offset -compact
.It Czech Republic
rsync://ftp.cz.FreeBSD.org/Available collections:
.Bl -bullet -offset -compact
ftp: A partial mirror of the FreeBSD FTP server.
FreeBSD: A full mirror of the FreeBSD FTP server.
.El
.It Netherlands
rsync://ftp.nl.FreeBSD.org/Available collections:
.Bl -bullet -offset -compact
FreeBSD: A full mirror of the FreeBSD FTP server.
.El
.It Russia
rsync://ftp.mtu.ru/Available collections:
.Bl -bullet -offset -compact
FreeBSD: A full mirror of the FreeBSD FTP server.
FreeBSD-Archive: The mirror of FreeBSD Archive FTP server.
.El
.It Sweden
rsync://ftp4.se.freebsd.org/Available collections:
.Bl -bullet -offset -compact
FreeBSD: A full mirror of the FreeBSD FTP server.
.El
.It Taiwan
rsync://ftp.tw.FreeBSD.org/rsync://ftp2.tw.FreeBSD.org/rsync://ftp6.tw.FreeBSD.org/Available collections:
.Bl -bullet -offset -compact
FreeBSD: A full mirror of the FreeBSD FTP server.
.El
.It United Kingdom
rsync://rsync.mirrorservice.org/Available collections:
.Bl -bullet -offset -compact
ftp.freebsd.org: A full mirror of the FreeBSD FTP server.
.El
.It United States of America
rsync://ftp-master.FreeBSD.org/This server may only be used by FreeBSD primary mirror sites.
Available collections:
.Bl -bullet -offset -compact
FreeBSD: The master archive of the FreeBSD FTP server.
acl: The FreeBSD master ACL list.
.El
rsync://ftp13.FreeBSD.org/Available collections:
.Bl -bullet -offset -compact
FreeBSD: A full mirror of the FreeBSD FTP server.
.El
.El
.Sh BIBLIOGRAPHY
.Pp
While manual pages provide a definitive reference for individual pieces of the
FreeBSD operating system, they seldom illustrate how to put the pieces together
to make the whole operating system run smoothly.
For this, there is no substitute for a good book or users' manual on UNIX system administration.
.Ss BOOKS SPECIFIC TO FREEBSD
.Pp
International books:
.Bl -bullet -offset -compact
.It
Using FreeBSD (in Traditional Chinese), published by Drmaster, 1997.
ISBN 9-578-39435-7.
.It
FreeBSD Unleashed (Simplified Chinese translation), published by China Machine Press.
ISBN 7-111-10201-0.
.It
FreeBSD From Scratch Second Edition (in Simplified Chinese), published by China
Machine Press.
ISBN 7-111-10286-X.
.It
FreeBSD Handbook Second Edition (Simplified Chinese translation), published by Posts & Telecom Press.
ISBN 7-115-10541-3.
.It
FreeBSD & Windows (in Simplified Chinese), published by China Railway Publishing House.
ISBN 7-113-03845-X
.It
FreeBSD Internet Services HOWTO (in Simplified Chinese), published by China
Railway Publishing House.
ISBN 7-113-03423-3
.It
FreeBSD (in Japanese), published by CUTT.
ISBN 4-906391-22-2 C3055 P2400E.
.It
Complete Introduction to FreeBSD (in Japanese), published by Shoeisha Co., Ltd.
ISBN 4-88135-473-6 P3600E.
.It
Personal UNIX Starter Kit FreeBSD (in Japanese), published by ASCII.
ISBN 4-7561-1733-3 P3000E.
.It
FreeBSD Handbook (Japanese translation), published by ASCII.
ISBN 4-7561-1580-2 P3800E.
.It
FreeBSD mit Methode (in German), published by Computer und Literatur Verlag/Vertrieb Hanser, 1998.
ISBN 3-932311-31-0.
.It
FreeBSD de Luxe (in German), published by Verlag Modere Industrie, 2003.
ISBN 3-8266-1343-0.
.It
FreeBSD Install and Utilization Manual (in Japanese), published by Mainichi Communications Inc.
, 1998.
ISBN 4-8399-0112-0.
.It
Onno W Purbo, Dodi Maryanto, Syahrial Hubbany, Widjil Widodo Building Internet Server with FreeBSD (in Indonesia Language), published by Elex Media Komputindo.
.It
Absolute BSD: The Ultimate Guide to FreeBSD (Traditional Chinese translation),
published by GrandTech Press, 2003.
ISBN 986-7944-92-5.
.It
The FreeBSD 6.0 Book (in Traditional Chinese), published by Drmaster, 2006.
ISBN 9-575-27878-X.
.El
.Pp
English language books:
.Bl -bullet -offset -compact
.It
Absolute FreeBSD, 2nd Edition: The Complete Guide to FreeBSD, published by No Starch Press, 2007.
ISBN: 978-1-59327-151-0
.It
The Complete FreeBSD, published by O'Reilly, 2003.
ISBN: 0596005164
.It
The FreeBSD Corporate Networker's Guide, published by Addison-Wesley, 2000.
ISBN: 0201704811
.It
FreeBSD: An Open-Source Operating System for Your Personal Computer, published by The Bit Tree Press, 2001.
ISBN: 0971204500
.It
Teach Yourself FreeBSD in 24 Hours, published by Sams, 2002.
ISBN: 0672324245
.It
FreeBSD 6 Unleashed, published by Sams, 2006.
ISBN: 0672328755
.It
FreeBSD: The Complete Reference, published by McGrawHill, 2003.
ISBN: 0072224096
.El
.Ss USERS' GUIDES
.Bl -bullet -offset -compact
.It
Ohio State University has written a UNIX Introductory Course which is available online in HTML and PostScript format.
An Italian translation of this document is available as part of the FreeBSD Italian Documentation
Project.
.It
Jpman Project, Japan FreeBSD Users Group.
 FreeBSD User's Reference Manual (Japanese translation).
 Mainichi Communications Inc.
, 1998.
ISBN4-8399-0088-4 P3800E.
.It
Edinburgh University has written an Online Guide for newcomers to the UNIX environment.
.El
.Ss ADMINISTRATORS' GUIDES
.Bl -bullet -offset -compact
.It
Jpman Project, Japan FreeBSD Users Group.
 FreeBSD System Administrator's Manual (Japanese translation).
 Mainichi Communications Inc.
, 1998.
ISBN4-8399-0109-0 P3300E.
.It
Dreyfus, Emmanuel.
 Cahiers de l'Admin: BSD 2nd Ed.
(in French), Eyrolles, 2004.
ISBN 2-212-11463-X
.El
.Ss PROGRAMMERS' GUIDES
.Bl -bullet -offset -compact
.It
Computer Systems Research Group, UC Berkeley.
 4.4BSD Programmer's Reference Manual.
O'Reilly & Associates, Inc., 1994.
ISBN 1-56592-078-3
.It
Computer Systems Research Group, UC Berkeley.
 4.4BSD Programmer's Supplementary Documents.
O'Reilly & Associates, Inc., 1994.
ISBN 1-56592-079-1
.It
Harbison, Samuel P.
and Steele, Guy L.
Jr.
 C: A Reference Manual.
4th Ed.
Prentice Hall, 1995.
ISBN 0-13-326224-3
.It
Kernighan, Brian and Dennis M.
Ritchie.
 The C Programming Language.
2nd Ed.
PTR Prentice Hall, 1988.
ISBN 0-13-110362-8
.It
Lehey, Greg.
 Porting UNIX Software.
O'Reilly & Associates, Inc., 1995.
ISBN 1-56592-126-7
.It
Plauger, P.
J.
 The Standard C Library.
Prentice Hall, 1992.
ISBN 0-13-131509-9
.It
Spinellis, Diomidis.
 Code Reading: The Open Source Perspective.
Addison-Wesley, 2003.
ISBN 0-201-79940-5
.It
Spinellis, Diomidis.
 Code Quality: The Open Source Perspective.
Addison-Wesley, 2006.
ISBN 0-321-16607-8
.It
Stevens, W.
Richard and Stephen A.
Rago.
 Advanced Programming in the UNIX Environment.
2nd Ed.
Reading, Mass.
: Addison-Wesley, 2005.
ISBN 0-201-43307-9
.It
Stevens, W.
Richard.
 UNIX Network Programming.
2nd Ed, PTR Prentice Hall, 1998.
ISBN 0-13-490012-X
.El
.Ss OPERATING SYSTEM INTERNALS
.Bl -bullet -offset -compact
.It
Andleigh, Prabhat K.
 UNIX System Architecture.
Prentice-Hall, Inc., 1990.
ISBN 0-13-949843-5
.It
Jolitz, William.
.Do
Porting UNIX to the 386
.Dc
.
 Dr.
Dobb's Journal.
January 1991-July 1992.
.It
Leffler, Samuel J., Marshall Kirk McKusick, Michael J Karels and John
Quarterman The Design and Implementation of the 4.3BSD UNIX Operating System.
Reading, Mass.
: Addison-Wesley, 1989.
ISBN 0-201-06196-1
.It
Leffler, Samuel J., Marshall Kirk McKusick, The Design and Implementation of the 4.3BSD UNIX Operating System: Answer Book.
Reading, Mass.
: Addison-Wesley, 1991.
ISBN 0-201-54629-9
.It
McKusick, Marshall Kirk, Keith Bostic, Michael J Karels, and John Quarterman.
 The Design and Implementation of the 4.4BSD Operating System.
Reading, Mass.
: Addison-Wesley, 1996.
ISBN 0-201-54979-4(Chapter 2 of this book is available online as part of the FreeBSD Documentation Project.)
.It
Marshall Kirk McKusick, George V.
Neville-Neil The Design and Implementation of the FreeBSD Operating System.
Boston, Mass.
: Addison-Wesley, 2004.
ISBN 0-201-70245-2
.It
Marshall Kirk McKusick, George V.
Neville-Neil, Robert N.
M.
Watson The Design and Implementation of the FreeBSD Operating System, 2nd Ed.
.
Westford, Mass.
: Pearson Education, Inc., 2014.
ISBN 0-321-96897-2
.It
Stevens, W.
Richard.
 TCP/IP Illustrated, Volume 1: The Protocols.
Reading, Mass.
: Addison-Wesley, 1996.
ISBN 0-201-63346-9
.It
Schimmel, Curt.
 Unix Systems for Modern Architectures.
Reading, Mass.
: Addison-Wesley, 1994.
ISBN 0-201-63338-8
.It
Stevens, W.
Richard.
 TCP/IP Illustrated, Volume 3: TCP for Transactions, HTTP, NNTP and the UNIX
Domain Protocols.
Reading, Mass.
: Addison-Wesley, 1996.
ISBN 0-201-63495-3
.It
Vahalia, Uresh.
 UNIX Internals -- The New Frontiers.
Prentice Hall, 1996.
ISBN 0-13-101908-2
.It
Wright, Gary R.
and W.
Richard Stevens.
 TCP/IP Illustrated, Volume 2: The Implementation.
Reading, Mass.
: Addison-Wesley, 1995.
ISBN 0-201-63354-X
.El
.Ss SECURITY REFERENCE
.Bl -bullet -offset -compact
.It
Cheswick, William R.
and Steven M.
Bellovin.
 Firewalls and Internet Security: Repelling the Wily Hacker.
Reading, Mass.
: Addison-Wesley, 1995.
ISBN 0-201-63357-4
.It
Garfinkel, Simson.
 PGP Pretty Good Privacy O'Reilly & Associates, Inc., 1995.
ISBN 1-56592-098-8
.El
.Ss HARDWARE REFERENCE
.Bl -bullet -offset -compact
.It
Anderson, Don and Tom Shanley.
 Pentium Processor System Architecture.
2nd Ed.
Reading, Mass.
: Addison-Wesley, 1995.
ISBN 0-201-40992-5
.It
Ferraro, Richard F.
 Programmer's Guide to the EGA, VGA, and Super VGA Cards.
3rd ed.
Reading, Mass.
: Addison-Wesley, 1995.
ISBN 0-201-62490-7
.It
Intel Corporation publishes documentation on their CPUs, chipsets and standards
on their developer web site, usually as PDF files.
.It
Shanley, Tom.
 80486 System Architecture.
3rd Ed.
Reading, Mass.
: Addison-Wesley, 1995.
ISBN 0-201-40994-1
.It
Shanley, Tom.
 ISA System Architecture.
3rd Ed.
Reading, Mass.
: Addison-Wesley, 1995.
ISBN 0-201-40996-8
.It
Shanley, Tom.
 PCI System Architecture.
4th Ed.
Reading, Mass.
: Addison-Wesley, 1999.
ISBN 0-201-30974-2
.It
Van Gilluwe, Frank.
 The Undocumented PC, 2nd Ed.
Reading, Mass: Addison-Wesley Pub.
Co., 1996.
ISBN 0-201-47950-8
.It
Messmer, Hans-Peter.
 The Indispensable PC Hardware Book, 4th Ed.
Reading, Mass : Addison-Wesley Pub.
Co., 2002.
ISBN 0-201-59616-4
.El
.Ss UNIX HISTORY
.Bl -bullet -offset -compact
.It
Lion, John Lion's Commentary on UNIX, 6th Ed.
With Source Code.
ITP Media Group, 1996.
ISBN 1573980137
.It
Raymond, Eric S.
 The New Hacker's Dictionary, 3rd edition.
MIT Press, 1996.
ISBN 0-262-68092-0.
Also known as the Jargon File
.It
Salus, Peter H.
 A quarter century of UNIX.
Addison-Wesley Publishing Company, Inc., 1994.
ISBN 0-201-54777-5
.It
Simon Garfinkel, Daniel Weise, Steven Strassmann.
 The UNIX-HATERS Handbook.
IDG Books Worldwide, Inc., 1994.
ISBN 1-56884-203-1.
Out of print, but available online.
.It
Don Libes, Sandy Ressler Life with UNIX — special edition.
Prentice-Hall, Inc., 1989.
ISBN 0-13-536657-7
.It
The BSD family tree.
.Lk https://svnweb.freebsd.org/base/head/share/misc/bsd-family-tree?view=co
or
.Pa /usr/share/misc/bsd-family-tree
on a FreeBSD machine.
.It
Networked Computer Science Technical Reports Library.
.Lk http://www.ncstrl.org/
.It
Old BSD releases from the Computer Systems Research group (CSRG).
.Lk http://www.mckusick.com/csrg/
: The 4CD set covers all BSD versions from 1BSD to 4.4BSD and 4.4BSD-Lite2 (but
not 2.11BSD, unfortunately).
The last disk also holds the final sources plus the SCCS files.
.El
.Ss PERIODICALS, JOURNALS, AND MAGAZINES
.Bl -bullet -offset -compact
.It
Admin Magazin (in German), published by Medialinx AG.
ISSN: 2190-1066
.It
BSD Magazine, published by Software Press Sp.
z o.o.
SK.
ISSN: 1898-9144
.It
BSD Now — Video Podcast, published by Jupiter Broadcasting LLC
.It
BSD Talk Podcast, by Will Backman
.It
FreeBSD Journal, published by S&W Publishing, sponsored by The FreeBSD Foundation.
ISBN: 978-0-615-88479-0
.El
.Sh RESOURCES ON THE INTERNET
.Pp
The rapid pace of FreeBSD progress makes print media impractical as a means of
following the latest developments.
Electronic resources are the best, if not often the only, way to stay informed
of the latest advances.
Since FreeBSD is a volunteer effort, the user community itself also generally
serves as a
.Do
technical support department
.Dc
of sorts, with electronic mail, web forums, and USENET news being the most
effective way of reaching that community.
.Pp
The most important points of contact with the FreeBSD user community are
outlined below.
Please send other resources not mentioned here to the FreeBSD documentation project mailing list so that they may also be included.
.Ss WEBSITES
.Bl -bullet -offset -compact
.It
The FreeBSD Forums provide a web based discussion forum for FreeBSD questions and technical
discussion.
.It
Planet FreeBSD offers an aggregation feed of dozens of blogs written by FreeBSD developers.
Many developers use this to post quick notes about what they are working on,
new patches, and other works in progress.
.It
The BSDConferences YouTube Channel provides a collection of high quality videos from BSD conferences around the
world.
This is a great way to watch key developers give presentations about new work
in FreeBSD.
.El
.Ss MAILING LISTS
.Pp
The mailing lists are the most direct way of addressing questions or opening a
technical discussion to a concentrated FreeBSD audience.
There are a wide variety of lists on a number of different FreeBSD topics.
Sending questions to the most appropriate mailing list will invariably assure a
faster and more accurate response.
.Pp
The charters for the various lists are given at the bottom of this document.
 Please read the charter before joining or sending mail to any list.
Most list subscribers receive many hundreds of FreeBSD related messages every
day, and the charters and rules for use are meant to keep the signal-to-noise
ratio of the lists high.
To do less would see the mailing lists ultimately fail as an effective
communications medium for the Project.
.Pp
To test the ability to send email to FreeBSD lists, send a test message to freebsd-test.
Please do not send test messages to any other list.
.Pp
When in doubt about what list to post a question to, see How to get best results from the FreeBSD-questions mailing list.
.Pp
Before posting to any list, please learn about how to best use the mailing
lists, such as how to help avoid frequently-repeated discussions, by reading
the Mailing List Frequently Asked Questions (FAQ) document.
.Pp
Archives are kept for all of the mailing lists and can be searched using the FreeBSD World Wide Web server.
The keyword searchable archive offers an excellent way of finding answers to
frequently asked questions and should be consulted before posting a question.
Note that this also means that messages sent to FreeBSD mailing lists are
archived in perpetuity.
When protecting privacy is a concern, consider using a disposable secondary
email address and posting only public information.
.Ss LIST SUMMARY
.Pp
General lists: The following are general lists which anyone is free (and encouraged) to join:
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
List
.Ta
Purpose
.It
.Ta
freebsd-advocacy
.Ta
FreeBSD Evangelism
.It
.Ta
freebsd-announce
.Ta
Important events and Project milestones (moderated)
.It
.Ta
freebsd-arch
.Ta
Architecture and design discussions
.It
.Ta
freebsd-bugbusters
.Ta
Discussions pertaining to the maintenance of the FreeBSD problem report
database and related tools
.It
.Ta
freebsd-bugs
.Ta
Bug reports
.It
.Ta
freebsd-chat
.Ta
Non-technical items related to the FreeBSD community
.It
.Ta
freebsd-chromium
.Ta
FreeBSD-specific Chromium issues
.It
.Ta
freebsd-current
.Ta
Discussion concerning the use of FreeBSD-CURRENT
.It
.Ta
freebsd-isp
.Ta
Issues for Internet Service Providers using FreeBSD
.It
.Ta
freebsd-jobs
.Ta
FreeBSD employment and consulting opportunities
.It
.Ta
freebsd-questions
.Ta
User questions and technical support
.It
.Ta
freebsd-security-notifications
.Ta
Security notifications (moderated)
.It
.Ta
freebsd-stable
.Ta
Discussion concerning the use of FreeBSD-STABLE
.It
.Ta
freebsd-test
.Ta
Where to send test messages instead of to one of the actual lists
.It
.Ta
freebsd-women
.Ta
FreeBSD advocacy for women
.El
.Pp
Technical lists: The following lists are for technical discussion.
Read the charter for each list carefully before joining or sending mail to one
as there are firm guidelines for their use and content.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
List
.Ta
Purpose
.It
.Ta
freebsd-acpi
.Ta
ACPI and power management development
.It
.Ta
freebsd-afs
.Ta
Porting AFS to FreeBSD
.It
.Ta
freebsd-amd64
.Ta
Porting FreeBSD to AMD64 systems (moderated)
.It
.Ta
freebsd-apache
.Ta
Discussion about Apache related ports
.It
.Ta
freebsd-arm
.Ta
Porting FreeBSD to ARM processors
.It
.Ta
freebsd-atm
.Ta
Using ATM networking with FreeBSD
.It
.Ta
freebsd-bluetooth
.Ta
Using Bluetooth technology in FreeBSD
.It
.Ta
freebsd-cloud
.Ta
FreeBSD on cloud platforms (EC2, GCE, Azure, etc.)
.It
.Ta
freebsd-cluster
.Ta
Using FreeBSD in a clustered environment
.It
.Ta
freebsd-database
.Ta
Discussing database use and development under FreeBSD
.It
.Ta
freebsd-desktop
.Ta
Using and improving FreeBSD on the desktop
.It
.Ta
freebsd-doc
.Ta
Creating FreeBSD related documents
.It
.Ta
freebsd-drivers
.Ta
Writing device drivers for FreeBSD
.It
.Ta
freebsd-dtrace
.Ta
Using and working on DTrace in FreeBSD
.It
.Ta
freebsd-eclipse
.Ta
FreeBSD users of Eclipse IDE, tools, rich client applications and ports.
.It
.Ta
freebsd-elastic
.Ta
FreeBSD-specific ElasticSearch discussions
.It
.Ta
freebsd-embedded
.Ta
Using FreeBSD in embedded applications
.It
.Ta
freebsd-eol
.Ta
Peer support of FreeBSD-related software that is no longer supported by the
FreeBSD Project.
.It
.Ta
freebsd-emulation
.Ta
Emulation of other systems such as Linux/MS-DOS/Windows
.It
.Ta
freebsd-enlightenment
.Ta
Porting Enlightenment and Enlightenment applications
.It
.Ta
freebsd-erlang
.Ta
FreeBSD-specific Erlang discussions
.It
.Ta
freebsd-firewire
.Ta
FreeBSD FireWire (iLink, IEEE 1394) technical discussion
.It
.Ta
freebsd-fortran
.Ta
Fortran on FreeBSD
.It
.Ta
freebsd-fs
.Ta
File systems
.It
.Ta
freebsd-games
.Ta
Support for Games on FreeBSD
.It
.Ta
freebsd-gecko
.Ta
Gecko Rendering Engine issues
.It
.Ta
freebsd-geom
.Ta
GEOM-specific discussions and implementations
.It
.Ta
freebsd-git
.Ta
Discussion of git use in the FreeBSD project
.It
.Ta
freebsd-gnome
.Ta
Porting GNOME and GNOME applications
.It
.Ta
freebsd-hackers
.Ta
General technical discussion
.It
.Ta
freebsd-haskell
.Ta
FreeBSD-specific Haskell issues and discussions
.It
.Ta
freebsd-hardware
.Ta
General discussion of hardware for running FreeBSD
.It
.Ta
freebsd-i18n
.Ta
FreeBSD Internationalization
.It
.Ta
freebsd-ia32
.Ta
FreeBSD on the IA-32 (Intel x86) platform
.It
.Ta
freebsd-ia64
.Ta
Porting FreeBSD to Intel's upcoming IA64 systems
.It
.Ta
freebsd-infiniband
.Ta
Infiniband on FreeBSD
.It
.Ta
freebsd-ipfw
.Ta
Technical discussion concerning the redesign of the IP firewall code
.It
.Ta
freebsd-isdn
.Ta
ISDN developers
.It
.Ta
freebsd-jail
.Ta
Discussion about the
.Xr jail 8 facility
.It
.Ta
freebsd-java
.Ta
Java developers and people porting JDKs to FreeBSD
.It
.Ta
freebsd-lfs
.Ta
Porting LFS to FreeBSD
.It
.Ta
freebsd-mips
.Ta
Porting FreeBSD to MIPS
.It
.Ta
freebsd-mobile
.Ta
Discussions about mobile computing
.It
.Ta
freebsd-mono
.Ta
Mono and C# applications on FreeBSD
.It
.Ta
freebsd-multimedia
.Ta
Multimedia applications
.It
.Ta
freebsd-new-bus
.Ta
Technical discussions about bus architecture
.It
.Ta
freebsd-net
.Ta
Networking discussion and TCP/IP source code
.It
.Ta
freebsd-numerics
.Ta
Discussions of high quality implementation of libm functions
.It
.Ta
freebsd-office
.Ta
Office applications on FreeBSD
.It
.Ta
freebsd-performance
.Ta
Performance tuning questions for high performance/load installations
.It
.Ta
freebsd-perl
.Ta
Maintenance of a number of Perl-related ports
.It
.Ta
freebsd-pf
.Ta
Discussion and questions about the packet filter firewall system
.It
.Ta
freebsd-pkg
.Ta
Binary package management and package tools discussion
.It
.Ta
freebsd-pkg-fallout
.Ta
Fallout logs from package building
.It
.Ta
freebsd-pkgbase
.Ta
Packaging the FreeBSD base system
.It
.Ta
freebsd-platforms
.Ta
Concerning ports to non Intel architecture platforms
.It
.Ta
freebsd-ports
.Ta
Discussion of the Ports Collection
.It
.Ta
freebsd-ports-announce
.Ta
Important news and instructions about the Ports Collection (moderated)
.It
.Ta
freebsd-ports-bugs
.Ta
Discussion of the ports bugs/PRs
.It
.Ta
freebsd-ppc
.Ta
Porting FreeBSD to the PowerPC
.It
.Ta
freebsd-proliant
.Ta
Technical discussion of FreeBSD on HP ProLiant server platforms
.It
.Ta
freebsd-python
.Ta
FreeBSD-specific Python issues
.It
.Ta
freebsd-rc
.Ta
Discussion related to the
.Pa rc.d
system and its development
.It
.Ta
freebsd-realtime
.Ta
Development of realtime extensions to FreeBSD
.It
.Ta
freebsd-ruby
.Ta
FreeBSD-specific Ruby discussions
.It
.Ta
freebsd-scsi
.Ta
The SCSI subsystem
.It
.Ta
freebsd-security
.Ta
Security issues affecting FreeBSD
.It
.Ta
freebsd-small
.Ta
Using FreeBSD in embedded applications (obsolete; use freebsd-embedded instead)
.It
.Ta
freebsd-snapshots
.Ta
FreeBSD Development Snapshot Announcements
.It
.Ta
freebsd-sparc64
.Ta
Porting FreeBSD to SPARC based systems
.It
.Ta
freebsd-standards
.Ta
FreeBSD's conformance to the C99 and the POSIX standards
.It
.Ta
freebsd-sysinstall
.Ta
.Xr sysinstall 8 development
.It
.Ta
freebsd-tcltk
.Ta
FreeBSD-specific Tcl/Tk discussions
.It
.Ta
freebsd-testing
.Ta
Testing on FreeBSD
.It
.Ta
freebsd-tex
.Ta
Porting TeX and its applications to FreeBSD
.It
.Ta
freebsd-threads
.Ta
Threading in FreeBSD
.It
.Ta
freebsd-tilera
.Ta
Porting FreeBSD to the Tilera family of CPUs
.It
.Ta
freebsd-tokenring
.Ta
Support Token Ring in FreeBSD
.It
.Ta
freebsd-toolchain
.Ta
Maintenance of FreeBSD's integrated toolchain
.It
.Ta
freebsd-translators
.Ta
Translating FreeBSD documents and programs
.It
.Ta
freebsd-transport
.Ta
Discussions of transport level network protocols in FreeBSD
.It
.Ta
freebsd-usb
.Ta
Discussing FreeBSD support for USB
.It
.Ta
freebsd-virtualization
.Ta
Discussion of various virtualization techniques supported by FreeBSD
.It
.Ta
freebsd-vuxml
.Ta
Discussion on VuXML infrastructure
.It
.Ta
freebsd-x11
.Ta
Maintenance and support of X11 on FreeBSD
.It
.Ta
freebsd-xen
.Ta
Discussion of the FreeBSD port to Xen — implementation and usage
.It
.Ta
freebsd-xfce
.Ta
XFCE for FreeBSD — porting and maintaining
.It
.Ta
freebsd-zope
.Ta
Zope for FreeBSD — porting and maintaining
.El
.Pp
Limited lists: The following lists are for more specialized (and demanding) audiences and are
probably not of interest to the general public.
It is also a good idea to establish a presence in the technical lists before
joining one of these limited lists in order to understand the communications
etiquette involved.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
List
.Ta
Purpose
.It
.Ta
freebsd-hubs
.Ta
People running mirror sites (infrastructural support)
.It
.Ta
freebsd-user-groups
.Ta
User group coordination
.It
.Ta
freebsd-wip-status
.Ta
FreeBSD Work-In-Progress Status
.It
.Ta
freebsd-wireless
.Ta
Discussions of 802.11 stack, tools, device driver development
.El
.Pp
Digest lists: All of the above lists are available in a digest format.
Once subscribed to a list, the digest options can be changed in the account
options section.
.Pp
SVN lists: The following lists are for people interested in seeing the log messages for
changes to various areas of the source tree.
They are Read-Only lists and should not have mail sent to them.
.Bl -column -offset -compact "" "              " "              " "              " "              " "              "
.It
.Ta
List
.Ta
Source area
.Ta
Area Description (source for)
.It
.Ta
svn-doc-all
.Ta
.Pa /usr/doc
.Ta
All changes to the doc Subversion repository (except for
.Pa user
,
.Pa projects
and
.Pa translations
)
.It
.Ta
svn-doc-head
.Ta
.Pa /usr/doc
.Ta
All changes to the
.Do
head
.Dc
branch of the doc Subversion repository
.It
.Ta
svn-doc-projects
.Ta
.Pa /usr/doc/projects
.Ta
All changes to the
.Pa projects
area of the doc Subversion repository
.It
.Ta
svn-doc-svnadmin
.Ta
.Pa /usr/doc
.Ta
All changes to the administrative scripts, hooks, and other configuration data
of the doc Subversion repository
.It
.Ta
svn-ports-all
.Ta
.Pa /usr/ports
.Ta
All changes to the ports Subversion repository
.It
.Ta
svn-ports-head
.Ta
.Pa /usr/ports
.Ta
All changes to the
.Do
head
.Dc
branch of the ports Subversion repository
.It
.Ta
svn-ports-svnadmin
.Ta
.Pa /usr/ports
.Ta
All changes to the administrative scripts, hooks, and other configuration data
of the ports Subversion repository
.It
.Ta
svn-src-all
.Ta
.Pa /usr/src
.Ta
All changes to the src Subversion repository (except for
.Pa user
and
.Pa projects
)
.It
.Ta
svn-src-head
.Ta
.Pa /usr/src
.Ta
All changes to the
.Do
head
.Dc
branch of the src Subversion repository (the FreeBSD-CURRENT branch)
.It
.Ta
svn-src-projects
.Ta
.Pa /usr/projects
.Ta
All changes to the
.Pa projects
area of the src Subversion repository
.It
.Ta
svn-src-release
.Ta
.Pa /usr/src
.Ta
All changes to the
.Pa releases
area of the src Subversion repository
.It
.Ta
svn-src-releng
.Ta
.Pa /usr/src
.Ta
All changes to the
.Pa releng
branches of the src Subversion repository (the security / release engineering
branches)
.It
.Ta
svn-src-stable
.Ta
.Pa /usr/src
.Ta
All changes to the all stable branches of the src Subversion repository
.It
.Ta
svn-src-stable-6
.Ta
.Pa /usr/src
.Ta
All changes to the
.Pa stable/6
branch of the src Subversion repository
.It
.Ta
svn-src-stable-7
.Ta
.Pa /usr/src
.Ta
All changes to the
.Pa stable/7
branch of the src Subversion repository
.It
.Ta
svn-src-stable-8
.Ta
.Pa /usr/src
.Ta
All changes to the
.Pa stable/8
branch of the src Subversion repository
.It
.Ta
svn-src-stable-9
.Ta
.Pa /usr/src
.Ta
All changes to the
.Pa stable/9
branch of the src Subversion repository
.It
.Ta
svn-src-stable-10
.Ta
.Pa /usr/src
.Ta
All changes to the
.Pa stable/10
branch of the src Subversion repository
.It
.Ta
svn-src-stable-11
.Ta
.Pa /usr/src
.Ta
All changes to the
.Pa stable/11
branch of the src Subversion repository
.It
.Ta
svn-src-stable-other
.Ta
.Pa /usr/src
.Ta
All changes to the older
.Pa stable
branches of the src Subversion repository
.It
.Ta
svn-src-svnadmin
.Ta
.Pa /usr/src
.Ta
All changes to the administrative scripts, hooks, and other configuration data
of the src Subversion repository
.It
.Ta
svn-src-user
.Ta
.Pa /usr/src
.Ta
All changes to the experimental
.Pa user
area of the src Subversion repository
.It
.Ta
svn-src-vendor
.Ta
.Pa /usr/src
.Ta
All changes to the vendor work area of the src Subversion repository
.El
.Ss HOW TO SUBSCRIBE
.Pp
To subscribe to a list, click the list name at http://lists.FreeBSD.org/mailman/listinfo.
The page that is displayed should contain all of the necessary subscription
instructions for that list.
.Pp
To actually post to a given list, send mail to
.Mt listname@FreeBSD.org
.
It will then be redistributed to mailing list members world-wide.
.Pp
To unsubscribe from a list, click on the URL found at the bottom of every email
received from the list.
It is also possible to send an email to
.Mt listname-unsubscribe@FreeBSD.org
to unsubscribe.
.Pp
It is important to keep discussion in the technical mailing lists on a
technical track.
To only receive important announcements, instead join the FreeBSD announcements mailing list, which is intended for infrequent traffic.
.Ss LIST CHARTERS
.Pp
All FreeBSD mailing lists have certain basic rules which must be adhered to by
anyone using them.
Failure to comply with these guidelines will result in two (2) written warnings
from the FreeBSD Postmaster
.Mt postmaster@FreeBSD.org
, after which, on a third offense, the poster will removed from all FreeBSD
mailing lists and filtered from further posting to them.
We regret that such rules and measures are necessary at all, but today's
Internet is a pretty harsh environment, it would seem, and many fail to
appreciate just how fragile some of its mechanisms are.
.Pp
Rules of the road:
.Bl -bullet -offset -compact
.It
The topic of any posting should adhere to the basic charter of the list it is
posted to.
If the list is about technical issues, the posting should contain technical
discussion.
Ongoing irrelevant chatter or flaming only detracts from the value of the
mailing list for everyone on it and will not be tolerated.
For free-form discussion on no particular topic, the FreeBSD chat mailing list is freely available and should be used instead.
.It
No posting should be made to more than 2 mailing lists, and only to 2 when a
clear and obvious need to post to both lists exists.
For most lists, there is already a great deal of subscriber overlap and except
for the most esoteric mixes (say
.Do
-stable & -scsi
.Dc
), there really is no reason to post to more than one list at a time.
If a message is received with multiple mailing lists on the
.Ql Cc
line, trim the
.Ql Cc
line before replying.
 The person who replies is still responsible for cross-posting, no matter who
the originator might have been.
.It
Personal attacks and profanity (in the context of an argument) are not allowed,
and that includes users and developers alike.
Gross breaches of netiquette, like excerpting or reposting private mail when
permission to do so was not and would not be forthcoming, are frowned upon but
not specifically enforced.
 However, there are also very few cases where such content would fit within the charter
of a list and it would therefore probably rate a warning (or ban) on that basis
alone.
.It
Advertising of non-FreeBSD related products or services is strictly prohibited
and will result in an immediate ban if it is clear that the offender is
advertising by spam.
.El
.Pp
Individual list charters:
.Bl -tag -offset -compact
.It freebsd-acpi
ACPI and power management development
.It freebsd-afs
Andrew File SystemThis list is for discussion on porting and using AFS from CMU/Transarc
.It freebsd-announce
Important events / milestonesThis is the mailing list for people interested only in occasional announcements
of significant FreeBSD events.
This includes announcements about snapshots and other releases.
It contains announcements of new FreeBSD capabilities.
It may contain calls for volunteers etc.
This is a low volume, strictly moderated mailing list.
.It freebsd-arch
Architecture and design discussionsThis list is for discussion of the FreeBSD architecture.
Messages will mostly be kept strictly technical in nature.
Examples of suitable topics are:
.Bl -bullet -offset -compact
How to re-vamp the build system to have several customized builds running at
the same time.
What needs to be fixed with VFS to make Heidemann layers work.
How do we change the device driver interface to be able to use the same drivers
cleanly on many buses and architectures.
How to write a network driver.
.El
.It freebsd-bluetooth
Bluetooth in FreeBSDThis is the forum where FreeBSD's Bluetooth users congregate.
Design issues, implementation details, patches, bug reports, status reports,
feature requests, and all matters related to Bluetooth are fair game.
.It freebsd-bugbusters
Coordination of the Problem Report handling effortThe purpose of this list is to serve as a coordination and discussion forum for
the Bugmeister, his Bugbusters, and any other parties who have a genuine
interest in the PR database.
This list is not for discussions about specific bugs, patches or PRs.
.It freebsd-bugs
Bug reportsThis is the mailing list for reporting bugs in FreeBSD.
Whenever possible, bugs should be submitted using the web interface to it.
.It freebsd-chat
Non technical items related to the FreeBSD communityThis list contains the overflow from the other lists about non-technical,
social information.
It includes discussion about whether Jordan looks like a toon ferret or not,
whether or not to type in capitals, who is drinking too much coffee, where the
best beer is brewed, who is brewing beer in their basement, and so on.
Occasional announcements of important events (such as upcoming parties,
weddings, births, new jobs, etc) can be made to the technical lists, but the
follow ups should be directed to this -chat list.
.It freebsd-chromium
FreeBSD-specific Chromium issuesThis is a list for the discussion of Chromium support for FreeBSD.
This is a technical list to discuss development and installation of Chromium.
.It freebsd-cloud
Running FreeBSD on various cloud platformsThis list discusses running FreeBSD on Amazon EC2, Google Compute Engine,
Microsoft Azure, and other cloud computing platforms.
.It freebsd-core
FreeBSD core teamThis is an internal mailing list for use by the core members.
Messages can be sent to it when a serious FreeBSD-related matter requires
arbitration or high-level scrutiny.
.It freebsd-current
Discussions about the use of FreeBSD-CURRENTThis is the mailing list for users of FreeBSD-CURRENT.
It includes warnings about new features coming out in -CURRENT that will affect
the users, and instructions on steps that must be taken to remain -CURRENT.
Anyone running
.Do
CURRENT
.Dc
must subscribe to this list.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-desktop
Using and improving FreeBSD on the desktopThis is a forum for discussion of FreeBSD on the desktop.
It is primarily a place for desktop porters and users to discuss issues and
improve FreeBSD's desktop support.
.It freebsd-doc
Documentation ProjectThis mailing list is for the discussion of issues and projects related to the
creation of documentation for FreeBSD.
The members of this mailing list are collectively referred to as
.Do
The FreeBSD Documentation Project
.Dc
.
It is an open list; feel free to join and contribute!
.It freebsd-drivers
Writing device drivers for FreeBSDThis is a forum for technical discussions related to device drivers on FreeBSD.
It is primarily a place for device driver writers to ask questions about how to
write device drivers using the APIs in the FreeBSD kernel.
.It freebsd-dtrace
Using and working on DTrace in FreeBSDDTrace is an integrated component of FreeBSD that provides a framework for
understanding the kernel as well as user space programs at run time.
The mailing list is an archived discussion for developers of the code as well
as those using it.
.It freebsd-eclipse
FreeBSD users of Eclipse IDE, tools, rich client applications and ports.
The intention of this list is to provide mutual support for everything to do
with choosing, installing, using, developing and maintaining the Eclipse IDE,
tools, rich client applications on the FreeBSD platform and assisting with the
porting of Eclipse IDE and plugins to the FreeBSD environment.
The intention is also to facilitate exchange of information between the Eclipse
community and the FreeBSD community to the mutual benefit of both.
Although this list is focused primarily on the needs of Eclipse users it will
also provide a forum for those who would like to develop FreeBSD specific
applications using the Eclipse framework.
.It freebsd-embedded
Using FreeBSD in embedded applicationsThis list discusses topics related to using FreeBSD in embedded systems.
This is a technical mailing list for which strictly technical content is
expected.
For the purpose of this list, embedded systems are those computing devices
which are not desktops and which usually serve a single purpose as opposed to
being general computing environments.
Examples include, but are not limited to, all kinds of phone handsets, network
equipment such as routers, switches and PBXs, remote measuring equipment, PDAs,
Point Of Sale systems, and so on.
.It freebsd-emulation
Emulation of other systems such as Linux/MS-DOS/WindowsThis is a forum for technical discussions related to running programs written
for other operating systems on FreeBSD.
.It freebsd-enlightenment
EnlightenmentDiscussions concerning the Enlightenment Desktop Environment for FreeBSD systems.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-eol
Peer support of FreeBSD-related software that is no longer supported by the
FreeBSD Project.
This list is for those interested in providing or making use of peer support of
FreeBSD-related software for which the FreeBSD Project no longer provides
official support in the form of security advisories and patches.
.It freebsd-firewire
FireWire (iLink, IEEE 1394)This is a mailing list for discussion of the design and implementation of a FireWire (aka IEEE 1394 aka iLink) subsystem for FreeBSD.
Relevant topics specifically include the standards, bus devices and their
protocols, adapter boards/cards/chips sets, and the architecture and
implementation of code for their proper support.
.It freebsd-fortran
Fortran on FreeBSDThis is the mailing list for discussion of Fortran related ports on FreeBSD:
compilers, libraries, scientific and engineering applications from laptops to
HPC clusters.
.It freebsd-fs
File systemsDiscussions concerning FreeBSD filesystems.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-games
Games on FreeBSDThis is a technical list for discussions related to bringing games to FreeBSD.
It is for individuals actively working on porting games to FreeBSD, to bring up
problems or discuss alternative solutions.
Individuals interested in following the technical discussion are also welcome.
.It freebsd-gecko
Gecko Rendering EngineThis is a forum about Gecko applications using FreeBSD.
Discussion centers around Gecko Ports applications, their installation, their
development and their support within FreeBSD.
.It freebsd-geom
GEOMDiscussions specific to GEOM and related implementations.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-git
Use of git in the FreeBSD projectDiscussions of how to use git in FreeBSD infrastructure including the github
mirror and other uses of git for project collaboration.
Discussion area for people using git against the FreeBSD github mirror.
People wanting to get started with the mirror or git in general on FreeBSD can
ask here.
.It freebsd-gnome
GNOMEDiscussions concerning The GNOME Desktop Environment for FreeBSD systems.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-infiniband
Infiniband on FreeBSDTechnical mailing list discussing Infiniband, OFED, and OpenSM on FreeBSD.
.It freebsd-ipfw
IP FirewallThis is the forum for technical discussions concerning the redesign of the IP
firewall code in FreeBSD.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-ia64
Porting FreeBSD to IA64This is a technical mailing list for individuals actively working on porting
FreeBSD to the IA-64 platform from Intel, to bring up problems or discuss alternative solutions.
Individuals interested in following the technical discussion are also welcome.
.It freebsd-isdn
ISDN CommunicationsThis is the mailing list for people discussing the development of ISDN support
for FreeBSD.
.It freebsd-java
Java DevelopmentThis is the mailing list for people discussing the development of significant Java applications for FreeBSD and the porting and maintenance of JDKs.
.It freebsd-jobs
Jobs offered and soughtThis is a forum for posting employment notices specifically related to FreeBSD
and resumes from those seeking FreeBSD-related employment.
This is not a mailing list for general employment issues since adequate forums for that
already exist elsewhere.
Note that this list, like other
.Ql FreeBSD.org
mailing lists, is distributed worldwide.
Be clear about the geographic location and the extent to which telecommuting or
assistance with relocation is available.
Email should use open formats only — preferably plain text, but basic Portable
Document Format (PDF), HTML, and a few others are acceptable to many readers.
Closed formats such as Microsoft Word (
.Pa .doc
) will be rejected by the mailing list server.
.It freebsd-kde
KDEDiscussions concerning KDE on FreeBSD systems.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-hackers
Technical discussionsThis is a forum for technical discussions related to FreeBSD.
This is the primary technical mailing list.
It is for individuals actively working on FreeBSD, to bring up problems or
discuss alternative solutions.
Individuals interested in following the technical discussion are also welcome.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-hardware
General discussion of FreeBSD hardwareGeneral discussion about the types of hardware that FreeBSD runs on, various
problems and suggestions concerning what to buy or avoid.
.It freebsd-hubs
Mirror sitesAnnouncements and discussion for people who run FreeBSD mirror sites.
.It freebsd-isp
Issues for Internet Service ProvidersThis mailing list is for discussing topics relevant to Internet Service
Providers (ISPs) using FreeBSD.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-mono
Mono and C# applications on FreeBSDThis is a list for discussions related to the Mono development framework on
FreeBSD.
This is a technical mailing list.
It is for individuals actively working on porting Mono or C# applications to
FreeBSD, to bring up problems or discuss alternative solutions.
Individuals interested in following the technical discussion are also welcome.
.It freebsd-office
Office applications on FreeBSDDiscussion centers around office applications, their installation, their
development and their support within FreeBSD.
.It freebsd-ops-announce
Project Infrastructure AnnouncementsThis is the mailing list for people interested in changes and issues related to
the FreeBSD.org Project infrastructure.
This moderated list is strictly for announcements: no replies, requests,
discussions, or opinions.
.It freebsd-performance
Discussions about tuning or speeding up FreeBSDThis mailing list exists to provide a place for hackers, administrators, and/or
concerned parties to discuss performance related topics pertaining to FreeBSD.
Acceptable topics includes talking about FreeBSD installations that are either
under high load, are experiencing performance problems, or are pushing the
limits of FreeBSD.
Concerned parties that are willing to work toward improving the performance of
FreeBSD are highly encouraged to subscribe to this list.
This is a highly technical list ideally suited for experienced FreeBSD users,
hackers, or administrators interested in keeping FreeBSD fast, robust, and
scalable.
This list is not a question-and-answer list that replaces reading through
documentation, but it is a place to make contributions or inquire about
unanswered performance related topics.
.It freebsd-pf
Discussion and questions about the packet filter firewall systemDiscussion concerning the packet filter (pf) firewall system in terms of
FreeBSD.
Technical discussion and user questions are both welcome.
This list is also a place to discuss the ALTQ QoS framework.
.It freebsd-pkg
Binary package management and package tools discussionDiscussion of all aspects of managing FreeBSD systems by using binary packages
to install software, including binary package toolkits and formats, their
development and support within FreeBSD, package repository management, and
third party packages.
Note that discussion of ports which fail to generate packages correctly should
generally be considered as ports problems, and so inappropriate for this list.
.It freebsd-pkg-fallout
Fallout logs from package buildingAll packages building failures logs from the package building clusters
.It freebsd-pkgbase
Packaging the FreeBSD base system.
Discussions surrounding implementation and issues regarding packaging the
FreeBSD base system.
.It freebsd-platforms
Porting to Non Intel platformsCross-platform FreeBSD issues, general discussion and proposals for non Intel FreeBSD ports.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-ports
Discussion of
.Do
ports
.Dc
Discussions concerning FreeBSD's
.Do
ports collection
.Dc
(
.Pa /usr/ports
), ports infrastructure, and general ports coordination efforts.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-ports-announce
Important news and instructions about the FreeBSD
.Do
Ports Collection
.Dc
Important news for developers, porters, and users of the
.Do
Ports Collection
.Dc
(
.Pa /usr/ports
), including architecture/infrastructure changes, new capabilities, critical
upgrade instructions, and release engineering information.
This is a low-volume mailing list, intended for announcements.
.It freebsd-ports-bugs
Discussion of
.Do
ports
.Dc
bugsDiscussions concerning problem reports for FreeBSD's
.Do
ports collection
.Dc
(
.Pa /usr/ports
), proposed ports, or modifications to ports.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-proliant
Technical discussion of FreeBSD on HP ProLiant server platformsThis mailing list is to be used for the technical discussion of the usage of
FreeBSD on HP ProLiant servers, including the discussion of ProLiant-specific
drivers, management software, configuration tools, and BIOS updates.
As such, this is the primary place to discuss the hpasmd, hpasmcli, and
hpacucli modules.
.It freebsd-python
Python on FreeBSDThis is a list for discussions related to improving Python-support on FreeBSD.
This is a technical mailing list.
It is for individuals working on porting Python, its third party modules and Zope stuff to FreeBSD.
Individuals interested in following the technical discussion are also welcome.
.It freebsd-questions
User questionsThis is the mailing list for questions about FreeBSD.
Do not send
.Do
how to
.Dc
questions to the technical lists unless the question is quite technical.
.It freebsd-ruby
FreeBSD-specific Ruby discussionsThis is a list for discussions related to the Ruby support on FreeBSD.
This is a technical mailing list.
It is for individuals working on Ruby ports, third party libraries and
frameworks.
Individuals interested in the technical discussion are also welcome.
.It freebsd-scsi
SCSI subsystemThis is the mailing list for people working on the SCSI subsystem for FreeBSD.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-security
Security issuesFreeBSD computer security issues (DES, Kerberos, known security holes and
fixes, etc).
This is a technical mailing list for which strictly technical discussion is
expected.
Note that this is not a question-and-answer list, but that contributions (BOTH
question AND answer) to the FAQ are welcome.
.It freebsd-security-notifications
Security NotificationsNotifications of FreeBSD security problems and fixes.
This is not a discussion list.
The discussion list is FreeBSD-security.
.It freebsd-small
Using FreeBSD in embedded applicationsThis list discusses topics related to unusually small and embedded FreeBSD
installations.
This is a technical mailing list for which strictly technical content is
expected.
This list has been obsoleted by freebsd-embedded.
.It freebsd-snapshots
FreeBSD Development Snapshot AnnouncementsThis list provides notifications about the availability of new FreeBSD
development snapshots for the head/ and stable/ branches.
.It freebsd-stable
Discussions about the use of FreeBSD-STABLEThis is the mailing list for users of FreeBSD-STABLE.
.Do
STABLE
.Dc
is the branch where development continues after a RELEASE, including bug fixes
and new features.
The ABI is kept stable for binary compatibility.
It includes warnings about new features coming out in -STABLE that will affect
the users, and instructions on steps that must be taken to remain -STABLE.
Anyone running
.Do
STABLE
.Dc
should subscribe to this list.
This is a technical mailing list for which strictly technical content is
expected.
.It freebsd-standards
C99 & POSIX ConformanceThis is a forum for technical discussions related to FreeBSD Conformance to the
C99 and the POSIX standards.
.It freebsd-teaching
Teaching with FreeBSDNon technical mailing list discussing teaching with FreeBSD.
.It freebsd-testing
Testing on FreeBSDTechnical mailing list discussing testing on FreeBSD, including ATF/Kyua, test
build infrastructure, port tests to FreeBSD from other operating systems
(NetBSD, ...), etc.
.It freebsd-tex
Porting TeX and its applications to FreeBSDThis is a technical mailing list for discussions related to TeX and its
applications on FreeBSD.
It is for individuals actively working on porting TeX to FreeBSD, to bring up
problems or discuss alternative solutions.
Individuals interested in following the technical discussion are also welcome.
.It freebsd-toolchain
Maintenance of FreeBSD's integrated toolchainThis is the mailing list for discussions related to the maintenance of the
toolchain shipped with FreeBSD.
This could include the state of Clang and GCC, but also pieces of software such
as assemblers, linkers and debuggers.
.It freebsd-transport
Discussions of transport level network protocols in FreeBSDThe transport mailing list exists for the discussion of issues and designs
around the transport level protocols in the FreeBSD network stack, including
TCP, SCTP and UDP.
Other networking topics, including driver specific and network protocol issues
should be discussed on the FreeBSD networking mailing list.
.It freebsd-translators
Translating FreeBSD documents and programsA discussion list where translators of FreeBSD documents from English into
other languages can talk about translation methods and tools.
New members are asked to introduce themselves and mention the languages they
are interested in translating.
.It freebsd-usb
Discussing FreeBSD support for USBThis is a mailing list for technical discussions related to FreeBSD support for
USB.
.It freebsd-user-groups
User Group Coordination ListThis is the mailing list for the coordinators from each of the local area Users
Groups to discuss matters with each other and a designated individual from the
Core Team.
This mail list should be limited to meeting synopsis and coordination of
projects that span User Groups.
.It freebsd-virtualization
Discussion of various virtualization techniques supported by FreeBSDA list to discuss the various virtualization techniques supported by FreeBSD.
On one hand the focus will be on the implementation of the basic functionality
as well as adding new features.
On the other hand users will have a forum to ask for help in case of problems
or to discuss their use cases.
.It freebsd-wip-status
FreeBSD Work-In-Progress StatusThis mailing list can be used by developers to announce the creation and
progress of FreeBSD related work.
Messages will be moderated.
It is suggested to send the message "To:" a more topical FreeBSD list and only
"BCC:" this list.
This way the WIP can also be discussed on the topical list, as no discussion is
allowed on this list.
Look inside the archives for examples of suitable messages.
An editorial digest of the messages to this list might be posted to the FreeBSD
website every few months as part of the Status Reports
.Lk https://www.freebsd.org/news/status/
.
Past reports are archived.
.It freebsd-wireless
Discussions of 802.11 stack, tools device driver developmentThe FreeBSD-wireless list focuses on 802.11 stack (sys/net80211), device driver
and tools development.
This includes bugs, new features and maintenance.
.It freebsd-xen
Discussion of the FreeBSD port to Xen — implementation and usageA list that focuses on the FreeBSD Xen port.
The anticipated traffic level is small enough that it is intended as a forum
for both technical discussions of the implementation and design details as well
as administrative deployment issues.
.It freebsd-xfce
XFCEThis is a forum for discussions related to bring the XFCE environment to FreeBSD.
This is a technical mailing list.
It is for individuals actively working on porting XFCE to FreeBSD, to bring up problems or discuss alternative solutions.
Individuals interested in following the technical discussion are also welcome.
.It freebsd-zope
ZopeThis is a forum for discussions related to bring the Zope environment to FreeBSD.
This is a technical mailing list.
It is for individuals actively working on porting Zope to FreeBSD, to bring up problems or discuss alternative solutions.
Individuals interested in following the technical discussion are also welcome.
.El
.Ss FILTERING ON THE MAILING LISTS
.Pp
The FreeBSD mailing lists are filtered in multiple ways to avoid the
distribution of spam, viruses, and other unwanted emails.
The filtering actions described in this section do not include all those used
to protect the mailing lists.
.Pp
Only certain types of attachments are allowed on the mailing lists.
All attachments with a MIME content type not found in the list below will be
stripped before an email is distributed on the mailing lists.
.Bl -bullet -offset -compact
.It
application/octet-stream
.It
application/pdf
.It
application/pgp-signature
.It
application/x-pkcs7-signature
.It
message/rfc822
.It
multipart/alternative
.It
multipart/related
.It
multipart/signed
.It
text/html
.It
text/plain
.It
text/x-diff
.It
text/x-patch
.El
.Pp
Some of the mailing lists might allow attachments of other MIME content types,
but the above list should be applicable for most of the mailing lists.
.Pp
If an email contains both an HTML and a plain text version, the HTML version
will be removed.
If an email contains only an HTML version, it will be converted to plain text.
.Ss USENET NEWSGROUPS
.Pp
In addition to two FreeBSD specific newsgroups, there are many others in which
FreeBSD is discussed or are otherwise relevant to FreeBSD users.
.Ss BSD SPECIFIC NEWSGROUPS
.Bl -bullet -offset -compact
.It
comp.unix.bsd.freebsd.announce
.It
comp.unix.bsd.freebsd.misc
.It
de.comp.os.unix.bsd (German)
.It
fr.comp.os.bsd (French)
.El
.Ss OTHER UNIX NEWSGROUPS OF INTEREST
.Bl -bullet -offset -compact
.It
comp.unix
.It
comp.unix.questions
.It
comp.unix.admin
.It
comp.unix.programmer
.It
comp.unix.shell
.It
comp.unix.misc
.It
comp.unix.bsd
.El
.Ss X WINDOW SYSTEM
.Bl -bullet -offset -compact
.It
comp.windows.x
.El
.Ss OFFICIAL MIRRORS
.Pp
Central Servers, Armenia, Australia, Austria, Czech Republic, Denmark, Finland, France, Germany, Hong Kong, Ireland, Japan, Latvia, Lithuania, Netherlands, Norway, Russia, Slovenia, South Africa, Spain, Sweden, Switzerland, Taiwan, United Kingdom, USA.
.Pp
(as of UTC)
.Bl -bullet -offset -compact
.It
Central Servers
.Bl -bullet -offset -compact
.It
https://www.FreeBSD.org/
.El
.It
Armenia
.Bl -bullet -offset -compact
.It
http://www1.am.FreeBSD.org/ (IPv6)
.El
.It
Australia
.Bl -bullet -offset -compact
.It
http://www.au.FreeBSD.org/
.It
http://www2.au.FreeBSD.org/
.El
.It
Austria
.Bl -bullet -offset -compact
.It
http://www.at.FreeBSD.org/ (IPv6)
.El
.It
Czech Republic
.Bl -bullet -offset -compact
.It
http://www.cz.FreeBSD.org/ (IPv6)
.El
.It
Denmark
.Bl -bullet -offset -compact
.It
http://www.dk.FreeBSD.org/ (IPv6)
.El
.It
Finland
.Bl -bullet -offset -compact
.It
http://www.fi.FreeBSD.org/
.El
.It
France
.Bl -bullet -offset -compact
.It
http://www1.fr.FreeBSD.org/
.El
.It
Germany
.Bl -bullet -offset -compact
.It
http://www.de.FreeBSD.org/
.El
.It
Hong Kong
.Bl -bullet -offset -compact
.It
http://www.hk.FreeBSD.org/
.El
.It
Ireland
.Bl -bullet -offset -compact
.It
http://www.ie.FreeBSD.org/
.El
.It
Japan
.Bl -bullet -offset -compact
.It
http://www.jp.FreeBSD.org/www.FreeBSD.org/ (IPv6)
.El
.It
Latvia
.Bl -bullet -offset -compact
.It
http://www.lv.FreeBSD.org/
.El
.It
Lithuania
.Bl -bullet -offset -compact
.It
http://www.lt.FreeBSD.org/
.El
.It
Netherlands
.Bl -bullet -offset -compact
.It
http://www.nl.FreeBSD.org/
.El
.It
Norway
.Bl -bullet -offset -compact
.It
http://www.no.FreeBSD.org/
.El
.It
Russia
.Bl -bullet -offset -compact
.It
http://www.ru.FreeBSD.org/ (IPv6)
.El
.It
Slovenia
.Bl -bullet -offset -compact
.It
http://www.si.FreeBSD.org/
.El
.It
South Africa
.Bl -bullet -offset -compact
.It
http://www.za.FreeBSD.org/
.El
.It
Spain
.Bl -bullet -offset -compact
.It
http://www.es.FreeBSD.org/
.It
http://www2.es.FreeBSD.org/
.El
.It
Sweden
.Bl -bullet -offset -compact
.It
http://www.se.FreeBSD.org/
.El
.It
Switzerland
.Bl -bullet -offset -compact
.It
http://www.ch.FreeBSD.org/ (IPv6)
.It
http://www2.ch.FreeBSD.org/ (IPv6)
.El
.It
Taiwan
.Bl -bullet -offset -compact
.It
http://www.tw.FreeBSD.org/
.It
http://www2.tw.FreeBSD.org/
.It
http://www4.tw.FreeBSD.org/
.It
http://www5.tw.FreeBSD.org/ (IPv6)
.El
.It
United Kingdom
.Bl -bullet -offset -compact
.It
http://www1.uk.FreeBSD.org/
.It
http://www3.uk.FreeBSD.org/
.El
.It
USA
.Bl -bullet -offset -compact
.It
http://www5.us.FreeBSD.org/ (IPv6)
.El
.El
.Sh OPENPGP KEYS
.Pp
The OpenPGP keys of the
.Ql FreeBSD.org
officers are shown here.
These keys can be used to verify a signature or send encrypted email to one of
the officers.
A full list of FreeBSD OpenPGP keys is available in the PGP Keys article.
The complete keyring can be downloaded at https://www.FreeBSD.org/doc/pgpkeyring.txt.
.Ss OFFICERS
.Ss SECURITY OFFICER TEAM SECURITY-OFFICER@FREEBSD.ORG
.Bd -literal -offset indent

pub   rsa4096/D39792F49EA7E5C2 2017-08-16 [SC] [expires: 2023-01-02]
      Key fingerprint = FC0E 878A E5AF E788 028D  6355 D397 92F4 9EA7 E5C2
uid                            FreeBSD Security Officer <security-officer@FreeBSD.org>
sub   rsa4096/6DD0A349F26ADEFD 2017-08-16 [E] [expires: 2023-01-02]

.Ed
.Bd -literal -offset indent

-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBFmT2+ABEACrTVJ7Z/MuDeyKFqoTFnm5FrGG55k66RLeKivzQzq/tT/6RKO9
K8DaEvSIqD9b0/xgK02KgLSdp0Bucq8HLDFYUk3McFa6Z3YwjobNCWkxc72ipvVl
uAOGN4H6fuoYOpeg4cLK1H9pktUIrzONTCixaZzc/Bu6X+aX4ywGeCfsuu8g5v03
fLCPBLLgf3Bm5wsyZ6ZaGmsmILrWzd+d/rbr35Mcc5BekdgywUI4R191qo1bdrw9
mEJP1V7Ik3jpExOsNnuhMTvm5OQMeCTfUvVEOtBU15QtbT+1LXF5FIOgML0LwS5v
RHZN+5w/xvzSnEULpj24UuMKLDs/u9rj8U/zET8QaE+oG7m/mr4jJWZEmdX8HKdO
WrpnVj6UAppk72qdBIEfLsOW2xB/NOjJpppbCQH3+sw7DRYA2UnKE9Mptj/KKiE4
cs4c8Cupo2WSu93lEZDC5rCrULpT2lFeEXnRYlC/5oIgY5w9sFide9VI4CzHkkWX
Z2NPW/i1w3mFhoXjvnNLGOYMfAMKPxsRC2/Bn3bY0IhKvuIZ4rAeu7FTmKDDqFKQ
YEcrUOW74ZVng17AB29xzjWr4zNJVvp/CybFiUb8JoKkwtVWRqAVZIEgenAjU40d
G5+W4e+ccL0mfTQfEBbXRjnL2BL2tnaoBR42cTfbZGRucPHz7MrlKBEeZQARAQAB
tDdGcmVlQlNEIFNlY3VyaXR5IE9mZmljZXIgPHNlY3VyaXR5LW9mZmljZXJARnJl
ZUJTRC5vcmc+iQJUBBMBCgA+FiEE/A6HiuWv54gCjWNV05eS9J6n5cIFAlmT2+AC
GwMFCQoek4AFCwkIBwMFFQoJCAsFFgIDAQACHgECF4AACgkQ05eS9J6n5cKd9A/9
Fz3uGjNy28D0ALT1d/JJGzdQ2R3YwspHk9KHBr1LePkog9wf1WRalwCeNtPmA+g5
cn24psuzOeh1tRElImTZ2eE2ENPZ9XzK/J0ok0nK42MvmIwmMCyz+CaWv9GXW+FK
0oXnFmHi4YaQUVN3p+45TGkD9T+O5biVww7P47n/NnWsTfhLx0bzC7LyjPKXINai
/LgPgtlcOgY65/YhW/qhADCkoU7qMp9is41jMjTu1WB3OBPJkUkNpHfu6r15y8FN
Wqsk7K4W6Obr/WQ6VKGGXgh/a5mTcaEoFGMO16uHijAY4nXeb2HGZlBKxgmPH9Ur
aT4A9Pz/n+rIRMrK+rs+msFPemQHHNBYxy+x99uBpRBNyT2Su6GouZIxu5J16aIM
V0ZyOy/dy7m/uJ4sMhJPqKkd8a+MoQs/2L1M1y1EAzsO/QZqIrKrCluaftNN9k/B
qU0XClSDqB6sRMF7HFzYqb+f+M6cwSL/3Cp1Yx4rZ/onEE/MdWp64+3R87dETTXd
5tWXQw04qOhfPri5cBTI7r3t/qMO1iNXCGSG5RJbGkas6N6t6Mj83L4ItjI8doLf
aSIWZjj1XP3/me2hFJ6h2G5y5A+khO4ZwhC0ATFSq1fYbVGHw5AtfthIgNn8FoWu
+Sb8h7/RqTr7F6LgWagAoAh0GtVj02SVABZjcNZz/AKJAjcEEAEKACEWIQQc9/9v
rfXKn74bjLLtZ+zWXc9q5wUCWZPcTAMFAngACgkQ7Wfs1l3PauflkRAAgYcaBX0Y
ic4btxKoP/eOVpgUciOPPKEhDCiloQDyf4XQnZFDoMfjgcHpbLTBZ6kiAz2UzDGr
fJ4yUqrD+xfixUfCd5YpwzsaSpCGzDzSxOBcP/SpuAFhe40awSOIf5MruQar9Mlf
33JyslDLULXXeewAq2pcGk0/WrrOragI6Cs2vPGy9XP96VvLxyhjrWjlKmnO+//w
UF8oIO5hhKoqbtoxxlcqJgsWVyHch0mnPzvr6GWwoPhFXocnh1oPdbLjX1AwmGm9
ltEYMge4QxONIXlXJR0TvuDuJOaLNvTOC3OI8L97fdBcZS7eNJrG5FAYR5Ft3ISf
KJowIsSLGDt/cYApqpyP2pv7FpCvnwHgXHYar7/q4zhngCFRxQ2DPUx1cIJQ3Bgh
HZolKyK1X7XE5ZVDfZ3s3gcHSVKS89pipgHHZNr4sSmOanA8rXHcyHS4o2zSi1ie
r4iBwnOk6cCd6UNzEIiq0y/XhP/sc7xeL0mn3wDuV7jDBP9sp65sexL1qtIAfnzL
pLQevm0z41ifrUH5nNeL6RdbXpaoXc8M4PJJeQKJDu04KzLcQpZdUdCJsbS6QO9w
srWR8enQXPEhz2CO4L77bM9TgYO29222jTqEPcbXcmxF/klxO1rpssTTHUnHHi1Z
LUGYCbZPjt+laTJ2YPHTjUtN1Jw85vSKCEuJATMEEAEKAB0WIQS7KNQLNg7uk2rt
FW/l97zLo73d+AUCWjSYRwAKCRDl97zLo73d+JKyB/9N5Ytao12nD5QzMLvceGh5
otCLN99TUryYiDVDLoNkBivq3jHQA/hOX2rwEueFq0+LF8/2DnglJuUICNtCxIzL
WXXf/Hr5iWBUQ0JxYNPQzzjdMSXGE0WMwYVpAbCGxHpIsetKLdHUCwneYhaywe3I
KzmRJSDJGV1IJB0sAfoFtgybZXHgIR61jQjtnNmmyYXliYCd0wmIhXQDFN91tzzG
+EZdJ3Fao9JsMC+x55jO6EOLVySZgRF5E8vCeKUWemQciKFC7EhKcljILPYAA21u
NmHCAgRHKWU9JMdFK0w9lQuN2HQaNfkahjarTNM/Q6LwxY0dLG0vVYifE085WFAf
uQINBFmT2+ABEACxi39m5nQZexzY3c9sg/w5mUYCD89ZNSkj427gduQMYYGn7YW6
jSPfVJ/V3+PDK824c0a0XasyDapQFY1CPTZYrReRPoyjb8tJjsSVGXXCTFpJZlFU
br6kS9mgcx58Sypke2PMVk73+W1N1Yco+nahfTECRuM2/T2zHHr0AdKuBPF28U+H
TxyLatKoIgQwHDs4E/f4ZTbAoHvu3PixAl7XHVXCgz0cHaLhRljXizbZDXngOdGm
lqdFlAIpL6/l8E3m1Er0m3IfFo6qSzWRHg/KaBGIL4YKetJ6ACjlkCe5qbatDpmk
gWlg3Ux4RBVjyCK834Xh7eZpEcNf2iwpm28glWh7XMHGUplTHkU3PWQ4vGfNxXB8
HBOd9r02/cHL6MiHwhCAfIzZGVtqR0i9Ira57TMdXTpJWNXUcgsCMsi/Bg2a+hsn
aiYLrZc18uNL5nqOqsqKG3c1TcmeN7nbxVgnrNST4AjteulkhmB9p8tNOXA3u979
OO0T5LPwdqIpobdZ0lfw4URnAGw4Wd4Sm9PtRw0RvuAk2M2e5KXNyxPWAuMVkoRR
a7wG6h/R8pki54Gexyc+JkfB4ZcOrzHNLurw6DhxroyfRs8WEgX0wNIGmJvCXSBG
54jb5w9qudYwzIg4YPfvuX8sfeY8MTNhal3rF0tvVloGj3l709wlaWlBYwARAQAB
iQI8BBgBCgAmFiEE/A6HiuWv54gCjWNV05eS9J6n5cIFAlmT2+ACGwwFCQoek4AA
CgkQ05eS9J6n5cKhWw/+PT0R4r2gPAxI8ESEe380BYOmneNAH24MFOgWXqWCj4zX
Uz992BVnW2aL5nH4O5d822LGeCrYUC7SCpQvlifdHZHjobgtizLTwuu40bc3gSOz
cxWlx2jKfx3Ezn6QQz2mhhK6fZ1AO0ObiQxQq25ldURep95L78E/C8XkCe11YlUR
ng3wQKeHM7awZWRw/QBC92haHuVtU3cx7At+zQL7jTBKSZqd34zzs0uoXIhk2h94
O07MMDZ8z8MeU337vdL+RKYtD2bljLwpf7/kqg1D/q44RJ4ZpZcha9G0GvtLaQg2
+MAPlLg1vOWZ8wOTLaQHm+uzYRpkqxkIV8OuVd4UikCd8t3VNjNG5rG/YRNIAX0A
UEzs6oMF5YOFE8LmykesbUHAbC07Vcb0AsT5u3XKixDiIpPdnYSwGlkvoOVVLdeh
q/aXLK9V8BpViG5+a8xP2fdF1eMqdnrKAsiO4GEiq193PN/FA049VeIs3fd0izAa
x7+ag1MGtoF5Pij5iTVJm6phH5SUd1P3FY3OmclxWj/MbL4ba/G/6FWcy5NXxdw9
L1bRqaM2KEHJ67aF6NZz7UMldwExAWzFbUon1LUpKysAukxVf0EnntydBeVOQ+JO
HdqEpirrVLMpxPttUB2xxbo947nMj7/Bnme2gvb0vxaC9xSGVxrpW9cg5iCwSdc=
=8rds
-----END PGP PUBLIC KEY BLOCK-----
.Ed
.Ss SECURITY TEAM SECRETARY SECTEAM-SECRETARY@FREEBSD.ORG
.Bd -literal -offset indent

pub   4096R/3CB2EAFCC3D6C666 2013-09-24 [expires: 2018-01-01]
      Key fingerprint = FA97 AA04 4DF9 0969 D5EF  4ADA 3CB2 EAFC C3D6 C666
uid                          FreeBSD Security Team Secretary <secteam-secretary@FreeBSD.org>
sub   4096R/509B26612335EB65 2013-09-24 [expires: 2018-01-01]
.Ed
.Bd -literal -offset indent

-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBFJBjIIBEADadvvpXSkdnBOGV2xcsFwBBcSwAdryWuLk6v2VxjwsPcY6Lwqz
NAZr2Ox1BaSgX7106Psa6v9si8nxoOtMc5BCM/ps/fmedFU48YtqOTGF+utxvACg
Ou6SKintEMUa1eoPcww1jzDZ3mxx49bQaNAJLjVxeiAZoYHe9loTe1fxsprCONnx
Era1hrI+YA2KjMWDORcwa0sSXRCI3V+b4PUnbMUOQa3fFVUriM4QjjUBU6hW0Ub0
GDPcZq45nd7PoPPtb3/EauaYfk/zdx8Xt0OmuKTi9/vMkvB09AEUyShbyzoebaKH
dKtXlzyAPCZoH9dihFM67rhUg4umckFLc8vc5P2tNblwYrnhgL8ymUaOIjZB/fOi
Z2OZLVCiDeHNjjK3VZ6jLAiPyiYTG1Hrk9E8NaZDeUgIb9X/K06JXVBQIKNSGfX5
LLp/j2wr+Kbg3QtEBkcStlUGBOzfcbhKpE2nySnuIyspfDb/6JbhD/qYqMJerX0T
d5ekkJ1tXtM6aX2iTXgZ8cqv+5gyouEF5akrkLi1ySgZetQfjm+zhy/1x/NjGd0u
35QbUye7sTbfSimwzCXKIIpy06zIO4iNA0P/vgG4v7ydjMvXsW8FRULSecDT19Gq
xOZGfSPVrSRSAhgNxHzwUivxJbr05NNdwhJSbx9m57naXouLfvVPAMeJYwARAQAB
tD9GcmVlQlNEIFNlY3VyaXR5IFRlYW0gU2VjcmV0YXJ5IDxzZWN0ZWFtLXNlY3Jl
dGFyeUBGcmVlQlNELm9yZz6JAj0EEwEKACcFAlJBjIICGwMFCQgH7b8FCwkIBwMF
FQoJCAsFFgIDAQACHgECF4AACgkQPLLq/MPWxmYt8Q/+IfFhPIbqglh4rwFzgR58
8YonMZcq+5Op3qiUBh6tE6yRz6VEqBqTahyCQGIk4xGzrHSIOIj2e6gEk5a4zYtf
0jNJprk3pxu2Og05USJmd8lPSbyBF20FVm5W0dhWMKHagL5dGS8zInlwRYxr6mMi
UuJjj+2Hm3PoUNGAwL1SH2BVOeAeudtzu80vAlbRlujYVmjIDn/dWVjqnWgEBNHT
SD+WpA3yW4mBJyxWil0sAJQbTlt5EM/XPORVZ2tvETxJIrXea/Sda9mFwvJ02pJn
gHi6TGyOYydmbu0ob9Ma9AvUrRlxv8V9eN7eZUtvNa6n+IT8WEJj2+snJlO4SpHL
D3Z+l7zwfYeM8FOdzGZdVFgxeyBU7t3AnPjYfHmoneqgLcCO0nJDKq/98ohz5T9i
FbNR/vtLaEiYFBeX3C9Ee96pP6BU26BXhw+dRSnFeyIhD+4g+/AZ0XJ1CPF19D+5
z0ojanJkh7lZn4JL+V6+mF1eOExiGrydIiiSXDA/p5FhavMMu8Om4S0sn5iaQ2aX
wRUv2SUKhbHDqhIILLeQKlB3X26obx1Vg0nRhy47qNQn/xc9oSWLAQSVOgsShQeC
6DSzrKIBdKB3V8uWOmuM7lWAoCP53bDRW+XIOu9wfpSaXN2VTyqzU7zpTq5BHX1a
+XRw8KNHZGnCSAOCofZWnKyJAhwEEAEKAAYFAlJBjYgACgkQ7Wfs1l3PaudFcQ//
UiM7EXsIHLwHxez32TzA/0uNMPWFHQN4Ezzg4PKB6Cc4amva5qbgbhoeCPuP+XPI
2ELfRviAHbmyZ/zIgqplDC4nmyisMoKlpK0Yo1w4qbix9EVVZr2ztL8F43qN3Xe/
NUSMTBgt/Jio7l5lYyhuVS3JQCfDlYGbq6NPk0xfYoYOMOZASoPhEquCxM5D4D0Z
3J3CBeAjyVzdF37HUw9rVQe2IRlxGn1YAyMb5EpR2Ij612GFad8c/5ikzDh5q6JD
tB9ApdvLkr0czTBucDljChSpFJ7ENPjAgZuH9N5Dmx2rRUj2mdBmi7HKqxAN9Kdm
+pg/6vZ3vM18rBlXmw1poQdc3srAL+6MHmIfHHrq49oksLyHwyeL8T6BO4d4nTZU
xObP7PLAeWrdrd1Sb3EWlZJ9HB/m2UL9w9Om1c6cb6X2DoCzQAStVypAE6SQCMBK
pxkWRj90L41BS62snja+BlZTELuuLTHULRkWqS3fFkUxlDSMUn96QksWlwZLcxCv
hKxJXOX+pHAiUuMIImaPQ0TBDBWWf5d8zOQlNPsyhSGFR5Skwzlg+m9ErQ+jy7Uz
UmNCNztlYgRKeckXuvr73seoKoNXHrn7vWQ6qB1IRURj2bfphsqlmYuITmcBhfFS
Dw0fdYXSDXrmG9wad98g49g4HwCJhPAl0j55f93gHLGIRgQQEQoABgUCUkGO5gAK
CRAV1ogEymzfsol4AKCI7rOnptuoXgwYx2Z9HkUKuugSRwCgkyW9pxa5EovDijEF
j1jG/cdxTOaJAhwEEAEKAAYFAlJBkdUACgkQkshDRW2mpm6aLxAAzpWNHMZVFt7e
wQnCJnf/FMLTjduGTEhVFnVCkEtI+YKarveE6pclqKJfSRFDxruZ6PHGG2CDfMig
J6mdDdmXCkN//TbIlRGowVgsxpIRg4jQVh4S3D0Nz50h+Zb7CHbjp6WAPVoWZz7b
Myp+pN7qx/miJJwEiw22Eet4Hjj1QymKwjWyY146V928BV/wDBS/xiwfg3xIVPZr
RqtiOGN/AGpMGeGQKKplkeITY7AXiAd+mL4H/eNf8b+o0Ce2Z9oSxSsGPF3DzMTL
kIX7sWD3rjy3Xe2BM20stIDrJS2a1fbnIwFvqszS3Z3sF5bLc6W0iyPJdtbQ0pt6
nekRl9nboAdUs0R+n/6QNYBkj4AcSh3jpZKe82NwnD/6WyzHWtC0SDRTVkcQWXPW
EaWLmv8VqfzdBiw6aLcxlmXQSAr0cUA6zo6/bMQZosKwiCfGl3tR4Pbwgvbyjoii
pF+ZXfz7rWWUqZ2C79hy3YTytwIlVMOnp3MyOV+9ubOsFhLuRDxAksIMaRTsO7ii
5J4z1d+jzWMW4g1B50CoQ8W+FyAfVp/8qGwzvGN7wxN8P1iR+DZjtpCt7J+Xb9Pt
L+lRKSO/aOgOfDksyt2fEKY4yEWdzq9A3VkRo1HCdUQY6SJ/qt7IyQHumxvL90F6
vbB3edrR/fVGeJsz4vE10hzy7kI1QT65Ag0EUkGMggEQAMTsvyKEdUsgEehymKz9
MRn9wiwfHEX5CLmpJAvnX9MITgcsTX8MKiPyrTBnyY/QzA0rh+yyhzkY/y55yxMP
INdpL5xgJCS1SHyJK85HOdN77uKDCkwHfphlWYGlBPuaXyxkiWYXJTVUggSjuO4b
jeKwDqFl/4Xc0XeZNgWVjqHtKF91wwgdXXgAzUL1/nwN3IglxiIR31y10GQdOQEG
4T3ufx6gv73+qbFc0RzgZUQiJykQ3tZK1+Gw6aDirgjQYOc90o2Je0RJHjdObyZQ
aQc4PTZ2DC7CElFEt2EHJCXLyP/taeLq+IdpKe6sLPckwakqtbqwunWVoPTbgkxo
Q1eCMzgrkRu23B2TJaY9zbZAFP3cpL65vQAVJVQISqJvDL8K5hvAWJ3vi92qfBcz
jqydAcbhjkzJUI9t44v63cIXTI0+QyqTQhqkvEJhHZkbb8MYoimebDVxFVtQ3I1p
EynOYPfn4IMvaItLFbkgZpR/zjHYau5snErR9NC4AOIfNFpxM+fFFJQ7W88JP3cG
JLl9dcRGERq28PDU/CTDH9rlk1kZ0xzpRDkJijKDnFIxT2ajijVOZx7l2jPL1njx
s4xa1jK0/39kh6XnrCgK49WQsJM5IflVR2JAi8BLi2q/e0NQG2pgn0QL695Sqbbp
NbrrJGRcRJD9sUkQTpMsLlQTABEBAAGJAiUEGAEKAA8FAlJBjIICGwwFCQgH7b8A
CgkQPLLq/MPWxmZAew//et/LToMVR3q6/qP/pf9ob/QwQ3MgejkC0DY3Md7JBRl/
6GWfySYnO0Vm5IoJofcv1hbhc/y3OeZTvK4s+BOQsNokYe34mCxZG4dypNaepkQi
x0mLujeU/n4Y0p0LTLjhGLVdKina2dM9HmllgYr4KumT58g6eGjxs2oZD6z5ty0L
viU5tx3lz3o0c3I9soH2RN2zNHVjXNW0EvWJwFLxFeLJbk/Y3UY1/kXCtcyMzLua
S5L5012eUOEvaZr5iYDKjy+wOxY4SUCNYf0GPmSej8CBbwHOF2XCwXytSzm6hNb3
5TRgCGbOSFTIy9MxfV5lpddQcdzijmuFSl8LySkL2yuJxjlI7uKNDN+NlfODIPMg
rdH0hBSyKci6Uz7Nz/Up3qdE+aISq68k+Hk1fiKJG1UcBRJidheds29FCzj3hoyZ
VDmf6OL60hL0YI1/4GjIkJyetlPzjMp8J7K3GweOUkfHcFihYZlbiMe7z+oIWEc7
0fNScrAGF/+JN3L6mjXKB6Pv+ER5ztzpfuhBJ/j7AV5BaNMmDXAVO4aTphWl7Dje
iecENuGTpkK8Ugv5cMJc4QJaWDkj/9sACc0EFgigPo68KjegvKg5R8jUPwb8E7T6
lIjBtlclVhaUrE2uLx/yTz2Apbm+GAmD8M0dQ7IYsOFlZNBW9zjgLLCtWDW+p1A=
=5gJ7
-----END PGP PUBLIC KEY BLOCK-----
.Ed
.Ss CORE TEAM SECRETARY CORE-SECRETARY@FREEBSD.ORG
.Bd -literal -offset indent

pub   rsa2048/0CB403E4E95B96EC 2018-06-30 [SC] [expires: 2020-06-29]
      Key fingerprint = 9F02 836F 50D3 AD5A B75A  C588 0CB4 03E4 E95B 96EC
uid                            FreeBSD Core Team Secretary <core-secretary@freebsd.org>
sub   rsa2048/133C3338A5B95A60 2018-06-30 [E] [expires: 2020-06-29]
      Key fingerprint = FA37 B8AA C667 C3AA D310  751D 133C 3338 A5B9 5A60

.Ed
.Bd -literal -offset indent

-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBFs3wcYBCAC7nlaUTMqyT7PBSFLtW/LleSz7BNUwqSTo8LfUVJOY5G/pzWt5
Mqjqh4oJcW/MvKFTDeRaJ2mHp+vELxIP7wO3gcP36dXgImw6sXwBTkPlKpmmFRm1
M+QqnCCrrLHtCznWaDg+1fTHmyQpFHpg37XzA1Z5ev6PryEUYJkcBP77oNCTY933
86sXOqRAJRywvN/LEkAoaawqBz0CpkNTOBACoJZRV8i9CIklEOy8J+hNzGtJpHkg
FxUOXWj7z+2y6UOR4GzSpYAWJGbtwEcpGPfhqJk5M5eZ6PJcwzZ6LeLKgGFzNi6r
tlShQh5LT7wAKkTrBsZ9vckyyuTEtqgdGCmhABEBAAG0OEZyZWVCU0QgQ29yZSBU
ZWFtIFNlY3JldGFyeSA8Y29yZS1zZWNyZXRhcnlAZnJlZWJzZC5vcmc+iQFUBBMB
CgA+FiEEnwKDb1DTrVq3WsWIDLQD5OlbluwFAls3wcYCGwMFCQPCZwAFCwkIBwMF
FQoJCAsFFgMCAQACHgECF4AACgkQDLQD5OlbluyRZAf/VG9VWpIsofcoHwDxhYAL
mm+xbuP/eq1/Q8HeO3XVhA/HZF5nvSKZbD8F+ujaHDH/waNStWb3wUK87l9AfB6G
QFMVYjVQWrPwgpwFtGjL9zLMCBS3T+ysuub+xSuPhr1KQHgKB4+t6NLoBlSwP+76
sLLx0SILGwTpsb0r84etaECgp5ymAXijbzIB0Pu44Y+DjZimBEVuw2YRZ4/Ug/3z
pcNQqpjbrHNYjU6AOZEHXftbXwuWfgdjINnrWpvTwkKVnU0FhGXV9UYWP2UAxE5u
OyAvIyYFbX10iSFQGUXle3eg6IuHncT5u6P1IxQM++d/TJIbKrQW+xdr+1I+vUrS
rokCMwQQAQoAHRYhBHLPrCF5vLAktbVFkANvbJ7n856/BQJbOJDdAAoJEANvbJ7n
856/1swQAN2QKGe1riRm9jKVxC8AMy57+Tzu1ITGDDUf6dH2+gxx0K5GoVmtdhLL
2qrmDJEqP7K232T25cU5zStQnaTHpEIUklY8Rn1Fati8+IZBdpemG4BXTzGnNDQ0
FS6PxuxOFvcELOFvuUil3PP7ArMKI9jfjxisEkOWFuwQVyIPeApcQuf8vyqrfTnV
/Qes/XhySrvsEL+ehq2OEorl6YjMB2/lVK2lVWYrWJ91Oq8Vwp0G09whZEMhMabQ
D1OxlmM6kofkTioM8DOmbGTbOXhiiiiCUI41pOAOzF9SrCqCpLV2OyrPFz7J+GU9
6u+DPPZyy7O8NmjdDsyrDg2hhbTwWC4dvW+QMJSWZ8Bo8eMx8b5ti9RX0XPEIwao
KrCKh3aemGgkP8zcVbFWOzOji8aXrpWrRr/oxQmJxE49d2j1oF4LydIfhDxOnfOF
428pVhDXDLjf0xdUIVQqCsOBQvzwVPWTQVOFSakVFNRYP6/SXyF5eUf5E6iSExKn
fn+G4FtrJd6QNwNUquI2LF8CEhJBpLNBqjJW3WEv1tDzU+rqS9QpHzSmLzLqtiE+
5HqynvOPXGRRsAcUOLmV4fMUGRH8tpNoH4iBEc7LmoFTQXIf6oJClaiwRkFKuT9c
2XlkJ4ca6fxU4KyoHtR6pmMNkLIcehfpoL11+TPyyBjNd2TwLpLbiQIzBBABCgAd
FiEEwHv14xCuZL9hILD2NqfAX+Hs+bsFAls4kV0ACgkQNqfAX+Hs+bvRrw//QVea
9diHHbzxq84yp4eOGQoj86usPSV+IOZN27+e6QDYR8ZsxqFE5wQycSAdyqo0n42Q
EDE6tnn+/HhyFogr7kF8CRJMtsSlwKgDrMMYjVPnP2fP5VFxAF36epSRgcGC0Lqh
Ris+xjfSzXM2oNiiebPu2MOe8qOe8LVGJMyuxJZbb/OuEfgLGLKtjcJ1SujKhzLl
TVS8JSSVRbxk62huh/Mo80eCKHMV+/NmbHP4QKZBOVSWn0U/lrm+SyDR78l3EhtN
x/KIfhiPZENYTjSBSxa8F/Vg19bcmUedLapcN9J8q2KVNx7VuiPz+X2ww/dOKFR0
FxwOvCweGFRNRyoytF4ziw0Gwt78RHw4OdhQg8YH38kbrRFvf2YqiddGUA2UWwKi
HRdj9ZGemzL++OE/MZvgODVhZA6V5QU/B9bR3xfnVcBsPyGTrlQ8XZ9aY1wBMTrS
TTbS3sD7HuyS4PO8rt3iZy50UDMc5v55Pr5SIPiaUdyV8Y401oOWnKvKgKtHzBtC
2ADT+iZk/I4a3iDj4hw07Y+O1Voqp72LaACGhqWqkN0zqoKq3TvD/ukEZwgsvDdP
ErzPUanN31gn055PlpWYQBVoLjupH8SXahrdTmo15Xjdr97VHCuABNT4Kh3QDELU
vQtF0IB+S+VQfTVR5wkC1OLj8J1edvoXlsVzREW5AQ0EWzfBxgEIAMZxwaI3hZ2G
je7L8N1TFfPJA62kMGzzFDvFqeH8mDPOXkd4JC4y2EIBySPS36y0c1MJM79oOkKI
6DQLyUb3p4hGZbEVKidAwXvp4t5x1QJ0bpodHc/7xh95EP11Lf8C/DFP5Js3YVPl
MsdeVhx7J8itQuivoLJrZVTgKSgFepatLuXXKUttYAJNcU11ziPwTlzjEuTx4X6V
RimPrp8+/dbkRmPhsDqMXrqJmjeNarYK9F0xKlaWnIhtyZnNXtHrdtQE/VOBjoXN
0NXiuJg02JZGqZuBM80Ig7yBdmUlZdPrxkYw92+kxHIdySM3+WYbGu/e6T/VY6wx
7KW2IV3u3b8AEQEAAYkBPAQYAQoAJhYhBJ8Cg29Q061at1rFiAy0A+TpW5bsBQJb
N8HGAhsMBQkDwmcAAAoJEAy0A+TpW5bsp0AH/Rht32xeJQk59UgDf7BPHiiphgg8
P1qmRVd6OZJ6GoVYWjJ87+gU9sChbZUTCFioiIYLWPbhm9AJKy1KDrcnP0zYjWL2
SKjezMbru9cgFYk6R3LO+mK5DwtGMgyzipKAN8Kh92pX2WERUeMFulkYa4+rdVkP
kBtB49hmDj25GPw/72Vuksg5m7sbpEZzt6JjXQN0ynDjBuizE/HYm2E8VW5tH1aH
wdzVGruNVIOMMF3gHKbJbrxKiq/SPJfph0YGeL6v5bF9mgizGamEUn9YHVkCqZ7z
wDuSIDVTSiQQOJesD58WOADCDINEP3uXFhlI1A0Au7X+XYyjIjHCdyTNhBI=
=5VKx
-----END PGP PUBLIC KEY BLOCK-----
.Ed
.Ss PORTS MANAGEMENT TEAM SECRETARY PORTMGR-SECRETARY@FREEBSD.ORG
.Bd -literal -offset indent

pub   rsa2048/D8294EC3BBC4D7D5 2012-07-24 [SC]
      Key fingerprint = FB37 45C8 6F15 E8ED AC81  32FC D829 4EC3 BBC4 D7D5
uid                            FreeBSD Ports Management Team Secretary <portmgr-secretary@FreeBSD.org>
sub   rsa2048/5CC117965F65CFE7 2012-07-24 [E]

.Ed
.Bd -literal -offset indent

-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBFAOzqYBCACYd+KGv0/DduIRpSEKWZG2yfDILStzWfdaQMD+8zdWihB0x7dd
JDBUpV0o0Ixzt9mvu5CHybx+9lOHeFRhZshFXc+bIJOPyi+JrSs100o7Lo6jg6+c
Si2vME0ixG4x9YjCi8DisXIGJ1kZiDXhmVWwCvL+vLInpeXrtJnK8yFkmszCOr4Y
Q3GXuvdU0BF2tL/Wo/eCbSf+3U9syopVS2L2wKcP76bbYU0ioO35Y503rJEK6R5G
TchwYvYjSXuhv4ec7N1/j3thrMC9GNpoqjVninTynOk2kn+YZuMpO3c6b/pfoNcq
MxoizGlTu8VT4OO/SF1y52OkKjpAsENbFaNTABEBAAG0R0ZyZWVCU0QgUG9ydHMg
TWFuYWdlbWVudCBUZWFtIFNlY3JldGFyeSA8cG9ydG1nci1zZWNyZXRhcnlARnJl
ZUJTRC5vcmc+iQE4BBMBAgAiBQJQDs6mAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIe
AQIXgAAKCRDYKU7Du8TX1QW2B/0coHe8utbTfGKpeM4BY9IyC+PFgkE58Hq50o8d
shoB9gfommcUaK9PNwJPxTEJNlwiKPZy+VoKs/+dO8gahovchbRdSyP1ejn3CFy+
H8pol0hDDU4n7Ldc50q54GLuZijdcJZqlgOloZqWOYtXFklKPZjdUvYN8KHAntgf
u361rwM4DZ40HngYY9fdGc4SbXurGA5m+vLAURLzPv+QRQqHfaI1DZF6gzMgY49x
qS1JBF4kPoicpgvs3o6CuX8MD9ewGFSAMM3EdzV6ZdC8pnpXC8+8Q+p6FjNqmtjk
GpW39Zq/p8SJVg1RortCH6qWLe7dW7TaFYov7gF1V/DYwDN5iEYEEBECAAYFAlN2
WksACgkQtzkaJjSHbFtuMwCg0MXdQTcGMMOma7LC3L5b4MEoZ+wAn0WyUHpHwHnn
pn2oYDlfAbwTloWIiQEcBBABAgAGBQJQDuVrAAoJENk3EJekc8mQ3KwIAImNDMXA
F8ajPwCZFpM6KDi3F/jpwyBPISGY1oWuYPEi1zN94k5jS90aZb3W8Y8x4JTh35Ew
b6XODi3uGLSLCmnlqu2a80yPfXf5IuWmIQdFNQxvosj9UHrg+icZGFmm+f0hPJxM
TsZREv3AvivQfnb/N3xIICxW4SjKSYXQcq4hr4ObhUx7GKnjayq+ofU2cRlujr87
uOH0fO3xhOJG4+cX5mI1HGK38k0Csc1zqYa/66Qe5dnIZz+sNXpEPMLAHIt1a45U
B967igJdZSDFN33bPl1QWmf3aUXU3d1VttiSyHkpm4kb9KgsDkUk1IJ5nUe9OXyd
WtoqNW5afDa5N0aIRgQQEQIABgUCUA7lwwAKCRB59uBxdBRinNh2AJ41+zfsaQSR
HWvSkqOXGcP/fgOduwCfUJDT+M1eXe2udmKof/9yzGYMirKJASIEEAECAAwFAlAa
IT8FAwASdQAACgkQlxC4m8pXrXwCHAf+J7l+L7AvRpqlQcezjnjFS/zG1098qkDf
lThHZlpVnrBMJZaXdvL6LzVgiIYVWZC5CSSazW9EWFjp9VjM7FBHdWFZNMV7GAuU
t0jzx6gGXOWwi+/v/hs1P11RyDZN5hICHdPNmyZVupciDxe+sIEP9aEbVxcaiccq
zM/pFzIVIMMP5tCiA42q6Mz3h0hy6hntUKptS8Uon6sje5cDVcVlKAUj1wO2cphC
qkYlwMQfZV5J9f/hcW5ODriD3cBwK8SocA2Cq5JYF8kYDL1+pXnUutGnvAHUYt87
RWvQdKmfXjzBcMFJ2LlPUB1+IFvwQ13V9R8j9B/EdLmSWQYT9qRA2okCHAQTAQoA
BgUCV1XMpwAKCRCtu/hhCjeJt2CyD/9JLe+Ck23CJkeRSF8oC+4SFOUdSAmejSzn
klPwmEClffABYd/kckO1T6um+2FUcXuJZQE1nKKUNvZ8pBWwsm1RDHsyroKi/XB1
0a1Tdx/rvlU88ytbeLfUCLzoCrf6pkMQWoU6/3qS6elV0WwOlDufk+XjD1sja2wu
sshG8y+1WCA5JjP3rZdD9NVdzo5DgkotTRUfuYN1LJIN4zlDgHj7FVP7wW7+R0cZ
FoOiNsLJCA0FN8SiyU98UysjawLiIY9dTJz6XVA0DgB0TZWO3mWiDjITeKrdGcqf
PNiJhmvUKBkn07YpTPNfkoTT/p/q5ChYmu0ubGeyS1ELKjmklJ+DzynfZLzvnXYX
Ngo5ckeuqEqUNxM0J63v8lmfhDRROFveqHWdp0XMxXVmR5bMunSldg5EZsoLyQbN
+ScIPnDTAEPGrCtf0t84RQxNQeET6/WBbZfzeSeAFmpBFCdicsZ6Mjwtwjr4+o15
n1QMTZco1NaTqf8vXwzl9wM4aYtg1OkF4z8HdHuy50CHCet4mT5eJgwZUfFvXdbM
pHXprEI0Y9OOL4aMinC1egF3dXt/0n57i6CE+E2k3UJPNvMrtp0HaDEnKZ8cfkBU
EBzkUYi5wwqntHV2JRisqoRnHdvJT7ImlHMe7WaJsifBK874PnToaKg8P6K1Tph+
FyLxULaYjYkCHAQSAQgABgUCVBg2zwAKCRDqsDxYv9xHj1klEADXYJdHC3zsdx7w
DsJsttWdykcZoOd/VUKUdN0BAU72nLV0tLn4uFjETA6MhHZVxzwIDTeLB8kqyEpc
fZnoVbqJIUJz1sJXMdOty7CwZzlZlAwmUaIfFiazJY1p398JbyYfSrVKNOpw9wCm
Db7WP9dBritwvjaLzu8HQsiztO0S/5ha/EDfTU3qocBUTjbCtGR9LqAmPE4X8+li
F2EfZMEoJd3rJWsYv2y/k6pSgC/MpQewnyr6f+JQ/781UoZB6PpxCxfu4D6xlOyd
ERBUg+FfDAWYR+KX+DGOalRlUyaSz8Nvxl8/b0Im/AQhx9afqyEZxIDpg52zt8jJ
t3wx23YP8EQGUgwF8pIrj3wFSBSG3a/cskiBNUIhChIR9hQrVPUahN/jx7DGAGxk
/Ka9qsRGYTHfSr9jjTUQ+htfeFBRDR0nkZKMo5+Wk/cAcBKVbPlBpwvnzT3fh+wL
cF3ErBbx5jp+BoFee8D6ATeUvQxMcgVbDPUkgMsy3EtKMVO10jhIoXoVV+Sg9GZ8
zMEy1tORKn0zsd2ZgXC2sRJOm5ttCSdYQ4ddbM1A9jg6tiRx4hES16GDywvkL8P2
M9+qyIfjQxjGU33f/r8zp9DyNT1VlrtwhFxtOoMdmrsbYOCTja4Xg14hK1hRac0k
GB7bj6w97p8uMrQT3PlSMtoyrRyo7bkBDQRQDs6mAQgAzNxJYpf5PrqV8pdRXkn3
6Fe45q671YtbZ2WrT7D0CVZ8Z+AZsxnP/tiY1SrM2MepCeA2xBAhKGsWBWo1aRk5
mfZOksKsiXsi2XeBVhdZlCkrOMKBTVian7I1lH59ZnNIMX0Nl0tlj3L1IjeWWNvf
ej43URV81S9EmSwpjaWboatr2A+1oJku5m7nPD9JIOckE1TzBsyhx7zIUN9w6MKr
7gFw8DCzypwUKyYgKYToVm8QlkT/L3B0fuQHWhT6ROGk4o8SC71ia5tc1TzUzGEZ
1AQO8bbnbmJLBDKveWHCoaeAkRzINzoD9wAn9z4pnilze59QtKC1cOqUksTvBSDh
6wARAQABiQEfBBgBAgAJBQJQDs6mAhsMAAoJENgpTsO7xNfVOHoH/i5VyggVdwpq
PX8YBmN5mXQziYZNQoiON8IhOsxpX4W2nXCj5m6MACV6nJDVV6wyUH8/VvDQC9nH
arCe1oaNsHXJz0HamYt5gHJ0G1bYuBcuJp/FEjLa48XFI7nXQjJHn8rlwZMjK/PW
j1lw2WZiekviuzTEDH8c3YStGJSa+gYe8Eyq3XJVAe2VQOhImoWgGDR3tWfgrya/
IdEFb/jmjHSG5XUfbI0vNwqlf832BqSQKPG/Zix4MmBJgvAz4R71PH8WBmbmNFjD
elxVyfz80+iMgEb9aL91MfeBNC2KB1pFmg91mQTsiq7ajwVLVJK8NplHAkdLmkBC
O8MgMjzGhlE=
=iw7d
-----END PGP PUBLIC KEY BLOCK-----
.Ed
.Pp
This book is the combined work of hundreds of contributors to
.Do
The FreeBSD Documentation Project
.Dc
.
The text is authored in XML according to the DocBook DTD and is formatted from
XML into many different presentation formats using XSLT.
The printed version of this document would not be possible without Donald
Knuth's TeX typesetting language, Leslie Lamport's LaTeX, or Sebastian Rahtz's JadeTeX macro package.
